;/*!lib/mod.js*/
/**
 * @file: mod.js
 * @author fis
 * ver: 1.0.11
 * update: 2015/05/14
 * https://github.com/fex-team/mod
 *
 *
 */
var require;

/* eslint-disable no-unused-vars */
var define;

(function (global) {

    // 避免重复加载而导致已定义模块丢失
    if (require) {
        return;
    }

    var head = document.getElementsByTagName('head')[0];
    var loadingMap = {};
    var factoryMap = {};
    var modulesMap = {};
    var scriptsMap = {};
    var resMap = {};
    var pkgMap = {};

    var createScript = function (url, onerror) {
        if (url in scriptsMap) {
            return;
        }

        scriptsMap[url] = true;

        var script = document.createElement('script');
        if (onerror) {
            var tid = setTimeout(onerror, require.timeout);

            script.onerror = function () {
                clearTimeout(tid);
                onerror();
            };

            var onload = function () {
                clearTimeout(tid);
            };

            if ('onload' in script) {
                script.onload = onload;
            }
            else {
                script.onreadystatechange = function () {
                    if (this.readyState === 'loaded' || this.readyState === 'complete') {
                        onload();
                    }
                };
            }
        }
        script.type = 'text/javascript';
        script.src = url;
        head.appendChild(script);
        return script;
    };

    var loadScript = function (id, callback, onerror) {
        var queue = loadingMap[id] || (loadingMap[id] = []);
        queue.push(callback);

        //
        // resource map query
        //
        var res = resMap[id] || resMap[id + '.js'] || {};
        var pkg = res.pkg;
        var url;

        if (pkg) {
            url = pkgMap[pkg].url;
        }
        else {
            url = res.url || id;
        }

        createScript(url, onerror && function () {
            onerror(id);
        });
    };

    define = function (id, factory) {
        id = id.replace(/\.js$/i, '');
        factoryMap[id] = factory;

        var queue = loadingMap[id];
        if (queue) {
            for (var i = 0, n = queue.length; i < n; i++) {
                queue[i]();
            }
            delete loadingMap[id];
        }
    };

    require = function (id) {

        // compatible with require([dep, dep2...]) syntax.
        if (id && id.splice) {
            return require.async.apply(this, arguments);
        }

        id = require.alias(id);

        var mod = modulesMap[id];
        if (mod) {
            return mod.exports;
        }

        //
        // init module
        //
        var factory = factoryMap[id];
        if (!factory) {
            throw '[ModJS] Cannot find module `' + id + '`';
        }

        mod = modulesMap[id] = {
            exports: {}
        };

        //
        // factory: function OR value
        //
        var ret = (typeof factory === 'function') ? factory.apply(mod, [require, mod.exports, mod]) : factory;

        if (ret) {
            mod.exports = ret;
        }

        if (mod.exports && !mod.exports['default']) {
            mod.exports['default'] = mod.exports;
        }

        return mod.exports;
    };

    require.async = function (names, onload, onerror) {
        if (typeof names === 'string') {
            names = [names];
        }

        var needMap = {};
        var needNum = 0;

        function findNeed(depArr) {
            var child;

            for (var i = 0, n = depArr.length; i < n; i++) {
                //
                // skip loading or loaded
                //
                var dep = require.alias(depArr[i]);

                if (dep in factoryMap) {
                    // check whether loaded resource's deps is loaded or not
                    child = resMap[dep] || resMap[dep + '.js'];
                    if (child && 'deps' in child) {
                        findNeed(child.deps);
                    }
                    continue;
                }

                if (dep in needMap) {
                    continue;
                }

                needMap[dep] = true;
                needNum++;
                loadScript(dep, updateNeed, onerror);

                child = resMap[dep] || resMap[dep + '.js'];
                if (child && 'deps' in child) {
                    findNeed(child.deps);
                }
            }
        }

        function updateNeed() {
            if (0 === needNum--) {
                var args = [];
                for (var i = 0, n = names.length; i < n; i++) {
                    args[i] = require(names[i]);
                }

                onload && onload.apply(global, args);
            }
        }

        findNeed(names);
        updateNeed();
    };

    require.resourceMap = function (obj) {
        var k;
        var col;

        // merge `res` & `pkg` fields
        col = obj.res;
        for (k in col) {
            if (col.hasOwnProperty(k)) {
                resMap[k] = col[k];
            }
        }

        col = obj.pkg;
        for (k in col) {
            if (col.hasOwnProperty(k)) {
                pkgMap[k] = col[k];
            }
        }
    };

    require.loadJs = function (url) {
        createScript(url);
    };

    require.loadCss = function (cfg) {
        if (cfg.content) {
            var sty = document.createElement('style');
            sty.type = 'text/css';

            if (sty.styleSheet) { // IE
                sty.styleSheet.cssText = cfg.content;
            }
            else {
                sty.innerHTML = cfg.content;
            }
            head.appendChild(sty);
        }
        else if (cfg.url) {
            var link = document.createElement('link');
            link.href = cfg.url;
            link.rel = 'stylesheet';
            link.type = 'text/css';
            head.appendChild(link);
        }
    };


    require.alias = function (id) {
        return id.replace(/\.js$/i, '');
    };

    require.timeout = 5000;

})(this);

;/*!lib/jq-ui/1.11.4/jquery-ui.min.js*/
/*! jQuery UI - v1.12.1 - 2017-01-11
* http://jqueryui.com
* Includes: widget.js, data.js, disable-selection.js, scroll-parent.js, widgets/draggable.js, widgets/droppable.js, widgets/resizable.js, widgets/selectable.js, widgets/sortable.js, widgets/mouse.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)})(function(t){t.ui=t.ui||{},t.ui.version="1.12.1";var e=0,i=Array.prototype.slice;t.cleanData=function(e){return function(i){var s,n,o;for(o=0;null!=(n=i[o]);o++)try{s=t._data(n,"events"),s&&s.remove&&t(n).triggerHandler("remove")}catch(a){}e(i)}}(t.cleanData),t.widget=function(e,i,s){var n,o,a,r={},l=e.split(".")[0];e=e.split(".")[1];var h=l+"-"+e;return s||(s=i,i=t.Widget),t.isArray(s)&&(s=t.extend.apply(null,[{}].concat(s))),t.expr[":"][h.toLowerCase()]=function(e){return!!t.data(e,h)},t[l]=t[l]||{},n=t[l][e],o=t[l][e]=function(t,e){return this._createWidget?(arguments.length&&this._createWidget(t,e),void 0):new o(t,e)},t.extend(o,n,{version:s.version,_proto:t.extend({},s),_childConstructors:[]}),a=new i,a.options=t.widget.extend({},a.options),t.each(s,function(e,s){return t.isFunction(s)?(r[e]=function(){function t(){return i.prototype[e].apply(this,arguments)}function n(t){return i.prototype[e].apply(this,t)}return function(){var e,i=this._super,o=this._superApply;return this._super=t,this._superApply=n,e=s.apply(this,arguments),this._super=i,this._superApply=o,e}}(),void 0):(r[e]=s,void 0)}),o.prototype=t.widget.extend(a,{widgetEventPrefix:n?a.widgetEventPrefix||e:e},r,{constructor:o,namespace:l,widgetName:e,widgetFullName:h}),n?(t.each(n._childConstructors,function(e,i){var s=i.prototype;t.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete n._childConstructors):i._childConstructors.push(o),t.widget.bridge(e,o),o},t.widget.extend=function(e){for(var s,n,o=i.call(arguments,1),a=0,r=o.length;r>a;a++)for(s in o[a])n=o[a][s],o[a].hasOwnProperty(s)&&void 0!==n&&(e[s]=t.isPlainObject(n)?t.isPlainObject(e[s])?t.widget.extend({},e[s],n):t.widget.extend({},n):n);return e},t.widget.bridge=function(e,s){var n=s.prototype.widgetFullName||e;t.fn[e]=function(o){var a="string"==typeof o,r=i.call(arguments,1),l=this;return a?this.length||"instance"!==o?this.each(function(){var i,s=t.data(this,n);return"instance"===o?(l=s,!1):s?t.isFunction(s[o])&&"_"!==o.charAt(0)?(i=s[o].apply(s,r),i!==s&&void 0!==i?(l=i&&i.jquery?l.pushStack(i.get()):i,!1):void 0):t.error("no such method '"+o+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; "+"attempted to call method '"+o+"'")}):l=void 0:(r.length&&(o=t.widget.extend.apply(null,[o].concat(r))),this.each(function(){var e=t.data(this,n);e?(e.option(o||{}),e._init&&e._init()):t.data(this,n,new s(o,this))})),l}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(i,s){s=t(s||this.defaultElement||this)[0],this.element=t(s),this.uuid=e++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),this.classesElementLookup={},s!==this&&(t.data(s,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===s&&this.destroy()}}),this.document=t(s.style?s.ownerDocument:s.document||s),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),i),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){var e=this;this._destroy(),t.each(this.classesElementLookup,function(t,i){e._removeClass(i,t)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var s,n,o,a=e;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof e)if(a={},s=e.split("."),e=s.shift(),s.length){for(n=a[e]=t.widget.extend({},this.options[e]),o=0;s.length-1>o;o++)n[s[o]]=n[s[o]]||{},n=n[s[o]];if(e=s.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=i}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];a[e]=i}return this._setOptions(a),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return"classes"===t&&this._setOptionClasses(e),this.options[t]=e,"disabled"===t&&this._setOptionDisabled(e),this},_setOptionClasses:function(e){var i,s,n;for(i in e)n=this.classesElementLookup[i],e[i]!==this.options.classes[i]&&n&&n.length&&(s=t(n.get()),this._removeClass(n,i),s.addClass(this._classes({element:s,keys:i,classes:e,add:!0})))},_setOptionDisabled:function(t){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!t),t&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(e){function i(i,o){var a,r;for(r=0;i.length>r;r++)a=n.classesElementLookup[i[r]]||t(),a=e.add?t(t.unique(a.get().concat(e.element.get()))):t(a.not(e.element).get()),n.classesElementLookup[i[r]]=a,s.push(i[r]),o&&e.classes[i[r]]&&s.push(e.classes[i[r]])}var s=[],n=this;return e=t.extend({element:this.element,classes:this.options.classes||{}},e),this._on(e.element,{remove:"_untrackClassesElement"}),e.keys&&i(e.keys.match(/\S+/g)||[],!0),e.extra&&i(e.extra.match(/\S+/g)||[]),s.join(" ")},_untrackClassesElement:function(e){var i=this;t.each(i.classesElementLookup,function(s,n){-1!==t.inArray(e.target,n)&&(i.classesElementLookup[s]=t(n.not(e.target).get()))})},_removeClass:function(t,e,i){return this._toggleClass(t,e,i,!1)},_addClass:function(t,e,i){return this._toggleClass(t,e,i,!0)},_toggleClass:function(t,e,i,s){s="boolean"==typeof s?s:i;var n="string"==typeof t||null===t,o={extra:n?e:i,keys:n?t:e,element:n?this.element:t,add:s};return o.element.toggleClass(this._classes(o),s),this},_on:function(e,i,s){var n,o=this;"boolean"!=typeof e&&(s=i,i=e,e=!1),s?(i=n=t(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),t.each(s,function(s,a){function r(){return e||o.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof a?o[a]:a).apply(o,arguments):void 0}"string"!=typeof a&&(r.guid=a.guid=a.guid||r.guid||t.guid++);var l=s.match(/^([\w:-]*)\s*(.*)$/),h=l[1]+o.eventNamespace,c=l[2];c?n.on(h,c,r):i.on(h,r)})},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(i).off(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){function i(){return("string"==typeof t?s[t]:t).apply(s,arguments)}var s=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(t(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(t(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,i,s){var n,o,a=this.options[e];if(s=s||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(n in o)n in i||(i[n]=o[n]);return this.element.trigger(i,s),!(t.isFunction(a)&&a.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(s,n,o){"string"==typeof n&&(n={effect:n});var a,r=n?n===!0||"number"==typeof n?i:n.effect||i:e;n=n||{},"number"==typeof n&&(n={duration:n}),a=!t.isEmptyObject(n),n.complete=o,n.delay&&s.delay(n.delay),a&&t.effects&&t.effects.effect[r]?s[e](n):r!==e&&s[r]?s[r](n.duration,n.easing,o):s.queue(function(i){t(this)[e](),o&&o.call(s[0]),i()})}}),t.widget,t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,s){return!!t.data(e,s[3])}}),t.fn.extend({disableSelection:function(){var t="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.on(t+".ui-disableSelection",function(t){t.preventDefault()})}}(),enableSelection:function(){return this.off(".ui-disableSelection")}}),t.fn.scrollParent=function(e){var i=this.css("position"),s="absolute"===i,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter(function(){var e=t(this);return s&&"static"===e.css("position")?!1:n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==i&&o.length?o:t(this[0].ownerDocument||document)},t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var s=!1;t(document).on("mouseup",function(){s=!1}),t.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.on("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).on("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!s){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,n=1===e.which,o="string"==typeof this.options.cancel&&e.target.nodeName?t(e.target).closest(this.options.cancel).length:!1;return n&&!o&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(e)!==!1,!this._mouseStarted)?(e.preventDefault(),!0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),s=!0,!0)):!0}},_mouseMove:function(e){if(this._mouseMoved){if(t.ui.ie&&(!document.documentMode||9>document.documentMode)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,s=!1,e.preventDefault()},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.ui.plugin={add:function(e,i,s){var n,o=t.ui[e].prototype;for(n in s)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([i,s[n]])},call:function(t,e,i,s){var n,o=t.plugins[e];if(o&&(s||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(n=0;o.length>n;n++)t.options[o[n][0]]&&o[n][1].apply(t.element,i)}},t.ui.safeActiveElement=function(t){var e;try{e=t.activeElement}catch(i){e=t.body}return e||(e=t.body),e.nodeName||(e=t.body),e},t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")},t.widget("ui.draggable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(t,e){this._super(t,e),"handle"===t&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){return(this.helper||this.element).is(".ui-draggable-dragging")?(this.destroyOnClear=!0,void 0):(this._removeHandleClassName(),this._mouseDestroy(),void 0)},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(this._blurActiveElement(e),this._blockFrames(i.iframeFix===!0?"iframe":i.iframeFix),!0):!1)},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=t(this);return t("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var i=t.ui.safeActiveElement(this.document[0]),s=t(e.target);s.closest(i).length||t.ui.safeBlur(i)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter(function(){return"fixed"===t(this).css("position")}).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(t){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:t.pageX-this.offset.left,top:t.pageY-this.offset.top}},_mouseDrag:function(e,i){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",e,s)===!1)return this._mouseUp(new t.Event("mouseup",e)),!1;this.position=s.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,s=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(s=t.ui.ddmanager.drop(this,e)),this.dropped&&(s=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new t.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper),n=s?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s&&n[0]===this.element[0]&&this._setPositionRelative(),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(t){return/(html|body)/i.test(t.tagName)||t===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var t=this.element.position(),e=this._isRootNode(this.scrollParent[0]);return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+(e?0:this.scrollParent.scrollTop()),left:t.left-(parseInt(this.helper.css("left"),10)||0)+(e?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options,o=this.document[0];return this.relativeContainer=null,n.containment?"window"===n.containment?(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):"document"===n.containment?(this.containment=[0,0,t(o).width()-this.helperProportions.width-this.margins.left,(t(o).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):n.containment.constructor===Array?(this.containment=n.containment,void 0):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=t(n.containment),s=i[0],s&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i),void 0):(this.containment=null,void 0)},_convertPositionTo:function(t,e){e||(e=this.position);var i="absolute"===t?1:-1,s=this._isRootNode(this.scrollParent[0]);return{top:e.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top)*i,left:e.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)*i}},_generatePosition:function(t,e){var i,s,n,o,a=this.options,r=this._isRootNode(this.scrollParent[0]),l=t.pageX,h=t.pageY;return r&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),e&&(this.containment&&(this.relativeContainer?(s=this.relativeContainer.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(h=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(h=i[3]+this.offset.click.top)),a.grid&&(n=a.grid[1]?this.originalPageY+Math.round((h-this.originalPageY)/a.grid[1])*a.grid[1]:this.originalPageY,h=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-a.grid[1]:n+a.grid[1]:n,o=a.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/a.grid[0])*a.grid[0]:this.originalPageX,l=i?o-this.offset.click.left>=i[0]||o-this.offset.click.left>i[2]?o:o-this.offset.click.left>=i[0]?o-a.grid[0]:o+a.grid[0]:o),"y"===a.axis&&(l=this.originalPageX),"x"===a.axis&&(h=this.originalPageY)),{top:h-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:r?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:r?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,i,s){return s=s||this._uiHash(),t.ui.plugin.call(this,e,[i,s,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),s.offset=this.positionAbs),t.Widget.prototype._trigger.call(this,e,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i,s){var n=t.extend({},i,{item:s.element});s.sortables=[],t(s.options.connectToSortable).each(function(){var i=t(this).sortable("instance");i&&!i.options.disabled&&(s.sortables.push(i),i.refreshPositions(),i._trigger("activate",e,n))})},stop:function(e,i,s){var n=t.extend({},i,{item:s.element});s.cancelHelperRemoval=!1,t.each(s.sortables,function(){var t=this;t.isOver?(t.isOver=0,s.cancelHelperRemoval=!0,t.cancelHelperRemoval=!1,t._storedCSS={position:t.placeholder.css("position"),top:t.placeholder.css("top"),left:t.placeholder.css("left")},t._mouseStop(e),t.options.helper=t.options._helper):(t.cancelHelperRemoval=!0,t._trigger("deactivate",e,n))})},drag:function(e,i,s){t.each(s.sortables,function(){var n=!1,o=this;o.positionAbs=s.positionAbs,o.helperProportions=s.helperProportions,o.offset.click=s.offset.click,o._intersectsWith(o.containerCache)&&(n=!0,t.each(s.sortables,function(){return this.positionAbs=s.positionAbs,this.helperProportions=s.helperProportions,this.offset.click=s.offset.click,this!==o&&this._intersectsWith(this.containerCache)&&t.contains(o.element[0],this.element[0])&&(n=!1),n})),n?(o.isOver||(o.isOver=1,s._parent=i.helper.parent(),o.currentItem=i.helper.appendTo(o.element).data("ui-sortable-item",!0),o.options._helper=o.options.helper,o.options.helper=function(){return i.helper[0]},e.target=o.currentItem[0],o._mouseCapture(e,!0),o._mouseStart(e,!0,!0),o.offset.click.top=s.offset.click.top,o.offset.click.left=s.offset.click.left,o.offset.parent.left-=s.offset.parent.left-o.offset.parent.left,o.offset.parent.top-=s.offset.parent.top-o.offset.parent.top,s._trigger("toSortable",e),s.dropped=o.element,t.each(s.sortables,function(){this.refreshPositions()}),s.currentItem=s.element,o.fromOutside=s),o.currentItem&&(o._mouseDrag(e),i.position=o.position)):o.isOver&&(o.isOver=0,o.cancelHelperRemoval=!0,o.options._revert=o.options.revert,o.options.revert=!1,o._trigger("out",e,o._uiHash(o)),o._mouseStop(e,!0),o.options.revert=o.options._revert,o.options.helper=o.options._helper,o.placeholder&&o.placeholder.remove(),i.helper.appendTo(s._parent),s._refreshOffsets(e),i.position=s._generatePosition(e,!0),s._trigger("fromSortable",e),s.dropped=!1,t.each(s.sortables,function(){this.refreshPositions()}))})}}),t.ui.plugin.add("draggable","cursor",{start:function(e,i,s){var n=t("body"),o=s.options;n.css("cursor")&&(o._cursor=n.css("cursor")),n.css("cursor",o.cursor)},stop:function(e,i,s){var n=s.options;n._cursor&&t("body").css("cursor",n._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("opacity")&&(o._opacity=n.css("opacity")),n.css("opacity",o.opacity)},stop:function(e,i,s){var n=s.options;n._opacity&&t(i.helper).css("opacity",n._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(t,e,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,i,s){var n=s.options,o=!1,a=s.scrollParentNotHidden[0],r=s.document[0];a!==r&&"HTML"!==a.tagName?(n.axis&&"x"===n.axis||(s.overflowOffset.top+a.offsetHeight-e.pageY<n.scrollSensitivity?a.scrollTop=o=a.scrollTop+n.scrollSpeed:e.pageY-s.overflowOffset.top<n.scrollSensitivity&&(a.scrollTop=o=a.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(s.overflowOffset.left+a.offsetWidth-e.pageX<n.scrollSensitivity?a.scrollLeft=o=a.scrollLeft+n.scrollSpeed:e.pageX-s.overflowOffset.left<n.scrollSensitivity&&(a.scrollLeft=o=a.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-t(r).scrollTop()<n.scrollSensitivity?o=t(r).scrollTop(t(r).scrollTop()-n.scrollSpeed):t(window).height()-(e.pageY-t(r).scrollTop())<n.scrollSensitivity&&(o=t(r).scrollTop(t(r).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-t(r).scrollLeft()<n.scrollSensitivity?o=t(r).scrollLeft(t(r).scrollLeft()-n.scrollSpeed):t(window).width()-(e.pageX-t(r).scrollLeft())<n.scrollSensitivity&&(o=t(r).scrollLeft(t(r).scrollLeft()+n.scrollSpeed)))),o!==!1&&t.ui.ddmanager&&!n.dropBehaviour&&t.ui.ddmanager.prepareOffsets(s,e)}}),t.ui.plugin.add("draggable","snap",{start:function(e,i,s){var n=s.options;s.snapElements=[],t(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var e=t(this),i=e.offset();this!==s.element[0]&&s.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:i.top,left:i.left})})},drag:function(e,i,s){var n,o,a,r,l,h,c,u,d,p,f=s.options,g=f.snapTolerance,m=i.offset.left,_=m+s.helperProportions.width,v=i.offset.top,b=v+s.helperProportions.height;for(d=s.snapElements.length-1;d>=0;d--)l=s.snapElements[d].left-s.margins.left,h=l+s.snapElements[d].width,c=s.snapElements[d].top-s.margins.top,u=c+s.snapElements[d].height,l-g>_||m>h+g||c-g>b||v>u+g||!t.contains(s.snapElements[d].item.ownerDocument,s.snapElements[d].item)?(s.snapElements[d].snapping&&s.options.snap.release&&s.options.snap.release.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=!1):("inner"!==f.snapMode&&(n=g>=Math.abs(c-b),o=g>=Math.abs(u-v),a=g>=Math.abs(l-_),r=g>=Math.abs(h-m),n&&(i.position.top=s._convertPositionTo("relative",{top:c-s.helperProportions.height,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l-s.helperProportions.width}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h}).left)),p=n||o||a||r,"outer"!==f.snapMode&&(n=g>=Math.abs(c-v),o=g>=Math.abs(u-b),a=g>=Math.abs(l-m),r=g>=Math.abs(h-_),n&&(i.position.top=s._convertPositionTo("relative",{top:c,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u-s.helperProportions.height,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h-s.helperProportions.width}).left)),!s.snapElements[d].snapping&&(n||o||a||r||p)&&s.options.snap.snap&&s.options.snap.snap.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=n||o||a||r||p)}}),t.ui.plugin.add("draggable","stack",{start:function(e,i,s){var n,o=s.options,a=t.makeArray(t(o.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});a.length&&(n=parseInt(t(a[0]).css("zIndex"),10)||0,t(a).each(function(e){t(this).css("zIndex",n+e)}),this.css("zIndex",n+a.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("zIndex")&&(o._zIndex=n.css("zIndex")),n.css("zIndex",o.zIndex)},stop:function(e,i,s){var n=s.options;n._zIndex&&t(i.helper).css("zIndex",n._zIndex)}}),t.ui.draggable,t.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,s=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(s)?s:function(t){return t.is(s)},this.proportions=function(){return arguments.length?(e=arguments[0],void 0):e?e:e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight}},this._addToManager(i.scope),i.addClasses&&this._addClass("ui-droppable")},_addToManager:function(e){t.ui.ddmanager.droppables[e]=t.ui.ddmanager.droppables[e]||[],t.ui.ddmanager.droppables[e].push(this)},_splice:function(t){for(var e=0;t.length>e;e++)t[e]===this&&t.splice(e,1)},_destroy:function(){var e=t.ui.ddmanager.droppables[this.options.scope];this._splice(e)},_setOption:function(e,i){if("accept"===e)this.accept=t.isFunction(i)?i:function(t){return t.is(i)};else if("scope"===e){var s=t.ui.ddmanager.droppables[this.options.scope];this._splice(s),this._addToManager(i)}this._super(e,i)},_activate:function(e){var i=t.ui.ddmanager.current;this._addActiveClass(),i&&this._trigger("activate",e,this.ui(i))
},_deactivate:function(e){var i=t.ui.ddmanager.current;this._removeActiveClass(),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._addHoverClass(),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeHoverClass(),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var s=i||t.ui.ddmanager.current,o=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var i=t(this).droppable("instance");return i.options.greedy&&!i.options.disabled&&i.options.scope===s.options.scope&&i.accept.call(i.element[0],s.currentItem||s.element)&&n(s,t.extend(i,{offset:i.element.offset()}),i.options.tolerance,e)?(o=!0,!1):void 0}),o?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",e,this.ui(s)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}});var n=t.ui.intersect=function(){function t(t,e,i){return t>=e&&e+i>t}return function(e,i,s,n){if(!i.offset)return!1;var o=(e.positionAbs||e.position.absolute).left+e.margins.left,a=(e.positionAbs||e.position.absolute).top+e.margins.top,r=o+e.helperProportions.width,l=a+e.helperProportions.height,h=i.offset.left,c=i.offset.top,u=h+i.proportions().width,d=c+i.proportions().height;switch(s){case"fit":return o>=h&&u>=r&&a>=c&&d>=l;case"intersect":return o+e.helperProportions.width/2>h&&u>r-e.helperProportions.width/2&&a+e.helperProportions.height/2>c&&d>l-e.helperProportions.height/2;case"pointer":return t(n.pageY,c,i.proportions().height)&&t(n.pageX,h,i.proportions().width);case"touch":return(a>=c&&d>=a||l>=c&&d>=l||c>a&&l>d)&&(o>=h&&u>=o||r>=h&&u>=r||h>o&&r>u);default:return!1}}}();t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var s,n,o=t.ui.ddmanager.droppables[e.options.scope]||[],a=i?i.type:null,r=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(s=0;o.length>s;s++)if(!(o[s].options.disabled||e&&!o[s].accept.call(o[s].element[0],e.currentItem||e.element))){for(n=0;r.length>n;n++)if(r[n]===o[s].element[0]){o[s].proportions().height=0;continue t}o[s].visible="none"!==o[s].element.css("display"),o[s].visible&&("mousedown"===a&&o[s]._activate.call(o[s],i),o[s].offset=o[s].element.offset(),o[s].proportions({width:o[s].element[0].offsetWidth,height:o[s].element[0].offsetHeight}))}},drop:function(e,i){var s=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&n(e,this,this.options.tolerance,i)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(e,i){e.element.parentsUntil("body").on("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s,o,a,r=n(e,this,this.options.tolerance,i),l=!r&&this.isover?"isout":r&&!this.isover?"isover":null;l&&(this.options.greedy&&(o=this.options.scope,a=this.element.parents(":data(ui-droppable)").filter(function(){return t(this).droppable("instance").options.scope===o}),a.length&&(s=t(a[0]).droppable("instance"),s.greedyChild="isover"===l)),s&&"isover"===l&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[l]=!0,this["isout"===l?"isover":"isout"]=!1,this["isover"===l?"_over":"_out"].call(this,i),s&&"isout"===l&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").off("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}},t.uiBackCompat!==!1&&t.widget("ui.droppable",t.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),t.ui.droppable,t.widget("ui.resizable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(t){return parseFloat(t)||0},_isNumber:function(t){return!isNaN(parseFloat(t))},_hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",n=!1;return e[s]>0?!0:(e[s]=1,n=e[s]>0,e[s]=0,n)},_create:function(){var e,i=this.options,s=this;this._addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),i.autoHide&&t(this.element).on("mouseenter",function(){i.disabled||(s._removeClass("ui-resizable-autohide"),s._handles.show())}).on("mouseleave",function(){i.disabled||s.resizing||(s._addClass("ui-resizable-autohide"),s._handles.hide())}),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_setOption:function(t,e){switch(this._super(t,e),t){case"handles":this._removeHandles(),this._setupHandles();break;default:}},_setupHandles:function(){var e,i,s,n,o,a=this.options,r=this;if(this.handles=a.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=t(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),s=this.handles.split(","),this.handles={},i=0;s.length>i;i++)e=t.trim(s[i]),n="ui-resizable-"+e,o=t("<div>"),this._addClass(o,"ui-resizable-handle "+n),o.css({zIndex:a.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(o);this._renderAxis=function(e){var i,s,n,o;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=t(this.handles[i]),this._on(this.handles[i],{mousedown:r._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(s=t(this.handles[i],this.element),o=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(n,o),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",function(){r.resizing||(this.className&&(o=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),r.axis=o&&o[1]?o[1]:"se")}),a.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var i,s,n=!1;for(i in this.handles)s=t(this.handles[i])[0],(s===e.target||t.contains(s,e.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(e){var i,s,n,o=this.options,a=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),s=this._num(this.helper.css("top")),o.containment&&(i+=t(o.containment).scrollLeft()||0,s+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:s},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalPosition={left:i,top:s},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,n=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===n?this.axis+"-resize":n),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var i,s,n=this.originalMousePosition,o=this.axis,a=e.pageX-n.left||0,r=e.pageY-n.top||0,l=this._change[o];return this._updatePrevProperties(),l?(i=l.apply(this,[e,a,r]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),s=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(s)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,s,n,o,a,r,l,h=this.options,c=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&this._hasScroll(i[0],"left")?0:c.sizeDiff.height,o=s?0:c.sizeDiff.width,a={width:c.helper.width()-o,height:c.helper.height()-n},r=parseFloat(c.element.css("left"))+(c.position.left-c.originalPosition.left)||null,l=parseFloat(c.element.css("top"))+(c.position.top-c.originalPosition.top)||null,h.animate||this.element.css(t.extend(a,{top:l,left:r})),c.helper.height(c.size.height),c.helper.width(c.size.width),this._helper&&!h.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var t={};return this.position.top!==this.prevPosition.top&&(t.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(t.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(t.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(t.height=this.size.height+"px"),this.helper.css(t),t},_updateVirtualBoundaries:function(t){var e,i,s,n,o,a=this.options;o={minWidth:this._isNumber(a.minWidth)?a.minWidth:0,maxWidth:this._isNumber(a.maxWidth)?a.maxWidth:1/0,minHeight:this._isNumber(a.minHeight)?a.minHeight:0,maxHeight:this._isNumber(a.maxHeight)?a.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,s=o.minWidth/this.aspectRatio,i=o.maxHeight*this.aspectRatio,n=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),s>o.minHeight&&(o.minHeight=s),o.maxWidth>i&&(o.maxWidth=i),o.maxHeight>n&&(o.maxHeight=n)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),this._isNumber(t.left)&&(this.position.left=t.left),this._isNumber(t.top)&&(this.position.top=t.top),this._isNumber(t.height)&&(this.size.height=t.height),this._isNumber(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,i=this.size,s=this.axis;return this._isNumber(t.height)?t.width=t.height*this.aspectRatio:this._isNumber(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===s&&(t.left=e.left+(i.width-t.width),t.top=null),"nw"===s&&(t.top=e.top+(i.height-t.height),t.left=e.left+(i.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,i=this.axis,s=this._isNumber(t.width)&&e.maxWidth&&e.maxWidth<t.width,n=this._isNumber(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=this._isNumber(t.width)&&e.minWidth&&e.minWidth>t.width,a=this._isNumber(t.height)&&e.minHeight&&e.minHeight>t.height,r=this.originalPosition.left+this.originalSize.width,l=this.originalPosition.top+this.originalSize.height,h=/sw|nw|w/.test(i),c=/nw|ne|n/.test(i);return o&&(t.width=e.minWidth),a&&(t.height=e.minHeight),s&&(t.width=e.maxWidth),n&&(t.height=e.maxHeight),o&&h&&(t.left=r-e.minWidth),s&&h&&(t.left=r-e.maxWidth),a&&c&&(t.top=l-e.minHeight),n&&c&&(t.top=l-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_getPaddingPlusBorderDimensions:function(t){for(var e=0,i=[],s=[t.css("borderTopWidth"),t.css("borderRightWidth"),t.css("borderBottomWidth"),t.css("borderLeftWidth")],n=[t.css("paddingTop"),t.css("paddingRight"),t.css("paddingBottom"),t.css("paddingLeft")];4>e;e++)i[e]=parseFloat(s[e])||0,i[e]+=parseFloat(n[e])||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var t,e=0,i=this.helper||this.element;this._proportionallyResizeElements.length>e;e++)t=this._proportionallyResizeElements[e],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(t)),t.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,s=this.originalPosition;return{left:s.left+e,width:i.width-e}},n:function(t,e,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},sw:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,s]))},ne:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},nw:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,s]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).resizable("instance"),s=i.options,n=i._proportionallyResizeElements,o=n.length&&/textarea/i.test(n[0].nodeName),a=o&&i._hasScroll(n[0],"left")?0:i.sizeDiff.height,r=o?0:i.sizeDiff.width,l={width:i.size.width-r,height:i.size.height-a},h=parseFloat(i.element.css("left"))+(i.position.left-i.originalPosition.left)||null,c=parseFloat(i.element.css("top"))+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(l,c&&h?{top:c,left:h}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseFloat(i.element.css("width")),height:parseFloat(i.element.css("height")),top:parseFloat(i.element.css("top")),left:parseFloat(i.element.css("left"))};n&&n.length&&t(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var e,i,s,n,o,a,r,l=t(this).resizable("instance"),h=l.options,c=l.element,u=h.containment,d=u instanceof t?u.get(0):/parent/.test(u)?c.parent().get(0):u;d&&(l.containerElement=t(d),/document/.test(u)||u===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(e=t(d),i=[],t(["Top","Right","Left","Bottom"]).each(function(t,s){i[t]=l._num(e.css("padding"+s))}),l.containerOffset=e.offset(),l.containerPosition=e.position(),l.containerSize={height:e.innerHeight()-i[3],width:e.innerWidth()-i[1]},s=l.containerOffset,n=l.containerSize.height,o=l.containerSize.width,a=l._hasScroll(d,"left")?d.scrollWidth:o,r=l._hasScroll(d)?d.scrollHeight:n,l.parentData={element:d,left:s.left,top:s.top,width:a,height:r}))},resize:function(e){var i,s,n,o,a=t(this).resizable("instance"),r=a.options,l=a.containerOffset,h=a.position,c=a._aspectRatio||e.shiftKey,u={top:0,left:0},d=a.containerElement,p=!0;d[0]!==document&&/static/.test(d.css("position"))&&(u=l),h.left<(a._helper?l.left:0)&&(a.size.width=a.size.width+(a._helper?a.position.left-l.left:a.position.left-u.left),c&&(a.size.height=a.size.width/a.aspectRatio,p=!1),a.position.left=r.helper?l.left:0),h.top<(a._helper?l.top:0)&&(a.size.height=a.size.height+(a._helper?a.position.top-l.top:a.position.top),c&&(a.size.width=a.size.height*a.aspectRatio,p=!1),a.position.top=a._helper?l.top:0),n=a.containerElement.get(0)===a.element.parent().get(0),o=/relative|absolute/.test(a.containerElement.css("position")),n&&o?(a.offset.left=a.parentData.left+a.position.left,a.offset.top=a.parentData.top+a.position.top):(a.offset.left=a.element.offset().left,a.offset.top=a.element.offset().top),i=Math.abs(a.sizeDiff.width+(a._helper?a.offset.left-u.left:a.offset.left-l.left)),s=Math.abs(a.sizeDiff.height+(a._helper?a.offset.top-u.top:a.offset.top-l.top)),i+a.size.width>=a.parentData.width&&(a.size.width=a.parentData.width-i,c&&(a.size.height=a.size.width/a.aspectRatio,p=!1)),s+a.size.height>=a.parentData.height&&(a.size.height=a.parentData.height-s,c&&(a.size.width=a.size.height*a.aspectRatio,p=!1)),p||(a.position.left=a.prevPosition.left,a.position.top=a.prevPosition.top,a.size.width=a.prevSize.width,a.size.height=a.prevSize.height)},stop:function(){var e=t(this).resizable("instance"),i=e.options,s=e.containerOffset,n=e.containerPosition,o=e.containerElement,a=t(e.helper),r=a.offset(),l=a.outerWidth()-e.sizeDiff.width,h=a.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:l,height:h}),e._helper&&!i.animate&&/static/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:l,height:h})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).resizable("instance"),i=e.options;t(i.alsoResize).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})})},resize:function(e,i){var s=t(this).resizable("instance"),n=s.options,o=s.originalSize,a=s.originalPosition,r={height:s.size.height-o.height||0,width:s.size.width-o.width||0,top:s.position.top-a.top||0,left:s.position.left-a.left||0};t(n.alsoResize).each(function(){var e=t(this),s=t(this).data("ui-resizable-alsoresize"),n={},o=e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(s[e]||0)+(r[e]||0);i&&i>=0&&(n[e]=i||null)}),e.css(n)})},stop:function(){t(this).removeData("ui-resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).resizable("instance"),i=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:i.height,width:i.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),t.uiBackCompat!==!1&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e,i=t(this).resizable("instance"),s=i.options,n=i.size,o=i.originalSize,a=i.originalPosition,r=i.axis,l="number"==typeof s.grid?[s.grid,s.grid]:s.grid,h=l[0]||1,c=l[1]||1,u=Math.round((n.width-o.width)/h)*h,d=Math.round((n.height-o.height)/c)*c,p=o.width+u,f=o.height+d,g=s.maxWidth&&p>s.maxWidth,m=s.maxHeight&&f>s.maxHeight,_=s.minWidth&&s.minWidth>p,v=s.minHeight&&s.minHeight>f;s.grid=l,_&&(p+=h),v&&(f+=c),g&&(p-=h),m&&(f-=c),/^(se|s|e)$/.test(r)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.top=a.top-d):/^(sw)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.left=a.left-u):((0>=f-c||0>=p-h)&&(e=i._getPaddingPlusBorderDimensions(this)),f-c>0?(i.size.height=f,i.position.top=a.top-d):(f=c-e.height,i.size.height=f,i.position.top=a.top+o.height-f),p-h>0?(i.size.width=p,i.position.left=a.left-u):(p=h-e.width,i.size.width=p,i.position.left=a.left+o.width-p))}}),t.ui.resizable,t.widget("ui.selectable",t.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e.elementPos=t(e.element[0]).offset(),e.selectees=t(e.options.filter,e.element[0]),e._addClass(e.selectees,"ui-selectee"),e.selectees.each(function(){var i=t(this),s=i.offset(),n={left:s.left-e.elementPos.left,top:s.top-e.elementPos.top};t.data(this,"selectable-item",{element:this,$element:i,left:n.left,top:n.top,right:n.left+i.outerWidth(),bottom:n.top+i.outerHeight(),startselected:!1,selected:i.hasClass("ui-selected"),selecting:i.hasClass("ui-selecting"),unselecting:i.hasClass("ui-unselecting")})})},this.refresh(),this._mouseInit(),this.helper=t("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(e){var i=this,s=this.options;this.opos=[e.pageX,e.pageY],this.elementPos=t(this.element[0]).offset(),this.options.disabled||(this.selectees=t(s.filter,this.element[0]),this._trigger("start",e),t(s.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=t.data(this,"selectable-item");s.startselected=!0,e.metaKey||e.ctrlKey||(i._removeClass(s.$element,"ui-selected"),s.selected=!1,i._addClass(s.$element,"ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",e,{unselecting:s.element}))}),t(e.target).parents().addBack().each(function(){var s,n=t.data(this,"selectable-item");return n?(s=!e.metaKey&&!e.ctrlKey||!n.$element.hasClass("ui-selected"),i._removeClass(n.$element,s?"ui-unselecting":"ui-selected")._addClass(n.$element,s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",e,{selecting:n.element}):i._trigger("unselecting",e,{unselecting:n.element}),!1):void 0}))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,o=this.opos[0],a=this.opos[1],r=e.pageX,l=e.pageY;return o>r&&(i=r,r=o,o=i),a>l&&(i=l,l=a,a=i),this.helper.css({left:o,top:a,width:r-o,height:l-a}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),h=!1,c={};i&&i.element!==s.element[0]&&(c.left=i.left+s.elementPos.left,c.right=i.right+s.elementPos.left,c.top=i.top+s.elementPos.top,c.bottom=i.bottom+s.elementPos.top,"touch"===n.tolerance?h=!(c.left>r||o>c.right||c.top>l||a>c.bottom):"fit"===n.tolerance&&(h=c.left>o&&r>c.right&&c.top>a&&l>c.bottom),h?(i.selected&&(s._removeClass(i.$element,"ui-selected"),i.selected=!1),i.unselecting&&(s._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1),i.selecting||(s._addClass(i.$element,"ui-selecting"),i.selecting=!0,s._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,s._addClass(i.$element,"ui-selected"),i.selected=!0):(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,i.startselected&&(s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(s._removeClass(i.$element,"ui-selected"),i.selected=!1,s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",e,{unselected:s.element})}),t(".ui-selecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-selecting")._addClass(s.$element,"ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",e,{selected:s.element})}),this._trigger("stop",e),this.helper.remove(),!1}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&e+i>t},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),t.each(this.items,function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")})},_destroy:function(){this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var s=null,n=!1,o=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,o.widgetName+"-item")===o?(s=t(this),!1):void 0}),t.data(e.target,o.widgetName+"-item")===o&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,o,a=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",a.cursor),this.storedStylesheet=t("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(o)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,o,a=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-this.document.scrollTop()<a.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-a.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<a.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+a.scrollSpeed)),e.pageX-this.document.scrollLeft()<a.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-a.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<a.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+a.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],o=this._intersectsWithPointer(s),o&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===o?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;
this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),o=this.options.axis,a={};o&&"x"!==o||(a.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(a.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(a,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new t.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,o=t.left,a=o+t.width,r=t.top,l=r+t.height,h=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+h>r&&l>s+h,d="y"===this.options.axis||e+c>o&&a>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>o&&a>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&l>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var e,i,s="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),n="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),o=s&&n;return o?(e=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection(),this.floating?"right"===i||"down"===e?2:1:e&&("down"===e?2:1)):!1},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&e||"up"===s&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){r.push(this)}var s,n,o,a,r=[],l=[],h=this._connectWith();if(h&&e)for(s=h.length-1;s>=0;s--)for(o=t(h[s],this.document[0]),n=o.length-1;n>=0;n--)a=t.data(o[n],this.widgetFullName),a&&a!==this&&!a.options.disabled&&l.push([t.isFunction(a.options.items)?a.options.items.call(a.element):t(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a]);for(l.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=l.length-1;s>=0;s--)l[s][0].each(i);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,o,a,r,l,h,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i],this.document[0]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(a=u[i][1],r=u[i][0],s=0,h=r.length;h>s;s++)l=t(r[s]),l.data(this.widgetName+"-item",a),c.push({item:l,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,o;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),o=n.offset(),s.left=o.left,s.top=o.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]);return e._addClass(n,"ui-sortable-placeholder",i||e.currentItem[0].className)._removeClass(n,"ui-sortable-helper"),"tbody"===s?e._createTrPlaceholder(e.currentItem.find("tr").eq(0),t("<tr>",e.document[0]).appendTo(n)):"tr"===s?e._createTrPlaceholder(e.currentItem,n):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_createTrPlaceholder:function(e,i){var s=this;e.children().each(function(){t("<td>&#160;</td>",s.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(e){var i,s,n,o,a,r,l,h,c,u,d=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!t.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(d&&t.contains(this.containers[i].element[0],d.element[0]))continue;d=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if(d)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,o=null,c=d.floating||this._isFloating(this.currentItem),a=c?"left":"top",r=c?"width":"height",u=c?"pageX":"pageY",s=this.items.length-1;s>=0;s--)t.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(l=this.items[s].item.offset()[a],h=!1,e[u]-l>this.items[s][r]/2&&(h=!0),n>Math.abs(e[u]-l)&&(n=Math.abs(e[u]-l),o=this.items[s],this.direction=h?"up":"down"));if(!o&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;o?this._rearrange(e,o,null,!0):this._rearrange(e,null,this.containers[p].element,!0),this._trigger("change",e,this._uiHash()),this.containers[p]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,o=e.pageX,a=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((a-this.originalPageY)/n.grid[1])*n.grid[1],a=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0],o=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:r.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){function i(t,e,i){return function(s){i._trigger(t,s,e._uiHash(e))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)e||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(s=0;n.length>s;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})});
;/*!lib/sui/js/sui.min.js*/
!function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){!function(a){"use strict";function b(b,c){var d=this;d.element=b,d.el=a(b),d.suggestions=[],d.badQueries=[],d.selectedIndex=-1,d.currentValue=d.element.value,d.intervalId=0,d.cachedResponse={},d.onChangeInterval=null,d.onChange=null,d.isLocal=!1,d.suggestionsContainer=null,d.options=d.getOptions(c),d.classes={selected:"active",suggestion:"autocomplete-suggestion"},d.hint=null,d.hintValue="",d.selection=null,d.initialize(),d.setOptions(c)}var c=function(){return{escapeRegExChars:function(a){return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")},createNode:function(a){var b=document.createElement("ul");return b.className=a,b.style.position="absolute",b.style.display="none",b}}}(),d={ESC:27,TAB:9,RETURN:13,LEFT:37,UP:38,RIGHT:39,DOWN:40};b.utils=c,a.Autocomplete=b,b.formatResult=function(a,b){var d="("+c.escapeRegExChars(b)+")";return a.value.replace(new RegExp(d,"gi"),"<strong>$1</strong>")},b.prototype={killerFn:null,initialize:function(){var c,d=this,e="."+d.classes.suggestion,f=d.classes.selected,g=d.options;d.element.setAttribute("autocomplete","off"),d.killerFn=function(b){0===a(b.target).closest("."+d.options.containerClass).length&&(d.killSuggestions(),d.disableKillerFn())},d.suggestionsContainer=b.utils.createNode(g.containerClass),c=a(d.suggestionsContainer),c.appendTo(g.appendTo),"auto"!==g.width&&c.width(g.width),c.on("mouseover.autocomplete",e,function(){d.activate(a(this).data("index"))}),c.on("mouseout.autocomplete",function(){d.selectedIndex=-1,c.children("."+f).removeClass(f)}),c.on("click.autocomplete",e,function(){d.select(a(this).data("index"))}),d.fixPosition(),d.fixPositionCapture=function(){d.visible&&d.fixPosition()},a(window).on("resize.autocomplete",d.fixPositionCapture),d.el.on("keydown.autocomplete",function(a){d.onKeyPress(a)}),d.el.on("keyup.autocomplete",function(a){d.onKeyUp(a)}),d.el.on("blur.autocomplete",function(){d.onBlur()}),d.el.on("focus.autocomplete",function(){d.onFocus()}),d.el.on("change.autocomplete",function(a){d.onKeyUp(a)})},onFocus:function(){var a=this;a.fixPosition(),a.options.minChars<=a.el.val().length&&a.onValueChange()},onBlur:function(){this.enableKillerFn()},setOptions:function(b){var c=this,d=c.options;a.extend(d,b),c.isLocal=a.isArray(d.lookup),c.isLocal&&(d.lookup=c.verifySuggestionsFormat(d.lookup)),a(c.suggestionsContainer).css({"max-height":d.maxHeight+"px",width:d.width+"px","z-index":d.zIndex})},clearCache:function(){this.cachedResponse={},this.badQueries=[]},clear:function(){this.clearCache(),this.currentValue="",this.suggestions=[]},disable:function(){var a=this;a.disabled=!0,a.currentRequest&&a.currentRequest.abort()},enable:function(){this.disabled=!1},fixPosition:function(){var b,c,d=this;"body"===d.options.appendTo&&(b=d.el.offset(),c={top:b.top+d.el.outerHeight()+"px",left:b.left+"px"},"auto"===d.options.width&&(c.width=d.el.outerWidth()-2+"px"),a(d.suggestionsContainer).css(c))},enableKillerFn:function(){var b=this;a(document).on("click.autocomplete",b.killerFn)},disableKillerFn:function(){var b=this;a(document).off("click.autocomplete",b.killerFn)},killSuggestions:function(){var a=this;a.stopKillSuggestions(),a.intervalId=window.setInterval(function(){a.hide(),a.stopKillSuggestions()},50)},stopKillSuggestions:function(){window.clearInterval(this.intervalId)},isCursorAtEnd:function(){var a,b=this,c=b.el.val().length,d=b.element.selectionStart;return"number"==typeof d?d===c:!document.selection||(a=document.selection.createRange(),a.moveStart("character",-c),c===a.text.length)},onKeyPress:function(a){var b=this;if(!b.disabled&&!b.visible&&a.which===d.DOWN&&b.currentValue)return void b.suggest();if(!b.disabled&&b.visible){switch(a.which){case d.ESC:b.el.val(b.currentValue),b.hide();break;case d.RIGHT:if(b.hint&&b.options.onHint&&b.isCursorAtEnd())return void b.selectHint();break;case d.TAB:if(b.hint&&b.options.onHint)return void b.selectHint();break;case d.RETURN:if(b.selectedIndex===-1)return void b.hide();if(b.select(b.selectedIndex),a.which===d.TAB&&b.options.tabDisabled===!1)return;break;case d.UP:b.moveUp();break;case d.DOWN:b.moveDown();break;default:return}a.stopImmediatePropagation(),a.preventDefault()}},onKeyUp:function(a){var b=this;if(!b.disabled){switch(a.which){case d.UP:case d.DOWN:return}clearInterval(b.onChangeInterval),b.currentValue!==b.el.val()&&(b.findBestHint(),b.options.deferRequestBy>0?b.onChangeInterval=setInterval(function(){b.onValueChange()},b.options.deferRequestBy):b.onValueChange())}},onValueChange:function(){var b,c=this,d=c.options,e=c.el.val(),f=c.getQuery(e);return c.selection&&(c.selection=null,(d.onInvalidateSelection||a.noop).call(c.element)),clearInterval(c.onChangeInterval),c.currentValue=e,c.selectedIndex=-1,d.triggerSelectOnValidInput&&(b=c.findSuggestionIndex(f),b!==-1)?void c.select(b):void(f.length<d.minChars?c.hide():c.getSuggestions(f))},findSuggestionIndex:function(b){var c=this,d=-1,e=b.toLowerCase();return a.each(c.suggestions,function(a,b){if(b.value.toLowerCase()===e)return d=a,!1}),d},getQuery:function(b){var c,d=this.options.delimiter;return d?(c=b.split(d),a.trim(c[c.length-1])):b},getSuggestionsLocal:function(b){var c,d=this,e=d.options,f=b.toLowerCase(),g=e.lookupFilter,h=parseInt(e.lookupLimit,10);return c={suggestions:a.grep(e.lookup,function(a){return g(a,b,f)})},h&&c.suggestions.length>h&&(c.suggestions=c.suggestions.slice(0,h)),c},getSuggestions:function(b){var c,d,e,f=this,g=f.options,h=g.serviceUrl;if(g.params[g.paramName]=b,d=g.ignoreParams?null:g.params,f.isLocal?c=f.getSuggestionsLocal(b):(a.isFunction(h)&&(h=h.call(f.element,b)),e=h+"?"+a.param(d||{}),c=f.cachedResponse[e]),c&&a.isArray(c.suggestions))f.suggestions=c.suggestions,f.suggest();else if(!f.isBadQuery(b)){if(g.onSearchStart.call(f.element,g.params)===!1)return;f.currentRequest&&f.currentRequest.abort(),f.currentRequest=a.ajax({url:h,data:d,type:g.type,dataType:g.dataType}).done(function(a){var c;f.currentRequest=null,c=g.transformResult(a),f.processResponse(c,b,e),g.onSearchComplete.call(f.element,b,c.suggestions)}).fail(function(a,c,d){g.onSearchError.call(f.element,b,a,c,d)})}},isBadQuery:function(a){if(!this.options.preventBadQueries)return!1;for(var b=this.badQueries,c=b.length;c--;)if(0===a.indexOf(b[c]))return!0;return!1},hide:function(){var b=this;b.visible=!1,b.selectedIndex=-1,a(b.suggestionsContainer).hide(),b.signalHint(null)},suggest:function(){if(0===this.suggestions.length)return void this.hide();var b,c,d=this,e=d.options,f=e.formatResult,g=d.getQuery(d.currentValue),h=d.classes.suggestion,i=d.classes.selected,j=a(d.suggestionsContainer),k=e.beforeRender,l="";return e.triggerSelectOnValidInput&&(b=d.findSuggestionIndex(g),b!==-1)?void d.select(b):(a.each(d.suggestions,function(a,b){l+='<li class="'+h+'" data-index="'+a+'"><a>'+f(b,g)+"</a></li>"}),"auto"===e.width&&(c=d.el.outerWidth()-2,j.width(c>0?c:300)),j.html(l),e.autoSelectFirst&&(d.selectedIndex=0,j.children().first().addClass(i)),a.isFunction(k)&&k.call(d.element,j),j.show(),d.visible=!0,void d.findBestHint())},findBestHint:function(){var b=this,c=b.el.val().toLowerCase(),d=null;c&&(a.each(b.suggestions,function(a,b){var e=0===b.value.toLowerCase().indexOf(c);return e&&(d=b),!e}),b.signalHint(d))},signalHint:function(b){var c="",d=this;b&&(c=d.currentValue+b.value.substr(d.currentValue.length)),d.hintValue!==c&&(d.hintValue=c,d.hint=b,(this.options.onHint||a.noop)(c))},verifySuggestionsFormat:function(b){return b.length&&"string"==typeof b[0]?a.map(b,function(a){return{value:a,data:null}}):b},processResponse:function(a,b,c){var d=this,e=d.options;a.suggestions=d.verifySuggestionsFormat(a.suggestions),e.noCache||(d.cachedResponse[c]=a,e.preventBadQueries&&0===a.suggestions.length&&d.badQueries.push(b)),b===d.getQuery(d.currentValue)&&(d.suggestions=a.suggestions,d.suggest())},activate:function(b){var c,d=this,e=d.classes.selected,f=a(d.suggestionsContainer),g=f.children();return f.children("."+e).removeClass(e),d.selectedIndex=b,d.selectedIndex!==-1&&g.length>d.selectedIndex?(c=g.get(d.selectedIndex),a(c).addClass(e),c):null},selectHint:function(){var b=this,c=a.inArray(b.hint,b.suggestions);b.select(c)},select:function(a){var b=this;b.hide(),b.onSelect(a)},moveUp:function(){var b=this;if(b.selectedIndex!==-1)return 0===b.selectedIndex?(a(b.suggestionsContainer).children().first().removeClass(b.classes.selected),b.selectedIndex=-1,b.el.val(b.currentValue),void b.findBestHint()):void b.adjustScroll(b.selectedIndex-1)},moveDown:function(){var a=this;a.selectedIndex!==a.suggestions.length-1&&a.adjustScroll(a.selectedIndex+1)},adjustScroll:function(b){var c,d,e,f=this,g=f.activate(b),h=25;g&&(c=g.offsetTop,d=a(f.suggestionsContainer).scrollTop(),e=d+f.options.maxHeight-h,c<d?a(f.suggestionsContainer).scrollTop(c):c>e&&a(f.suggestionsContainer).scrollTop(c-f.options.maxHeight+h),f.el.val(f.getValue(f.suggestions[b].value)),f.signalHint(null))},onSelect:function(b){var c=this,d=c.options.onSelect,e=c.suggestions[b];c.currentValue=c.getValue(e.value),c.currentValue!==c.el.val()&&c.el.val(c.currentValue),c.signalHint(null),c.suggestions=[],c.selection=e,a.isFunction(d)&&d.call(c.element,e)},getValue:function(a){var b,c,d=this,e=d.options.delimiter;return e?(b=d.currentValue,c=b.split(e),1===c.length?a:b.substr(0,b.length-c[c.length-1].length)+a):a},dispose:function(){var b=this;b.el.off(".autocomplete").removeData("autocomplete"),b.disableKillerFn(),a(window).off("resize.autocomplete",b.fixPositionCapture),a(b.suggestionsContainer).remove()},getOptions:function(b){return b=a.extend({},a.fn.autocomplete.defaults,this.el.data(),b)}},a.fn.autocomplete=function(c,d){var e="autocomplete";return this.each(function(){var d=a(this),f=d.data(e),g="object"==typeof c&&c;f||d.data(e,f=new b(this,g)),"string"==typeof c&&f[c]()})},a.fn.autocomplete.defaults={autoSelectFirst:!1,appendTo:"body",serviceUrl:null,lookup:null,onSelect:null,width:"auto",minChars:1,maxHeight:300,deferRequestBy:0,params:{},formatResult:b.formatResult,delimiter:null,zIndex:9999,type:"GET",noCache:!1,onSearchStart:a.noop,onSearchComplete:a.noop,onSearchError:a.noop,containerClass:"sui-dropdown-menu sui-suggestion-container",tabDisabled:!1,dataType:"text",currentRequest:null,triggerSelectOnValidInput:!0,preventBadQueries:!0,lookupFilter:function(a,b,c){return a.value.toLowerCase().indexOf(c)!==-1},paramName:"query",transformResult:function(b){return"string"==typeof b?a.parseJSON(b):b}},a(function(){a("[data-toggle='autocomplete']").autocomplete()})}(window.jQuery)},{}],2:[function(a,b,c){!function(a){"use strict";var b=function(b,c){this.$element=a(b),this.options=a.extend({},a.fn.button.defaults,c)};b.prototype.setState=function(a){var b="disabled",c=this.$element,d=c.data(),e=c.is("input")?"val":"html";a+="Text",d.resetText||c.data("resetText",c[e]()),c[e](d[a]||this.options[a]),setTimeout(function(){"loadingText"==a?c.addClass(b).attr(b,b):c.removeClass(b).removeAttr(b)},0)},b.prototype.toggle=function(){var a=this.$element.closest('[data-toggle="buttons-radio"]');a&&a.find(".active").removeClass("active"),this.$element.toggleClass("active")};var c=a.fn.button;a.fn.button=function(c){return this.each(function(){var d=a(this),e=d.data("button"),f="object"==typeof c&&c;e||d.data("button",e=new b(this,f)),"toggle"==c?e.toggle():c&&e.setState(c)})},a.fn.button.defaults={loadingText:"loading..."},a.fn.button.Constructor=b,a.fn.button.noConflict=function(){return a.fn.button=c,this},a(document).on("click.button.data-api","[data-toggle^=button]",function(b){var c=a(b.target);c.hasClass("btn")||(c=c.closest(".btn")),c.button("toggle")})}(window.jQuery)},{}],3:[function(a,b,c){!function(a){"use strict";var b=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,"hover"==this.options.pause&&this.$element.on("mouseenter",a.proxy(this.pause,this)).on("mouseleave",a.proxy(this.cycle,this))};b.prototype={cycle:function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(b){var c=this.getActiveIndex(),d=this;if(!(b>this.$items.length-1||b<0))return this.sliding?this.$element.one("slid",function(){d.to(b)}):c==b?this.pause().cycle():this.slide(b>c?"next":"prev",a(this.$items[b]))},pause:function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition.end&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){if(!this.sliding)return this.slide("next")},prev:function(){if(!this.sliding)return this.slide("prev")},slide:function(b,c){var d,e=this.$element.find(".item.active"),f=c||e[b](),g=this.interval,h="next"==b?"left":"right",i="next"==b?"first":"last",j=this;if(this.sliding=!0,g&&this.pause(),f=f.length?f:this.$element.find(".item")[i](),d=a.Event("slide",{relatedTarget:f[0],direction:h}),!f.hasClass("active")){if(this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var b=a(j.$indicators.children()[j.getActiveIndex()]);b&&b.addClass("active")})),a.support.transition&&this.$element.hasClass("slide")){if(this.$element.trigger(d),d.isDefaultPrevented())return;f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),this.$element.one(a.support.transition.end,function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),j.sliding=!1,setTimeout(function(){j.$element.trigger("slid")},0)})}else{if(this.$element.trigger(d),d.isDefaultPrevented())return;e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return g&&this.cycle(),this}}};var c=a.fn.carousel;a.fn.carousel=function(c){return this.each(function(){var d=a(this),e=d.data("carousel"),f=a.extend({},a.fn.carousel.defaults,d.data(),"object"==typeof c&&c),g="string"==typeof c?c:f.slide;e||d.data("carousel",e=new b(this,f)),"number"==typeof c?e.to(c):g?e[g]():f.autoStart&&e.pause().cycle()})},a.fn.carousel.defaults={interval:5e3,pause:"hover",autoStart:!0},a.fn.carousel.Constructor=b,a.fn.carousel.noConflict=function(){return a.fn.carousel=c,this},a(document).on("click.sui-carousel.data-api","[data-slide], [data-slide-to]",function(b){var c,d,e=a(this),f=a(e.attr("data-target")||(c=e.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"")),g=a.extend({},f.data(),e.data());f.carousel(g),(d=e.attr("data-slide-to"))&&f.data("carousel").pause().to(d).cycle(),b.preventDefault()}),a(function(){a("[data-ride='carousel']").carousel()})}(window.jQuery)},{}],4:[function(a,b,c){!function(a){"use strict";var b="checked",c="halfchecked",d="disabled",e=function(b,c){this.$element=a(b),this.$checkbox=this.$element.find("input")},f=a.fn.checkbox;a.fn.checkbox=function(b){return this.each(function(){var c=a(this),d=c.data("checkbox"),f="object"==typeof b&&b;d?b&&d[b]():c.data("checkbox",d=new e(this,f))})},e.prototype.toggle=function(){this.$checkbox.prop("checked")?this.uncheck():this.check(),this.$checkbox.trigger("change")},e.prototype.check=function(){this.$checkbox.prop("disabled")||(this.$checkbox.prop("checked",!0),this.$checkbox.trigger("change"))},e.prototype.uncheck=function(){this.$checkbox.prop("disabled")||(this.$checkbox.prop("checked",!1),this.$checkbox.trigger("change"))},e.prototype.halfcheck=function(){this.$checkbox.prop("disabled")||(this.$checkbox.prop("checked",!1),this.$element.removeClass(b).addClass("halfchecked"))},e.prototype.disable=function(){this.$checkbox.prop("disabled",!0),this.$checkbox.trigger("change")},e.prototype.enable=function(){this.$checkbox.prop("disabled",!1),this.$checkbox.trigger("change")},a.fn.checkbox.defaults={loadingText:"loading..."},a.fn.checkbox.Constructor=e,a.fn.checkbox.noConflict=function(){return a.fn.checkbox=f,this},a.fn.radio=a.fn.checkbox,a(document).on("change","input[type='checkbox'], input[type='radio']",function(e){var f=a(e.currentTarget),g=f.parent(),h=function(a){var e=a.parent();a.prop("checked")?e.removeClass(c).addClass(b):e.removeClass(b).removeClass(c),a.prop("disabled")?e.addClass(d):e.removeClass(d)};if((g.hasClass("checkbox-pretty")||g.hasClass("radio-pretty"))&&h(f),"radio"===f.attr("type").toLowerCase()){var i=f.attr("name");a("input[name='"+i+"']").each(function(){h(a(this))})}})}(window.jQuery)},{}],5:[function(a,b,c){!function(a,b){function c(){return new Date(Date.UTC.apply(Date,arguments))}function d(){var a=new Date;return c(a.getFullYear(),a.getMonth(),a.getDate())}function e(a){return function(){return this[a].apply(this,arguments)}}function f(b,c){function d(a,b){return b.toLowerCase()}var e,f=a(b).data(),g={},h=new RegExp("^"+c.toLowerCase()+"([A-Z])");c=new RegExp("^"+c.toLowerCase());for(var i in f)c.test(i)&&(e=i.replace(h,d),g[e]=f[i]);return g}function g(b){var c={};if(o[b]||(b=b.split("-")[0],o[b])){var d=o[b];return a.each(n,function(a,b){b in d&&(c[b]=d[b])}),c}}var h=a(window),i=function(){var b={get:function(a){return this.slice(a)[0]},contains:function(a){for(var b=a&&a.valueOf(),c=0,d=this.length;c<d;c++)if(this[c].valueOf()===b)return c;return-1},remove:function(a){this.splice(a,1)},replace:function(b){b&&(a.isArray(b)||(b=[b]),this.clear(),this.push.apply(this,b))},clear:function(){this.length=0},copy:function(){var a=new i;return a.replace(this),a}};return function(){var c=[];return c.push.apply(c,arguments),a.extend(c,b),c}}(),j=function(b,c){this.dates=new i,this.viewDate=d(),this.focusDate=null,this._process_options(c),this.element=a(b),this.isInline=!1,this.isInput=this.element.is("input"),this.component=!!this.element.is(".date")&&this.element.find(".add-on, .input-group-addon, .sui-btn"),this.hasInput=this.component&&this.element.find("input").length,this.component&&0===this.component.length&&(this.component=!1),this.picker=a(p.template),this.o.timepicker&&(this.timepickerContainer=this.picker.find(".timepicker-container"),this.timepickerContainer.timepicker(),this.timepicker=this.timepickerContainer.data("timepicker"),this.timepicker._render()),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),"small"===this.o.size&&this.picker.addClass("datepicker-small"),this.viewMode=this.o.startView,this.o.calendarWeeks&&this.picker.find("tfoot th.today").attr("colspan",function(a,b){return parseInt(b)+1}),this._allow_update=!1,this.setStartDate(this._o.startDate),this.setEndDate(this._o.endDate),this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled),this.fillDow(),this.fillMonths(),this._allow_update=!0,this.update(),this.showMode(),this.isInline&&this.show()};j.prototype={constructor:j,_process_options:function(b){this._o=a.extend({},this._o,b);var c=this.o=a.extend({},this._o),d=c.language;switch(o[d]||(d=d.split("-")[0],o[d]||(d=m.language)),c.language=d,c.startView){case 2:case"decade":c.startView=2;break;case 1:case"year":c.startView=1;break;default:c.startView=0}switch(c.minViewMode){case 1:case"months":c.minViewMode=1;break;case 2:case"years":c.minViewMode=2;break;default:c.minViewMode=0}c.startView=Math.max(c.startView,c.minViewMode),c.multidate!==!0&&(c.multidate=Number(c.multidate)||!1,c.multidate!==!1?c.multidate=Math.max(0,c.multidate):c.multidate=1),c.multidateSeparator=String(c.multidateSeparator),c.weekStart%=7,c.weekEnd=(c.weekStart+6)%7;var e=p.parseFormat(c.format);c.startDate!==-(1/0)&&(c.startDate?c.startDate instanceof Date?c.startDate=this._local_to_utc(this._zero_time(c.startDate)):c.startDate=p.parseDate(c.startDate,e,c.language):c.startDate=-(1/0)),c.endDate!==1/0&&(c.endDate?c.endDate instanceof Date?c.endDate=this._local_to_utc(this._zero_time(c.endDate)):c.endDate=p.parseDate(c.endDate,e,c.language):c.endDate=1/0),c.daysOfWeekDisabled=c.daysOfWeekDisabled||[],a.isArray(c.daysOfWeekDisabled)||(c.daysOfWeekDisabled=c.daysOfWeekDisabled.split(/[,\s]*/)),c.daysOfWeekDisabled=a.map(c.daysOfWeekDisabled,function(a){return parseInt(a,10)});var f=String(c.orientation).toLowerCase().split(/\s+/g),g=c.orientation.toLowerCase();if(f=a.grep(f,function(a){return/^auto|left|right|top|bottom$/.test(a)}),c.orientation={x:"auto",y:"auto"},g&&"auto"!==g)if(1===f.length)switch(f[0]){case"top":case"bottom":c.orientation.y=f[0];break;case"left":case"right":c.orientation.x=f[0]}else g=a.grep(f,function(a){return/^left|right$/.test(a)}),c.orientation.x=g[0]||"auto",g=a.grep(f,function(a){return/^top|bottom$/.test(a)}),c.orientation.y=g[0]||"auto";else;},_events:[],_secondaryEvents:[],_applyEvents:function(a){for(var c,d,e,f=0;f<a.length;f++)c=a[f][0],2===a[f].length?(d=b,e=a[f][1]):3===a[f].length&&(d=a[f][1],e=a[f][2]),c.on(e,d)},_unapplyEvents:function(a){for(var c,d,e,f=0;f<a.length;f++)c=a[f][0],2===a[f].length?(e=b,d=a[f][1]):3===a[f].length&&(e=a[f][1],d=a[f][2]),c.off(d,e)},_buildEvents:function(){this.isInput?this._events=[[this.element,{focus:a.proxy(this.show,this),keyup:a.proxy(function(b){a.inArray(b.keyCode,[27,37,39,38,40,32,13,9])===-1&&this.update()},this),keydown:a.proxy(this.keydown,this)}]]:this.component&&this.hasInput?this._events=[[this.element.find("input"),{focus:a.proxy(this.show,this),keyup:a.proxy(function(b){a.inArray(b.keyCode,[27,37,39,38,40,32,13,9])===-1&&this.update()},this),keydown:a.proxy(this.keydown,this)}],[this.component,{click:a.proxy(this.show,this)}]]:this.element.is("div")?this.isInline=!0:this._events=[[this.element,{click:a.proxy(this.show,this)}]],this.o.timepicker&&this._events.push([this.timepickerContainer,{"time:change":a.proxy(this.timeChange,this)}]),this._events.push([this.element,"*",{blur:a.proxy(function(a){this._focused_from=a.target},this)}],[this.element,{blur:a.proxy(function(a){this._focused_from=a.target},this)}]),this._secondaryEvents=[[this.picker,{click:a.proxy(this.click,this)}],[a(window),{resize:a.proxy(this.place,this)}],[a(document),{"mousedown touchstart":a.proxy(function(a){this.element.is(a.target)||this.element.find(a.target).length||this.picker.is(a.target)||this.picker.find(a.target).length||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents),this.o.timepicker&&this.timepicker._attachSecondaryEvents()},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents),this.o.timepicker&&this.timepicker._detachSecondaryEvents()},_trigger:function(b,c){var d=c||this.dates.get(-1),e=this._utc_to_local(d);this.element.trigger({type:b,date:e,dates:a.map(this.dates,this._utc_to_local),format:a.proxy(function(a,b){0===arguments.length?(a=this.dates.length-1,b=this.o.format):"string"==typeof a&&(b=a,a=this.dates.length-1),b=b||this.o.format;var c=this.dates.get(a);return p.formatDate(c,b,this.o.language)},this)})},timeChange:function(a){this.setValue()},show:function(a){a&&"focus"===a.type&&this.picker.is(":visible")||(this.isInline||this.picker.appendTo("body"),this.picker.show(),this.place(),this._attachSecondaryEvents(),this.o.timepicker&&this.timepicker._show(),this._trigger("show"))},hide:function(){this.isInline||this.picker.is(":visible")&&(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.viewMode=this.o.startView,this.showMode(),this.o.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val())&&this.setValue(),this.o.timepicker&&this.timepicker._hide(),this._trigger("hide"))},remove:function(){this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date},_utc_to_local:function(a){return a&&new Date(a.getTime()+6e4*a.getTimezoneOffset())},_local_to_utc:function(a){return a&&new Date(a.getTime()-6e4*a.getTimezoneOffset())},_zero_time:function(a){return a&&new Date(a.getFullYear(),a.getMonth(),a.getDate())},_zero_utc_time:function(a){return a&&new Date(Date.UTC(a.getUTCFullYear(),a.getUTCMonth(),a.getUTCDate()))},getDates:function(){return a.map(this.dates,this._utc_to_local)},getUTCDates:function(){return a.map(this.dates,function(a){return new Date(a)})},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){return new Date(this.dates.get(-1))},setDates:function(){var b=a.isArray(arguments[0])?arguments[0]:arguments;this.update.apply(this,b),this._trigger("changeDate"),this.setValue()},setUTCDates:function(){var b=a.isArray(arguments[0])?arguments[0]:arguments;this.update.apply(this,a.map(b,this._utc_to_local)),this._trigger("changeDate"),this.setValue()},setDate:e("setDates"),setUTCDate:e("setUTCDates"),setValue:function(){var a=this.getFormattedDate();this.isInput?this.element.val(a).change():this.component&&this.element.find("input").val(a).change()},setTimeValue:function(){var b,c,d,e;if(e={hour:(new Date).getHours(),minute:(new Date).getMinutes()},this.isInput?element=this.element:this.component&&(element=this.element.find("input")),element){if(b=a.trim(element.val())){var f=b.split(" ");2===f.length&&(b=f[1])}b=b.split(":");for(var g=b.length-1;g>=0;g--)b[g]=a.trim(b[g]);2===b.length&&(c=parseInt(b[1],10),c>=0&&c<60&&(e.minute=c),d=parseInt(b[0].slice(-2),10),d>=0&&d<24&&(e.hour=d))}this.timepickerContainer.data("time",e.hour+":"+e.minute)},getFormattedDate:function(c){c===b&&(c=this.o.format);var d=this.o.language,e=a.map(this.dates,function(a){return p.formatDate(a,c,d)}).join(this.o.multidateSeparator);return this.o.timepicker&&(e||(e=p.formatDate(new Date,c,d)),e=e+" "+this.timepickerContainer.data("time")),e},setStartDate:function(a){this._process_options({startDate:a}),this.update(),this.updateNavArrows()},setEndDate:function(a){this._process_options({endDate:a}),this.update(),this.updateNavArrows()},setDaysOfWeekDisabled:function(a){this._process_options({daysOfWeekDisabled:a}),this.update(),this.updateNavArrows()},place:function(){if(!this.isInline){var b=this.picker.outerWidth(),c=this.picker.outerHeight(),d=10,e=h.width(),f=h.height(),g=h.scrollTop(),i=parseInt(this.element.parents().filter(function(){return"auto"!==a(this).css("z-index")}).first().css("z-index"))+10,j=this.component?this.component.parent().offset():this.element.offset(),k=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),l=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),m=j.left,n=j.top;this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(m-=b-l)):(this.picker.addClass("datepicker-orient-left"),j.left<0?m-=j.left-d:j.left+b>e&&(m=e-b-d));var o,p,q=this.o.orientation.y;"auto"===q&&(o=-g+j.top-c,p=g+f-(j.top+k+c),q=Math.max(o,p)===p?"top":"bottom"),this.picker.addClass("datepicker-orient-"+q),"top"===q?n+=k+6:n-=c+parseInt(this.picker.css("padding-top"))+6,this.picker.css({top:n,left:m,zIndex:i})}},_getTime:function(a){var b,c;return a=new Date(a),b=a.getHours(),b<10&&(b="0"+b),c=a.getMinutes(),c<10&&(c="0"+c),b+":"+c},_allow_update:!0,update:function(){if(this._allow_update){var b=this.dates.copy(),c=[],d=!1;if(arguments.length)a.each(arguments,a.proxy(function(a,b){this.o.timepicker&&0===a&&this.timepicker.update(this._getTime(b)),b instanceof Date?b=this._local_to_utc(b):"string"==typeof b&&this.o.timepicker&&(b=b.split(" ")[0]),c.push(b)},this)),d=!0;else{if(c=this.isInput?this.element.val():this.element.data("date")||this.element.find("input").val(),c&&this.o.timepicker){var e=c.split(" ");2===e.length&&(c=e[0],this.timepicker.update(e[1],!0))}c=c&&this.o.multidate?c.split(this.o.multidateSeparator):[c],delete this.element.data().date}c=a.map(c,a.proxy(function(a){return p.parseDate(a,this.o.format,this.o.language)},this)),c=a.grep(c,a.proxy(function(a){return a<this.o.startDate||a>this.o.endDate||!a},this),!0),this.dates.replace(c),this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate&&(this.viewDate=new Date(this.o.endDate)),d?this.setValue():c.length&&String(b)!==String(this.dates)&&this._trigger("changeDate"),!this.dates.length&&b.length&&this._trigger("clearDate"),this.fill()}},fillDow:function(){var a=this.o.weekStart,b='<tr class="week-content">';if(this.o.calendarWeeks){var c='<th class="cw">&nbsp;</th>';b+=c,this.picker.find(".datepicker-days thead tr:first-child").prepend(c)}for(;a<this.o.weekStart+7;)b+='<th class="dow">'+o[this.o.language].daysMin[a++%7]+"</th>";b+="</tr>",this.picker.find(".datepicker-days thead").append(b)},fillMonths:function(){for(var a="",b=0;b<12;)a+='<span class="month">'+o[this.o.language].monthsShort[b++]+"</span>";this.picker.find(".datepicker-months td").html(a)},setRange:function(b){b&&b.length?this.range=a.map(b,function(a){return a.valueOf()}):delete this.range,this.fill()},getClassNames:function(b){var c=[],d=this.viewDate.getUTCFullYear(),e=this.viewDate.getUTCMonth(),f=new Date;return b.getUTCFullYear()<d||b.getUTCFullYear()===d&&b.getUTCMonth()<e?c.push("old"):(b.getUTCFullYear()>d||b.getUTCFullYear()===d&&b.getUTCMonth()>e)&&c.push("new"),this.focusDate&&b.valueOf()===this.focusDate.valueOf()&&c.push("focused"),this.o.todayHighlight&&b.getUTCFullYear()===f.getFullYear()&&b.getUTCMonth()===f.getMonth()&&b.getUTCDate()===f.getDate()&&c.push("today"),this.dates.contains(b)!==-1&&c.push("active"),(b.valueOf()<this.o.startDate||b.valueOf()>this.o.endDate||a.inArray(b.getUTCDay(),this.o.daysOfWeekDisabled)!==-1)&&c.push("disabled"),this.range&&(b>this.range[0]&&b<this.range[this.range.length-1]&&c.push("range"),a.inArray(b.valueOf(),this.range)!==-1&&c.push("selected")),c},fill:function(){var d,e=new Date(this.viewDate),f=e.getUTCFullYear(),g=e.getUTCMonth(),h=this.o.startDate!==-(1/0)?this.o.startDate.getUTCFullYear():-(1/0),i=this.o.startDate!==-(1/0)?this.o.startDate.getUTCMonth():-(1/0),j=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,k=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,l=o[this.o.language].today||o.en.today||"",m=o[this.o.language].clear||o.en.clear||"";this.picker.find(".datepicker-days thead th.datepicker-switch").text(f+"年 "+o[this.o.language].months[g]),this.picker.find("tfoot th.today").text(l).toggle(this.o.todayBtn!==!1),this.picker.find("tfoot th.clear").text(m).toggle(this.o.clearBtn!==!1),this.updateNavArrows(),this.fillMonths();var n=c(f,g-1,28),q=p.getDaysInMonth(n.getUTCFullYear(),n.getUTCMonth());n.setUTCDate(q),n.setUTCDate(q-(n.getUTCDay()-this.o.weekStart+7)%7);var r=new Date(n);r.setUTCDate(r.getUTCDate()+42),r=r.valueOf();for(var s,t=[];n.valueOf()<r;){if(n.getUTCDay()===this.o.weekStart&&(t.push("<tr>"),this.o.calendarWeeks)){var u=new Date(+n+(this.o.weekStart-n.getUTCDay()-7)%7*864e5),v=new Date(Number(u)+(11-u.getUTCDay())%7*864e5),w=new Date(Number(w=c(v.getUTCFullYear(),0,1))+(11-w.getUTCDay())%7*864e5),x=(v-w)/864e5/7+1;t.push('<td class="cw">'+x+"</td>")}if(s=this.getClassNames(n),s.push("day"),this.o.beforeShowDay!==a.noop){var y=this.o.beforeShowDay(this._utc_to_local(n));y===b?y={}:"boolean"==typeof y?y={enabled:y
}:"string"==typeof y&&(y={classes:y}),y.enabled===!1&&s.push("disabled"),y.classes&&(s=s.concat(y.classes.split(/\s+/))),y.tooltip&&(d=y.tooltip)}s=a.unique(s);var z,A=new Date;z=this.o.todayHighlight&&n.getUTCFullYear()===A.getFullYear()&&n.getUTCMonth()===A.getMonth()&&n.getUTCDate()===A.getDate()?"今日":n.getUTCDate(),t.push('<td class="'+s.join(" ")+'"'+(d?' title="'+d+'"':"")+'data-day="'+n.getUTCDate()+'">'+z+"</td>"),n.getUTCDay()===this.o.weekEnd&&t.push("</tr>"),n.setUTCDate(n.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(t.join(""));var B=this.picker.find(".datepicker-months").find("th:eq(1)").text(f).end().find("span").removeClass("active");a.each(this.dates,function(a,b){b.getUTCFullYear()===f&&B.eq(b.getUTCMonth()).addClass("active")}),(f<h||f>j)&&B.addClass("disabled"),f===h&&B.slice(0,i).addClass("disabled"),f===j&&B.slice(k+1).addClass("disabled"),t="",f=10*parseInt(f/10,10);var C=this.picker.find(".datepicker-years").find("th:eq(1)").text(f+"-"+(f+9)).end().find("td");f-=1;for(var D,E=a.map(this.dates,function(a){return a.getUTCFullYear()}),F=-1;F<11;F++)D=["year"],F===-1?D.push("old"):10===F&&D.push("new"),a.inArray(f,E)!==-1&&D.push("active"),(f<h||f>j)&&D.push("disabled"),t+='<span class="'+D.join(" ")+'">'+f+"</span>",f+=1;C.html(t)},updateNavArrows:function(){if(this._allow_update){var a=new Date(this.viewDate),b=a.getUTCFullYear(),c=a.getUTCMonth();switch(this.viewMode){case 0:this.o.startDate!==-(1/0)&&b<=this.o.startDate.getUTCFullYear()&&c<=this.o.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&b>=this.o.endDate.getUTCFullYear()&&c>=this.o.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:case 2:this.o.startDate!==-(1/0)&&b<=this.o.startDate.getUTCFullYear()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&b>=this.o.endDate.getUTCFullYear()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}}},click:function(b){if(b.preventDefault(),!a(b.target).parents(".timepicker-container")[0]){var d,e,f,g=a(b.target).closest("span, td, th");if(1===g.length)switch(g[0].nodeName.toLowerCase()){case"th":switch(g[0].className){case"datepicker-switch":this.showMode(1);break;case"prev":case"next":var h=p.modes[this.viewMode].navStep*("prev"===g[0].className?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveMonth(this.viewDate,h),this._trigger("changeMonth",this.viewDate);break;case 1:case 2:this.viewDate=this.moveYear(this.viewDate,h),1===this.viewMode&&this._trigger("changeYear",this.viewDate)}this.fill();break;case"today":var i=new Date;i=c(i.getFullYear(),i.getMonth(),i.getDate(),0,0,0),this.showMode(-2);var j="linked"===this.o.todayBtn?null:"view";this._setDate(i,j);break;case"clear":var k;this.isInput?k=this.element:this.component&&(k=this.element.find("input")),k&&k.val("").change(),this.update(),this._trigger("changeDate"),this.o.autoclose&&this.hide()}break;case"span":g.is(".disabled")||g.is("[data-num]")||(this.viewDate.setUTCDate(1),g.is(".month")?(f=1,e=g.parent().find("span").index(g),d=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(e),this._trigger("changeMonth",this.viewDate),1===this.o.minViewMode&&this._setDate(c(d,e,f))):(f=1,e=0,d=parseInt(g.text(),10)||0,this.viewDate.setUTCFullYear(d),this._trigger("changeYear",this.viewDate),2===this.o.minViewMode&&this._setDate(c(d,e,f))),this.showMode(-1),this.fill());break;case"td":g.is(".day")&&!g.is(".disabled")&&(f=g.data("day"),f=parseInt(f,10)||1,d=this.viewDate.getUTCFullYear(),e=this.viewDate.getUTCMonth(),g.is(".old")?0===e?(e=11,d-=1):e-=1:g.is(".new")&&(11===e?(e=0,d+=1):e+=1),this._setDate(c(d,e,f)))}this.picker.is(":visible")&&this._focused_from&&a(this._focused_from).focus(),delete this._focused_from}},_toggle_multidate:function(a){var b=this.dates.contains(a);if(a?b!==-1?this.dates.remove(b):this.dates.push(a):this.dates.clear(),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(a,b){b&&"date"!==b||this._toggle_multidate(a&&new Date(a)),b&&"view"!==b||(this.viewDate=a&&new Date(a)),this.fill(),this.setValue(),this._trigger("changeDate");var c;this.isInput?c=this.element:this.component&&(c=this.element.find("input")),c&&c.change(),!this.o.autoclose||b&&"date"!==b||this.hide()},moveMonth:function(a,c){if(!a)return b;if(!c)return a;var d,e,f=new Date(a.valueOf()),g=f.getUTCDate(),h=f.getUTCMonth(),i=Math.abs(c);if(c=c>0?1:-1,1===i)e=c===-1?function(){return f.getUTCMonth()===h}:function(){return f.getUTCMonth()!==d},d=h+c,f.setUTCMonth(d),(d<0||d>11)&&(d=(d+12)%12);else{for(var j=0;j<i;j++)f=this.moveMonth(f,c);d=f.getUTCMonth(),f.setUTCDate(g),e=function(){return d!==f.getUTCMonth()}}for(;e();)f.setUTCDate(--g),f.setUTCMonth(d);return f},moveYear:function(a,b){return this.moveMonth(a,12*b)},dateWithinRange:function(a){return a>=this.o.startDate&&a<=this.o.endDate},keydown:function(a){if(this.picker.is(":not(:visible)"))return void(27===a.keyCode&&this.show());var b,c,e,f=!1,g=this.focusDate||this.viewDate;switch(a.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),a.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;b=37===a.keyCode?-1:1,a.ctrlKey?(c=this.moveYear(this.dates.get(-1)||d(),b),e=this.moveYear(g,b),this._trigger("changeYear",this.viewDate)):a.shiftKey?(c=this.moveMonth(this.dates.get(-1)||d(),b),e=this.moveMonth(g,b),this._trigger("changeMonth",this.viewDate)):(c=new Date(this.dates.get(-1)||d()),c.setUTCDate(c.getUTCDate()+b),e=new Date(g),e.setUTCDate(g.getUTCDate()+b)),this.dateWithinRange(c)&&(this.focusDate=this.viewDate=e,this.setValue(),this.fill(),a.preventDefault());break;case 38:case 40:if(!this.o.keyboardNavigation)break;b=38===a.keyCode?-1:1,a.ctrlKey?(c=this.moveYear(this.dates.get(-1)||d(),b),e=this.moveYear(g,b),this._trigger("changeYear",this.viewDate)):a.shiftKey?(c=this.moveMonth(this.dates.get(-1)||d(),b),e=this.moveMonth(g,b),this._trigger("changeMonth",this.viewDate)):(c=new Date(this.dates.get(-1)||d()),c.setUTCDate(c.getUTCDate()+7*b),e=new Date(g),e.setUTCDate(g.getUTCDate()+7*b)),this.dateWithinRange(c)&&(this.focusDate=this.viewDate=e,this.setValue(),this.fill(),a.preventDefault());break;case 32:break;case 13:g=this.focusDate||this.dates.get(-1)||this.viewDate,this._toggle_multidate(g),f=!0,this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(a.preventDefault(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}if(f){this.dates.length?this._trigger("changeDate"):this._trigger("clearDate");var h;this.isInput?h=this.element:this.component&&(h=this.element.find("input")),h&&h.change()}},showMode:function(a){a&&(this.viewMode=Math.max(this.o.minViewMode,Math.min(2,this.viewMode+a))),this.picker.find(">div").hide().filter(".datepicker-"+p.modes[this.viewMode].clsName).css("display","block"),this.updateNavArrows()}};var k=function(b,c){this.element=a(b),this.inputs=a.map(c.inputs,function(a){return a.jquery?a[0]:a}),delete c.inputs,a(this.inputs).datepicker(c).bind("changeDate",a.proxy(this.dateUpdated,this)),this.pickers=a.map(this.inputs,function(b){return a(b).data("datepicker")}),this.updateDates()};k.prototype={updateDates:function(){this.dates=a.map(this.pickers,function(a){return a.getUTCDate()}),this.updateRanges()},updateRanges:function(){var b=a.map(this.dates,function(a){return a.valueOf()});a.each(this.pickers,function(a,c){c.setRange(b)})},dateUpdated:function(b){if(!this.updating){this.updating=!0;var c=a(b.target).data("datepicker"),d=c.getUTCDate(),e=a.inArray(b.target,this.inputs),f=this.inputs.length;if(e!==-1){a.each(this.pickers,function(a,b){b.getUTCDate()||b.setUTCDate(d)});var g=0;for(g=0;g<this.pickers.length;g++)this.dates[g]=this.pickers[g].getDate();for(g=e-1;g>=0&&d<this.dates[g];)this.pickers[g--].setUTCDate(d);if(d<this.dates[e])for(;e>=0&&d<this.dates[e];)this.pickers[e--].setUTCDate(d);else if(d>this.dates[e])for(;e<f&&d>this.dates[e];)this.pickers[e++].setUTCDate(d);this.updateDates(),delete this.updating}}},remove:function(){a.map(this.pickers,function(a){a.remove()}),delete this.element.data().datepicker}};var l=a.fn.datepicker;a.fn.datepicker=function(c){var d=Array.apply(null,arguments);d.shift();var e;return this.each(function(){var h=a(this),i=h.data("datepicker"),l="object"==typeof c&&c;if(!i){var n=f(this,"date"),o=a.extend({},m,n,l),p=g(o.language),q=a.extend({},m,p,n,l);if(h.is(".input-daterange")||q.inputs){var r={inputs:q.inputs||h.find("input").toArray()};h.data("datepicker",i=new k(this,a.extend(q,r)))}else h.data("datepicker",i=new j(this,q))}if("string"==typeof c&&"function"==typeof i[c]&&(e=i[c].apply(i,d),e!==b))return!1}),e!==b?e:this};var m=a.fn.datepicker.defaults={autoclose:!0,beforeShowDay:a.noop,calendarWeeks:!1,clearBtn:!1,daysOfWeekDisabled:[],endDate:1/0,forceParse:!0,format:"yyyy-mm-dd",keyboardNavigation:!0,language:"zh-CN",minViewMode:0,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,size:"",startDate:-(1/0),startView:0,todayBtn:!1,todayHighlight:!0,weekStart:0,timepicker:!1},n=a.fn.datepicker.locale_opts=["format","rtl","weekStart"];a.fn.datepicker.Constructor=j;var o=a.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear"},"zh-CN":{days:["星期日","星期一","星期二","星期三","星期四","星期五","星期六","星期日"],daysShort:["周日","周一","周二","周三","周四","周五","周六","周日"],daysMin:["日","一","二","三","四","五","六","日"],months:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthsShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],today:"今日",weekStart:0}},p={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(a){return a%4===0&&a%100!==0||a%400===0},getDaysInMonth:function(a,b){return[31,p.isLeapYear(a)?29:28,31,30,31,30,31,31,30,31,30,31][b]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,parseFormat:function(a){var b=a.replace(this.validParts,"\0").split("\0"),c=a.match(this.validParts);if(!b||!b.length||!c||0===c.length)throw new Error("Invalid date format.");return{separators:b,parts:c}},parseDate:function(d,e,f){function g(){var a=this.slice(0,m[k].length),b=m[k].slice(0,a.length);return a===b}if(!d)return b;if(d instanceof Date)return d;"string"==typeof e&&(e=p.parseFormat(e));var h,i,k,l=/([\-+]\d+)([dmwy])/,m=d.match(/([\-+]\d+)([dmwy])/g);if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(d)){for(d=new Date,k=0;k<m.length;k++)switch(h=l.exec(m[k]),i=parseInt(h[1]),h[2]){case"d":d.setUTCDate(d.getUTCDate()+i);break;case"m":d=j.prototype.moveMonth.call(j.prototype,d,i);break;case"w":d.setUTCDate(d.getUTCDate()+7*i);break;case"y":d=j.prototype.moveYear.call(j.prototype,d,i)}return c(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate(),0,0,0)}m=d&&d.match(this.nonpunctuation)||[],d=new Date;var n,q,r={},s=["yyyy","yy","M","MM","m","mm","d","dd"],t={yyyy:function(a,b){return a.setUTCFullYear(b)},yy:function(a,b){return a.setUTCFullYear(2e3+b)},m:function(a,b){if(isNaN(a))return a;for(b-=1;b<0;)b+=12;for(b%=12,a.setUTCMonth(b);a.getUTCMonth()!==b;)a.setUTCDate(a.getUTCDate()-1);return a},d:function(a,b){return a.setUTCDate(b)}};t.M=t.MM=t.mm=t.m,t.dd=t.d,d=c(d.getFullYear(),d.getMonth(),d.getDate(),0,0,0);var u=e.parts.slice();if(m.length!==u.length&&(u=a(u).filter(function(b,c){return a.inArray(c,s)!==-1}).toArray()),m.length===u.length){var v;for(k=0,v=u.length;k<v;k++){if(n=parseInt(m[k],10),h=u[k],isNaN(n))switch(h){case"MM":q=a(o[f].months).filter(g),n=a.inArray(q[0],o[f].months)+1;break;case"M":q=a(o[f].monthsShort).filter(g),n=a.inArray(q[0],o[f].monthsShort)+1}r[h]=n}var w,x;for(k=0;k<s.length;k++)x=s[k],x in r&&!isNaN(r[x])&&(w=new Date(d),t[x](w,r[x]),isNaN(w)||(d=w))}return d},formatDate:function(b,c,d){if(!b)return"";"string"==typeof c&&(c=p.parseFormat(c));var e={d:b.getUTCDate(),D:o[d].daysShort[b.getUTCDay()],DD:o[d].days[b.getUTCDay()],m:b.getUTCMonth()+1,M:o[d].monthsShort[b.getUTCMonth()],MM:o[d].months[b.getUTCMonth()],yy:b.getUTCFullYear().toString().substring(2),yyyy:b.getUTCFullYear()};e.dd=(e.d<10?"0":"")+e.d,e.mm=(e.m<10?"0":"")+e.m,b=[];for(var f=a.extend([],c.separators),g=0,h=c.parts.length;g<=h;g++)f.length&&b.push(f.shift()),b.push(e[c.parts[g]]);return b.join("")},headTemplate:'<thead><tr class="date-header"><th class="prev"><b></b></th><th colspan="5" class="datepicker-switch"></th><th class="next"><b></b></th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>',timepicerTemplate:'<div class="timepicker-container"></div>'};p.template='<div class="datepicker"><div class="datepicker-days clearfix"><table class=" table-condensed">'+p.headTemplate+"<tbody></tbody>"+p.footTemplate+"</table>"+p.timepicerTemplate+'</div><div class="datepicker-months"><table class="table-condensed">'+p.headTemplate+p.contTemplate+p.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+p.headTemplate+p.contTemplate+p.footTemplate+"</table></div></div>",a.fn.datepicker.DPGlobal=p,a.fn.datepicker.noConflict=function(){return a.fn.datepicker=l,this},a(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-toggle="datepicker"]',function(b){var c=a(this);c.data("datepicker")||(b.preventDefault(),c.datepicker("show"))}),a(function(){a('[data-toggle="datepicker-inline"]').datepicker()})}(window.jQuery,void 0)},{}],6:[function(a,b,c){!function(a){"use strict";var b="[data-toggle=dropdown]",c=".sui-dropdown, .sui-dropup",d=function(){a(".sui-dropdown.open, .sui-dropup.open, .sui-btn-group.open").each(function(){a(this).removeClass("open")})},e=function(a){var b=a.parent();return b.hasClass("dropdown-inner")?b.parent():b},f=function(){d();var b=a(this),c=e(b);if(!c.is(".disabled, :disabled"))return c.addClass("open"),b.focus(),!1},g=function(){var b=a(this),c=e(b);if(!c.is(".disabled, :disabled"))return c.removeClass("open"),b.focus(),!1},h=function(){var b=a(this),c=e(b),f=c.hasClass("open");if(d(),!c.is(".disabled, :disabled"))return f?c.removeClass("open"):c.addClass("open"),b.focus(),!1},i=function(){var c=a(this),d=c.parent(),e=c.parents(".sui-dropdown, .sui-dropup"),f=e.find("[role='menu']");d.is(".disabled, :disabled")||e.is(".disabled, :disabled")||(e.find("input").val(c.attr("value")||"").trigger("change"),e.find(b+" span").html(c.html()),f.find(".active").removeClass("active"),d.addClass("active"))};a(document).on("mouseover",c,function(){var b,c=a(this);(b=c.find('[data-trigger="hover"]')[0])&&f.call(b)}),a(document).on("mouseleave",c,function(){var b,c=a(this);(b=c.find('[data-trigger="hover"]')[0])&&g.call(b)}),a(document).on("click","[data-toggle='dropdown']",h),a(document).on("click",function(){var b=a(this);b.is(c)||b.parents(c)[0]||d()}),a(document).on("click",".select .sui-dropdown-menu a",i),a.fn.dropdown=function(b){return this.each(function(){if(a(this).attr("data-toggle","dropdown"),"string"==typeof b)switch(b){case"show":f.call(this);break;case"hide":g.call(this);break;case"toggle":h.call(this)}})}}(window.jQuery)},{}],7:[function(a,b,c){!function(a){"use strict";a.extend({filesize:function(a,b){var c,d="",e=b||{},f=Number(a),g=["B","kB","MB","GB","TB","PB","EB","ZB","YB"],h=void 0!==e.round?e.round:2;if(isNaN(a)||f<0)throw new Error("无效的size参数");return 0===f?d="0B":(c=Math.floor(Math.log(f)/Math.log(1e3)),c>8&&(d*=1e3*(c-8),c=8),d=f/Math.pow(2,10*c),d=d.toFixed(c>0?h:0)+g[c]),d}})}(jQuery)},{}],8:[function(a,b,c){!function(a){function b(a,b){this._targetElement=a,this._options=c(b)}function c(c){return c=a.extend({},b.prototype.defaults,c)}function d(a){var b=[],c=this,d=[];if(this._options.steps)for(var f=0,j=this._options.steps.length;f<j;f++){var l=e(this._options.steps[f]);if(l.step=b.length+1,"string"==typeof l.element&&(l.element=document.querySelector(l.element)),"undefined"==typeof l.element||null===l.element){var m=document.querySelector(".introjsFloatingElement");null===m&&(m=document.createElement("div"),m.className="introjsFloatingElement",document.body.appendChild(m)),l.element=m,l.position="floating"}null!==l.element&&b.push(l)}else{if(d=a.querySelectorAll("*[data-intro]"),d.length<1)return!1;for(var f=0,n=d.length;f<n;f++){var o=d[f],q=parseInt(o.getAttribute("data-step"),10);q>0&&(b[q-1]={element:o,intro:o.getAttribute("data-intro"),step:parseInt(o.getAttribute("data-step"),10),tooltipClass:o.getAttribute("data-tooltipClass"),position:o.getAttribute("data-position")||this._options.tooltipPosition})}for(var r=0,f=0,n=d.length;f<n;f++){var o=d[f];if(null===o.getAttribute("data-step")){for(;;){if("undefined"==typeof b[r])break;r++}b[r]={element:o,intro:o.getAttribute("data-intro"),step:r+1,tooltipClass:o.getAttribute("data-tooltipClass"),position:o.getAttribute("data-position")||this._options.tooltipPosition}}}}for(var s=[],t=0;t<b.length;t++)b[t]&&s.push(b[t]);if(b=s,b.sort(function(a,b){return a.step-b.step}),c._introItems=b,p.call(c,a)){g.call(c);a.querySelector(".introjs-skipbutton"),a.querySelector(".introjs-nextbutton");c._onKeyDown=function(b){27===b.keyCode&&c._options.exitOnEsc===!0?(i.call(c,a),void 0!==c._introExitCallback&&c._introExitCallback.call(c)):37===b.keyCode?h.call(c):39!==b.keyCode&&13!==b.keyCode||(g.call(c),b.preventDefault?b.preventDefault():b.returnValue=!1)},c._onResize=function(a){k.call(c,document.querySelector(".sui-introjs-helperLayer"))},window.addEventListener?(this._options.keyboardNavigation&&window.addEventListener("keydown",c._onKeyDown,!0),window.addEventListener("resize",c._onResize,!0)):document.attachEvent&&(this._options.keyboardNavigation&&document.attachEvent("onkeydown",c._onKeyDown),document.attachEvent("onresize",c._onResize))}return!1}function e(a){if(null===a||"object"!=typeof a||"undefined"!=typeof a.nodeType)return a;var b={};for(var c in a)b[c]=e(a[c]);return b}function f(a){this._currentStep=a-2,"undefined"!=typeof this._introItems&&g.call(this)}function g(){if(this._direction="forward","undefined"==typeof this._currentStep?this._currentStep=0:++this._currentStep,this._introItems.length<=this._currentStep)return"function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),void i.call(this,this._targetElement);var a=this._introItems[this._currentStep];"undefined"!=typeof this._introBeforeChangeCallback&&this._introBeforeChangeCallback.call(this,a.element),l.call(this,a)}function h(){if(this._direction="backward",0===this._currentStep)return!1;var a=this._introItems[--this._currentStep];"undefined"!=typeof this._introBeforeChangeCallback&&this._introBeforeChangeCallback.call(this,a.element),l.call(this,a)}function i(a){var b=a.querySelector(".sui-introjs-overlay");if(null!==b){b.style.opacity=0,setTimeout(function(){b.parentNode&&b.parentNode.removeChild(b)},500);var c=a.querySelector(".sui-introjs-helperLayer");c&&c.parentNode.removeChild(c);var d=document.querySelector(".introjsFloatingElement");d&&d.parentNode.removeChild(d);var e=document.querySelector(".introjs-showElement");e&&(e.className=e.className.replace(/introjs-[a-zA-Z]+/g,"").replace(/^\s+|\s+$/g,""));var f=document.querySelectorAll(".introjs-fixParent");if(f&&f.length>0)for(var g=f.length-1;g>=0;g--)f[g].className=f[g].className.replace(/introjs-fixParent/g,"").replace(/^\s+|\s+$/g,"");window.removeEventListener?window.removeEventListener("keydown",this._onKeyDown,!0):document.detachEvent&&document.detachEvent("onkeydown",this._onKeyDown),this._currentStep=void 0}}function j(a,b,c,d){var e,f,g,h="";if(b.style.top=null,b.style.right=null,b.style.bottom=null,b.style.left=null,b.style.marginLeft=null,b.style.marginTop=null,c.style.display="inherit","undefined"!=typeof d&&null!==d&&(d.style.top=null,d.style.left=null),this._introItems[this._currentStep]){e=this._introItems[this._currentStep],h="string"==typeof e.tooltipClass?e.tooltipClass:this._options.tooltipClass,b.className=("introjs-tooltip "+h).replace(/^\s+|\s+$/g,"");var h=this._options.tooltipClass;switch(currentTooltipPosition=this._introItems[this._currentStep].position,currentTooltipPosition){case"top":b.style.left="15px",b.style.top="-"+(q(b).height+10)+"px",c.className="introjs-arrow bottom";break;case"right":b.style.left=q(a).width+20+"px",c.className="introjs-arrow left";break;case"left":this._options.showStepNumbers===!0&&(b.style.top="15px"),b.style.right=q(a).width+20+"px",c.className="introjs-arrow right";break;case"floating":c.style.display="none",f=q(b),b.style.left="50%",b.style.top="50%",b.style.marginLeft="-"+f.width/2+"px",b.style.marginTop="-"+f.height/2+"px","undefined"!=typeof d&&null!==d&&(d.style.left="-"+(f.width/2+18)+"px",d.style.top="-"+(f.height/2+18)+"px");break;case"bottom-right-aligned":c.className="introjs-arrow top-right",b.style.right="0px",b.style.bottom="-"+(q(b).height+10)+"px";break;case"bottom-middle-aligned":g=q(a),f=q(b),c.className="introjs-arrow top-middle",b.style.left=g.width/2-f.width/2+"px",b.style.bottom="-"+(f.height+10)+"px";break;default:b.style.bottom="-"+(q(b).height+10)+"px",c.className="introjs-arrow top"}}}function k(a){if(a){if(!this._introItems[this._currentStep])return;var b=this._introItems[this._currentStep],c=q(b.element),d=10;"floating"===b.position&&(d=0),a.setAttribute("style","width: "+(c.width+d)+"px; height:"+(c.height+d)+"px; top:"+(c.top-5)+"px;left: "+(c.left-5)+"px;")}}function l(a){"undefined"!=typeof this._introChangeCallback&&this._introChangeCallback.call(this,a.element);var b=this,c=document.querySelector(".sui-introjs-helperLayer");q(a.element);if(null!==c){var d=c.querySelector(".introjs-helperNumberLayer"),e=c.querySelector(".introjs-tooltiptext"),f=c.querySelector(".introjs-arrow"),l=c.querySelector(".introjs-tooltip"),p=c.querySelector(".introjs-skipbutton"),r=c.querySelector(".introjs-prevbutton"),s=c.querySelector(".introjs-nextbutton");if(l.style.opacity=0,null!==d){var t=this._introItems[a.step-2>=0?a.step-2:0];(null!==t&&"forward"===this._direction&&"floating"===t.position||"backward"===this._direction&&"floating"===a.position)&&(d.style.opacity=0)}k.call(b,c);var u=document.querySelectorAll(".introjs-fixParent");if(u&&u.length>0)for(var v=u.length-1;v>=0;v--)u[v].className=u[v].className.replace(/introjs-fixParent/g,"").replace(/^\s+|\s+$/g,"");var w=document.querySelector(".introjs-showElement");w.className=w.className.replace(/introjs-[a-zA-Z]+/g,"").replace(/^\s+|\s+$/g,""),b._lastShowElementTimer&&clearTimeout(b._lastShowElementTimer),b._lastShowElementTimer=setTimeout(function(){null!==d&&(d.innerHTML=a.step),e.innerHTML=a.intro,j.call(b,a.element,l,f,d),c.querySelector(".introjs-bullets li > a.active").className="",c.querySelector('.introjs-bullets li > a[data-stepnumber="'+a.step+'"]').className="active",l.style.opacity=1,d&&(d.style.opacity=1)},350)}else{var x=document.createElement("div"),y=document.createElement("div"),z=document.createElement("div"),A=document.createElement("div"),B=document.createElement("div"),C=document.createElement("div");x.className="sui-introjs-helperLayer",k.call(b,x),this._targetElement.appendChild(x),y.className="introjs-arrow",A.className="introjs-tooltiptext",A.innerHTML=a.intro,B.className="introjs-bullets",this._options.showBullets===!1&&(B.style.display="none");for(var D=document.createElement("ul"),E=function(){b.goToStep(this.getAttribute("data-stepnumber"))},v=0,F=this._introItems.length;v<F;v++){var G=document.createElement("li"),H=document.createElement("a");H.onclick=E,0===v&&(H.className="active"),H.href="javascript:void(0);",H.innerHTML="&nbsp;",H.setAttribute("data-stepnumber",this._introItems[v].step),G.appendChild(H),D.appendChild(G)}if(B.appendChild(D),C.className="introjs-tooltipbuttons",this._options.showButtons===!1&&(C.style.display="none"),z.className="introjs-tooltip",z.appendChild(A),z.appendChild(B),this._options.showStepNumbers===!0){var I=document.createElement("span");I.className="introjs-helperNumberLayer",I.innerHTML=a.step,x.appendChild(I)}z.appendChild(y),x.appendChild(z);var s=document.createElement("a");s.onclick=function(){b._introItems.length-1!==b._currentStep&&g.call(b)},s.href="javascript:void(0);",s.innerHTML=this._options.nextLabel;var r=document.createElement("a");r.onclick=function(){0!==b._currentStep&&h.call(b)},r.href="javascript:void(0);",r.innerHTML=this._options.prevLabel;var p=document.createElement("a");p.className="sui-btn introjs-skipbutton",p.href="javascript:void(0);",p.innerHTML=this._options.skipLabel,p.onclick=function(){b._introItems.length-1===b._currentStep&&"function"==typeof b._introCompleteCallback&&b._introCompleteCallback.call(b),b._introItems.length-1!==b._currentStep&&"function"==typeof b._introExitCallback&&b._introExitCallback.call(b),i.call(b,b._targetElement)},C.appendChild(p),this._introItems.length>1&&(C.appendChild(r),C.appendChild(s)),z.appendChild(C),j.call(b,a.element,z,y,I)}0===this._currentStep&&this._introItems.length>1?(r.className="sui-btn introjs-prevbutton disabled",s.className="sui-btn introjs-nextbutton",p.innerHTML=this._options.skipLabel):this._introItems.length-1===this._currentStep||1===this._introItems.length?(p.innerHTML=this._options.doneLabel,r.className="sui-btn introjs-prevbutton",s.className="sui-btn introjs-nextbutton disabled"):(r.className="sui-btn introjs-prevbutton",s.className="sui-btn introjs-nextbutton",p.innerHTML=this._options.skipLabel),s.focus(),a.element.className+=" introjs-showElement";var J=m(a.element,"position");"absolute"!==J&&"relative"!==J&&(a.element.className+=" introjs-relativePosition");for(var K=a.element.parentNode;null!==K&&"body"!==K.tagName.toLowerCase();){var L=m(K,"z-index"),M=parseFloat(m(K,"opacity"));(/[0-9]+/.test(L)||M<1)&&(K.className+=" introjs-fixParent"),K=K.parentNode}if(!o(a.element)&&this._options.scrollToElement===!0){var N=a.element.getBoundingClientRect(),O=n().height,P=N.bottom-(N.bottom-N.top),Q=N.bottom-O;P<0||a.element.clientHeight>O?window.scrollBy(0,P-30):window.scrollBy(0,Q+100)}"undefined"!=typeof this._introAfterChangeCallback&&this._introAfterChangeCallback.call(this,a.element)}function m(a,b){var c="";return a.currentStyle?c=a.currentStyle[b]:document.defaultView&&document.defaultView.getComputedStyle&&(c=document.defaultView.getComputedStyle(a,null).getPropertyValue(b)),c&&c.toLowerCase?c.toLowerCase():c}function n(){if(void 0!==window.innerWidth)return{width:window.innerWidth,height:window.innerHeight};var a=document.documentElement;return{width:a.clientWidth,height:a.clientHeight}}function o(a){var b=a.getBoundingClientRect();return b.top>=0&&b.left>=0&&b.bottom+80<=window.innerHeight&&b.right<=window.innerWidth}function p(a){var b=document.createElement("div"),c="",d=this;if(b.className="sui-introjs-overlay","body"===a.tagName.toLowerCase())c+="top: 0;bottom: 0; left: 0;right: 0;position: fixed;",b.setAttribute("style",c);else{var e=q(a);e&&(c+="width: "+e.width+"px; height:"+e.height+"px; top:"+e.top+"px;left: "+e.left+"px;",b.setAttribute("style",c))}return a.appendChild(b),b.onclick=function(){d._options.exitOnOverlayClick===!0&&(i.call(d,a),void 0!==d._introExitCallback&&d._introExitCallback.call(d))},setTimeout(function(){c+="opacity: "+d._options.overlayOpacity.toString()+";",b.setAttribute("style",c)},10),!0}function q(a){var b={};b.width=a.offsetWidth,b.height=a.offsetHeight;for(var c=0,d=0;a&&!isNaN(a.offsetLeft)&&!isNaN(a.offsetTop);)c+=a.offsetLeft,d+=a.offsetTop,a=a.offsetParent;return b.top=d,b.left=c,b}function r(a,b){var c={};for(var d in a)c[d]=a[d];for(var d in b)c[d]=b[d];return c}var s="0.9.0",t=function(c,d){if(a.isPlainObject(c)||!c&&!d)return d=c,new b(document.body,d);if(c.tagName)return new b(c,d);if("string"==typeof c){var e=document.querySelector(c);if(e)return new b(e,d);throw new Error("There is no element with given selector.")}};t.version=s,b.prototype={defaults:{nextLabel:'下一步 <i class="sui-icon icon-double-angle-right"></i> ',prevLabel:'<i class="sui-icon icon-double-angle-left"></i> 上一步',skipLabel:"知道了",doneLabel:"知道了",tooltipPosition:"bottom",tooltipClass:"",exitOnEsc:!0,exitOnOverlayClick:!0,showStepNumbers:!0,keyboardNavigation:!0,showButtons:!0,showBullets:!1,scrollToElement:!0,overlayOpacity:.8},clone:function(){return new b(this)},setOption:function(a,b){return this._options[a]=b,this},setOptions:function(a){return this._options=r(this._options,a),this},start:function(){return d.call(this,this._targetElement),this},goToStep:function(a){return f.call(this,a),this},nextStep:function(){return g.call(this),this},previousStep:function(){return h.call(this),this},exit:function(){i.call(this,this._targetElement)},refresh:function(){return k.call(this,document.querySelector(".sui-introjs-helperLayer")),this},onbeforechange:function(a){if("function"!=typeof a)throw new Error("Provided callback for onbeforechange was not a function");return this._introBeforeChangeCallback=a,this},onchange:function(a){if("function"!=typeof a)throw new Error("Provided callback for onchange was not a function.");return this._introChangeCallback=a,this},onafterchange:function(a){if("function"!=typeof a)throw new Error("Provided callback for onafterchange was not a function");return this._introAfterChangeCallback=a,this},oncomplete:function(a){if("function"!=typeof a)throw new Error("Provided callback for oncomplete was not a function.");return this._introCompleteCallback=a,this},onexit:function(a){if("function"!=typeof a)throw new Error("Provided callback for onexit was not a function.");return this._introExitCallback=a,this}},a.introJs=t}(jQuery)},{}],9:[function(a,b,c){!function(a){"use strict";var b=function(b,c){if(this.options=c,null===b){var d='<div class="sui-modal hide fade" tabindex="-1" role="dialog" id={%id%} data-hidetype="remove"><div class="modal-dialog"><div class="modal-content"><div class="modal-header">'+(c.closeBtn?'<button type="button" class="sui-close" data-dismiss="modal" aria-hidden="true">&times;</button>':"")+'<h4 class="modal-title">{%title%}</h4></div><div class="modal-body '+(c.hasfoot?"":"no-foot")+'">{%body%}</div>'+(c.hasfoot?'<div class="modal-footer"><button type="button" class="sui-btn btn-primary btn-large" data-ok="modal">{%ok_btn%}</button>'+(c.cancelBtn?'<button type="button" class="sui-btn btn-default btn-large" data-dismiss="modal">{%cancel_btn%}</button>':"")+"</div>":"")+"</div></div></div>";b=a(d.replace("{%title%}",c.title).replace("{%body%}",c.body).replace("{%id%}",c.id).replace("{%ok_btn%}",c.okBtn).replace("{%cancel_btn%}",c.cancelBtn)),a("body").append(b)}this.$element=a(b),c.transition||a(b).removeClass("fade"),this.init()};b.prototype={constructor:b,init:function(){var b=this.$element,c=this.options,d=c.width,e=c.height,f={small:440,normal:590,large:790};b.delegate('[data-dismiss="modal"]',"click.dismiss.modal",a.proxy(this.hide,this)).delegate(':not(.disabled)[data-ok="modal"]',"click.ok.modal",a.proxy(this.okHide,this)),d&&(f[d]&&(d=f[d]),b.width(d).css("margin-left",-parseInt(d)/2)),e&&b.find(".modal-body").height(e),"string"==typeof this.options.remote&&this.$element.find(".modal-body").load(this.options.remote);
},toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var b=this,c=a.Event("show"),d=this.$element;if(d.trigger(c),!this.isShown&&!c.isDefaultPrevented())return this.isShown=!0,this.escape(),this.backdrop(function(){function c(a){a.$element.focus().trigger("shown"),a.options.timeout>0&&(a.timeid=setTimeout(function(){a.hide()},a.options.timeout))}var e=a.support.transition&&d.hasClass("fade");d.parent().length||d.appendTo(document.body),b.resize(),d.show(),e&&d[0].offsetWidth,d.addClass("in").attr("aria-hidden",!1),b.enforceFocus(),e?d.one(a.support.transition.end,function(){c(b)}):c(b)}),d},hide:function(b){b&&b.preventDefault();var c=this.$element;if(b=a.Event("hide"),"ok"!=this.hideReason&&c.trigger("cancelHide"),c.trigger(b),this.isShown&&!b.isDefaultPrevented())return this.isShown=!1,this.escape(),a(document).off("focusin.modal"),this.timeid&&clearTimeout(this.timeid),c.removeClass("in").attr("aria-hidden",!0),a.support.transition&&c.hasClass("fade")?this.hideWithTransition():this.hideModal(),c},okHide:function(b){function c(){d.hideReason="ok",d.hide(b)}var d=this;if(!b)return void c();var e=this.options.okHide,f=!0;if(!e){var g=a._data(this.$element[0],"events").okHide;g&&g.length&&(e=g[g.length-1].handler)}return"function"==typeof e&&(f=e.call(this)),f!==!1&&c(),d.$element},shadeIn:function(){var b=this.$element;if(!b.find(".shade").length){var c=a('<div class="shade in" style="background:'+this.options.bgcolor+'"></div>');return c.appendTo(b),this.hasShaded=!0,this.$element}},shadeOut:function(){return this.$element.find(".shade").remove(),this.hasShaded=!1,this.$element},shadeToggle:function(){return this[this.hasShaded?"shadeOut":"shadeIn"]()},resize:function(){var b=this.$element,c=b.height(),d=a(window).height(),e=0;return e=c>=d?-d/2:(d-c)/(1+1.618)-d/2,b.css("margin-top",parseInt(e)),b},enforceFocus:function(){var b=this;a(document).off("focusin.modal").on("focusin.modal",function(a){b.$element[0]===a.target||b.$element.has(a.target).length||b.$element.focus()})},escape:function(){var a=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(b){27==b.which&&a.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var b=this,c=setTimeout(function(){b.$element.off(a.support.transition.end),b.hideModal()},300);this.$element.one(a.support.transition.end,function(){clearTimeout(c),b.hideModal()})},hideModal:function(){var a=this,b=this.$element;b.hide(),this.backdrop(function(){a.removeBackdrop(),b.trigger("ok"==a.hideReason?"okHidden":"cancelHidden"),a.hideReason=null,b.trigger("hidden"),"remove"==b.data("hidetype")&&b.remove()})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(b){var c=this.$element.hasClass("fade")?"fade":"",d=this.options;if(this.isShown){var e=a.support.transition&&c;if(d.backdrop!==!1){if(this.$backdrop=a('<div class="sui-modal-backdrop '+c+'" style="background:'+d.bgcolor+'"/>').appendTo(document.body),this.$backdrop.click("static"==d.backdrop?a.proxy(this.$element[0].focus,this.$element[0]):a.proxy(this.hide,this)),e&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in "),!b)return;e?this.$backdrop.one(a.support.transition.end,b):b()}else b&&b()}else this.$backdrop?(this.$backdrop.removeClass("in"),a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(a.support.transition.end,b):b()):b&&b()}};var c=a.fn.modal;a.fn.modal=function(c){return this.each(function(){var d=a(this),e=d.data("modal"),f=a.extend({},a.fn.modal.defaults,d.data(),"object"==typeof c&&c);e||d.data("modal",e=new b(this,f)),"string"==typeof c?e[c]():e.show()})},a.fn.modal.defaults={backdrop:!0,bgcolor:"#000",keyboard:!0,hasfoot:!0,closeBtn:!0,transition:!0},a.fn.modal.Constructor=b,a.fn.modal.noConflict=function(){return a.fn.modal=c,this},a(document).on("click.modal.data-api",'[data-toggle="modal"]',function(b){var c=a(this),d=c.attr("href"),e=a(c.attr("data-target")||d&&d.replace(/.*(?=#[^\s]+$)/,"")),f=e.data("modal")?"toggle":c.data();b.preventDefault(),e.modal(f).one("hide",function(){c.focus()})}),a.extend({_modal:function(c,d){function e(b,c){var d=["show","shown","hide","hidden","okHidden","cancelHide","cancelHidden"];a.each(d,function(d,e){"function"==typeof c[e]&&a(document).on(e,"#"+b,a.proxy(c[e],a("#"+b)[0]))})}var f=+new Date,g=a.extend({},a.fn.modal.defaults,c,{id:f,okBtn:"确定"},"string"==typeof d?{body:d}:d),h=new b(null,g),i=h.$element;return e(f,g),i.data("modal",h).modal("show"),i},alert:function(b){var c={type:"alert",title:"注意"};return a._modal(c,b)},confirm:function(b){var c={type:"confirm",title:"提示",cancelBtn:"取消"};return a._modal(c,b)}})}(window.jQuery)},{}],10:[function(a,b,c){!function(a){a(document).on("click.msgs",'[data-dismiss="msgs"]',function(b){b.preventDefault();var c=a(this),d=c.parents(".sui-msg").remove(),e=d.attr("id");e&&d.hasClass("remember")&&localStorage.setItem("sui-msg-"+e,1)}),a(function(){a(".sui-msg.remember").each(function(){var b=a(this),c=b.attr("id");c&&(localStorage.getItem("sui-msg-"+c)||b.show())})})}(window.jQuery)},{}],11:[function(a,b,c){!function(a){function b(b){this.itemsCount=b.itemsCount,this.pageSize=b.pageSize,this.displayPage=b.displayPage<5?5:b.displayPage,this.pages=Math.ceil(b.itemsCount/b.pageSize)||1,a.isNumeric(b.pages)&&(this.pages=b.pages),this.currentPage=b.currentPage,this.styleClass=b.styleClass,this.onSelect=b.onSelect,this.showCtrl=b.showCtrl,this.remote=b.remote,this.displayInfoType="itemsCount"==b.displayInfoType&&b.itemsCount?"itemsCount":"pages"}b.prototype={_draw:function(){for(var a='<div class="sui-pagination',b=0;b<this.styleClass.length;b++)a+=" "+this.styleClass[b];a+='"></div>',this.hookNode.html(a),this._drawInner()},_drawInner:function(){var a=this.hookNode.children(".sui-pagination"),b='<ul><li class="prev'+(this.currentPage-1<=0?" disabled":" ")+'"><a href="#" data="'+(this.currentPage-1)+'">«上一页</a></li>';if(this.pages<=this.displayPage||this.pages==this.displayPage+1)for(var c=1;c<this.pages+1;c++)b+=c==this.currentPage?'<li class="active"><a href="#" data="'+c+'">'+c+"</a></li>":'<li><a href="#" data="'+c+'">'+c+"</a></li>";else if(this.currentPage<this.displayPage-1){for(var c=1;c<this.displayPage;c++)b+=c==this.currentPage?'<li class="active"><a href="#" data="'+c+'">'+c+"</a></li>":'<li><a href="#" data="'+c+'">'+c+"</a></li>";b+='<li class="dotted"><span>...</span></li>',b+='<li><a href="#" data="'+this.pages+'">'+this.pages+"</a></li>"}else if(this.currentPage>this.pages-this.displayPage+2&&this.currentPage<=this.pages){b+='<li><a href="#" data="1">1</a></li>',b+='<li class="dotted"><span>...</span></li>';for(var c=this.pages-this.displayPage+2;c<=this.pages;c++)b+=c==this.currentPage?'<li class="active"><a href="#" data="'+c+'">'+c+"</a></li>":'<li><a href="#" data="'+c+'">'+c+"</a></li>"}else{b+='<li><a href="#" data="1">1</a></li>',b+='<li class="dotted"><span>...</span></li>';var d,e,f=(this.displayPage-3)/2;(this.displayPage-3)%2==0?d=e=f:(d=Math.floor(f),e=Math.ceil(f));for(var c=this.currentPage-d;c<=this.currentPage+e;c++)b+=c==this.currentPage?'<li class="active"><a href="#" data="'+c+'">'+c+"</a></li>":'<li><a href="#" data="'+c+'">'+c+"</a></li>";b+='<li class="dotted"><span>...</span></li>',b+='<li><a href="#" data="'+this.pages+'">'+this.pages+"</a></li>"}b+='<li class="next'+(this.currentPage+1>this.pages?" disabled":" ")+'"><a href="#" data="'+(this.currentPage+1)+'">下一页»</a></li></ul>',this.showCtrl&&(b+=this._drawCtrl()),a.html(b)},_drawCtrl:function(){var a="<div>&nbsp;"+("itemsCount"==this.displayInfoType?"<span>共"+this.itemsCount+"条</span>&nbsp;":"<span>共"+this.pages+"页</span>&nbsp;")+'<span>&nbsp;到&nbsp;<input type="text" class="page-num"/><button class="page-confirm">确定</button>&nbsp;页</span></div>';return a},_ctrl:function(){function b(){var b=parseInt(d.find(".page-num").val());a.isNumeric(b)&&b<=c.pages&&b>0&&(c.remote||(c.currentPage=b,c._drawInner()),a.isFunction(c.onSelect)&&c.onSelect.call(a(this),b))}var c=this,d=c.hookNode.children(".sui-pagination");d.on("click",".page-confirm",function(a){b.call(this)}),d.on("keypress",".page-num",function(a){13==a.which&&b.call(this)})},_select:function(){var b=this;b.hookNode.children(".sui-pagination").on("click","a",function(c){c.preventDefault();var d=parseInt(a(this).attr("data"));a(this).parent().hasClass("disabled")||a(this).parent().hasClass("active")||(b.remote||(b.currentPage=d,b._drawInner()),a.isFunction(b.onSelect)&&b.onSelect.call(a(this),d))})},init:function(a,b){return this.hookNode=b,this._draw(),this._select(),this.showCtrl&&this._ctrl(),this},updateItemsCount:function(b,c){a.isNumeric(b)&&(this.pages=Math.ceil(b/this.pageSize)),this.currentPage=this.currentPage>this.pages?this.pages:this.currentPage,a.isNumeric(c)&&(this.currentPage=c),this._drawInner()},updatePages:function(b,c){a.isNumeric(b)&&(this.pages=b),this.currentPage=this.currentPage>this.pages?this.pages:this.currentPage,a.isNumeric(c)&&(this.currentPage=c),this._drawInner()},goToPage:function(b){a.isNumeric(b)&&b<=this.pages&&b>0&&(this.currentPage=b,this._drawInner())}};var c=a.fn.pagination;a.fn.pagination=function(c){var d=a.extend({},a.fn.pagination.defaults,"object"==typeof c&&c);"string"==typeof c&&(args=a.makeArray(arguments),args.shift());var e=a(this),f=e.data("sui-pagination");return f?"string"==typeof c&&f[c].apply(f,args):e.data("sui-pagination",f=new b(d).init(d,a(this))),f},a.fn.pagination.Constructor=b,a.fn.pagination.noConflict=function(){return a.fn.pagination=c,this},a.fn.pagination.defaults={pageSize:10,displayPage:5,currentPage:1,itemsCount:0,styleClass:[],pages:null,showCtrl:!1,onSelect:null,remote:!1}}(window.jQuery)},{}],12:[function(a,b,c){a("./transition"),a("./msgs"),a("./filesize"),a("./button"),a("./dropdown"),a("./modal"),a("./tooltip"),a("./tab"),a("./pagination"),a("./validate"),a("./validate-rules"),a("./tree"),a("./datepicker"),a("./timepicker"),a("./checkbox"),a("./autocomplete"),a("./intro"),a("./carousel"),a("./template")},{"./autocomplete":1,"./button":2,"./carousel":3,"./checkbox":4,"./datepicker":5,"./dropdown":6,"./filesize":7,"./intro":8,"./modal":9,"./msgs":10,"./pagination":11,"./tab":13,"./template":14,"./timepicker":15,"./tooltip":16,"./transition":17,"./tree":18,"./validate":20,"./validate-rules":19}],13:[function(a,b,c){!function(a){"use strict";var b=function(b){this.element=a(b)};b.prototype={constructor:b,show:function(){var b,c,d,e=this.element,f=e.closest("ul:not(.dropdown-menu)"),g=e.attr("data-target");g||(g=e.attr("href"),g=g&&g.replace(/.*(?=#[^\s]*$)/,"")),e.parent("li").hasClass("active")||(b=f.find(".active:last a")[0],d=a.Event("show",{relatedTarget:b}),e.trigger(d),d.isDefaultPrevented()||(c=a(g),this.activate(e.parent("li"),f),this.activate(c,c.parent(),function(){e.trigger({type:"shown",relatedTarget:b})})))},activate:function(b,c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),b.addClass("active"),g?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active"),d&&d()}var f=c.find("> .active"),g=d&&a.support.transition&&f.hasClass("fade");g?f.one(a.support.transition.end,e):e(),f.removeClass("in")}};var c=a.fn.tab;a.fn.tab=function(c){return this.each(function(){var d=a(this),e=d.data("tab");e||d.data("tab",e=new b(this)),"string"==typeof c&&e[c]()})},a.fn.tab.Constructor=b,a.fn.tab.noConflict=function(){return a.fn.tab=c,this},a(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(b){b.preventDefault(),a(this).tab("show")})}(window.jQuery)},{}],14:[function(a,b,c){!function(a){var b={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},c=function(a){var c=function(b){return a[b]},d=[];for(var e in b)d.push(e);var f="(?:"+d.join("|")+")",g=RegExp(f),h=RegExp(f,"g");return function(a){return a=null==a?"":""+a,g.test(a)?a.replace(h,c):a}};a.escape=c(b);var d={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g},e=/(.)^/,f={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},g=/\\|'|\r|\n|\u2028|\u2029/g,h=function(a){return"\\"+f[a]};a.template=function(b,c,f){!c&&f&&(c=f),c=a.extend({},c,d);var i=RegExp([(c.escape||e).source,(c.interpolate||e).source,(c.evaluate||e).source].join("|")+"|$","g"),j=0,k="__p+='";b.replace(i,function(a,c,d,e,f){return k+=b.slice(j,f).replace(g,h),j=f+a.length,c?k+="'+\n((__t=("+c+"))==null?'':_.escape(__t))+\n'":d?k+="'+\n((__t=("+d+"))==null?'':__t)+\n'":e&&(k+="';\n"+e+"\n__p+='"),a}),k+="';\n",c.variable||(k="with(obj||{}){\n"+k+"}\n"),k="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+k+"return __p;\n";try{var l=new Function(c.variable||"obj","_",k)}catch(a){throw a.source=k,a}var m=function(b){return l.call(this,b,a)},n=c.variable||"obj";return m.source="function("+n+"){\n"+k+"}",m}}(window.jQuery)},{}],15:[function(a,b,c){!function(a){function b(a,c){return this instanceof b?void this.init(a,c):new b(a,c)}b.prototype={_defaultCfg:{hour:(new Date).getHours(),minute:(new Date).getMinutes(),orientation:{x:"auto",y:"auto"},keyboardNavigation:!0},init:function(b,c){this.element=a(b),this.isInline=!1,this.isInDatepicker=!1,this.isInput=this.element.is("input"),this.component=!!this.element.is(".date")&&this.element.find(".add-on, .input-group-addon, .sui-btn"),this.hasInput=this.component&&this.element.find("input").length,this.component&&0===this.component.length&&(this.component=!1),this.picker=a('<div class="timepicker"></div>'),this.o=this.config=a.extend(this._defaultCfg,c),this._buildEvents(),this._attachEvents(),this.isInDatepicker?this.picker.addClass("timepicker-in-datepicker").appendTo(this.element):this.isInline?(this.picker.addClass("timepicker-inline").appendTo(this.element),this._show()):this.picker.addClass("timepicker-dropdown dropdown-menu")},destory:function(){this._detachSecondaryEvents(),this.picker.html(""),this.picker=null},_show:function(){this.isInline||this.isInDatepicker||this.picker.appendTo("body"),this.picker.show(),this._place(),this._render(),this._attachSecondaryEvents()},show:function(){return this._show()},_hide:function(){this.isInline||this.isInDatepicker||this.picker.is(":visible")&&(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this._setValue())},_keydown:function(a){if(!this.isInDatepicker){if(this.picker.is(":not(:visible)"))return void(27===a.keyCode&&this._show());switch(a.keyCode){case 27:this._hide(),a.preventDefault();break;case 37:case 39:if(!this.o.keyboardNavigation)break;break;case 38:case 40:if(!this.o.keyboardNavigation)break;break;case 32:break;case 13:this._hide()}}},_place:function(){if(!this.isInline&&!this.isInDatepicker){var b=this.picker.outerWidth(),c=this.picker.outerHeight(),d=10,e=a(window),f=e.width(),g=e.height(),h=e.scrollTop(),i=parseInt(this.element.parents().filter(function(){return"auto"!==a(this).css("z-index")}).first().css("z-index"))+10,j=this.component?this.component.parent().offset():this.element.offset(),k=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),l=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),m=j.left,n=j.top;this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(m-=b-l)):(this.picker.addClass("datepicker-orient-left"),j.left<0?m-=j.left-d:j.left+b>f&&(m=f-b-d));var o,p,q=this.o.orientation.y;"auto"===q&&(o=-h+j.top-c,p=h+g-(j.top+k+c),q=Math.max(o,p)===p?"top":"bottom"),this.picker.addClass("datepicker-orient-"+q),"top"===q?n+=k+6:n-=c+parseInt(this.picker.css("padding-top"))+6,this.picker.css({top:n,left:m,zIndex:i})}},_events:[],_secondaryEvents:[],_applyEvents:function(a){for(var b,c,d,e=0;e<a.length;e++)b=a[e][0],2===a[e].length?(c=void 0,d=a[e][1]):3===a[e].length&&(c=a[e][1],d=a[e][2]),b.on(d,c)},_unapplyEvents:function(a){for(var b,c,d,e=0;e<a.length;e++)b=a[e][0],2===a[e].length?(d=void 0,c=a[e][1]):3===a[e].length&&(d=a[e][1],c=a[e][2]),b.off(c,d)},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents),this._pickerEvents()},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents),this.picker.off("click")},_buildEvents:function(){this.isInput?this._events=[[this.element,{focus:a.proxy(this._show,this),keyup:a.proxy(function(b){a.inArray(b.keyCode,[27,37,39,38,40,32,13,9])===-1&&this._updateUI()},this),keydown:a.proxy(this._keydown,this)}]]:this.component&&this.hasInput?this._events=[[this.element.find("input"),{focus:a.proxy(this._show,this),keyup:a.proxy(function(b){a.inArray(b.keyCode,[27,37,39,38,40,32,13,9])===-1&&this._updateUI()},this),keydown:a.proxy(this._keydown,this)}],[this.component,{click:a.proxy(this._show,this)}]]:this.element.is("div")?this.element.is(".timepicker-container")?this.isInDatepicker=!0:this.isInline=!0:this._events=[[this.element,{click:a.proxy(this._show,this)}]],this._events.push([this.element,"*",{blur:a.proxy(function(a){this._focused_from=a.target},this)}],[this.element,{blur:a.proxy(function(a){this._focused_from=a.target},this)}]),this._secondaryEvents=[[a(window),{resize:a.proxy(this._place,this)}],[a(document),{"mousedown touchstart":a.proxy(function(a){this.element.is(a.target)||this.element.find(a.target).length||this.picker.is(a.target)||this.picker.find(a.target).length||this._hide()},this)}]]},_pickerEvents:function(){var b=this;this.picker.on("click",".J_up",function(c){var d=c.currentTarget,e=a(d).parent(),f=e.attr("data-role");b._slide(f,"up")}).on("click",".J_down",function(c){var d=c.currentTarget,e=a(d).parent(),f=e.attr("data-role");b._slide(f,"down")}).on("click","span",function(c){var d=c.currentTarget,e=a(d).parent().parent().parent(),f=e.attr("data-role"),g=d.innerHTML,h=b[f+"Attr"],i=parseInt(g-h.current,10);i>0?b._slideDonw(h,i):b._slideUp(h,-i)})},_slide:function(a,b){var c=this[a+"Attr"];"up"==b?this._slideUp(c):"down"==b&&this._slideDonw(c)},_slideDonw:function(b,c,d){c=c||1;var e=(b.cp,b.ih*c);b.current+=c,b.current>b.maxSize&&(b.current=0,e=-b.ih*b.maxSize),b.cp-=e,this._animate(b.innerPickerCon,b.cp),a(".current",b.innerPickerCon).removeClass("current"),a('span[data-num="'+b.current+'"]',b.innerPickerCon).addClass("current"),d||this._setValue()},_slideUp:function(b,c,d){c=c||1;var e=(b.cp,b.ih*c);b.current-=c,b.current<0&&(b.current=b.maxSize,e=-b.ih*b.maxSize),b.cp+=e,this._animate(b.innerPickerCon,b.cp),a(".current",b.innerPickerCon).removeClass("current"),a('span[data-num="'+b.current+'"]',b.innerPickerCon).addClass("current"),d||this._setValue()},_updateSlide:function(a,b){var c=!0;b&&b>0?this._slideDonw(a,b,c):b&&this._slideUp(a,-b,c)},_updateUI:function(){var a,b,c=this.o.minute,d=this.o.hour;this._getInputTime(),c!==this.o.minute&&(a=this.minuteAttr,b=parseInt(this.o.minute-a.current,10),this._updateSlide(a,b)),d!==this.o.hour&&(a=this.hourAttr,b=parseInt(this.o.hour-a.current,10),this._updateSlide(a,b))},_doSetValue:function(a,b){var c;this.isInput?c=this.element:this.component&&(c=this.element.find("input")),c?(c.change(),c.val(a)):this.isInDatepicker&&(this.element.data("time",a),b||this.element.trigger("time:change"))},_render:function(){this.picker.html(""),this._getInputTime(),this._renderHour(),this._renderMinutes(),this._renderSplit(),this._setValue()},_foramtTimeString:function(b){var c,d,e={minute:0,hour:0};b=b.split(":");for(var f=b.length-1;f>=0;f--)b[f]=a.trim(b[f]);return 2===b.length&&(c=parseInt(b[1],10),c>=0&&c<60&&(e.minute=c),d=parseInt(b[0],10),d>=0&&d<24&&(e.hour=d)),e},_getInputTime:function(){if(!this.isInline||!this.isInDatepicker){var b,c,d;this.isInput||this.isInDatepicker?b=this.element:this.component&&(b=this.element.find("input")),b&&(c=this.isInDatepicker?a.trim(b.data("time")):a.trim(b.val()),d=this._foramtTimeString(c),this.o.minute=d.minute,this.o.hour=d.hour)}},_juicer:function(a,b){for(var c,d="",e=b.length-1;e>=0;e--)c=b[e]==a?'<span class="current" data-num="'+e+'">'+b[e]+"</span>":'<span data-num="'+e+'">'+b[e]+"</span>",d=c+d;return'<div class="picker-wrap"><a href="javascript:;" class="picker-btn up J_up"><b class="arrow"></b><b class="arrow-bg"></b></a><div class="picker-con"><div class="picker-innercon">'+d+'</div></div><a href="javascript:;" class="picker-btn down J_down"><b class="arrow"></b><b class="arrow-bg"></b></a></div>'},_renderHour:function(){for(var b=this,c=[],d=0;d<24;d++)c.push(b._beautifyNum(d));var e=this._juicer(b.o.hour,c),f=a(e);f.attr("data-role","hour"),this.picker.append(f),this.hourAttr=this._addPrefixAndSuffix(f,23),this.hourAttr.current=this.o.hour,this.hourAttr.maxSize=23},_renderMinutes:function(){for(var b=this,c=[],d=0;d<60;d++)c.push(b._beautifyNum(d));var e=this._juicer(b.o.minute,c),f=a(e);f.attr("data-role","minute"),this.picker.append(f),this.minuteAttr=this._addPrefixAndSuffix(f,59),this.minuteAttr.current=this.o.minute,this.minuteAttr.maxSize=59},_addPrefixAndSuffix:function(b,c){for(var d,e,f=this,g=a(".picker-con",b),h=a(".picker-innercon",b),i=a(".current",b),j=i.outerHeight(),k=g.outerHeight(),l=Math.floor(k/j)+1,m="",n=c-l;n<=c;n++)m+="<span>"+f._beautifyNum(n)+"</span>";h.prepend(a(m)),m="";for(var o=0;o<l;o++)m+="<span>"+f._beautifyNum(o)+"</span>";return h.append(a(m)),d=i.offset().top-g.offset().top,e=-d+2*j,this._animate(h,e),{ph:k,cp:e,ih:j,innerPickerCon:h,scrollNum:l-1}},_renderSplit:function(){var b='<div class="timePicker-split"><div class="hour-input"></div><div class="split-icon">:</div><div class="minute-input"></div></div>';this.picker.append(a(b))},_getCurrentTimeStr:function(){var a,b,c;return c=this.hourAttr.current,b=this.minuteAttr.current,a=this._beautifyNum(c)+":"+this._beautifyNum(b)},_setValue:function(){this.isInline||this._doSetValue(this._getCurrentTimeStr())},_animate:function(b,c){a.support.transition?b.css({top:c+"px"}):b.animate({top:c+"px"},300)},_beautifyNum:function(a){return a=a.toString(),parseInt(a)<10?"0"+a:a},update:function(a,b){this._doSetValue(a,b),this._updateUI()},getTime:function(){return this._getCurrentTimeStr()}};var c=a.fn.timepicker;a.fn.timepicker=function(c){var d=Array.apply(null,arguments);d.shift();var e;return this.each(function(){var f=a(this),g=f.data("timepicker");if(g||f.data("timepicker",g=new b(this,c)),"string"==typeof c&&"function"==typeof g[c]&&(e=g[c].apply(g,d),void 0!==e))return!1}),void 0!==e?e:this},a.fn.timepicker.noConflict=function(){return a.fn.timepicker=c,this},a(document).on("focus.timepicker.data-api click.timepicker.data-api",'[data-toggle="timepicker"]',function(b){var c=a(this);c.data("timepicker")||(b.preventDefault(),c.timepicker("_show"))}),a(function(){a('[data-toggle="timepicker-inline"]').timepicker()})}(window.jQuery)},{}],16:[function(a,b,c){!function(a){"use strict";var b=function(a,b){this.init("tooltip",a,b)};b.prototype={constructor:b,init:function(b,c,d){var e,f,g,h,i;for(this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.enabled=!0,this.hoverState="out",g=this.options.trigger.split(" "),i=g.length;i--;)h=g[i],"click"==h?this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this)):"manual"!=h&&(e="hover"==h?"mouseenter":"focus",f="hover"==h?"mouseleave":"blur",this.$element.on(e+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(f+"."+this.type,this.options.selector,a.proxy(this.leave,this)));this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(b){b=a.extend({},a.fn[this.type].defaults,this.$element.data(),b);var c="confirm"==b.type?'<div class="tooltip-footer"><button class="sui-btn btn-primary" data-ok="tooltip">确定</button><button class="sui-btn btn-default" data-dismiss="tooltip">取消</button></div>':"";return b.template='<div class="sui-tooltip '+b.type+'" style="overflow:visible"><div class="tooltip-arrow"><div class="tooltip-arrow cover"></div></div><div class="tooltip-inner"></div>'+c+"</div>","confirm"==b.type&&(b.html=!0),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},enter:function(b){var c,d=a.fn[this.type].defaults,e={};if(this._options&&a.each(this._options,function(a,b){d[a]!=b&&(e[a]=b)},this),c=a(b.currentTarget)[this.type](e).data(this.type),clearTimeout(c.timeout),"out"==this.hoverState){if(this.hoverState="in",this.tip().off(a.support.transition&&a.support.transition.end),!this.options.delay||!this.options.delay.show)return this.show();this.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)}},leave:function(b){var c=a(b.currentTarget)[this.type](this._options).data(this.type);return this.timeout&&clearTimeout(this.timeout),c.options.delay&&c.options.delay.hide?void(this.timeout=setTimeout(function(){c.isTipHover||(c.hoverState="out"),"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},show:function(){function b(){var a=d.left+d.width/2-e/2,b=d.top+d.height/2-f/2;switch(k){case"left":a=d.left;break;case"right":a=d.left-e+d.width;break;case"top":b=d.top;break;case"bottom":b=d.top-f+d.height}switch(g){case"bottom":h={top:d.top+d.height+m,left:a};break;case"top":h={top:d.top-f-m,left:a};break;case"left":h={top:b,left:d.left-e-m};break;case"right":h={top:b,left:d.left+d.width+m}}return h}var c,d,e,f,g,h,i=a.Event("show"),j=this.options,k=j.align,l=this;if(this.hasContent()&&this.enabled){if(this.$element.trigger(i),i.isDefaultPrevented())return;c=this.tip(),this.setContent(),j.animation&&c.addClass("fade"),g="function"==typeof j.placement?j.placement.call(this,c[0],this.$element[0]):j.placement,c.detach().css({top:0,left:0,display:"block"}),j.container?c.appendTo(j.container):c.insertAfter(this.$element),/\bhover\b/.test(j.trigger)&&c.hover(function(){l.isTipHover=1},function(){l.isTipHover=0,l.hoverState="out",c.detach()}),this.setWidth(),d=this.getPosition(),e=c[0].offsetWidth,f=c[0].offsetHeight;var m="attention"==j.type?5:7;h=b(),this.applyPlacement(h,g),this.applyAlign(k,d),this.$element.trigger("shown")}},applyPlacement:function(a,b){var c,d,e,f,g=this.tip(),h=g[0].offsetWidth,i=g[0].offsetHeight;g.offset(a).addClass(b).addClass("in"),c=g[0].offsetWidth,d=g[0].offsetHeight,"top"==b&&d!=i&&(a.top=a.top+i-d,f=!0),"bottom"==b||"top"==b?(e=0,a.left<0&&(e=a.left*-2,a.left=0,g.offset(a),c=g[0].offsetWidth,d=g[0].offsetHeight),this.replaceArrow(e-h+c,c,"left")):this.replaceArrow(d-i,d,"top"),f&&g.offset(a)},applyAlign:function(a,b){var c=this.tip(),d=c[0].offsetWidth,e=c[0].offsetHeight,f={};switch(a){case"left":b.width<d&&(f={left:b.width/2});break;case"right":b.width<d&&(f={left:d-b.width/2});break;case"top":b.height<e&&(f={top:b.height/2});break;case"bottom":b.height<e&&(f={top:e-b.height/2})}"center"!=a&&c.find(".tooltip-arrow").first().css(f)},replaceArrow:function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},setWidth:function(){var a=this.options,b=a.width,c=a.widthlimit,d=this.tip();if(b)d.width(b);else if(c===!0)d.css("max-width","400px");else{var e;c===!1&&(e="none"),"string"==typeof a.widthlimit&&(e=c),d.css("max-width",e)}},setContent:function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},hide:function(){function b(){e.timeout=setTimeout(function(){c.off(a.support.transition.end).detach()},500),c.one(a.support.transition.end,function(){clearTimeout(e.timeout),c.detach()})}var c=this.tip(),d=a.Event("hide"),e=this,f=this.options;if(this.$element.trigger(d),!d.isDefaultPrevented())return c.removeClass("in"),"function"==typeof f.hide&&f.hide.call(e.$element),a.support.transition&&this.$tip.hasClass("fade")?b():c.detach(),this.$element.trigger("hidden"),this},fixTitle:function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&("tooltip"==a.data("toggle")?a.attr("data-original-title",a.attr("title")||"").attr("title",""):a.attr("data-original-title",""))},hasContent:function(){return this.getTitle()},getPosition:function(){var b=this.$element[0];return a.extend({},"function"==typeof b.getBoundingClientRect?b.getBoundingClientRect():{width:b.offsetWidth,height:b.offsetHeight},this.$element.offset())},getTitle:function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},tip:function(){return this.$tip=this.$tip||a(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(b){var c=b?a(b.currentTarget)[this.type](this._options).data(this.type):this;c.tip().hasClass("in")?c.hide():c.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var c=a.fn.tooltip;a.fn.tooltip=function(c){return this.each(function(){var d=a(this),e=d.data("tooltip"),f="object"==typeof c&&c;e||d.data("tooltip",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.tooltip.Constructor=b,a.fn.tooltip.defaults={animation:!0,type:"default",placement:"top",selector:!1,trigger:"hover focus",title:"it is default title",delay:{show:0,hide:200},html:!0,container:!1,widthlimit:!0,align:"center"},a.fn.tooltip.noConflict=function(){return a.fn.tooltip=c,this},a(function(){a('[data-toggle="tooltip"]').tooltip(),a(document).on("mousedown",function(b){var c=a(b.target),d=a(".sui-tooltip"),e=d.prev(),f=c.parents(".sui-tooltip");d.length&&!f.length&&c[0]!=e[0]&&c.parents("[data-original-title]")[0]!=e[0]&&e.trigger("click.tooltip")}),a(document).on("click","[data-dismiss=tooltip]",function(b){b.preventDefault(),a(b.target).parents(".sui-tooltip").prev().trigger("click.tooltip")}),a(document).on("click","[data-ok=tooltip]",function(b){b.preventDefault();var c=a(b.target).parents(".sui-tooltip").prev(),d=c.data("tooltip"),e=d.options.okHide;"function"==typeof e&&e.call(c)})})}(window.jQuery)},{}],17:[function(a,b,c){!function(a){"use strict";a(function(){a.support.transition=function(){var a=function(){var a,b=document.createElement("bootstrap"),c={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(a in c)if(void 0!==b.style[a])return c[a]}();return a&&{end:a}}()})}(window.jQuery)},{}],18:[function(a,b,c){!function(a){"use strict";var b=function(){this.data={}};b.prototype={constructor:b,query:function(a){return this.data[a]},insert:function(a,b){this.data[a]=b},clear:function(){this.data={}}};var c=function(c,d){this.$element=a(c),this.options=d,this.redis=new b},d={init:function(){this.destory(),d.bindChange.call(this),d.bindUpdate.call(this),this.$element.trigger("tree:update")},getData:function(b,c){var e=this,f=e.redis.query(b);e.options.src&&(f?d.createDom.apply(e,[f,c]):a.ajax(e.options.src,{data:e.options.key+"="+b,cache:!0,dataType:e.options.jsonp?"jsonp":"json"}).success(function(a){200==a.code&&a.data&&a.data.length&&(f=a.data,e.redis.insert(b,f),d.createDom.apply(e,[f,c]))}))},createDom:function(b,c){var d=["<select>"],e=this.options.placeholder,f=this.options.val[c];e&&d.push('<option value="">'+e+"</option>"),a.each(b,function(a,b){d.push('<option data-isleaf="'+b.isleaf+'" value="'+b.id+'" '+(b.id==f?"selected":"")+">"+b.value+"</option>")}),d.push("</select>"),d=a(d.join("")).appendTo(this.$element).trigger("change")},bindChange:function(){var b=this;this.$element.on("change.sui.tree","select",function(c){
var e=a(this),f=e.val();e.nextAll().remove(),d.saveValue.call(b),f&&(e.find("option:selected").data("isleaf")?b.options.val=[]:d.getData.apply(b,[f,e.index()+1]))})},bindUpdate:function(){var b=this;this.$element.on("tree:update",function(c){var e=a(this);e.empty(),d.getData.apply(b,[0,0])})},saveValue:function(){var b=[],c=[];this.$element.find("select").each(function(){b.push(this.value),c.push(a(this).find("option:selected").text())}),this.datas={text:c,value:b}}};c.prototype={constructor:c,getValue:a.noop,setValue:function(a){this.options.val=a,this.$element.trigger("tree:update")},destory:function(){this.$element.off("change.sui.tree").empty()}};var e=a.fn.tree;a.fn.extend({tree:function(){var b=Array.prototype.slice.call(arguments),e=b.shift();return this.each(function(){var f=a(this),g=f.data("tree"),h=a.extend({},a.fn.tree.defaults,f.data(),"object"==typeof e&&e);g||f.data("tree",g=new c(this,h)),"string"==typeof e&&"function"==typeof g[e]?g[e].apply(g,b):d.init.call(g)})}}),a.fn.tree.Constructor=c,a.fn.tree.defaults={src:"",treeType:"select",placeholder:"请选择",val:[],key:"id"},a.fn.tree.noConflict=function(){return a.fn.tree=e,this},a(function(){a('[data-toggle="tree"]').tree()})}(jQuery)},{}],19:[function(a,b,c){!function(a){Validate=a.validate,trim=function(a){return a?a.replace(/^\s+/g,"").replace(/\s+$/g,""):a};var b=function(b,c,d){a(c);return!!trim(b)},c=function(a,b){var c=function(a){var b=a[0].tagName.toUpperCase(),c=a[0].type.toUpperCase();return"CHECKBOX"==c||"RADIO"==c||"SELECT"==b?"选择":"填写"};return"请"+c(a)};Validate.setRule("required",b,c);var d=function(b,c,d){var e=a(c);if(d&&"string"==typeof d){var f=e.parents("form"),g=f.find("[name='"+d+"']");return!!g.val()}return!0};Validate.setRule("prefill",d,function(a,b){var c=function(a){var b=a[0].tagName.toUpperCase(),c=a[0].type.toUpperCase();return"CHECKBOX"==c||"RADIO"==c||"SELECT"==b?"选择":"填写"};if(b&&"string"==typeof b){var d=a.parents("form"),e=d.find("[name='"+b+"']");if(!e.val())return"请先"+c(e)+(e.attr("title")||e.attr("name"))}return"错误"});var e=function(b,c,d){return b=trim(b),b==a(c).parents("form").find("[name='"+d+"']").val()};Validate.setRule("match",e,"必须与$0相同");var f=function(a,b,c){return a=trim(a),/^\d+(.\d*)?$/.test(a)};Validate.setRule("number",f,"请输入数字");var g=function(a,b,c){return a=trim(a),/^\d+$/.test(a)};Validate.setRule("digits",g,"请输入整数");var h=function(a,b,c){return/^0?1[3|4|5|7|8][0-9]\d{8,9}$/.test(trim(a))};Validate.setRule("mobile",h,"请填写正确的手机号码");var i=function(a,b,c){return/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,11})+$/.test(trim(a))};Validate.setRule("tel",i,"请填写正确的电话号码");var j=function(a,b,c){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(trim(a))};Validate.setRule("email",j,"请填写正确的email地址");var k=function(a,b,c){return/^[1-9][0-9]{5}$/.test(trim(a))};Validate.setRule("zip",k,"请填写正确的邮编");var l=function(a,b,c){c=c||"-";var d=new RegExp("^[1|2]\\d{3}"+c+"[0-2][0-9]"+c+"[0-3][0-9]$");return d.test(trim(a))};Validate.setRule("date",l,"请填写正确的日期");var m=function(a,b,c){return/^[0-2]\d:[0-6]\d$/.test(trim(a))};Validate.setRule("time",m,"请填写正确的时间");var n=function(a,b,c){var d=new RegExp("^[1|2]\\d{3}-[0-2][0-9]-[0-3][0-9] [0-2]\\d:[0-6]\\d$");return d.test(trim(a))};Validate.setRule("datetime",n,"请填写正确的日期和时间");var o=function(a,b,c){var d;return a=trim(a),d=/(http|ftp|https):\/\/([\w-]+\.)+[\w-]+\.(com|net|cn|org|me|io|info|xxx)/,/^http/.test(a)||(a="http://"+a),d.test(a)};Validate.setRule("url",o,"请填写正确的网址");var p=function(a,b,c){return trim(a).length>=c};Validate.setRule("minlength",p,"长度不能少于$0");var q=function(a,b,c){return trim(a).length<=c};Validate.setRule("maxlength",q,"长度不能超过$0");var r=function(a,b,c){return Number(a)>c};Validate.setRule("gt",r,"必须大于$0");var s=function(a,b,c){return Number(a)<c};Validate.setRule("lt",s,"必须小于$0")}(window.jQuery)},{}],20:[function(a,b,c){!function(a){"use strict";var b=function(b,e){var f=this;this.options=a.extend({},a.fn.validate.defaults,e),this.$form=a(b).attr("novalidate","novalidate"),this.$form.submit(function(){return c.call(f)}),this.disabled=!1,this.$form.on("blur keyup change update","input, select, textarea",function(b){if(!f.disabled){var c=a(b.target);c.attr("disabled")||d.call(f,c)}}),this.errors={}};b.rules={},b.setRule=function(a,c,d){var e=b.rules[a];e&&!c&&(c=e.method),b.rules[a]={method:c,msg:d}},b.setMsg=function(a,c){b.setRule(a,void 0,c)},b.prototype={disable:function(){this.disabled=!0,this.hideError()},enable:function(){this.disabled=!1},showError:function(a,b,c){e.call(this,a,b,c)},hideError:function(a,b){f.call(this,a,b)}};var c=function(){if(this.disabled)return!0;var b,c;c=this,b=!1;var e=[];if(this.$form.find("input, select, textarea").each(function(){var f,g;if(f=a(this),g=d.call(c,this),g&&!b&&f.focus(),g)return e.push(f),b=!0}),b)this.options.fail.call(this,e,this.$form);else{var f=this.options.success.call(this,this.$form);if(f===!1)return!1}return!b},d=function(c){for(var d=a(c),e={},h=(d.data("rules")||"").split("|"),i=d.attr("name"),j=0;j<h.length;j++)if(h[j]){var k=h[j].split("=");k[1]=k[1]||void 0,e[k[0]]=k[1]}var l=this.options.rules&&this.options.rules[i]||{};e=a.extend(e,l);var m=!1,n=null;for(var o in e){var p=e[o],q=b.rules[o];if(!q)throw new Error("未定义的校验规则："+o);var r=g(d);if(r||"required"===o){var s=!0;if(s=a.isFunction(p)?p.call(this,d):q.method.call(this,r,d,p),!s){if(m=!0,n=q.msg,a.isFunction(n)&&(n=n(d,p)),"required"!==o&&(d.data("error-msg")&&(n=d.data("error-msg")),this.options.messages&&this.options.messages[i]&&(n=this.options.messages[i],a.isFunction(n)&&(n=n(d,p)),a.isArray(n)&&(n=n[1]))),"required"===o&&(d.data("empty-msg")&&(n=d.data("empty-msg")),this.options.messages&&this.options.messages[i])){var t=this.options.messages[i];a.isFunction(t)&&(t=n(d,p)),a.isArray(t)&&(n=t[0])}this.showError(d,n.replace("$0",p),o);break}m=!1,f.call(this,d,o)}else m=!1,f.call(this,d)}return m},e=function(b,c,d){d=d||"anonymous","string"==typeof b&&(b=this.$form.find("[name='"+b+"']")),b=a(b);var e=b.attr("name"),f=this.errors[e]||(this.errors[e]={}),g=f[d];g||(g=f[d]=a(this.options.errorTpl.replace("$errorMsg",c)),this.options.placeError.call(this,b,g));for(var h in f)h!==d&&f[h].hide();this.options.highlight.call(this,b,g,this.options.inputErrorClass),b.trigger("highlight")},f=function(b,c){var d=this,e=function(a){var b=d.errors[a.attr("name")];for(var c in b)d.options.unhighlight.call(d,a,b[c],d.options.inputErrorClass)};b||this.$form.find("input, select, textarea").each(function(){var b=a(this);b.attr("disabled")||e(b)}),"string"==typeof b&&(b=this.$form.find("[name='"+b+"']")),b=a(b);var f=this.errors[b.attr("name")];if(f){if(!c)return void e(b);var g=f[c];g&&(this.options.unhighlight.call(this,b,g,this.options.inputErrorClass),b.trigger("unhighlight"))}},g=function(b){var c=a(b);if(c[0]){var d=c[0].tagName.toUpperCase(),e=(c.attr("type")||"text").toUpperCase(),f=c.attr("name"),g=c.parents("form");switch(d){case"INPUT":switch(e){case"CHECKBOX":case"RADIO":return g.find("[name='"+f+"']:checked").val();default:return c.val()}break;case"TEXTAREA":return c.val();default:return c.val()}}},h=a.fn.validate;a.fn.extend({validate:function(c){var d=arguments;return this.each(function(){var e=a(this),f=e.data("validate");f||e.data("validate",f=new b(this,c)),"string"==typeof c&&f[c].apply(f,Array.prototype.slice.call(d,1))})}}),a.fn.validate.Constructor=b,a.fn.validate.defaults={errorTpl:'<div class="sui-msg msg-error help-inline">\n  <div class="msg-con">\n    <span>$errorMsg</span>\n </div>   <i class="msg-icon"></i>\n  \n</div>',inputErrorClass:"input-error",placeError:function(b,c){b=a(b);var d=b.parents(".controls-wrap");d[0]||(d=b.parents(".controls")),d[0]||(d=b.parent()),c.appendTo(d[0])},highlight:function(b,c,d){b.addClass(d),a.fn.validate.defaults.placeError(b,c),c.show()},unhighlight:function(a,b,c){b.is(":visible")&&(a.removeClass(c),b.hide())},rules:void 0,messages:void 0,success:a.noop,fail:a.noop},a.fn.validate.noConflict=function(){return a.fn.validate=h,this},a.validate=b,a(function(){a(".sui-validate").validate()})}(window.jQuery)},{}]},{},[12]);
;/*!lib/vue.min.js*/
/*!
 * Vue.js v2.2.2
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Vue=t()}(this,function(){"use strict";function e(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function t(e){var t=parseFloat(e);return isNaN(t)?e:t}function n(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function r(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function i(e,t){return Ni.call(e,t)}function o(e){return"string"==typeof e||"number"==typeof e}function a(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}function s(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function c(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function u(e,t){for(var n in t)e[n]=t[n];return e}function l(e){return null!==e&&"object"==typeof e}function f(e){return Ri.call(e)===Fi}function p(e){for(var t={},n=0;n<e.length;n++)e[n]&&u(t,e[n]);return t}function d(){}function v(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function h(e,t){var n=l(e),r=l(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{return JSON.stringify(e)===JSON.stringify(t)}catch(n){return e===t}}function m(e,t){for(var n=0;n<e.length;n++)if(h(e[n],t))return n;return-1}function g(e){var t=!1;return function(){t||(t=!0,e())}}function y(e){return/native code/.test(e.toString())}function _(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function b(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function $(e){if(!ro.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function w(e){ao.target&&so.push(ao.target),ao.target=e}function x(){ao.target=so.pop()}function C(e,t){e.__proto__=t}function k(e,t,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];b(e,o,t[o])}}function A(e,t){if(l(e)){var n;return i(e,"__ob__")&&e.__ob__ instanceof po?n=e.__ob__:fo.shouldConvert&&!Qi()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new po(e)),t&&n&&n.vmCount++,n}}function O(e,t,n,r){var i=new ao,o=Object.getOwnPropertyDescriptor(e,t);if(!o||o.configurable!==!1){var a=o&&o.get,s=o&&o.set,c=A(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;return ao.target&&(i.depend(),c&&c.dep.depend(),Array.isArray(t)&&E(t)),t},set:function(t){var r=a?a.call(e):n;t===r||t!==t&&r!==r||(s?s.call(e,t):n=t,c=A(t),i.notify())}})}}function S(e,t,n){if(Array.isArray(e))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(i(e,t))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?n:r?(O(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function T(e,t){if(Array.isArray(e))return void e.splice(t,1);var n=e.__ob__;e._isVue||n&&n.vmCount||i(e,t)&&(delete e[t],n&&n.dep.notify())}function E(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&E(t)}function j(e,t){if(!t)return e;for(var n,r,o,a=Object.keys(t),s=0;s<a.length;s++)n=a[s],r=e[n],o=t[n],i(e,n)?f(r)&&f(o)&&j(r,o):S(e,n,o);return e}function N(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function I(e,t){var n=Object.create(e||null);return t?u(n,t):n}function L(e){var t=e.props;if(t){var n,r,i,o={};if(Array.isArray(t))for(n=t.length;n--;)r=t[n],"string"==typeof r&&(i=Li(r),o[i]={type:null});else if(f(t))for(var a in t)r=t[a],i=Li(a),o[i]=f(r)?r:{type:r};e.props=o}}function D(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function M(e,t,n){function r(r){var i=vo[r]||ho;l[r]=i(e[r],t[r],n,r)}L(t),D(t);var o=t.extends;if(o&&(e="function"==typeof o?M(e,o.options,n):M(e,o,n)),t.mixins)for(var a=0,s=t.mixins.length;a<s;a++){var c=t.mixins[a];c.prototype instanceof ft&&(c=c.options),e=M(e,c,n)}var u,l={};for(u in e)r(u);for(u in t)i(e,u)||r(u);return l}function P(e,t,n,r){if("string"==typeof n){var o=e[t];if(i(o,n))return o[n];var a=Li(n);if(i(o,a))return o[a];var s=Di(a);if(i(o,s))return o[s];var c=o[n]||o[a]||o[s];return c}}function R(e,t,n,r){var o=t[e],a=!i(n,e),s=n[e];if(U(Boolean,o.type)&&(a&&!i(o,"default")?s=!1:U(String,o.type)||""!==s&&s!==Pi(e)||(s=!0)),void 0===s){s=F(r,o,e);var c=fo.shouldConvert;fo.shouldConvert=!0,A(s),fo.shouldConvert=c}return s}function F(e,t,n){if(i(t,"default")){var r=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof r&&"Function"!==H(t.type)?r.call(e):r}}function H(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t&&t[1]}function U(e,t){if(!Array.isArray(t))return H(t)===H(e);for(var n=0,r=t.length;n<r;n++)if(H(t[n])===H(e))return!0;return!1}function B(e,t,n){if(Bi.errorHandler)Bi.errorHandler.call(null,e,t,n);else{if(!zi||"undefined"==typeof console)throw e;console.error(e)}}function V(e){return new mo(void 0,void 0,void 0,String(e))}function z(e){var t=new mo(e.tag,e.data,e.children,e.text,e.elm,e.context,e.componentOptions);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isCloned=!0,t}function J(e){for(var t=e.length,n=new Array(t),r=0;r<t;r++)n[r]=z(e[r]);return n}function K(e){function t(){var e=arguments,n=t.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=0;r<n.length;r++)n[r].apply(null,e)}return t.fns=e,t}function q(e,t,n,r,i){var o,a,s,c;for(o in e)a=e[o],s=t[o],c=bo(o),a&&(s?a!==s&&(s.fns=a,e[o]=s):(a.fns||(a=e[o]=K(a)),n(c.name,a,c.once,c.capture)));for(o in t)e[o]||(c=bo(o),r(c.name,t[o],c.capture))}function W(e,t,n){function i(){n.apply(this,arguments),r(o.fns,i)}var o,a=e[t];a?a.fns&&a.merged?(o=a,o.fns.push(i)):o=K([a,i]):o=K([i]),o.merged=!0,e[t]=o}function Z(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function G(e){return o(e)?[V(e)]:Array.isArray(e)?Y(e):void 0}function Y(e,t){var n,r,i,a=[];for(n=0;n<e.length;n++)r=e[n],null!=r&&"boolean"!=typeof r&&(i=a[a.length-1],Array.isArray(r)?a.push.apply(a,Y(r,(t||"")+"_"+n)):o(r)?i&&i.text?i.text+=String(r):""!==r&&a.push(V(r)):r.text&&i&&i.text?a[a.length-1]=V(i.text+r.text):(r.tag&&null==r.key&&null!=t&&(r.key="__vlist"+t+"_"+n+"__"),a.push(r)));return a}function Q(e){return e&&e.filter(function(e){return e&&e.componentOptions})[0]}function X(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&ne(e,t)}function ee(e,t,n){n?yo.$once(e,t):yo.$on(e,t)}function te(e,t){yo.$off(e,t)}function ne(e,t,n){yo=e,q(t,n||{},ee,te,e)}function re(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this,i=this;if(Array.isArray(e))for(var o=0,a=e.length;o<a;o++)r.$on(e[o],n);else(i._events[e]||(i._events[e]=[])).push(n),t.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){function n(){r.$off(e,n),t.apply(r,arguments)}var r=this;return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var n=this,r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(e)){for(var i=0,o=e.length;i<o;i++)n.$off(e[i],t);return r}var a=r._events[e];if(!a)return r;if(1===arguments.length)return r._events[e]=null,r;for(var s,c=a.length;c--;)if(s=a[c],s===t||s.fn===t){a.splice(c,1);break}return r},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?c(n):n;for(var r=c(arguments,1),i=0,o=n.length;i<o;i++)n[i].apply(t,r)}return t}}function ie(e,t){var n={};if(!e)return n;for(var r,i,o=[],a=0,s=e.length;a<s;a++)if(i=e[a],(i.context===t||i.functionalContext===t)&&i.data&&(r=i.data.slot)){var c=n[r]||(n[r]=[]);"template"===i.tag?c.push.apply(c,i.children):c.push(i)}else o.push(i);return o.every(oe)||(n.default=o),n}function oe(e){return e.isComment||" "===e.text}function ae(e){for(var t={},n=0;n<e.length;n++)t[e[n][0]]=e[n][1];return t}function se(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function ce(e){e.prototype._update=function(e,t){var n=this;n._isMounted&&ve(n,"beforeUpdate");var r=n.$el,i=n._vnode,o=$o;$o=n,n._vnode=e,i?n.$el=n.__patch__(i,e):n.$el=n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),$o=o,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){ve(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||r(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,ve(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.__patch__(e._vnode,null)}}}function ue(e,t,n){e.$el=t,e.$options.render||(e.$options.render=_o),ve(e,"beforeMount");var r;return r=function(){e._update(e._render(),n)},e._watcher=new So(e,r,d),n=!1,null==e.$vnode&&(e._isMounted=!0,ve(e,"mounted")),e}function le(e,t,n,r,i){var o=!!(i||e.$options._renderChildren||r.data.scopedSlots||e.$scopedSlots!==no);if(e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=i,t&&e.$options.props){fo.shouldConvert=!1;for(var a=e._props,s=e.$options._propKeys||[],c=0;c<s.length;c++){var u=s[c];a[u]=R(u,e.$options.props,t,e)}fo.shouldConvert=!0,e.$options.propsData=t}if(n){var l=e.$options._parentListeners;e.$options._parentListeners=n,ne(e,n,l)}o&&(e.$slots=ie(i,r.context),e.$forceUpdate())}function fe(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function pe(e,t){if(t){if(e._directInactive=!1,fe(e))return}else if(e._directInactive)return;if(e._inactive||null==e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)pe(e.$children[n]);ve(e,"activated")}}function de(e,t){if(!(t&&(e._directInactive=!0,fe(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)de(e.$children[n]);ve(e,"deactivated")}}function ve(e,t){var n=e.$options[t];if(n)for(var r=0,i=n.length;r<i;r++)try{n[r].call(e)}catch(n){B(n,e,t+" hook")}e._hasHookEvent&&e.$emit("hook:"+t)}function he(){wo.length=0,xo={},Co=ko=!1}function me(){ko=!0;var e,t,n;for(wo.sort(function(e,t){return e.id-t.id}),Ao=0;Ao<wo.length;Ao++)e=wo[Ao],t=e.id,xo[t]=null,e.run();for(Ao=wo.length;Ao--;)e=wo[Ao],n=e.vm,n._watcher===e&&n._isMounted&&ve(n,"updated");Xi&&Bi.devtools&&Xi.emit("flush"),he()}function ge(e){var t=e.id;if(null==xo[t]){if(xo[t]=!0,ko){for(var n=wo.length-1;n>=0&&wo[n].id>e.id;)n--;wo.splice(Math.max(n,Ao)+1,0,e)}else wo.push(e);Co||(Co=!0,to(me))}}function ye(e){To.clear(),_e(e,To)}function _e(e,t){var n,r,i=Array.isArray(e);if((i||l(e))&&Object.isExtensible(e)){if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(i)for(n=e.length;n--;)_e(e[n],t);else for(r=Object.keys(e),n=r.length;n--;)_e(e[r[n]],t)}}function be(e,t,n){Eo.get=function(){return this[t][n]},Eo.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Eo)}function $e(e){e._watchers=[];var t=e.$options;t.props&&we(e,t.props),t.methods&&Oe(e,t.methods),t.data?xe(e):A(e._data={},!0),t.computed&&Ce(e,t.computed),t.watch&&Se(e,t.watch)}function we(e,t){var n=e.$options.propsData||{},r=e._props={},i=e.$options._propKeys=[],o=!e.$parent;fo.shouldConvert=o;var a=function(o){i.push(o);var a=R(o,t,n,e);O(r,o,a),o in e||be(e,"_props",o)};for(var s in t)a(s);fo.shouldConvert=!0}function xe(e){var t=e.$options.data;t=e._data="function"==typeof t?t.call(e):t||{},f(t)||(t={});for(var n=Object.keys(t),r=e.$options.props,o=n.length;o--;)r&&i(r,n[o])||_(n[o])||be(e,"_data",n[o]);A(t,!0)}function Ce(e,t){var n=e._computedWatchers=Object.create(null);for(var r in t){var i=t[r],o="function"==typeof i?i:i.get;n[r]=new So(e,o,d,jo),r in e||ke(e,r,i)}}function ke(e,t,n){"function"==typeof n?(Eo.get=Ae(t),Eo.set=d):(Eo.get=n.get?n.cache!==!1?Ae(t):n.get:d,Eo.set=n.set?n.set:d),Object.defineProperty(e,t,Eo)}function Ae(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ao.target&&t.depend(),t.value}}function Oe(e,t){e.$options.props;for(var n in t)e[n]=null==t[n]?d:s(t[n],e)}function Se(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Te(e,n,r[i]);else Te(e,n,r)}}function Te(e,t,n){var r;f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function Ee(e){var t={};t.get=function(){return this._data};var n={};n.get=function(){return this._props},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=S,e.prototype.$delete=T,e.prototype.$watch=function(e,t,n){var r=this;n=n||{},n.user=!0;var i=new So(r,e,t,n);return n.immediate&&t.call(r,i.value),function(){i.teardown()}}}function je(e,t,n,r,i){if(e){var o=n.$options._base;if(l(e)&&(e=o.extend(e)),"function"==typeof e){if(!e.cid)if(e.resolved)e=e.resolved;else if(e=Re(e,o,function(){n.$forceUpdate()}),!e)return;ct(e),t=t||{},t.model&&Ve(e.options,t);var a=Fe(t,e);if(e.options.functional)return Ne(e,a,t,n,r);var s=t.on;t.on=t.nativeOn,e.options.abstract&&(t={}),Ue(t);var c=e.options.name||i,u=new mo("vue-component-"+e.cid+(c?"-"+c:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:a,listeners:s,tag:i,children:r});return u}}}function Ne(e,t,n,r,i){var o={},a=e.options.props;if(a)for(var s in a)o[s]=R(s,a,t);var c=Object.create(r),u=function(e,t,n,r){return ze(c,e,t,n,r,!0)},l=e.options.render.call(null,u,{props:o,data:n,parent:r,children:i,slots:function(){return ie(i,r)}});return l instanceof mo&&(l.functionalContext=r,n.slot&&((l.data||(l.data={})).slot=n.slot)),l}function Ie(e,t,n,r){var i=e.componentOptions,o={_isComponent:!0,parent:t,propsData:i.propsData,_componentTag:i.tag,_parentVnode:e,_parentListeners:i.listeners,_renderChildren:i.children,_parentElm:n||null,_refElm:r||null},a=e.data.inlineTemplate;return a&&(o.render=a.render,o.staticRenderFns=a.staticRenderFns),new i.Ctor(o)}function Le(e,t,n,r){if(!e.componentInstance||e.componentInstance._isDestroyed){var i=e.componentInstance=Ie(e,$o,n,r);i.$mount(t?e.elm:void 0,t)}else if(e.data.keepAlive){var o=e;De(o,o)}}function De(e,t){var n=t.componentOptions,r=t.componentInstance=e.componentInstance;le(r,n.propsData,n.listeners,t,n.children)}function Me(e){e.componentInstance._isMounted||(e.componentInstance._isMounted=!0,ve(e.componentInstance,"mounted")),e.data.keepAlive&&pe(e.componentInstance,!0)}function Pe(e){e.componentInstance._isDestroyed||(e.data.keepAlive?de(e.componentInstance,!0):e.componentInstance.$destroy())}function Re(e,t,n){if(!e.requested){e.requested=!0;var r=e.pendingCallbacks=[n],i=!0,o=function(n){if(l(n)&&(n=t.extend(n)),e.resolved=n,!i)for(var o=0,a=r.length;o<a;o++)r[o](n)},a=function(e){},s=e(o,a);return s&&"function"==typeof s.then&&!e.resolved&&s.then(o,a),i=!1,e.resolved}e.pendingCallbacks.push(n)}function Fe(e,t){var n=t.options.props;if(n){var r={},i=e.attrs,o=e.props,a=e.domProps;if(i||o||a)for(var s in n){var c=Pi(s);He(r,o,s,c,!0)||He(r,i,s,c)||He(r,a,s,c)}return r}}function He(e,t,n,r,o){if(t){if(i(t,n))return e[n]=t[n],o||delete t[n],!0;if(i(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function Ue(e){e.hook||(e.hook={});for(var t=0;t<Io.length;t++){var n=Io[t],r=e.hook[n],i=No[n];e.hook[n]=r?Be(i,r):i}}function Be(e,t){return function(n,r,i,o){e(n,r,i,o),t(n,r,i,o)}}function Ve(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.props||(t.props={}))[n]=t.model.value;var i=t.on||(t.on={});i[r]?i[r]=[t.model.callback].concat(i[r]):i[r]=t.model.callback}function ze(e,t,n,r,i,a){return(Array.isArray(n)||o(n))&&(i=r,r=n,n=void 0),a&&(i=Do),Je(e,t,n,r,i)}function Je(e,t,n,r,i){if(n&&n.__ob__)return _o();if(!t)return _o();Array.isArray(r)&&"function"==typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===Do?r=G(r):i===Lo&&(r=Z(r));var o,a;if("string"==typeof t){var s;a=Bi.getTagNamespace(t),o=Bi.isReservedTag(t)?new mo(Bi.parsePlatformTagName(t),n,r,void 0,void 0,e):(s=P(e.$options,"components",t))?je(s,n,e,r,t):new mo(t,n,r,void 0,void 0,e)}else o=je(t,n,e,r);return o?(a&&Ke(o,a),o):_o()}function Ke(e,t){if(e.ns=t,"foreignObject"!==e.tag&&e.children)for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];i.tag&&!i.ns&&Ke(i,t)}}function qe(e,t){var n,r,i,o,a;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(l(e))for(o=Object.keys(e),n=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],n[r]=t(e[a],a,r);return n}function We(e,t,n,r){var i=this.$scopedSlots[e];if(i)return n=n||{},r&&u(n,r),i(n)||t;var o=this.$slots[e];return o||t}function Ze(e){return P(this.$options,"filters",e,!0)||Ui}function Ge(e,t,n){var r=Bi.keyCodes[t]||n;return Array.isArray(r)?r.indexOf(e)===-1:r!==e}function Ye(e,t,n,r){if(n)if(l(n)){Array.isArray(n)&&(n=p(n));for(var i in n)if("class"===i||"style"===i)e[i]=n[i];else{var o=e.attrs&&e.attrs.type,a=r||Bi.mustUseProp(t,o,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={});a[i]=n[i]}}else;return e}function Qe(e,t){var n=this._staticTrees[e];return n&&!t?Array.isArray(n)?J(n):z(n):(n=this._staticTrees[e]=this.$options.staticRenderFns[e].call(this._renderProxy),et(n,"__static__"+e,!1),n)}function Xe(e,t,n){return et(e,"__once__"+t+(n?"_"+n:""),!0),e}function et(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&tt(e[r],t+"_"+r,n);else tt(e,t,n)}function tt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function nt(e){e.$vnode=null,e._vnode=null,e._staticTrees=null;var t=e.$options._parentVnode,n=t&&t.context;e.$slots=ie(e.$options._renderChildren,n),e.$scopedSlots=no,e._c=function(t,n,r,i){return ze(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return ze(e,t,n,r,i,!0)}}function rt(n){n.prototype.$nextTick=function(e){return to(e,this)},n.prototype._render=function(){var e=this,t=e.$options,n=t.render,r=t.staticRenderFns,i=t._parentVnode;if(e._isMounted)for(var o in e.$slots)e.$slots[o]=J(e.$slots[o]);e.$scopedSlots=i&&i.data.scopedSlots||no,r&&!e._staticTrees&&(e._staticTrees=[]),e.$vnode=i;var a;try{a=n.call(e._renderProxy,e.$createElement)}catch(t){B(t,e,"render function"),a=e._vnode}return a instanceof mo||(a=_o()),a.parent=i,a},n.prototype._o=Xe,n.prototype._n=t,n.prototype._s=e,n.prototype._l=qe,n.prototype._t=We,n.prototype._q=h,n.prototype._i=m,n.prototype._m=Qe,n.prototype._f=Ze,n.prototype._k=Ge,n.prototype._b=Ye,n.prototype._v=V,n.prototype._e=_o,n.prototype._u=ae}function it(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}function ot(e){var t=e.$options.inject;if(t)for(var n=Array.isArray(t),r=n?t:eo?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++)for(var o=r[i],a=n?o:t[o],s=e;s;){if(s._provided&&a in s._provided){e[o]=s._provided[a];break}s=s.$parent}}function at(e){e.prototype._init=function(e){var t=this;t._uid=Mo++,t._isVue=!0,e&&e._isComponent?st(t,e):t.$options=M(ct(t.constructor),e||{},t),t._renderProxy=t,t._self=t,se(t),X(t),nt(t),ve(t,"beforeCreate"),ot(t),$e(t),it(t),ve(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}function st(e,t){var n=e.$options=Object.create(e.constructor.options);n.parent=t.parent,n.propsData=t.propsData,n._parentVnode=t._parentVnode,n._parentListeners=t._parentListeners,n._renderChildren=t._renderChildren,n._componentTag=t._componentTag,n._parentElm=t._parentElm,n._refElm=t._refElm,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function ct(e){var t=e.options;if(e.super){var n=ct(e.super),r=e.superOptions;if(n!==r){e.superOptions=n;var i=ut(e);i&&u(e.extendOptions,i),t=e.options=M(n,e.extendOptions),t.name&&(t.components[t.name]=e)}}return t}function ut(e){var t,n=e.options,r=e.sealedOptions;for(var i in n)n[i]!==r[i]&&(t||(t={}),t[i]=lt(n[i],r[i]));return t}function lt(e,t){if(Array.isArray(e)){var n=[];t=Array.isArray(t)?t:[t];for(var r=0;r<e.length;r++)t.indexOf(e[r])<0&&n.push(e[r]);return n}return e}function ft(e){this._init(e)}function pt(e){e.use=function(e){if(!e.installed){var t=c(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):"function"==typeof e&&e.apply(null,t),e.installed=!0,this}}}function dt(e){e.mixin=function(e){this.options=M(this.options,e)}}function vt(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var o=e.name||n.options.name,a=function(e){this._init(e)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=t++,a.options=M(n.options,e),a.super=n,a.options.props&&ht(a),a.options.computed&&mt(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,Bi._assetTypes.forEach(function(e){a[e]=n[e]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=u({},a.options),i[r]=a,a}}function ht(e){var t=e.options.props;for(var n in t)be(e.prototype,"_props",n)}function mt(e){var t=e.options.computed;for(var n in t)ke(e.prototype,n,t[n])}function gt(e){Bi._assetTypes.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}function yt(e){return e&&(e.Ctor.options.name||e.tag)}function _t(e,t){return"string"==typeof e?e.split(",").indexOf(t)>-1:e instanceof RegExp&&e.test(t)}function bt(e,t){for(var n in e){var r=e[n];if(r){var i=yt(r.componentOptions);i&&!t(i)&&($t(r),e[n]=null)}}}function $t(e){e&&(e.componentInstance._inactive||ve(e.componentInstance,"deactivated"),e.componentInstance.$destroy())}function wt(e){var t={};t.get=function(){return Bi},Object.defineProperty(e,"config",t),e.util={warn:io,extend:u,mergeOptions:M,defineReactive:O},e.set=S,e.delete=T,e.nextTick=to,e.options=Object.create(null),Bi._assetTypes.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,u(e.options.components,Fo),pt(e),dt(e),vt(e),gt(e)}function xt(e){for(var t=e.data,n=e,r=e;r.componentInstance;)r=r.componentInstance._vnode,r.data&&(t=Ct(r.data,t));for(;n=n.parent;)n.data&&(t=Ct(t,n.data));return kt(t)}function Ct(e,t){return{staticClass:At(e.staticClass,t.staticClass),class:e.class?[e.class,t.class]:t.class}}function kt(e){var t=e.class,n=e.staticClass;return n||t?At(n,Ot(t)):""}function At(e,t){return e?t?e+" "+t:e:t||""}function Ot(e){var t="";if(!e)return t;if("string"==typeof e)return e;if(Array.isArray(e)){for(var n,r=0,i=e.length;r<i;r++)e[r]&&(n=Ot(e[r]))&&(t+=n+" ");return t.slice(0,-1)}if(l(e)){for(var o in e)e[o]&&(t+=o+" ");return t.slice(0,-1)}return t}function St(e){return oa(e)?"svg":"math"===e?"math":void 0}function Tt(e){if(!zi)return!0;if(sa(e))return!1;if(e=e.toLowerCase(),null!=ca[e])return ca[e];var t=document.createElement(e);return e.indexOf("-")>-1?ca[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ca[e]=/HTMLUnknownElement/.test(t.toString())}function Et(e){if("string"==typeof e){var t=document.querySelector(e);return t?t:document.createElement("div")}return e}function jt(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)}function Nt(e,t){return document.createElementNS(ra[e],t)}function It(e){return document.createTextNode(e)}function Lt(e){return document.createComment(e)}function Dt(e,t,n){e.insertBefore(t,n)}function Mt(e,t){e.removeChild(t)}function Pt(e,t){e.appendChild(t)}function Rt(e){return e.parentNode}function Ft(e){return e.nextSibling}function Ht(e){return e.tagName}function Ut(e,t){e.textContent=t}function Bt(e,t,n){e.setAttribute(t,n)}function Vt(e,t){var n=e.data.ref;if(n){var i=e.context,o=e.componentInstance||e.elm,a=i.$refs;t?Array.isArray(a[n])?r(a[n],o):a[n]===o&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])&&a[n].indexOf(o)<0?a[n].push(o):a[n]=[o]:a[n]=o}}function zt(e){return null==e}function Jt(e){return null!=e}function Kt(e,t){return e.key===t.key&&e.tag===t.tag&&e.isComment===t.isComment&&!e.data==!t.data}function qt(e,t,n){var r,i,o={};for(r=t;r<=n;++r)i=e[r].key,Jt(i)&&(o[i]=r);return o}function Wt(e){function t(e){return new mo(O.tagName(e).toLowerCase(),{},[],void 0,e)}function r(e,t){function n(){0===--n.listeners&&i(e)}return n.listeners=t,n}function i(e){var t=O.parentNode(e);t&&O.removeChild(t,e)}function a(e,t,n,r,i){if(e.isRootInsert=!i,!s(e,t,n,r)){var o=e.data,a=e.children,c=e.tag;Jt(c)?(e.elm=e.ns?O.createElementNS(e.ns,c):O.createElement(c,e),v(e),f(e,a,t),Jt(o)&&d(e,t),l(n,e.elm,r)):e.isComment?(e.elm=O.createComment(e.text),l(n,e.elm,r)):(e.elm=O.createTextNode(e.text),l(n,e.elm,r))}}function s(e,t,n,r){var i=e.data;if(Jt(i)){var o=Jt(e.componentInstance)&&i.keepAlive;if(Jt(i=i.hook)&&Jt(i=i.init)&&i(e,!1,n,r),Jt(e.componentInstance))return c(e,t),o&&u(e,t,n,r),!0}}function c(e,t){e.data.pendingInsert&&t.push.apply(t,e.data.pendingInsert),e.elm=e.componentInstance.$el,p(e)?(d(e,t),v(e)):(Vt(e),t.push(e))}function u(e,t,n,r){for(var i,o=e;o.componentInstance;)if(o=o.componentInstance._vnode,Jt(i=o.data)&&Jt(i=i.transition)){for(i=0;i<k.activate.length;++i)k.activate[i](fa,o);t.push(o);break}l(n,e.elm,r)}function l(e,t,n){e&&(n?O.insertBefore(e,t,n):O.appendChild(e,t))}function f(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)a(t[r],n,e.elm,null,!0);else o(e.text)&&O.appendChild(e.elm,O.createTextNode(e.text))}function p(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return Jt(e.tag)}function d(e,t){for(var n=0;n<k.create.length;++n)k.create[n](fa,e);x=e.data.hook,Jt(x)&&(x.create&&x.create(fa,e),x.insert&&t.push(e))}function v(e){for(var t,n=e;n;)Jt(t=n.context)&&Jt(t=t.$options._scopeId)&&O.setAttribute(e.elm,t,""),n=n.parent;Jt(t=$o)&&t!==e.context&&Jt(t=t.$options._scopeId)&&O.setAttribute(e.elm,t,"")}function h(e,t,n,r,i,o){for(;r<=i;++r)a(n[r],o,e,t)}function m(e){var t,n,r=e.data;if(Jt(r))for(Jt(t=r.hook)&&Jt(t=t.destroy)&&t(e),t=0;t<k.destroy.length;++t)k.destroy[t](e);if(Jt(t=e.children))for(n=0;n<e.children.length;++n)m(e.children[n])}function g(e,t,n,r){for(;n<=r;++n){var o=t[n];Jt(o)&&(Jt(o.tag)?(y(o),m(o)):i(o.elm))}}function y(e,t){if(t||Jt(e.data)){var n=k.remove.length+1;for(t?t.listeners+=n:t=r(e.elm,n),Jt(x=e.componentInstance)&&Jt(x=x._vnode)&&Jt(x.data)&&y(x,t),x=0;x<k.remove.length;++x)k.remove[x](e,t);Jt(x=e.data.hook)&&Jt(x=x.remove)?x(e,t):t()}else i(e.elm)}function _(e,t,n,r,i){for(var o,s,c,u,l=0,f=0,p=t.length-1,d=t[0],v=t[p],m=n.length-1,y=n[0],_=n[m],$=!i;l<=p&&f<=m;)zt(d)?d=t[++l]:zt(v)?v=t[--p]:Kt(d,y)?(b(d,y,r),d=t[++l],y=n[++f]):Kt(v,_)?(b(v,_,r),v=t[--p],_=n[--m]):Kt(d,_)?(b(d,_,r),$&&O.insertBefore(e,d.elm,O.nextSibling(v.elm)),d=t[++l],_=n[--m]):Kt(v,y)?(b(v,y,r),$&&O.insertBefore(e,v.elm,d.elm),v=t[--p],y=n[++f]):(zt(o)&&(o=qt(t,l,p)),s=Jt(y.key)?o[y.key]:null,zt(s)?(a(y,r,e,d.elm),y=n[++f]):(c=t[s],Kt(c,y)?(b(c,y,r),t[s]=void 0,$&&O.insertBefore(e,y.elm,d.elm),y=n[++f]):(a(y,r,e,d.elm),y=n[++f])));l>p?(u=zt(n[m+1])?null:n[m+1].elm,h(e,u,n,f,m,r)):f>m&&g(e,t,l,p)}function b(e,t,n,r){if(e!==t){if(t.isStatic&&e.isStatic&&t.key===e.key&&(t.isCloned||t.isOnce))return t.elm=e.elm,void(t.componentInstance=e.componentInstance);var i,o=t.data,a=Jt(o);a&&Jt(i=o.hook)&&Jt(i=i.prepatch)&&i(e,t);var s=t.elm=e.elm,c=e.children,u=t.children;if(a&&p(t)){for(i=0;i<k.update.length;++i)k.update[i](e,t);Jt(i=o.hook)&&Jt(i=i.update)&&i(e,t)}zt(t.text)?Jt(c)&&Jt(u)?c!==u&&_(s,c,u,n,r):Jt(u)?(Jt(e.text)&&O.setTextContent(s,""),h(s,null,u,0,u.length-1,n)):Jt(c)?g(s,c,0,c.length-1):Jt(e.text)&&O.setTextContent(s,""):e.text!==t.text&&O.setTextContent(s,t.text),a&&Jt(i=o.hook)&&Jt(i=i.postpatch)&&i(e,t)}}function $(e,t,n){if(n&&e.parent)e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}function w(e,t,n){t.elm=e;var r=t.tag,i=t.data,o=t.children;if(Jt(i)&&(Jt(x=i.hook)&&Jt(x=x.init)&&x(t,!0),Jt(x=t.componentInstance)))return c(t,n),!0;if(Jt(r)){if(Jt(o))if(e.hasChildNodes()){for(var a=!0,s=e.firstChild,u=0;u<o.length;u++){if(!s||!w(s,o[u],n)){a=!1;break}s=s.nextSibling}if(!a||s)return!1}else f(t,o,n);if(Jt(i))for(var l in i)if(!S(l)){d(t,n);break}}else e.data!==t.text&&(e.data=t.text);return!0}var x,C,k={},A=e.modules,O=e.nodeOps;for(x=0;x<pa.length;++x)for(k[pa[x]]=[],C=0;C<A.length;++C)void 0!==A[C][pa[x]]&&k[pa[x]].push(A[C][pa[x]]);var S=n("attrs,style,class,staticClass,staticStyle,key");return function(e,n,r,i,o,s){if(!n)return void(e&&m(e));var c=!1,u=[];if(e){var l=Jt(e.nodeType);if(!l&&Kt(e,n))b(e,n,u,i);else{if(l){if(1===e.nodeType&&e.hasAttribute("server-rendered")&&(e.removeAttribute("server-rendered"),r=!0),r&&w(e,n,u))return $(n,u,!0),e;e=t(e)}var f=e.elm,d=O.parentNode(f);if(a(n,u,f._leaveCb?null:d,O.nextSibling(f)),n.parent){for(var v=n.parent;v;)v.elm=n.elm,v=v.parent;if(p(n))for(var h=0;h<k.create.length;++h)k.create[h](fa,n.parent)}null!==d?g(d,[e],0,0):Jt(e.tag)&&m(e)}}else c=!0,a(n,u,o,s);return $(n,u,c),n.elm}}function Zt(e,t){(e.data.directives||t.data.directives)&&Gt(e,t)}function Gt(e,t){var n,r,i,o=e===fa,a=t===fa,s=Yt(e.data.directives,e.context),c=Yt(t.data.directives,t.context),u=[],l=[];for(n in c)r=s[n],i=c[n],r?(i.oldValue=r.value,Xt(i,"update",t,e),i.def&&i.def.componentUpdated&&l.push(i)):(Xt(i,"bind",t,e),i.def&&i.def.inserted&&u.push(i));if(u.length){var f=function(){for(var n=0;n<u.length;n++)Xt(u[n],"inserted",t,e)};o?W(t.data.hook||(t.data.hook={}),"insert",f):f()}if(l.length&&W(t.data.hook||(t.data.hook={}),"postpatch",function(){for(var n=0;n<l.length;n++)Xt(l[n],"componentUpdated",t,e)}),!o)for(n in s)c[n]||Xt(s[n],"unbind",e,e,a)}function Yt(e,t){var n=Object.create(null);if(!e)return n;var r,i;for(r=0;r<e.length;r++)i=e[r],i.modifiers||(i.modifiers=va),n[Qt(i)]=i,i.def=P(t.$options,"directives",i.name,!0);return n}function Qt(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Xt(e,t,n,r,i){var o=e.def&&e.def[t];o&&o(n.elm,e,n,r,i)}function en(e,t){if(e.data.attrs||t.data.attrs){var n,r,i,o=t.elm,a=e.data.attrs||{},s=t.data.attrs||{};s.__ob__&&(s=t.data.attrs=u({},s));for(n in s)r=s[n],i=a[n],i!==r&&tn(o,n,r);qi&&s.value!==a.value&&tn(o,"value",s.value);for(n in a)null==s[n]&&(ea(n)?o.removeAttributeNS(Xo,ta(n)):Yo(n)||o.removeAttribute(n))}}function tn(e,t,n){Qo(t)?na(n)?e.removeAttribute(t):e.setAttribute(t,t):Yo(t)?e.setAttribute(t,na(n)||"false"===n?"false":"true"):ea(t)?na(n)?e.removeAttributeNS(Xo,ta(t)):e.setAttributeNS(Xo,t,n):na(n)?e.removeAttribute(t):e.setAttribute(t,n)}function nn(e,t){var n=t.elm,r=t.data,i=e.data;if(r.staticClass||r.class||i&&(i.staticClass||i.class)){var o=xt(t),a=n._transitionClasses;a&&(o=At(o,Ot(a))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}function rn(e){function t(){(a||(a=[])).push(e.slice(v,i).trim()),v=i+1}var n,r,i,o,a,s=!1,c=!1,u=!1,l=!1,f=0,p=0,d=0,v=0;for(i=0;i<e.length;i++)if(r=n,n=e.charCodeAt(i),s)39===n&&92!==r&&(s=!1);else if(c)34===n&&92!==r&&(c=!1);else if(u)96===n&&92!==r&&(u=!1);else if(l)47===n&&92!==r&&(l=!1);else if(124!==n||124===e.charCodeAt(i+1)||124===e.charCodeAt(i-1)||f||p||d){switch(n){case 34:c=!0;break;case 39:s=!0;break;case 96:u=!0;break;case 40:d++;break;case 41:d--;break;case 91:p++;break;case 93:p--;break;case 123:f++;break;case 125:f--}if(47===n){for(var h=i-1,m=void 0;h>=0&&(m=e.charAt(h)," "===m);h--);m&&ya.test(m)||(l=!0)}}else void 0===o?(v=i+1,o=e.slice(0,i).trim()):t();if(void 0===o?o=e.slice(0,i).trim():0!==v&&t(),a)for(i=0;i<a.length;i++)o=on(o,a[i]);return o}function on(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";
    var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+","+i}function an(e){console.error("[Vue compiler]: "+e)}function sn(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function cn(e,t,n){(e.props||(e.props=[])).push({name:t,value:n})}function un(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n})}function ln(e,t,n,r,i,o){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:i,modifiers:o})}function fn(e,t,n,r,i){r&&r.capture&&(delete r.capture,t="!"+t),r&&r.once&&(delete r.once,t="~"+t);var o;r&&r.native?(delete r.native,o=e.nativeEvents||(e.nativeEvents={})):o=e.events||(e.events={});var a={value:n,modifiers:r},s=o[t];Array.isArray(s)?i?s.unshift(a):s.push(a):s?o[t]=i?[a,s]:[s,a]:o[t]=a}function pn(e,t,n){var r=dn(e,":"+t)||dn(e,"v-bind:"+t);if(null!=r)return rn(r);if(n!==!1){var i=dn(e,t);if(null!=i)return JSON.stringify(i)}}function dn(e,t){var n;if(null!=(n=e.attrsMap[t]))for(var r=e.attrsList,i=0,o=r.length;i<o;i++)if(r[i].name===t){r.splice(i,1);break}return n}function vn(e,t,n){var r=n||{},i=r.number,o=r.trim,a="$$v",s=a;o&&(s="(typeof "+a+" === 'string'? "+a+".trim(): "+a+")"),i&&(s="_n("+s+")");var c=hn(t,s);e.model={value:"("+t+")",expression:'"'+t+'"',callback:"function ("+a+") {"+c+"}"}}function hn(e,t){var n=mn(e);return null===n.idx?e+"="+t:"var $$exp = "+n.exp+", $$idx = "+n.idx+";if (!Array.isArray($$exp)){"+e+"="+t+"}else{$$exp.splice($$idx, 1, "+t+")}"}function mn(e){if(Uo=e,Ho=Uo.length,Vo=zo=Jo=0,e.indexOf("[")<0||e.lastIndexOf("]")<Ho-1)return{exp:e,idx:null};for(;!yn();)Bo=gn(),_n(Bo)?$n(Bo):91===Bo&&bn(Bo);return{exp:e.substring(0,zo),idx:e.substring(zo+1,Jo)}}function gn(){return Uo.charCodeAt(++Vo)}function yn(){return Vo>=Ho}function _n(e){return 34===e||39===e}function bn(e){var t=1;for(zo=Vo;!yn();)if(e=gn(),_n(e))$n(e);else if(91===e&&t++,93===e&&t--,0===t){Jo=Vo;break}}function $n(e){for(var t=e;!yn()&&(e=gn(),e!==t););}function wn(e,t,n){Ko=n;var r=t.value,i=t.modifiers,o=e.tag,a=e.attrsMap.type;if("select"===o)kn(e,r,i);else if("input"===o&&"checkbox"===a)xn(e,r,i);else if("input"===o&&"radio"===a)Cn(e,r,i);else if("input"===o||"textarea"===o)An(e,r,i);else if(!Bi.isReservedTag(o))return vn(e,r,i),!1;return!0}function xn(e,t,n){var r=n&&n.number,i=pn(e,"value")||"null",o=pn(e,"true-value")||"true",a=pn(e,"false-value")||"false";cn(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===o?":("+t+")":":_q("+t+","+o+")")),fn(e,ba,"var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$c){$$i<0&&("+t+"=$$a.concat($$v))}else{$$i>-1&&("+t+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+t+"=$$c}",null,!0)}function Cn(e,t,n){var r=n&&n.number,i=pn(e,"value")||"null";i=r?"_n("+i+")":i,cn(e,"checked","_q("+t+","+i+")"),fn(e,ba,hn(t,i),null,!0)}function kn(e,t,n){var r=n&&n.number,i='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r?"_n(val)":"val")+"})",o="$event.target.multiple ? $$selectedVal : $$selectedVal[0]",a="var $$selectedVal = "+i+";";a=a+" "+hn(t,o),fn(e,"change",a,null,!0)}function An(e,t,n){var r=e.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,c=!o&&"range"!==r,u=o?"change":"range"===r?_a:"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var f=hn(t,l);c&&(f="if($event.target.composing)return;"+f),cn(e,"value","("+t+")"),fn(e,u,f,null,!0),(s||a||"number"===r)&&fn(e,"blur","$forceUpdate()")}function On(e){var t;e[_a]&&(t=Ki?"change":"input",e[t]=[].concat(e[_a],e[t]||[]),delete e[_a]),e[ba]&&(t=Yi?"click":"change",e[t]=[].concat(e[ba],e[t]||[]),delete e[ba])}function Sn(e,t,n,r){if(n){var i=t,o=qo;t=function(n){var a=1===arguments.length?i(n):i.apply(null,arguments);null!==a&&Tn(e,t,r,o)}}qo.addEventListener(e,t,r)}function Tn(e,t,n,r){(r||qo).removeEventListener(e,t,n)}function En(e,t){if(e.data.on||t.data.on){var n=t.data.on||{},r=e.data.on||{};qo=t.elm,On(n),q(n,r,Sn,Tn,t.context)}}function jn(e,t){if(e.data.domProps||t.data.domProps){var n,r,i=t.elm,o=e.data.domProps||{},a=t.data.domProps||{};a.__ob__&&(a=t.data.domProps=u({},a));for(n in o)null==a[n]&&(i[n]="");for(n in a)if(r=a[n],"textContent"!==n&&"innerHTML"!==n||(t.children&&(t.children.length=0),r!==o[n]))if("value"===n){i._value=r;var s=null==r?"":String(r);Nn(i,t,s)&&(i.value=s)}else i[n]=r}}function Nn(e,t,n){return!e.composing&&("option"===t.tag||In(e,n)||Ln(e,n))}function In(e,t){return document.activeElement!==e&&e.value!==t}function Ln(e,n){var r=e.value,i=e._vModifiers;return i&&i.number||"number"===e.type?t(r)!==t(n):i&&i.trim?r.trim()!==n.trim():r!==n}function Dn(e){var t=Mn(e.style);return e.staticStyle?u(e.staticStyle,t):t}function Mn(e){return Array.isArray(e)?p(e):"string"==typeof e?xa(e):e}function Pn(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)i=i.componentInstance._vnode,i.data&&(n=Dn(i.data))&&u(r,n);(n=Dn(e.data))&&u(r,n);for(var o=e;o=o.parent;)o.data&&(n=Dn(o.data))&&u(r,n);return r}function Rn(e,t){var n=t.data,r=e.data;if(n.staticStyle||n.style||r.staticStyle||r.style){var i,o,a=t.elm,s=e.data.staticStyle,c=e.data.style||{},l=s||c,f=Mn(t.data.style)||{};t.data.style=f.__ob__?u({},f):f;var p=Pn(t,!0);for(o in l)null==p[o]&&Aa(a,o,"");for(o in p)i=p[o],i!==l[o]&&Aa(a,o,null==i?"":i)}}function Fn(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Hn(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t);else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");e.setAttribute("class",n.trim())}}function Un(e){if(e){if("object"==typeof e){var t={};return e.css!==!1&&u(t,Ea(e.name||"v")),u(t,e),t}return"string"==typeof e?Ea(e):void 0}}function Bn(e){Ra(function(){Ra(e)})}function Vn(e,t){(e._transitionClasses||(e._transitionClasses=[])).push(t),Fn(e,t)}function zn(e,t){e._transitionClasses&&r(e._transitionClasses,t),Hn(e,t)}function Jn(e,t,n){var r=Kn(e,t),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===Na?Da:Pa,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout(function(){c<a&&u()},o+1),e.addEventListener(s,l)}function Kn(e,t){var n,r=window.getComputedStyle(e),i=r[La+"Delay"].split(", "),o=r[La+"Duration"].split(", "),a=qn(i,o),s=r[Ma+"Delay"].split(", "),c=r[Ma+"Duration"].split(", "),u=qn(s,c),l=0,f=0;t===Na?a>0&&(n=Na,l=a,f=o.length):t===Ia?u>0&&(n=Ia,l=u,f=c.length):(l=Math.max(a,u),n=l>0?a>u?Na:Ia:null,f=n?n===Na?o.length:c.length:0);var p=n===Na&&Fa.test(r[La+"Property"]);return{type:n,timeout:l,propCount:f,hasTransform:p}}function qn(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Wn(t)+Wn(e[n])}))}function Wn(e){return 1e3*Number(e.slice(0,-1))}function Zn(e,n){var r=e.elm;r._leaveCb&&(r._leaveCb.cancelled=!0,r._leaveCb());var i=Un(e.data.transition);if(i&&!r._enterCb&&1===r.nodeType){for(var o=i.css,a=i.type,s=i.enterClass,c=i.enterToClass,u=i.enterActiveClass,f=i.appearClass,p=i.appearToClass,d=i.appearActiveClass,v=i.beforeEnter,h=i.enter,m=i.afterEnter,y=i.enterCancelled,_=i.beforeAppear,b=i.appear,$=i.afterAppear,w=i.appearCancelled,x=i.duration,C=$o,k=$o.$vnode;k&&k.parent;)k=k.parent,C=k.context;var A=!C._isMounted||!e.isRootInsert;if(!A||b||""===b){var O=A&&f?f:s,S=A&&d?d:u,T=A&&p?p:c,E=A?_||v:v,j=A&&"function"==typeof b?b:h,N=A?$||m:m,I=A?w||y:y,L=t(l(x)?x.enter:x),D=o!==!1&&!qi,M=Qn(j),P=r._enterCb=g(function(){D&&(zn(r,T),zn(r,S)),P.cancelled?(D&&zn(r,O),I&&I(r)):N&&N(r),r._enterCb=null});e.data.show||W(e.data.hook||(e.data.hook={}),"insert",function(){var t=r.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),j&&j(r,P)}),E&&E(r),D&&(Vn(r,O),Vn(r,S),Bn(function(){Vn(r,T),zn(r,O),P.cancelled||M||(Yn(L)?setTimeout(P,L):Jn(r,a,P))})),e.data.show&&(n&&n(),j&&j(r,P)),D||M||P()}}}function Gn(e,n){function r(){w.cancelled||(e.data.show||((i.parentNode._pending||(i.parentNode._pending={}))[e.key]=e),p&&p(i),_&&(Vn(i,c),Vn(i,f),Bn(function(){Vn(i,u),zn(i,c),w.cancelled||b||(Yn($)?setTimeout(w,$):Jn(i,s,w))})),d&&d(i,w),_||b||w())}var i=e.elm;i._enterCb&&(i._enterCb.cancelled=!0,i._enterCb());var o=Un(e.data.transition);if(!o)return n();if(!i._leaveCb&&1===i.nodeType){var a=o.css,s=o.type,c=o.leaveClass,u=o.leaveToClass,f=o.leaveActiveClass,p=o.beforeLeave,d=o.leave,v=o.afterLeave,h=o.leaveCancelled,m=o.delayLeave,y=o.duration,_=a!==!1&&!qi,b=Qn(d),$=t(l(y)?y.leave:y),w=i._leaveCb=g(function(){i.parentNode&&i.parentNode._pending&&(i.parentNode._pending[e.key]=null),_&&(zn(i,u),zn(i,f)),w.cancelled?(_&&zn(i,c),h&&h(i)):(n(),v&&v(i)),i._leaveCb=null});m?m(r):r()}}function Yn(e){return"number"==typeof e&&!isNaN(e)}function Qn(e){if(!e)return!1;var t=e.fns;return t?Qn(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Xn(e,t){t.data.show||Zn(t)}function er(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],i)o=m(r,nr(a))>-1,a.selected!==o&&(a.selected=o);else if(h(nr(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function tr(e,t){for(var n=0,r=t.length;n<r;n++)if(h(nr(t[n]),e))return!1;return!0}function nr(e){return"_value"in e?e._value:e.value}function rr(e){e.target.composing=!0}function ir(e){e.target.composing=!1,or(e.target,"input")}function or(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function ar(e){return!e.componentInstance||e.data&&e.data.transition?e:ar(e.componentInstance._vnode)}function sr(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?sr(Q(t.children)):e}function cr(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var o in i)t[Li(o)]=i[o];return t}function ur(e,t){return/\d-keep-alive$/.test(t.tag)?e("keep-alive"):null}function lr(e){for(;e=e.parent;)if(e.data.transition)return!0}function fr(e,t){return t.key===e.key&&t.tag===e.tag}function pr(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function dr(e){e.data.newPos=e.elm.getBoundingClientRect()}function vr(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}function hr(e,t){var n=document.createElement("div");return n.innerHTML='<div a="'+e+'">',n.innerHTML.indexOf(t)>0}function mr(e){return Qa=Qa||document.createElement("div"),Qa.innerHTML=e,Qa.textContent}function gr(e,t){var n=t?Rs:Ps;return e.replace(n,function(e){return Ms[e]})}function yr(e,t){function n(t){f+=t,e=e.substring(t)}function r(){var t=e.match(us);if(t){var r={tagName:t[1],attrs:[],start:f};n(t[0].length);for(var i,o;!(i=e.match(ls))&&(o=e.match(as));)n(o[0].length),r.attrs.push(o);if(i)return r.unarySlash=i[1],n(i[0].length),r.end=f,r}}function i(e){var n=e.tagName,r=e.unarySlash;u&&("p"===s&&ns(n)&&o(s),ts(n)&&s===n&&o(n));for(var i=l(n)||"html"===n&&"head"===s||!!r,a=e.attrs.length,f=new Array(a),p=0;p<a;p++){var d=e.attrs[p];hs&&d[0].indexOf('""')===-1&&(""===d[3]&&delete d[3],""===d[4]&&delete d[4],""===d[5]&&delete d[5]);var v=d[3]||d[4]||d[5]||"";f[p]={name:d[1],value:gr(v,t.shouldDecodeNewlines)}}i||(c.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f}),s=n),t.start&&t.start(n,f,i,e.start,e.end)}function o(e,n,r){var i,o;if(null==n&&(n=f),null==r&&(r=f),e&&(o=e.toLowerCase()),e)for(i=c.length-1;i>=0&&c[i].lowerCasedTag!==o;i--);else i=0;if(i>=0){for(var a=c.length-1;a>=i;a--)t.end&&t.end(c[a].tag,n,r);c.length=i,s=i&&c[i-1].tag}else"br"===o?t.start&&t.start(e,[],!0,n,r):"p"===o&&(t.start&&t.start(e,[],!1,n,r),t.end&&t.end(e,n,r))}for(var a,s,c=[],u=t.expectHTML,l=t.isUnaryTag||Hi,f=0;e;){if(a=e,s&&Ls(s)){var p=s.toLowerCase(),d=Ds[p]||(Ds[p]=new RegExp("([\\s\\S]*?)(</"+p+"[^>]*>)","i")),v=0,h=e.replace(d,function(e,n,r){return v=r.length,"script"!==p&&"style"!==p&&"noscript"!==p&&(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),t.chars&&t.chars(n),""});f+=e.length-h.length,e=h,o(p,f-v,f)}else{var m=e.indexOf("<");if(0===m){if(ds.test(e)){var g=e.indexOf("-->");if(g>=0){n(g+3);continue}}if(vs.test(e)){var y=e.indexOf("]>");if(y>=0){n(y+2);continue}}var _=e.match(ps);if(_){n(_[0].length);continue}var b=e.match(fs);if(b){var $=f;n(b[0].length),o(b[1],$,f);continue}var w=r();if(w){i(w);continue}}var x=void 0,C=void 0,k=void 0;if(m>=0){for(C=e.slice(m);!(fs.test(C)||us.test(C)||ds.test(C)||vs.test(C)||(k=C.indexOf("<",1),k<0));)m+=k,C=e.slice(m);x=e.substring(0,m),n(m)}m<0&&(x=e,e=""),t.chars&&x&&t.chars(x)}if(e===a){t.chars&&t.chars(e);break}}o()}function _r(e,t){var n=t?Us(t):Fs;if(n.test(e)){for(var r,i,o=[],a=n.lastIndex=0;r=n.exec(e);){i=r.index,i>a&&o.push(JSON.stringify(e.slice(a,i)));var s=rn(r[1].trim());o.push("_s("+s+")"),a=i+r[0].length}return a<e.length&&o.push(JSON.stringify(e.slice(a))),o.join("+")}}function br(e,t){function n(e){e.pre&&(s=!1),_s(e.tag)&&(c=!1)}ms=t.warn||an,gs=t.getTagNamespace||Hi,ys=t.mustUseProp||Hi,_s=t.isPreTag||Hi,bs=sn(t.modules,"preTransformNode"),$s=sn(t.modules,"transformNode"),ws=sn(t.modules,"postTransformNode"),xs=t.delimiters;var r,i,o=[],a=t.preserveWhitespace!==!1,s=!1,c=!1;return yr(e,{warn:ms,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,shouldDecodeNewlines:t.shouldDecodeNewlines,start:function(e,a,u){function l(e){}var f=i&&i.ns||gs(e);Ki&&"svg"===f&&(a=Rr(a));var p={type:1,tag:e,attrsList:a,attrsMap:Mr(a),parent:i,children:[]};f&&(p.ns=f),Pr(p)&&!Qi()&&(p.forbidden=!0);for(var d=0;d<bs.length;d++)bs[d](p,t);if(s||($r(p),p.pre&&(s=!0)),_s(p.tag)&&(c=!0),s)wr(p);else{kr(p),Ar(p),Er(p),xr(p),p.plain=!p.key&&!a.length,Cr(p),jr(p),Nr(p);for(var v=0;v<$s.length;v++)$s[v](p,t);Ir(p)}if(r?o.length||r.if&&(p.elseif||p.else)&&(l(p),Tr(r,{exp:p.elseif,block:p})):(r=p,l(r)),i&&!p.forbidden)if(p.elseif||p.else)Or(p,i);else if(p.slotScope){i.plain=!1;var h=p.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[h]=p}else i.children.push(p),p.parent=i;u?n(p):(i=p,o.push(p));for(var m=0;m<ws.length;m++)ws[m](p,t)},end:function(){var e=o[o.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&!c&&e.children.pop(),o.length-=1,i=o[o.length-1],n(e)},chars:function(e){if(i&&(!Ki||"textarea"!==i.tag||i.attrsMap.placeholder!==e)){var t=i.children;if(e=c||e.trim()?Zs(e):a&&t.length?" ":""){var n;!s&&" "!==e&&(n=_r(e,xs))?t.push({type:2,expression:n,text:e}):" "===e&&t.length&&" "===t[t.length-1].text||t.push({type:3,text:e})}}}}),r}function $r(e){null!=dn(e,"v-pre")&&(e.pre=!0)}function wr(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}function xr(e){var t=pn(e,"key");t&&(e.key=t)}function Cr(e){var t=pn(e,"ref");t&&(e.ref=t,e.refInFor=Lr(e))}function kr(e){var t;if(t=dn(e,"v-for")){var n=t.match(zs);if(!n)return;e.for=n[2].trim();var r=n[1].trim(),i=r.match(Js);i?(e.alias=i[1].trim(),e.iterator1=i[2].trim(),i[3]&&(e.iterator2=i[3].trim())):e.alias=r}}function Ar(e){var t=dn(e,"v-if");if(t)e.if=t,Tr(e,{exp:t,block:e});else{null!=dn(e,"v-else")&&(e.else=!0);var n=dn(e,"v-else-if");n&&(e.elseif=n)}}function Or(e,t){var n=Sr(t.children);n&&n.if&&Tr(n,{exp:e.elseif,block:e})}function Sr(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}function Tr(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Er(e){var t=dn(e,"v-once");null!=t&&(e.once=!0)}function jr(e){if("slot"===e.tag)e.slotName=pn(e,"name");else{var t=pn(e,"slot");t&&(e.slotTarget='""'===t?'"default"':t),"template"===e.tag&&(e.slotScope=dn(e,"scope"))}}function Nr(e){var t;(t=pn(e,"is"))&&(e.component=t),null!=dn(e,"inline-template")&&(e.inlineTemplate=!0)}function Ir(e){var t,n,r,i,o,a,s,c,u=e.attrsList;for(t=0,n=u.length;t<n;t++)if(r=i=u[t].name,o=u[t].value,Bs.test(r))if(e.hasBindings=!0,s=Dr(r),s&&(r=r.replace(Ws,"")),Ks.test(r))r=r.replace(Ks,""),o=rn(o),c=!1,s&&(s.prop&&(c=!0,r=Li(r),"innerHtml"===r&&(r="innerHTML")),s.camel&&(r=Li(r))),c||ys(e.tag,e.attrsMap.type,r)?cn(e,r,o):un(e,r,o);else if(Vs.test(r))r=r.replace(Vs,""),fn(e,r,o,s);else{r=r.replace(Bs,"");var l=r.match(qs);l&&(a=l[1])&&(r=r.slice(0,-(a.length+1))),ln(e,r,i,o,a,s)}else un(e,r,JSON.stringify(o))}function Lr(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function Dr(e){var t=e.match(Ws);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function Mr(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}function Pr(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function Rr(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];Gs.test(r.name)||(r.name=r.name.replace(Ys,""),t.push(r))}return t}function Fr(e,t){e&&(Cs=Qs(t.staticKeys||""),ks=t.isReservedTag||Hi,Ur(e),Br(e,!1))}function Hr(e){return n("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function Ur(e){if(e.static=zr(e),1===e.type){if(!ks(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];Ur(r),r.static||(e.static=!1)}}}function Br(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)Br(e.children[n],t||!!e.for);e.ifConditions&&Vr(e.ifConditions,t)}}function Vr(e,t){for(var n=1,r=e.length;n<r;n++)Br(e[n].block,t)}function zr(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||ji(e.tag)||!ks(e.tag)||Jr(e)||!Object.keys(e).every(Cs))))}function Jr(e){for(;e.parent;){if(e=e.parent,"template"!==e.tag)return!1;if(e.for)return!0}return!1}function Kr(e,t){var n=t?"nativeOn:{":"on:{";for(var r in e)n+='"'+r+'":'+qr(r,e[r])+",";return n.slice(0,-1)+"}"}function qr(e,t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return qr(e,t)}).join(",")+"]";var n=ec.test(t.value),r=Xs.test(t.value);if(t.modifiers){var i="",o=[];for(var a in t.modifiers)rc[a]?(i+=rc[a],tc[a]&&o.push(a)):o.push(a);o.length&&(i+=Wr(o));var s=n?t.value+"($event)":r?"("+t.value+")($event)":t.value;return"function($event){"+i+s+"}"}return n||r?t.value:"function($event){"+t.value+"}"}function Wr(e){return"if(!('button' in $event)&&"+e.map(Zr).join("&&")+")return null;"}function Zr(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=tc[e];return"_k($event.keyCode,"+JSON.stringify(e)+(n?","+JSON.stringify(n):"")+")"}function Gr(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+(t.modifiers&&t.modifiers.prop?",true":"")+")"}}function Yr(e,t){var n=js,r=js=[],i=Ns;Ns=0,Is=t,As=t.warn||an,Os=sn(t.modules,"transformCode"),Ss=sn(t.modules,"genData"),Ts=t.directives||{},Es=t.isReservedTag||Hi;var o=e?Qr(e):'_c("div")';return js=n,Ns=i,{render:"with(this){return "+o+"}",staticRenderFns:r}}function Qr(e){if(e.staticRoot&&!e.staticProcessed)return Xr(e);if(e.once&&!e.onceProcessed)return ei(e);if(e.for&&!e.forProcessed)return ri(e);if(e.if&&!e.ifProcessed)return ti(e);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return hi(e);var t;if(e.component)t=mi(e.component,e);else{var n=e.plain?void 0:ii(e),r=e.inlineTemplate?null:ui(e,!0);t="_c('"+e.tag+"'"+(n?","+n:"")+(r?","+r:"")+")"}for(var i=0;i<Os.length;i++)t=Os[i](e,t);return t}return ui(e)||"void 0"}function Xr(e){return e.staticProcessed=!0,js.push("with(this){return "+Qr(e)+"}"),"_m("+(js.length-1)+(e.staticInFor?",true":"")+")"}function ei(e){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return ti(e);if(e.staticInFor){for(var t="",n=e.parent;n;){if(n.for){t=n.key;break}n=n.parent}return t?"_o("+Qr(e)+","+Ns++ +(t?","+t:"")+")":Qr(e)}return Xr(e)}function ti(e){return e.ifProcessed=!0,ni(e.ifConditions.slice())}function ni(e){function t(e){return e.once?ei(e):Qr(e)}if(!e.length)return"_e()";var n=e.shift();return n.exp?"("+n.exp+")?"+t(n.block)+":"+ni(e):""+t(n.block)}function ri(e){var t=e.for,n=e.alias,r=e.iterator1?","+e.iterator1:"",i=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+t+"),function("+n+r+i+"){return "+Qr(e)+"})"}function ii(e){var t="{",n=oi(e);n&&(t+=n+","),e.key&&(t+="key:"+e.key+","),e.ref&&(t+="ref:"+e.ref+","),e.refInFor&&(t+="refInFor:true,"),e.pre&&(t+="pre:true,"),e.component&&(t+='tag:"'+e.tag+'",');for(var r=0;r<Ss.length;r++)t+=Ss[r](e);if(e.attrs&&(t+="attrs:{"+gi(e.attrs)+"},"),e.props&&(t+="domProps:{"+gi(e.props)+"},"),e.events&&(t+=Kr(e.events)+","),e.nativeEvents&&(t+=Kr(e.nativeEvents,!0)+","),e.slotTarget&&(t+="slot:"+e.slotTarget+","),e.scopedSlots&&(t+=si(e.scopedSlots)+","),e.model&&(t+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=ai(e);i&&(t+=i+",")}return t=t.replace(/,$/,"")+"}",e.wrapData&&(t=e.wrapData(t)),t}function oi(e){var t=e.directives;if(t){var n,r,i,o,a="directives:[",s=!1;for(n=0,r=t.length;n<r;n++){i=t[n],o=!0;var c=Ts[i.name]||ic[i.name];c&&(o=!!c(e,i,As)),o&&(s=!0,a+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return s?a.slice(0,-1)+"]":void 0}}function ai(e){var t=e.children[0];if(1===t.type){var n=Yr(t,Is);return"inlineTemplate:{render:function(){"+n.render+"},staticRenderFns:["+n.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function si(e){return"scopedSlots:_u(["+Object.keys(e).map(function(t){return ci(t,e[t])}).join(",")+"])"}function ci(e,t){return"["+e+",function("+String(t.attrsMap.scope)+"){return "+("template"===t.tag?ui(t)||"void 0":Qr(t))+"}]"}function ui(e,t){var n=e.children;if(n.length){var r=n[0];if(1===n.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag)return Qr(r);var i=t?li(n):0;return"["+n.map(di).join(",")+"]"+(i?","+i:"")}}function li(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];if(1===r.type){if(fi(r)||r.ifConditions&&r.ifConditions.some(function(e){return fi(e.block)})){t=2;break}(pi(r)||r.ifConditions&&r.ifConditions.some(function(e){return pi(e.block)}))&&(t=1)}}return t}function fi(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function pi(e){return!Es(e.tag)}function di(e){return 1===e.type?Qr(e):vi(e)}function vi(e){return"_v("+(2===e.type?e.expression:yi(JSON.stringify(e.text)))+")"}function hi(e){var t=e.slotName||'"default"',n=ui(e),r="_t("+t+(n?","+n:""),i=e.attrs&&"{"+e.attrs.map(function(e){return Li(e.name)+":"+e.value}).join(",")+"}",o=e.attrsMap["v-bind"];return!i&&!o||n||(r+=",null"),i&&(r+=","+i),o&&(r+=(i?"":",null")+","+o),r+")"}function mi(e,t){var n=t.inlineTemplate?null:ui(t,!0);return"_c("+e+","+ii(t)+(n?","+n:"")+")"}function gi(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+yi(r.value)+","}return t.slice(0,-1)}function yi(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function _i(e,t){var n=br(e.trim(),t);Fr(n,t);var r=Yr(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}function bi(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),d}}function $i(e){function t(t,n){var r=Object.create(e),i=[],o=[];if(r.warn=function(e,t){(t?o:i).push(e)},n){n.modules&&(r.modules=(e.modules||[]).concat(n.modules)),n.directives&&(r.directives=u(Object.create(e.directives),n.directives));for(var a in n)"modules"!==a&&"directives"!==a&&(r[a]=n[a])}var s=_i(t,r);return s.errors=i,s.tips=o,s}function n(e,n,i){n=n||{};var o=n.delimiters?String(n.delimiters)+e:e;if(r[o])return r[o];var a=t(e,n),s={},c=[];s.render=bi(a.render,c);var u=a.staticRenderFns.length;s.staticRenderFns=new Array(u);for(var l=0;l<u;l++)s.staticRenderFns[l]=bi(a.staticRenderFns[l],c);return r[o]=s}var r=Object.create(null);return{compile:t,compileToFunctions:n}}function wi(e,t){var n=(t.warn||an,dn(e,"class"));n&&(e.staticClass=JSON.stringify(n));var r=pn(e,"class",!1);r&&(e.classBinding=r)}function xi(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function Ci(e,t){var n=(t.warn||an,dn(e,"style"));n&&(e.staticStyle=JSON.stringify(xa(n)));var r=pn(e,"style",!1);r&&(e.styleBinding=r)}function ki(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}function Ai(e,t){t.value&&cn(e,"textContent","_s("+t.value+")")}function Oi(e,t){t.value&&cn(e,"innerHTML","_s("+t.value+")")}function Si(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var Ti,Ei,ji=n("slot,component",!0),Ni=Object.prototype.hasOwnProperty,Ii=/-(\w)/g,Li=a(function(e){return e.replace(Ii,function(e,t){return t?t.toUpperCase():""})}),Di=a(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),Mi=/([^-])([A-Z])/g,Pi=a(function(e){return e.replace(Mi,"$1-$2").replace(Mi,"$1-$2").toLowerCase()}),Ri=Object.prototype.toString,Fi="[object Object]",Hi=function(){return!1},Ui=function(e){return e},Bi={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:Hi,isUnknownElement:Hi,getTagNamespace:d,parsePlatformTagName:Ui,mustUseProp:Hi,_assetTypes:["component","directive","filter"],_lifecycleHooks:["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],_maxUpdateCount:100},Vi="__proto__"in{},zi="undefined"!=typeof window,Ji=zi&&window.navigator.userAgent.toLowerCase(),Ki=Ji&&/msie|trident/.test(Ji),qi=Ji&&Ji.indexOf("msie 9.0")>0,Wi=Ji&&Ji.indexOf("edge/")>0,Zi=Ji&&Ji.indexOf("android")>0,Gi=Ji&&/iphone|ipad|ipod|ios/.test(Ji),Yi=Ji&&/chrome\/\d+/.test(Ji)&&!Wi,Qi=function(){return void 0===Ti&&(Ti=!zi&&"undefined"!=typeof global&&"server"===global.process.env.VUE_ENV),Ti},Xi=zi&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,eo="undefined"!=typeof Symbol&&y(Symbol)&&"undefined"!=typeof Reflect&&y(Reflect.ownKeys),to=function(){function e(){r=!1;var e=n.slice(0);n.length=0;for(var t=0;t<e.length;t++)e[t]()}var t,n=[],r=!1;if("undefined"!=typeof Promise&&y(Promise)){var i=Promise.resolve(),o=function(e){console.error(e)};t=function(){i.then(e).catch(o),Gi&&setTimeout(d)}}else if("undefined"==typeof MutationObserver||!y(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())t=function(){setTimeout(e,0)};else{var a=1,s=new MutationObserver(e),c=document.createTextNode(String(a));s.observe(c,{characterData:!0}),t=function(){a=(a+1)%2,c.data=String(a)}}return function(e,i){var o;if(n.push(function(){e&&e.call(i),o&&o(i)}),r||(r=!0,t()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){o=e})}}();Ei="undefined"!=typeof Set&&y(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return this.set[e]===!0},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var no=Object.freeze({}),ro=/[^\w.$]/,io=d,oo=0,ao=function(){this.id=oo++,this.subs=[]};ao.prototype.addSub=function(e){this.subs.push(e)},ao.prototype.removeSub=function(e){r(this.subs,e)},ao.prototype.depend=function(){ao.target&&ao.target.addDep(this)},ao.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},ao.target=null;var so=[],co=Array.prototype,uo=Object.create(co);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=co[e];b(uo,e,function(){for(var n=arguments,r=arguments.length,i=new Array(r);r--;)i[r]=n[r];var o,a=t.apply(this,i),s=this.__ob__;switch(e){case"push":o=i;break;case"unshift":o=i;break;case"splice":o=i.slice(2)}return o&&s.observeArray(o),s.dep.notify(),a})});var lo=Object.getOwnPropertyNames(uo),fo={shouldConvert:!0,isSettingProps:!1},po=function(e){if(this.value=e,this.dep=new ao,this.vmCount=0,b(e,"__ob__",this),Array.isArray(e)){var t=Vi?C:k;t(e,uo,lo),this.observeArray(e)}else this.walk(e)};po.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)O(e,t[n],e[t[n]])},po.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)A(e[t])};var vo=Bi.optionMergeStrategies;vo.data=function(e,t,n){return n?e||t?function(){var r="function"==typeof t?t.call(n):t,i="function"==typeof e?e.call(n):void 0;return r?j(r,i):i}:void 0:t?"function"!=typeof t?e:e?function(){return j(t.call(this),e.call(this))}:t:e},Bi._lifecycleHooks.forEach(function(e){vo[e]=N}),Bi._assetTypes.forEach(function(e){vo[e+"s"]=I}),vo.watch=function(e,t){if(!t)return Object.create(e||null);if(!e)return t;var n={};u(n,e);for(var r in t){var i=n[r],o=t[r];i&&!Array.isArray(i)&&(i=[i]),n[r]=i?i.concat(o):[o]}return n},vo.props=vo.methods=vo.computed=function(e,t){if(!t)return Object.create(e||null);if(!e)return t;var n=Object.create(null);return u(n,e),u(n,t),n};var ho=function(e,t){return void 0===t?e:t},mo=function(e,t,n,r,i,o,a){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.functionalContext=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1},go={child:{}};go.child.get=function(){return this.componentInstance},Object.defineProperties(mo.prototype,go);var yo,_o=function(){var e=new mo;return e.text="",e.isComment=!0,e},bo=a(function(e){var t="~"===e.charAt(0);e=t?e.slice(1):e;var n="!"===e.charAt(0);return e=n?e.slice(1):e,{name:e,once:t,capture:n}}),$o=null,wo=[],xo={},Co=!1,ko=!1,Ao=0,Oo=0,So=function(e,t,n,r){this.vm=e,e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Oo,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new Ei,this.newDepIds=new Ei,this.expression="","function"==typeof t?this.getter=t:(this.getter=$(t),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};So.prototype.get=function(){w(this);var e,t=this.vm;if(this.user)try{e=this.getter.call(t,t)}catch(e){B(e,t,'getter for watcher "'+this.expression+'"')}else e=this.getter.call(t,t);return this.deep&&ye(e),x(),this.cleanupDeps(),e},So.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},So.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},So.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ge(this)},So.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){B(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},So.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},So.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},So.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||r(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);
    this.active=!1}};var To=new Ei,Eo={enumerable:!0,configurable:!0,get:d,set:d},jo={lazy:!0},No={init:Le,prepatch:De,insert:Me,destroy:Pe},Io=Object.keys(No),Lo=1,Do=2,Mo=0;at(ft),Ee(ft),re(ft),ce(ft),rt(ft);var Po=[String,RegExp],Ro={name:"keep-alive",abstract:!0,props:{include:Po,exclude:Po},created:function(){this.cache=Object.create(null)},destroyed:function(){var e=this;for(var t in e.cache)$t(e.cache[t])},watch:{include:function(e){bt(this.cache,function(t){return _t(e,t)})},exclude:function(e){bt(this.cache,function(t){return!_t(e,t)})}},render:function(){var e=Q(this.$slots.default),t=e&&e.componentOptions;if(t){var n=yt(t);if(n&&(this.include&&!_t(this.include,n)||this.exclude&&_t(this.exclude,n)))return e;var r=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;this.cache[r]?e.componentInstance=this.cache[r].componentInstance:this.cache[r]=e,e.data.keepAlive=!0}return e}},Fo={KeepAlive:Ro};wt(ft),Object.defineProperty(ft.prototype,"$isServer",{get:Qi}),ft.version="2.2.2";var Ho,Uo,Bo,Vo,zo,Jo,Ko,qo,Wo,Zo=n("input,textarea,option,select"),Go=function(e,t,n){return"value"===n&&Zo(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Yo=n("contenteditable,draggable,spellcheck"),Qo=n("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Xo="http://www.w3.org/1999/xlink",ea=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},ta=function(e){return ea(e)?e.slice(6,e.length):""},na=function(e){return null==e||e===!1},ra={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ia=n("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template"),oa=n("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),aa=function(e){return"pre"===e},sa=function(e){return ia(e)||oa(e)},ca=Object.create(null),ua=Object.freeze({createElement:jt,createElementNS:Nt,createTextNode:It,createComment:Lt,insertBefore:Dt,removeChild:Mt,appendChild:Pt,parentNode:Rt,nextSibling:Ft,tagName:Ht,setTextContent:Ut,setAttribute:Bt}),la={create:function(e,t){Vt(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Vt(e,!0),Vt(t))},destroy:function(e){Vt(e,!0)}},fa=new mo("",{},[]),pa=["create","activate","update","remove","destroy"],da={create:Zt,update:Zt,destroy:function(e){Zt(e,fa)}},va=Object.create(null),ha=[la,da],ma={create:en,update:en},ga={create:nn,update:nn},ya=/[\w).+\-_$\]]/,_a="__r",ba="__c",$a={create:En,update:En},wa={create:jn,update:jn},xa=a(function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}),Ca=/^--/,ka=/\s*!important$/,Aa=function(e,t,n){Ca.test(t)?e.style.setProperty(t,n):ka.test(n)?e.style.setProperty(t,n.replace(ka,""),"important"):e.style[Sa(t)]=n},Oa=["Webkit","Moz","ms"],Sa=a(function(e){if(Wo=Wo||document.createElement("div"),e=Li(e),"filter"!==e&&e in Wo.style)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Oa.length;n++){var r=Oa[n]+t;if(r in Wo.style)return r}}),Ta={create:Rn,update:Rn},Ea=a(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),ja=zi&&!qi,Na="transition",Ia="animation",La="transition",Da="transitionend",Ma="animation",Pa="animationend";ja&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(La="WebkitTransition",Da="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ma="WebkitAnimation",Pa="webkitAnimationEnd"));var Ra=zi&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout,Fa=/\b(transform|all)(,|$)/,Ha=zi?{create:Xn,activate:Xn,remove:function(e,t){e.data.show?t():Gn(e,t)}}:{},Ua=[ma,ga,$a,wa,Ta,Ha],Ba=Ua.concat(ha),Va=Wt({nodeOps:ua,modules:Ba});qi&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&or(e,"input")});var za={inserted:function(e,t,n){if("select"===n.tag){var r=function(){er(e,t,n.context)};r(),(Ki||Wi)&&setTimeout(r,0)}else"textarea"!==n.tag&&"text"!==e.type||(e._vModifiers=t.modifiers,t.modifiers.lazy||(Zi||(e.addEventListener("compositionstart",rr),e.addEventListener("compositionend",ir)),qi&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){er(e,t,n.context);var r=e.multiple?t.value.some(function(t){return tr(t,e.options)}):t.value!==t.oldValue&&tr(t.value,e.options);r&&or(e,"change")}}},Ja={bind:function(e,t,n){var r=t.value;n=ar(n);var i=n.data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i&&!qi?(n.data.show=!0,Zn(n,function(){e.style.display=o})):e.style.display=r?o:"none"},update:function(e,t,n){var r=t.value,i=t.oldValue;if(r!==i){n=ar(n);var o=n.data&&n.data.transition;o&&!qi?(n.data.show=!0,r?Zn(n,function(){e.style.display=e.__vOriginalDisplay}):Gn(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none"}},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}},Ka={model:za,show:Ja},qa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]},Wa={name:"transition",props:qa,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag}),n.length)){var r=this.mode,i=n[0];if(lr(this.$vnode))return i;var a=sr(i);if(!a)return i;if(this._leaving)return ur(e,i);var s="__transition-"+this._uid+"-";a.key=null==a.key?s+a.tag:o(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var c=(a.data||(a.data={})).transition=cr(this),l=this._vnode,f=sr(l);if(a.data.directives&&a.data.directives.some(function(e){return"show"===e.name})&&(a.data.show=!0),f&&f.data&&!fr(a,f)){var p=f&&(f.data.transition=u({},c));if("out-in"===r)return this._leaving=!0,W(p,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),ur(e,i);if("in-out"===r){var d,v=function(){d()};W(c,"afterEnter",v),W(c,"enterCancelled",v),W(p,"delayLeave",function(e){d=e})}}return i}}},Za=u({tag:String,moveClass:String},qa);delete Za.mode;var Ga={props:Za,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=cr(this),s=0;s<i.length;s++){var c=i[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(o.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):l.push(p)}this.kept=e(t,null,u),this.removed=l}return e(t,null,o)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";if(e.length&&this.hasMove(e[0].elm,t)){e.forEach(pr),e.forEach(dr),e.forEach(vr);var n=document.body;n.offsetHeight;e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;Vn(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Da,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Da,e),n._moveCb=null,zn(n,t))})}})}},methods:{hasMove:function(e,t){if(!ja)return!1;if(null!=this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){Hn(n,e)}),Fn(n,t),n.style.display="none",this.$el.appendChild(n);var r=Kn(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}},Ya={Transition:Wa,TransitionGroup:Ga};ft.config.mustUseProp=Go,ft.config.isReservedTag=sa,ft.config.getTagNamespace=St,ft.config.isUnknownElement=Tt,u(ft.options.directives,Ka),u(ft.options.components,Ya),ft.prototype.__patch__=zi?Va:d,ft.prototype.$mount=function(e,t){return e=e&&zi?Et(e):void 0,ue(this,e,t)},setTimeout(function(){Bi.devtools&&Xi&&Xi.emit("init",ft)},0);var Qa,Xa=!!zi&&hr("\n","&#10;"),es=n("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),ts=n("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ns=n("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),rs=/([^\s"'<>\/=]+)/,is=/(?:=)/,os=[/"([^"]*)"+/.source,/'([^']*)'+/.source,/([^\s"'=<>`]+)/.source],as=new RegExp("^\\s*"+rs.source+"(?:\\s*("+is.source+")\\s*(?:"+os.join("|")+"))?"),ss="[a-zA-Z_][\\w\\-\\.]*",cs="((?:"+ss+"\\:)?"+ss+")",us=new RegExp("^<"+cs),ls=/^\s*(\/?)>/,fs=new RegExp("^<\\/"+cs+"[^>]*>"),ps=/^<!DOCTYPE [^>]+>/i,ds=/^<!--/,vs=/^<!\[/,hs=!1;"x".replace(/x(.)?/g,function(e,t){hs=""===t});var ms,gs,ys,_s,bs,$s,ws,xs,Cs,ks,As,Os,Ss,Ts,Es,js,Ns,Is,Ls=n("script,style",!0),Ds={},Ms={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n"},Ps=/&(?:lt|gt|quot|amp);/g,Rs=/&(?:lt|gt|quot|amp|#10);/g,Fs=/\{\{((?:.|\n)+?)\}\}/g,Hs=/[-.*+?^${}()|[\]\/\\]/g,Us=a(function(e){var t=e[0].replace(Hs,"\\$&"),n=e[1].replace(Hs,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),Bs=/^v-|^@|^:/,Vs=/^@|^v-on:/,zs=/(.*?)\s+(?:in|of)\s+(.*)/,Js=/\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/,Ks=/^:|^v-bind:/,qs=/:(.*)$/,Ws=/\.[^.]+/g,Zs=a(mr),Gs=/^xmlns:NS\d+/,Ys=/^NS\d+:/,Qs=a(Hr),Xs=/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,ec=/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/,tc={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},nc=function(e){return"if("+e+")return null;"},rc={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:nc("$event.target !== $event.currentTarget"),ctrl:nc("!$event.ctrlKey"),shift:nc("!$event.shiftKey"),alt:nc("!$event.altKey"),meta:nc("!$event.metaKey"),left:nc("'button' in $event && $event.button !== 0"),middle:nc("'button' in $event && $event.button !== 1"),right:nc("'button' in $event && $event.button !== 2")},ic={bind:Gr,cloak:d},oc={staticKeys:["staticClass"],transformNode:wi,genData:xi},ac={staticKeys:["staticStyle"],transformNode:Ci,genData:ki},sc=[oc,ac],cc={model:wn,text:Ai,html:Oi},uc={expectHTML:!0,modules:sc,directives:cc,isPreTag:aa,isUnaryTag:es,mustUseProp:Go,isReservedTag:sa,getTagNamespace:St,staticKeys:v(sc)},lc=$i(uc),fc=lc.compileToFunctions,pc=a(function(e){var t=Et(e);return t&&t.innerHTML}),dc=ft.prototype.$mount;return ft.prototype.$mount=function(e,t){if(e=e&&Et(e),e===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=pc(r));else{if(!r.nodeType)return this;r=r.innerHTML}else e&&(r=Si(e));if(r){var i=fc(r,{shouldDecodeNewlines:Xa,delimiters:n.delimiters},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return dc.call(this,e,t)},ft.compile=fc,ft});
;/*!lib/colorpicker/js/jquery.colorPicker.min.js*/
/**
 * Really Simple Color Picker in jQuery
 *
 * Licensed under the MIT (MIT-LICENSE.txt) licenses.
 *
 * Copyright (c) 2008-2012
 * Lakshan Perera (www.laktek.com) & Daniel Lacy (daniellacy.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */(function(a){var b,c,d=0,e={control:a('<div class="colorPicker-picker">&nbsp;</div>'),palette:a('<div id="colorPicker_palette" class="colorPicker-palette" />'),swatch:a('<div class="colorPicker-swatch">&nbsp;</div>'),hexLabel:a('<label for="colorPicker_hex">Hex</label>'),hexField:a('<input type="text" id="colorPicker_hex" />')},f="transparent",g;a.fn.colorPicker=function(b){return this.each(function(){var c=a(this),g=a.extend({},a.fn.colorPicker.defaults,b),h=a.fn.colorPicker.toHex(c.val().length>0?c.val():g.pickerDefault),i=e.control.clone(),j=e.palette.clone().attr("id","colorPicker_palette-"+d),k=e.hexLabel.clone(),l=e.hexField.clone(),m=j[0].id,n,o;a.each(g.colors,function(b){n=e.swatch.clone(),g.colors[b]===f?(n.addClass(f).text("X"),a.fn.colorPicker.bindPalette(l,n,f)):(n.css("background-color","#"+this),a.fn.colorPicker.bindPalette(l,n)),n.appendTo(j)}),k.attr("for","colorPicker_hex-"+d),l.attr({id:"colorPicker_hex-"+d,value:h}),l.bind("keydown",function(b){if(b.keyCode===13){var d=a.fn.colorPicker.toHex(a(this).val());a.fn.colorPicker.changeColor(d?d:c.val())}b.keyCode===27&&a.fn.colorPicker.hidePalette()}),l.bind("keyup",function(b){var d=a.fn.colorPicker.toHex(a(b.target).val());a.fn.colorPicker.previewColor(d?d:c.val())}),a('<div class="colorPicker_hexWrap" />').append(k).appendTo(j),j.find(".colorPicker_hexWrap").append(l),g.showHexField===!1&&(l.hide(),k.hide()),a("body").append(j),j.hide(),i.css("background-color",h),i.bind("click",function(){c.is(":not(:disabled)")&&a.fn.colorPicker.togglePalette(a("#"+m),a(this))}),b&&b.onColorChange?i.data("onColorChange",b.onColorChange):i.data("onColorChange",function(){}),(o=c.data("text"))&&i.html(o),c.after(i),c.bind("change",function(){c.next(".colorPicker-picker").css("background-color",a.fn.colorPicker.toHex(a(this).val()))}),c.val(h);if(c[0].tagName.toLowerCase()==="input")try{c.attr("type","hidden")}catch(p){c.css("visibility","hidden").css("position","absolute")}else c.hide();d++})},a.extend(!0,a.fn.colorPicker,{toHex:function(a){if(a.match(/[0-9A-F]{6}|[0-9A-F]{3}$/i))return a.charAt(0)==="#"?a:"#"+a;if(!a.match(/^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/))return!1;var b=[parseInt(RegExp.$1,10),parseInt(RegExp.$2,10),parseInt(RegExp.$3,10)],c=function(a){if(a.length<2)for(var b=0,c=2-a.length;b<c;b++)a="0"+a;return a};if(b.length===3){var d=c(b[0].toString(16)),e=c(b[1].toString(16)),f=c(b[2].toString(16));return"#"+d+e+f}},checkMouse:function(d,e){var f=c,g=a(d.target).parents("#"+f.attr("id")).length;if(d.target===a(f)[0]||d.target===b[0]||g>0)return;a.fn.colorPicker.hidePalette()},hidePalette:function(){a(document).unbind("mousedown",a.fn.colorPicker.checkMouse),a(".colorPicker-palette").hide()},showPalette:function(c){var d=b.prev("input").val();c.css({top:b.offset().top+b.outerHeight(),left:b.offset().left}),a("#color_value").val(d),c.show(),a(document).bind("mousedown",a.fn.colorPicker.checkMouse)},togglePalette:function(d,e){e&&(b=e),c=d,c.is(":visible")?a.fn.colorPicker.hidePalette():a.fn.colorPicker.showPalette(d)},changeColor:function(c){b.css("background-color",c),b.prev("input").val(c).change(),a.fn.colorPicker.hidePalette(),b.data("onColorChange").call(b,a(b).prev("input").attr("id"),c)},previewColor:function(a){b.css("background-color",a)},bindPalette:function(c,d,e){e=e?e:a.fn.colorPicker.toHex(d.css("background-color")),d.bind({click:function(b){g=e,a.fn.colorPicker.changeColor(e)},mouseover:function(b){g=c.val(),a(this).css("border-color","#598FEF"),c.val(e),a.fn.colorPicker.previewColor(e)},mouseout:function(d){a(this).css("border-color","#000"),c.val(b.css("background-color")),c.val(g),a.fn.colorPicker.previewColor(g)}})}}),a.fn.colorPicker.defaults={pickerDefault:"FFFFFF",colors:["000000","993300","333300","000080","333399","333333","800000","FF6600","808000","008000","008080","0000FF","666699","808080","FF0000","FF9900","99CC00","339966","33CCCC","3366FF","800080","999999","FF00FF","FFCC00","FFFF00","00FF00","00FFFF","00CCFF","993366","C0C0C0","FF99CC","FFCC99","FFFF99","CCFFFF","99CCFF","FFFFFF"],addColors:[],showHexField:!0}})(jQuery);
;/*!lib/artdialog/artdialog-min.js*/
(function(t,e,i){t.noop=t.noop||function(){};var n,o,a,l,s=0,r=t(e),c=t(document),f=t("html"),u=document.documentElement,d=e.VBArray&&!e.XMLHttpRequest,p="createTouch"in document&&!("onmousemove"in u)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent),h="artDialog"+ +new Date;var m=function(e,o,a){e=e||{};if(typeof e==="string"||e.nodeType===1){e={content:e,fixed:!p}}var l,r=m.defaults,c=e.follow=this.nodeType===1&&this||e.follow;for(var f in r){if(e[f]===i)e[f]=r[f]}if(typeof c==="string")c=t(c)[0];e.id=c&&c[h+"follow"]||e.id||h+s;l=m.list[e.id];if(c&&l)return l.follow(c).zIndex().focus();if(l)return l.zIndex().focus();if(p)e.fixed=false;if(!t.isArray(e.button)){e.button=e.button?[e.button]:[]}if(o!==i)e.ok=o;if(a!==i)e.cancel=a;e.ok&&e.button.push({name:e.okVal,callback:e.ok,focus:true});e.cancel&&e.button.push({name:e.cancelVal,callback:e.cancel});m.defaults.zIndex=e.zIndex;s++;return m.list[e.id]=n?n._init(e):new m.fn._init(e)};m.fn=m.prototype={version:"4.1.7",closed:true,_init:function(t){var i=this,o,a=t.icon,l=a&&(d?{png:"icons/"+a+".png"}:{backgroundImage:"url('"+t.path+"/skins/icons/"+a+".png')"});i.closed=false;i.config=t;i.DOM=o=i.DOM||i._getDOM();o.wrap.addClass(t.skin);o.close[t.cancel===false?"hide":"show"]();o.icon[0].style.display=a?"":"none";o.iconBg.css(l||{background:"none"});o.se.css("cursor",t.resize?"se-resize":"auto");o.title.css("cursor",t.drag?"move":"auto");o.content.css("padding",t.padding);i[t.show?"show":"hide"](true);i.button(t.button).title(t.title).content(t.content,true).size(t.width,t.height).time(t.time);t.follow?i.follow(t.follow):i.position(t.left,t.top);i.zIndex().focus();t.lock&&i.lock();i._addEvent();i._ie6PngFix();n=null;t.init&&t.init.call(i,e);return i},content:function(t){var e,n,o,a,l=this,s=l.DOM,r=s.wrap[0],c=r.offsetWidth,f=r.offsetHeight,u=parseInt(r.style.left),d=parseInt(r.style.top),p=r.style.width,h=s.content,m=h[0];l._elemBack&&l._elemBack();r.style.width="auto";if(t===i)return m;if(typeof t==="string"){h.html(t)}else if(t&&t.nodeType===1){a=t.style.display;e=t.previousSibling;n=t.nextSibling;o=t.parentNode;l._elemBack=function(){if(e&&e.parentNode){e.parentNode.insertBefore(t,e.nextSibling)}else if(n&&n.parentNode){n.parentNode.insertBefore(t,n)}else if(o){o.appendChild(t)}t.style.display=a;l._elemBack=null};h.html("");m.appendChild(t);t.style.display="block"}if(!arguments[1]){if(l.config.follow){l.follow(l.config.follow)}else{c=r.offsetWidth-c;f=r.offsetHeight-f;u=u-c/2;d=d-f/2;r.style.left=Math.max(u,0)+"px";r.style.top=Math.max(d,0)+"px"}if(p&&p!=="auto"){r.style.width=r.offsetWidth+"px"}l._autoPositionType()}l._ie6SelectFix();l._runScript(m);return l},title:function(t){var e=this.DOM,n=e.wrap,o=e.title,a="aui_state_noTitle";if(t===i)return o[0];if(t===false){o.hide().html("");n.addClass(a)}else{o.show().html(t||"");n.removeClass(a)}return this},position:function(t,e){var n=this,o=n.config,a=n.DOM.wrap[0],l=d?false:o.fixed,s=d&&n.config.fixed,f=c.scrollLeft(),u=c.scrollTop(),p=l?0:f,h=l?0:u,m=r.width(),g=r.height(),w=a.offsetWidth,_=a.offsetHeight,v=a.style;if(t||t===0){n._left=t.toString().indexOf("%")!==-1?t:null;t=n._toNumber(t,m-w);if(typeof t==="number"){t=s?t+=f:t+p;v.left=Math.max(t,p)+"px"}else if(typeof t==="string"){v.left=t}}if(e||e===0){n._top=e.toString().indexOf("%")!==-1?e:null;e=n._toNumber(e,g-_);if(typeof e==="number"){e=s?e+=u:e+h;v.top=Math.max(e,h)+"px"}else if(typeof e==="string"){v.top=e}}if(t!==i&&e!==i){n._follow=null;n._autoPositionType()}return n},size:function(t,e){var i,n,o,a,l=this,s=l.config,c=l.DOM,f=c.wrap,u=c.main,d=f[0].style,p=u[0].style;if(t){l._width=t.toString().indexOf("%")!==-1?t:null;i=r.width()-f[0].offsetWidth+u[0].offsetWidth;o=l._toNumber(t,i);t=o;if(typeof t==="number"){d.width="auto";p.width=Math.max(l.config.minWidth,t)+"px";d.width=f[0].offsetWidth+"px"}else if(typeof t==="string"){p.width=t;t==="auto"&&f.css("width","auto")}}if(e){l._height=e.toString().indexOf("%")!==-1?e:null;n=r.height()-f[0].offsetHeight+u[0].offsetHeight;a=l._toNumber(e,n);e=a;if(typeof e==="number"){p.height=Math.max(l.config.minHeight,e)+"px"}else if(typeof e==="string"){p.height=e}}l._ie6SelectFix();return l},follow:function(e){var i,n=this,o=n.config;if(typeof e==="string"||e&&e.nodeType===1){i=t(e);e=i[0]}if(!e||!e.offsetWidth&&!e.offsetHeight){return n.position(n._left,n._top)}var a=h+"follow",l=r.width(),s=r.height(),f=c.scrollLeft(),u=c.scrollTop(),p=i.offset(),m=e.offsetWidth,g=e.offsetHeight,w=d?false:o.fixed,_=w?p.left-f:p.left,v=w?p.top-u:p.top,y=n.DOM.wrap[0],x=y.style,b=y.offsetWidth,k=y.offsetHeight,D=_-(b-m)/2,M=v+g,T=w?0:f,O=w?0:u;D=D<T?_:D+b>l&&_-b>T?_-b+m:D;M=M+k>s+O&&v-k>O?v-k:M;x.left=D+"px";x.top=M+"px";n._follow&&n._follow.removeAttribute(a);n._follow=e;e[a]=o.id;n._autoPositionType();return n},button:function(){var e=this,n=arguments,o=e.DOM,a=o.buttons,l=a[0],s="aui_state_highlight",r=e._listeners=e._listeners||{},c=t.isArray(n[0])?n[0]:[].slice.call(n);if(n[0]===i)return l;t.each(c,function(i,n){var o=n.name,a=!r[o],c=!a?r[o].elem:document.createElement("button");if(!r[o])r[o]={};if(n.callback)r[o].callback=n.callback;if(n.className)c.className=n.className;if(n.focus){e._focus&&e._focus.removeClass(s);e._focus=t(c).addClass(s);e.focus()}c.setAttribute("type","button");c[h+"callback"]=o;c.disabled=!!n.disabled;if(a){c.innerHTML=o;r[o].elem=c;l.appendChild(c)}});a[0].style.display=c.length?"":"none";e._ie6SelectFix();return e},show:function(){this.DOM.wrap.show();!arguments[0]&&this._lockMaskWrap&&this._lockMaskWrap.show();return this},hide:function(){this.DOM.wrap.hide();!arguments[0]&&this._lockMaskWrap&&this._lockMaskWrap.hide();return this},close:function(t){if(this.closed)return this;var i=this,o=i.DOM,a=o.wrap,l=m.list,s=i.config.close,r=i.config.follow;i.time();if(typeof s==="function"&&s.call(i,e,t)===false){return i}i.unlock();i._elemBack&&i._elemBack();a[0].className=a[0].style.cssText="";o.title.html("");o.content.html("");o.buttons.html("");if(m.focus===i)m.focus=null;if(r)r.removeAttribute(h+"follow");delete l[i.config.id];i._removeEvent();i.hide(true)._setAbsolute();for(var c in i){if(i.hasOwnProperty(c)&&c!=="DOM")delete i[c]}n?a.remove():n=i;return i},time:function(t){var e=this,i=e.config.cancelVal,n=e._timer;n&&clearTimeout(n);if(t){e._timer=setTimeout(function(){e._click(i)},1e3*t)}return e},focus:function(){try{if(this.config.focus){var t=this._focus&&this._focus[0]||this.DOM.close[0];t&&t.focus()}}catch(t){}return this},zIndex:function(){var t=this,e=t.DOM,i=e.wrap,n=m.focus,o=m.defaults.zIndex++;i.css("zIndex",o);t._lockMask&&t._lockMask.css("zIndex",o-1);n&&n.DOM.wrap.removeClass("aui_state_focus");m.focus=t;i.addClass("aui_state_focus");return t},lock:function(){if(this._lock)return this;var e=this,i=m.defaults.zIndex-1,n=e.DOM.wrap,o=e.config,a=c.width(),l=c.height(),s=e._lockMaskWrap||t(document.body.appendChild(document.createElement("div"))),r=e._lockMask||t(s[0].appendChild(document.createElement("div"))),f="(document).documentElement",u=p?"width:"+a+"px;height:"+l+"px":"width:100%;height:100%",h=d?"position:absolute;left:expression("+f+".scrollLeft);top:expression("+f+".scrollTop);width:expression("+f+".clientWidth);height:expression("+f+".clientHeight)":"";e.zIndex();n.addClass("aui_state_lock");s[0].style.cssText=u+";position:fixed;z-index:"+i+";top:0;left:0;overflow:hidden;"+h;r[0].style.cssText="height:100%;background:"+o.background+";filter:alpha(opacity=0);opacity:0";if(d)r.html('<iframe src="about:blank" style="width:100%;height:100%;position:absolute;'+'top:0;left:0;z-index:-1;filter:alpha(opacity=0)"></iframe>');r.stop();r.bind("click",function(){e._reset()}).bind("dblclick",function(){e._click(e.config.cancelVal)});if(o.duration===0){r.css({opacity:o.opacity})}else{r.animate({opacity:o.opacity},o.duration)}e._lockMaskWrap=s;e._lockMask=r;e._lock=true;return e},unlock:function(){var t=this,e=t._lockMaskWrap,i=t._lockMask;if(!t._lock)return t;var o=e[0].style;var a=function(){if(d){o.removeExpression("width");o.removeExpression("height");o.removeExpression("left");o.removeExpression("top")}o.cssText="display:none";n&&e.remove()};i.stop().unbind();t.DOM.wrap.removeClass("aui_state_lock");if(!t.config.duration){a()}else{i.animate({opacity:0},t.config.duration,a)}t._lock=false;return t},_getDOM:function(){var e=document.createElement("div"),i=document.body;e.style.cssText="position:absolute;left:0;top:0";e.innerHTML=m._templates;i.insertBefore(e,i.firstChild);var n,o=0,a={wrap:t(e)},l=e.getElementsByTagName("*"),s=l.length;for(;o<s;o++){n=l[o].className.split("aui_")[1];if(n)a[n]=t(l[o])}return a},_toNumber:function(t,e){if(!t&&t!==0||typeof t==="number"){return t}var i=t.length-1;if(t.lastIndexOf("px")===i){t=parseInt(t)}else if(t.lastIndexOf("%")===i){t=parseInt(e*t.split("%")[0]/100)}return t},_ie6PngFix:d?function(){var t=0,e,i,n,o,a=m.defaults.path+"/skins/",l=this.DOM.wrap[0].getElementsByTagName("*");for(;t<l.length;t++){e=l[t];i=e.currentStyle["png"];if(i){n=a+i;o=e.runtimeStyle;o.backgroundImage="none";o.filter="progid:DXImageTransform.Microsoft."+"AlphaImageLoader(src='"+n+"',sizingMethod='crop')"}}}:t.noop,_ie6SelectFix:d?function(){var t=this.DOM.wrap,e=t[0],i=h+"iframeMask",n=t[i],o=e.offsetWidth,a=e.offsetHeight;o=o+"px";a=a+"px";if(n){n.style.width=o;n.style.height=a}else{n=e.appendChild(document.createElement("iframe"));t[i]=n;n.src="about:blank";n.style.cssText="position:absolute;z-index:-1;left:0;top:0;"+"filter:alpha(opacity=0);width:"+o+";height:"+a}}:t.noop,_runScript:function(t){var e,i=0,n=0,o=t.getElementsByTagName("script"),a=o.length,l=[];for(;i<a;i++){if(o[i].type==="text/dialog"){l[n]=o[i].innerHTML;n++}}if(l.length){l=l.join("");e=new Function(l);e.call(this)}},_autoPositionType:function(){this[this.config.fixed?"_setFixed":"_setAbsolute"]()},_setFixed:function(){d&&t(function(){var e="backgroundAttachment";if(f.css(e)!=="fixed"&&t("body").css(e)!=="fixed"){f.css({zoom:1,backgroundImage:"url(about:blank)",backgroundAttachment:"fixed"})}});return function(){var t=this.DOM.wrap,e=t[0].style;if(d){var i=parseInt(t.css("left")),n=parseInt(t.css("top")),o=c.scrollLeft(),a=c.scrollTop(),l="(document.documentElement)";this._setAbsolute();e.setExpression("left","eval("+l+".scrollLeft + "+(i-o)+') + "px"');e.setExpression("top","eval("+l+".scrollTop + "+(n-a)+') + "px"')}else{e.position="fixed"}}}(),_setAbsolute:function(){var t=this.DOM.wrap[0].style;if(d){t.removeExpression("left");t.removeExpression("top")}t.position="absolute"},_click:function(t){var i=this,n=i._listeners[t]&&i._listeners[t].callback;return typeof n!=="function"||n.call(i,e)!==false?i.close():i},_reset:function(t){var e,i=this,n=i._winSize||r.width()*r.height(),o=i._follow,a=i._width,l=i._height,s=i._left,c=i._top;if(t){e=i._winSize=r.width()*r.height();if(n===e)return}if(a||l)i.size(a,l);if(o){i.follow(o)}else if(s||c){i.position(s,c)}},_addEvent:function(){var t,i=this,n=i.config,o="CollectGarbage"in e,a=i.DOM;i._winResize=function(){t&&clearTimeout(t);t=setTimeout(function(){i._reset(o)},40)};r.bind("resize",i._winResize);a.wrap.bind("click",function(t){var e=t.target,o;if(e.disabled)return false;if(e===a.close[0]){i._click(n.cancelVal);return false}else{o=e[h+"callback"];o&&i._click(o)}i._ie6SelectFix()}).bind("mousedown",function(){i.zIndex()})},_removeEvent:function(){var t=this,e=t.DOM;e.wrap.unbind();r.unbind("resize",t._winResize)}};m.fn._init.prototype=m.fn;t.fn.dialog=t.fn.artDialog=function(){var t=arguments;this[this.live?"live":"bind"]("click",function(){m.apply(this,t);return false});return this};m.focus=null;m.get=function(t){return t===i?m.list:m.list[t]};m.list={};c.bind("keydown",function(t){var e=t.target,i=e.nodeName,n=/^INPUT|TEXTAREA$/,o=m.focus,a=t.keyCode;if(!o||!o.config.esc||n.test(i))return;a===27&&o._click(o.config.cancelVal)});r.bind("load",function(){setTimeout(function(){if(s)return;m({left:"-9999em",time:9,fixed:false,lock:false,focus:false})},150)});try{document.execCommand("BackgroundImageCache",false,true)}catch(t){}m._templates='<div class="aui_outer">'+'<table class="aui_border">'+"<tbody>"+"<tr>"+'<td class="aui_nw"></td>'+'<td class="aui_n"></td>'+'<td class="aui_ne"></td>'+"</tr>"+"<tr>"+'<td class="aui_w"></td>'+'<td class="aui_c">'+'<div class="aui_inner">'+'<table class="aui_dialog">'+"<tbody>"+"<tr>"+'<td colspan="2" class="aui_header">'+'<div class="aui_titleBar">'+'<div class="aui_title"></div>'+'<a class="aui_close" href="javascript:/*artDialog*/;">'+"×"+"</a>"+"</div>"+"</td>"+"</tr>"+"<tr>"+'<td class="aui_icon">'+'<div class="aui_iconBg"></div>'+"</td>"+'<td class="aui_main">'+'<div class="aui_content"></div>'+"</td>"+"</tr>"+"<tr>"+'<td colspan="2" class="aui_footer">'+'<div class="aui_buttons"></div>'+"</td>"+"</tr>"+"</tbody>"+"</table>"+"</div>"+"</td>"+'<td class="aui_e"></td>'+"</tr>"+"<tr>"+'<td class="aui_sw"></td>'+'<td class="aui_s"></td>'+'<td class="aui_se"></td>'+"</tr>"+"</tbody>"+"</table>"+"</div>";m.defaults={content:'<div class="aui_loading"><span>loading..</span></div>',title:"消息",button:null,ok:null,cancel:null,init:null,close:null,okVal:"确定",cancelVal:"取消",width:"auto",height:"auto",minWidth:96,minHeight:32,padding:"0",skin:"",icon:null,time:null,esc:true,focus:true,show:true,follow:null,path:l,lock:false,background:"#000",opacity:.3,duration:0,fixed:false,left:"50%",top:"38.2%",zIndex:1987,resize:true,drag:true};e.artDialog=t.dialog=t.artDialog=m})(this.art||this.jQuery&&(this.art=jQuery),this);(function(t){var e,i,n=t(window),o=t(document),a=document.documentElement,l=!("minWidth"in a.style),s="onlosecapture"in a,r="setCapture"in a;artDialog.dragEvent=function(){var t=this,e=function(e){var i=t[e];t[e]=function(){return i.apply(t,arguments)}};e("start");e("move");e("end")};artDialog.dragEvent.prototype={onstart:t.noop,start:function(t){o.bind("mousemove",this.move).bind("mouseup",this.end);this._sClientX=t.clientX;this._sClientY=t.clientY;this.onstart(t.clientX,t.clientY);return false},onmove:t.noop,move:function(t){this._mClientX=t.clientX;this._mClientY=t.clientY;this.onmove(t.clientX-this._sClientX,t.clientY-this._sClientY);return false},onend:t.noop,end:function(t){o.unbind("mousemove",this.move).unbind("mouseup",this.end);this.onend(t.clientX,t.clientY);return false}};i=function(t){var i,a,c,f,u,d,p=artDialog.focus,h=p.DOM,m=h.wrap,g=h.title,w=h.main;var _="getSelection"in window?function(){window.getSelection().removeAllRanges()}:function(){try{document.selection.empty()}catch(t){}};e.onstart=function(t,i){if(d){a=w[0].offsetWidth;c=w[0].offsetHeight}else{f=m[0].offsetLeft;u=m[0].offsetTop}o.bind("dblclick",e.end);!l&&s?g.bind("losecapture",e.end):n.bind("blur",e.end);r&&g[0].setCapture();m.addClass("aui_state_drag");p.focus()};e.onmove=function(t,e){if(d){var n=m[0].style,o=w[0].style,l=t+a,s=e+c;n.width="auto";o.width=Math.max(0,l)+"px";n.width=m[0].offsetWidth+"px";o.height=Math.max(0,s)+"px"}else{var o=m[0].style,r=Math.max(i.minX,Math.min(i.maxX,t+f)),h=Math.max(i.minY,Math.min(i.maxY,e+u));o.left=r+"px";o.top=h+"px"}_();p._ie6SelectFix()};e.onend=function(t,i){o.unbind("dblclick",e.end);!l&&s?g.unbind("losecapture",e.end):n.unbind("blur",e.end);r&&g[0].releaseCapture();l&&!p.closed&&p._autoPositionType();m.removeClass("aui_state_drag")};d=t.target===h.se[0]?true:false;i=function(){var t,e,i=p.DOM.wrap[0],a=i.style.position==="fixed",l=i.offsetWidth,s=i.offsetHeight,r=n.width(),c=n.height(),f=a?0:o.scrollLeft(),u=a?0:o.scrollTop(),t=r-l+f;e=c-s+u;return{minX:f,minY:u,maxX:t,maxY:e}}();e.start(t)};o.bind("mousedown",function(t){var n=artDialog.focus;if(!n)return;var o=t.target,a=n.config,l=n.DOM;if(a.drag!==false&&o===l.title[0]||a.resize!==false&&o===l.se[0]){e=e||new artDialog.dragEvent;i(t);return false}});var c,f,u,d="@ARTDIALOG.DATA",p="@ARTDIALOG.OPEN",h="@ARTDIALOG.OPENER",m=window.name=window.name||"@ARTDIALOG.WINNAME"+ +new Date,l=window.VBArray&&!window.XMLHttpRequest;t(function(){!window.jQuery&&document.compatMode==="BackCompat"&&alert('artDialog Error: document.compatMode === "BackCompat"')});var g=artDialog.top=function(){var t=window,e=function(t){try{var e=window[t].document;e.getElementsByTagName}catch(t){return false}return window[t].artDialog&&e.getElementsByTagName("frameset").length===0};if(e("top")){t=window.top}else if(e("parent")){t=window.parent}return t}();artDialog.parent=g;c=g.artDialog;u=function(){return c.defaults.zIndex};artDialog.data=function(t,e){var i=artDialog.top,n=i[d]||{};i[d]=n;if(e!==undefined){n[t]=e}else{return n[t]}return n};artDialog.removeData=function(t){var e=artDialog.top[d];if(e&&e[t])delete e[t]};artDialog.through=f=function(){var t=c.apply(this,arguments);if(g!==window)artDialog.list[t.config.id]=t;return t};g!==window&&t(window).bind("unload",function(){var t=artDialog.list,e;for(var i in t){if(t[i]){e=t[i].config;if(e)e.duration=0;t[i].close()}}});artDialog.open=function(e,i,n){i=i||{};var o,a,s,r,c,d,m,g,w,_=artDialog.top,v="position:absolute;left:-9999em;top:-9999em;border:none 0;background:transparent",y="width:100%;height:100%;border:none 0";if(n===false){var x=+new Date,b=e.replace(/([?&])_=[^&]*/,"$1_="+x);e=b+(b===e?(/\?/.test(e)?"&":"?")+"_="+x:"")}var k=function(){var e,n,r=a.content.find(".aui_loading"),f=o.config;s.addClass("aui_state_full");r&&r.hide();try{g=c.contentWindow;m=t(g.document);w=g.document.body}catch(t){c.style.cssText=y;f.follow?o.follow(f.follow):o.position(f.left,f.top);i.init&&i.init.call(o,g,_);i.init=null;return}e=f.width==="auto"?m.width()+(l?0:parseInt(t(w).css("marginLeft"))):f.width;n=f.height==="auto"?m.height():f.height;setTimeout(function(){c.style.cssText=y},0);o.size(e,n);f.follow?o.follow(f.follow):o.position(f.left,f.top);i.init&&i.init.call(o,g,_);i.init=null};var D={zIndex:u(),init:function(){o=this;a=o.DOM;r=a.main;s=a.content;c=o.iframe=_.document.createElement("iframe");c.src=e;c.width=o.config.width==="auto"?"100%":o.config.width;c.height=o.config.height==="auto"?"100%":o.config.height;c.name="Open"+o.config.id;c.style.cssText=v;c.setAttribute("frameborder",0,0);c.setAttribute("allowTransparency",true);d=t(c);o.content().appendChild(c);g=c.contentWindow;try{g.name=c.name;artDialog.data(c.name+p,o);artDialog.data(c.name+h,window)}catch(t){}d.bind("load",k)},close:function(t,e){d.css("display","none").unbind("load",k);if(i.close&&i.close.call(this,e,c.contentWindow,_,t)===false){return false}s.removeClass("aui_state_full");d[0].src="about:blank";d.remove();try{artDialog.removeData(c.name+p);artDialog.removeData(c.name+h)}catch(t){}}};if(typeof i.ok==="function")D.ok=function(){return i.ok.call(o,c.contentWindow,_)};if(typeof i.cancel==="function")D.cancel=function(){return i.cancel.call(o,c.contentWindow,_)};delete i.content;for(var M in i){if(D[M]===undefined)D[M]=i[M]}return f(D)};artDialog.open.api=artDialog.data(m+p);artDialog.opener=artDialog.data(m+h)||window;artDialog.open.origin=artDialog.opener;artDialog.close=function(t){var e=artDialog.data(m+p);e&&e.close(t);return false};g!=window&&t(document).bind("mousedown",function(){var t=artDialog.open.api;t&&t.zIndex()});artDialog.load=function(e,i,n){n=n||false;var o=i||{};var a={zIndex:u(),init:function(i){var a=this,l=a.config;t.ajax({url:e,success:function(t){a.content(t);o.init&&o.init.call(a,i)},cache:n})}};delete i.content;for(var l in o){if(a[l]===undefined)a[l]=o[l]}return f(a)};artDialog.alert=function(t,e){return f({id:"Alert",zIndex:u(),icon:"warning",fixed:true,lock:true,content:t,ok:true,close:e})};artDialog.confirm=function(t,e,i){return f({id:"Confirm",zIndex:u(),icon:"question",fixed:true,lock:true,opacity:.1,content:t,ok:function(t){return e.call(this,t)},cancel:function(t){return i&&i.call(this,t)}})};artDialog.prompt=function(t,e,i){i=i||"";var n;return f({id:"Prompt",zIndex:u(),icon:"question",fixed:true,lock:true,opacity:.1,content:['<div style="margin-bottom:5px;font-size:12px">',t,"</div>","<div>",'<input value="',i,'" style="width:18em;padding:6px 4px" />',"</div>"].join(""),init:function(){n=this.DOM.content.find("input")[0];n.select();n.focus()},ok:function(t){return e&&e.call(this,n.value,t)},cancel:true})};artDialog.tips=function(t,e){return f({id:"Tips",zIndex:u(),title:false,cancel:false,fixed:true,lock:false}).content('<div style="padding: 0 1em;">'+t+"</div>").time(e||1.5)};t(function(){var e=artDialog.dragEvent;if(!e)return;var i=t(window),n=t(document),o=l?"absolute":"fixed",a=e.prototype,s=document.createElement("div"),r=s.style;r.cssText="display:none;position:"+o+";left:0;top:0;width:100%;height:100%;"+"cursor:move;filter:alpha(opacity=0);opacity:0;background:#FFF";document.body.appendChild(s);a._start=a.start;a._end=a.end;a.start=function(){var t=artDialog.focus.DOM,e=t.main[0],l=t.content[0].getElementsByTagName("iframe")[0];a._start.apply(this,arguments);r.display="block";r.zIndex=artDialog.defaults.zIndex+3;if(o==="absolute"){r.width=i.width()+"px";r.height=i.height()+"px";r.left=n.scrollLeft()+"px";r.top=n.scrollTop()+"px"}if(l&&e.offsetWidth*e.offsetHeight>307200){e.style.visibility="hidden"}};a.end=function(){var t=artDialog.focus;a._end.apply(this,arguments);r.display="none";if(t)t.DOM.main[0].style.visibility="visible"}})})(this.art||this.jQuery&&(this.art=jQuery));
;/*!node_modules/process/browser.js*/
define('node_modules/process/browser', function(require, exports, module) {

  // shim for using process in browser
  var process = module.exports = {};
  
  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.
  
  var cachedSetTimeout;
  var cachedClearTimeout;
  
  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ())
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }
  
  
  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }
  
  
  
  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  
  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }
  
  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
  
      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  
  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };
  
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};
  
  function noop() {}
  
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;
  
  process.listeners = function (name) { return [] }
  
  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };
  
  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };
  

});

;/*!node_modules/lodash/lodash.js*/
define('node_modules/lodash/lodash', function(require, exports, module) {

  var process = require('node_modules/process/browser');
  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  ;(function() {
  
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined;
  
    /** Used as the semantic version number. */
    var VERSION = '4.17.4';
  
    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;
  
    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
  
    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
  
    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;
  
    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';
  
    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
  
    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
  
    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
  
    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
  
    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
  
    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
  
    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
  
    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
  
    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG],
      ['bind', WRAP_BIND_FLAG],
      ['bindKey', WRAP_BIND_KEY_FLAG],
      ['curry', WRAP_CURRY_FLAG],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG],
      ['flip', WRAP_FLIP_FLAG],
      ['partial', WRAP_PARTIAL_FLAG],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
      ['rearg', WRAP_REARG_FLAG]
    ];
  
    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
  
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
  
    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  
    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  
    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
  
    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        reLeadingDot = /^\./,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  
    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
  
    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
  
    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
  
    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  
    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;
  
    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  
    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;
  
    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  
    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;
  
    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
  
    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;
  
    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;
  
    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  
    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;
  
    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  
    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  
    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';
  
    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
        rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  
    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');
  
    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');
  
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  
    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');
  
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');
  
    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  
    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
      'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
      '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    ];
  
    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;
  
    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;
  
    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;
  
    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };
  
    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
  
    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
  
    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };
  
    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
  
    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  
    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  
    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();
  
    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  
    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;
  
    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;
  
    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());
  
    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  
    /*--------------------------------------------------------------------------*/
  
    /**
     * Adds the key-value `pair` to `map`.
     *
     * @private
     * @param {Object} map The map to modify.
     * @param {Array} pair The key-value pair to add.
     * @returns {Object} Returns `map`.
     */
    function addMapEntry(map, pair) {
      // Don't return `map.set` because it's not chainable in IE 11.
      map.set(pair[0], pair[1]);
      return map;
    }
  
    /**
     * Adds `value` to `set`.
     *
     * @private
     * @param {Object} set The set to modify.
     * @param {*} value The value to add.
     * @returns {Object} Returns `set`.
     */
    function addSetEntry(set, value) {
      // Don't return `set.add` because it's not chainable in IE 11.
      set.add(value);
      return set;
    }
  
    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
  
    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;
  
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
  
    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;
  
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
  
    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;
  
      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }
  
    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;
  
      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }
  
    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];
  
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
  
    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
  
    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;
  
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
  
    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);
  
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
  
    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;
  
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
  
    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;
  
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
  
    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }
  
    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;
  
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
  
    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');
  
    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }
  
    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
  
    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }
  
    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);
  
      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
  
    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }
  
    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;
  
      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
  
    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }
  
    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }
  
    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }
  
    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }
  
    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }
  
    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;
  
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
  
    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;
  
      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }
  
    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);
  
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
  
    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }
  
    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
  
    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
  
    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }
  
    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;
  
      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }
  
    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
  
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }
  
    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;
  
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
  
    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);
  
    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
  
    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }
  
    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }
  
    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
  
    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
  
    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];
  
      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }
  
    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
  
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
  
    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
  
    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];
  
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
  
    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
  
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
  
    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
  
      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }
  
    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;
  
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
  
    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }
  
    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }
  
    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }
  
    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
  
    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
  
    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
  
    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
  
    /*--------------------------------------------------------------------------*/
  
    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = (function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
  
      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
  
      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
  
      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];
  
      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;
  
      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;
  
      /** Used to generate unique IDs. */
      var idCounter = 0;
  
      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
      }());
  
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;
  
      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);
  
      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;
  
      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );
  
      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
          symIterator = Symbol ? Symbol.iterator : undefined,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined;
  
      var defineProperty = (function() {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }());
  
      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
  
      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
  
      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
  
      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;
  
      /** Used to lookup unminified function names. */
      var realNames = {};
  
      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
  
      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
  
      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object;
          object.prototype = undefined;
          return result;
        };
      }());
  
      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }
  
      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }
  
      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {
  
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,
  
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,
  
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,
  
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',
  
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {
  
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };
  
      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
  
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
  
      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }
  
      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }
  
      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);
  
        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];
  
        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;
  
          var iterIndex = -1,
              value = array[index];
  
          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);
  
            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }
  
      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
  
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
  
      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
  
      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
  
      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }
  
      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
      }
  
      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
        return this;
      }
  
      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
  
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
  
      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
  
      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
  
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
  
      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
  
        return index < 0 ? undefined : data[index][1];
      }
  
      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
  
      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
  
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
  
      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
  
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
  
      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash,
          'map': new (Map || ListCache),
          'string': new Hash
        };
      }
  
      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }
  
      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
  
      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
  
      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
  
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
  
      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
  
      /*------------------------------------------------------------------------*/
  
      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
  
        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }
  
      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
  
      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
  
      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
  
      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }
  
      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
  
        this.size = data.size;
        return result;
      }
  
      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }
  
      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }
  
      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
  
      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;
  
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                 // Safari 9 has enumerable `arguments.length` in strict mode.
                 key == 'length' ||
                 // Node.js 0.10 has enumerable non-index properties on buffers.
                 (isBuff && (key == 'offset' || key == 'parent')) ||
                 // PhantomJS 2 has enumerable non-index properties on typed arrays.
                 (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                 // Skip index properties.
                 isIndex(key, length)
              ))) {
            result.push(key);
          }
        }
        return result;
      }
  
      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }
  
      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }
  
      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }
  
      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if ((value !== undefined && !eq(object[key], value)) ||
            (value === undefined && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }
  
      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }
  
      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
  
      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }
  
      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
  
      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
  
      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }
  
      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;
  
        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }
        return result;
      }
  
      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }
  
      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;
  
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;
  
          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat
                ? copySymbolsIn(value, baseAssignIn(result, value))
                : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, baseClone, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack);
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);
  
        var keysFunc = isFull
          ? (isFlat ? getAllKeysIn : getAllKeys)
          : (isFlat ? keysIn : keys);
  
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function(subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }
  
      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }
  
      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];
  
          if ((value === undefined && !(key in object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
  
      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined, args); }, wait);
      }
  
      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;
  
        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        }
        else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
  
          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);
  
      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);
  
      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }
  
      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;
  
        while (++index < length) {
          var value = array[index],
              current = iteratee(value);
  
          if (current != null && (computed === undefined
                ? (current === current && !isSymbol(current))
                : comparator(current, computed)
              )) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;
  
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined || end > length) ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }
  
      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }
  
      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
  
        predicate || (predicate = isFlattenable);
        result || (result = []);
  
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();
  
      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);
  
      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
  
      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }
  
      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }
  
      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = castPath(path, object);
  
        var index = 0,
            length = path.length;
  
        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined;
      }
  
      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }
  
      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }
        return (symToStringTag && symToStringTag in Object(value))
          ? getRawTag(value)
          : objectToString(value);
      }
  
      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }
  
      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }
  
      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
  
      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }
  
      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];
  
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
            ? new SetCache(othIndex && array)
            : undefined;
        }
        array = arrays[0];
  
        var index = -1,
            seen = caches[0];
  
        outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
  
          value = (comparator || value !== 0) ? value : 0;
          if (!(seen
                ? cacheHas(seen, computed)
                : includes(result, computed, comparator)
              )) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache
                    ? cacheHas(cache, computed)
                    : includes(arrays[othIndex], computed, comparator))
                  ) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function(value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }
  
      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }
  
      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
  
      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }
  
      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }
  
      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
  
      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
  
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
  
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;
  
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return (objIsArr || isTypedArray(object))
            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
  
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
  
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
  
      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
  
      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;
  
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];
  
          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack;
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined
                  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                  : result
                )) {
              return false;
            }
          }
        }
        return true;
      }
  
      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
  
      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }
  
      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
  
      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) &&
          isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
  
      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }
  
      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];
  
        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }
  
      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
  
        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }
  
      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
  
      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return (objValue === undefined && objValue === srcValue)
            ? hasIn(object, path)
            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
  
      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack);
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          }
          else {
            var newValue = customizer
              ? customizer(object[key], srcValue, (key + ''), object, source, stack)
              : undefined;
  
            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
  
      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = object[key],
            srcValue = source[key],
            stacked = stack.get(srcValue);
  
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, (key + ''), object, source, stack)
          : undefined;
  
        var isCommon = newValue === undefined;
  
        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
  
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            }
            else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            }
            else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            }
            else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            }
            else {
              newValue = [];
            }
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            }
            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
              newValue = initCloneObject(srcValue);
            }
          }
          else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
  
      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }
  
      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
  
        var result = baseMap(collection, function(value, key, collection) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });
  
        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
  
      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }
  
      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};
  
        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);
  
          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }
  
      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
  
      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;
  
        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;
  
          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }
  
      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;
  
        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }
  
      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
  
      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);
  
        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }
  
      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);
  
        return result;
      }
  
      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }
  
      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }
  
      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }
  
      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);
  
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;
  
        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;
  
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = isObject(objValue)
                ? objValue
                : (isIndex(path[index + 1]) ? [] : {});
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
  
      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };
  
      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };
  
      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
  
      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;
  
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;
  
        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }
  
      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;
  
        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }
  
      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;
  
        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];
  
            if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }
  
      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
  
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;
  
        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);
  
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
  
      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];
  
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
  
          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }
  
      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }
  
      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;
  
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        }
        else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache;
        }
        else {
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
  
          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }
  
      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }
  
      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }
  
      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;
  
        while ((fromRight ? index-- : ++index < length) &&
          predicate(array[index], index, array)) {}
  
        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }
  
      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }
  
      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
            result = Array(length);
  
        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;
  
          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }
  
      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};
  
        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }
        return result;
      }
  
      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
  
      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }
  
      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
  
      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;
  
      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return (!start && end >= length) ? array : baseSlice(array, start, end);
      }
  
      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };
  
      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  
        buffer.copy(result);
        return result;
      }
  
      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }
  
      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
  
      /**
       * Creates a clone of `map`.
       *
       * @private
       * @param {Object} map The map to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned map.
       */
      function cloneMap(map, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
        return arrayReduce(array, addMapEntry, new map.constructor);
      }
  
      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }
  
      /**
       * Creates a clone of `set`.
       *
       * @private
       * @param {Object} set The set to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned set.
       */
      function cloneSet(set, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
        return arrayReduce(array, addSetEntry, new set.constructor);
      }
  
      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }
  
      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
  
      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
  
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);
  
          if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
            return 1;
          }
          if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
  
      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;
  
        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }
  
      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;
  
        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }
  
      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;
  
        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }
  
      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;
  
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
  
      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
  
        var index = -1,
            length = props.length;
  
        while (++index < length) {
          var key = props[index];
  
          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined;
  
          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
  
      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
  
      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
  
      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
  
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }
  
      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
  
          customizer = (assigner.length > 3 && typeof customizer == 'function')
            ? (length--, customizer)
            : undefined;
  
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
  
      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);
  
          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
  
      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;
  
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
  
      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
  
        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
  
      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);
  
          var strSymbols = hasUnicode(string)
            ? stringToArray(string)
            : undefined;
  
          var chr = strSymbols
            ? strSymbols[0]
            : string.charAt(0);
  
          var trailing = strSymbols
            ? castSlice(strSymbols, 1).join('')
            : string.slice(1);
  
          return chr[methodName]() + trailing;
        };
      }
  
      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }
  
      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
  
          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }
  
      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
  
        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);
  
          while (index--) {
            args[index] = arguments[index];
          }
          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
            ? []
            : replaceHolders(args, placeholder);
  
          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, undefined,
              args, holders, undefined, undefined, arity - length);
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }
  
      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }
  
      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;
  
          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];
  
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;
  
            if (data && isLaziable(data[0]) &&
                  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length && data[9] == 1
                ) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func))
                ? wrapper[funcName]()
                : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];
  
            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;
  
            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }
  
      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);
  
        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;
  
          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, thisArg,
              args, newHolders, argPos, ary, arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
  
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
  
      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function(object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }
  
      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result;
          if (value === undefined && other === undefined) {
            return defaultValue;
          }
          if (value !== undefined) {
            result = value;
          }
          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }
  
      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }
  
      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
  
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length);
      }
  
      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
  
        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
  
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
  
      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
  
      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
  
      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
  
        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
  
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
          newHoldersRight, argPos, ary, arity
        ];
  
        var result = wrapFunc.apply(undefined, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }
  
      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
  
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }
  
      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
        return new Set(values);
      };
  
      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
  
      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }
        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
  
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
  
          partials = holders = undefined;
        }
        var data = isBindKey ? undefined : getData(func);
  
        var newData = [
          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
          argPos, ary, arity
        ];
  
        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined
          ? (isBindKey ? 0 : func.length)
          : nativeMax(newData[9] - length, 0);
  
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }
  
      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          return srcValue;
        }
        return objValue;
      }
  
      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }
  
      /**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }
  
      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;
  
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
  
        stack.set(array, other);
        stack.set(other, array);
  
        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];
  
          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
              result = false;
              break;
            }
          } else if (!(
                arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }
  
      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
  
          case arrayBufferTag:
            if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;
  
          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
  
          case errorTag:
            return object.name == other.name && object.message == other.message;
  
          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == (other + '');
  
          case mapTag:
            var convert = mapToArray;
  
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
  
            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
  
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;
  
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
  
      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;
  
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
  
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];
  
          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined
                ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                : compared
              )) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;
  
          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }
  
      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }
  
      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
  
      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
  
      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };
  
      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;
  
        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }
  
      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }
  
      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }
  
      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
          ? data[typeof key == 'string' ? 'string' : 'hash']
          : data.map;
      }
  
      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;
  
        while (length--) {
          var key = result[length],
              value = object[key];
  
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
  
      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }
  
      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];
  
        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}
  
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
  
      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
  
      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };
  
      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;
  
      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';
  
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString: return dataViewTag;
              case mapCtorString: return mapTag;
              case promiseCtorString: return promiseTag;
              case setCtorString: return setTag;
              case weakMapCtorString: return weakMapTag;
            }
          }
          return result;
        };
      }
  
      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;
  
        while (++index < length) {
          var data = transforms[index],
              size = data.size;
  
          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }
  
      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
  
      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
  
        var index = -1,
            length = path.length,
            result = false;
  
        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) &&
          (isArray(object) || isArguments(object));
      }
  
      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = array.constructor(length);
  
        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }
  
      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !isPrototype(object))
          ? baseCreate(getPrototype(object))
          : {};
      }
  
      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, cloneFunc, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
  
          case boolTag:
          case dateTag:
            return new Ctor(+object);
  
          case dataViewTag:
            return cloneDataView(object, isDeep);
  
          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            return cloneTypedArray(object, isDeep);
  
          case mapTag:
            return cloneMap(object, isDeep, cloneFunc);
  
          case numberTag:
          case stringTag:
            return new Ctor(object);
  
          case regexpTag:
            return cloneRegExp(object);
  
          case setTag:
            return cloneSet(object, isDeep, cloneFunc);
  
          case symbolTag:
            return cloneSymbol(object);
        }
      }
  
      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }
  
      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) ||
          !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
  
      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length &&
          (typeof value == 'number' || reIsUint.test(value)) &&
          (value > -1 && value % 1 == 0 && value < length);
      }
  
      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)
            ) {
          return eq(object[index], value);
        }
        return false;
      }
  
      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object));
      }
  
      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
          ? (value !== '__proto__')
          : (value === null);
      }
  
      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];
  
        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }
  
      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
      }
  
      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;
  
      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
  
        return value === proto;
      }
  
      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
  
      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue &&
            (srcValue !== undefined || (key in Object(object)));
        };
      }
  
      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
  
        var cache = result.cache;
        return result;
      }
  
      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
  
        var isCombo =
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
          ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
  
        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;
  
        return data;
      }
  
      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
  
      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
  
      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);
  
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }
  
      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }
  
      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);
  
        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }
        return array;
      }
  
      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);
  
      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };
  
      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);
  
      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = (reference + '');
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
  
      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
  
        return function() {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
  
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }
  
      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
  
        size = size === undefined ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
  
          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }
  
      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (reLeadingDot.test(string)) {
          result.push('');
        }
        string.replace(rePropName, function(match, number, quote, string) {
          result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      });
  
      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }
  
      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return (func + '');
          } catch (e) {}
        }
        return '';
      }
  
      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = '_.' + pair[0];
          if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
  
      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__  = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));
  
        while (index < length) {
          result[resIndex++] = baseSlice(array, index, (index += size));
        }
        return result;
      }
  
      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];
  
        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
  
      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;
  
        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }
  
      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
          : [];
      });
  
      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function(array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
          : [];
      });
  
      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function(array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
          : [];
      });
  
      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
  
      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
  
      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true, true)
          : [];
      }
  
      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true)
          : [];
      }
  
      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }
  
      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }
  
      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }
  
      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
  
      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }
  
      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }
  
      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};
  
        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }
  
      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return (array && array.length) ? array[0] : undefined;
      }
  
      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }
  
      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }
  
      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped)
          : [];
      });
  
      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function(arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
  
        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, getIteratee(iteratee, 2))
          : [];
      });
  
      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
  
        comparator = typeof comparator == 'function' ? comparator : undefined;
        if (comparator) {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, undefined, comparator)
          : [];
      });
  
      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }
  
      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }
  
      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value
          ? strictLastIndexOf(array, value, index)
          : baseFindIndex(array, baseIsNaN, index, true);
      }
  
      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
      }
  
      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);
  
      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values)
          : array;
      }
  
      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, getIteratee(iteratee, 2))
          : array;
      }
  
      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, undefined, comparator)
          : array;
      }
  
      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
  
        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
  
        return result;
      });
  
      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;
  
        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }
  
      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }
  
      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }
  
      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }
  
      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }
  
      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
  
      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }
  
      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }
  
      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
  
      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return (array && array.length)
          ? baseSortedUniq(array)
          : [];
      }
  
      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return (array && array.length)
          ? baseSortedUniq(array, getIteratee(iteratee, 2))
          : [];
      }
  
      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }
  
      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
  
      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
  
      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), false, true)
          : [];
      }
  
      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3))
          : [];
      }
  
      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
  
      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
  
      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });
  
      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return (array && array.length) ? baseUniq(array) : [];
      }
  
      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }
  
      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
      }
  
      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }
  
      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function(group) {
          return apply(iteratee, undefined, group);
        });
      }
  
      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, values)
          : [];
      });
  
      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
  
      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
  
      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
  
      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);
  
      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }
  
      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }
  
      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
  
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }
  
      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
  
      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }
  
      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function(object) { return baseAt(object, paths); };
  
        if (length > 1 || this.__actions__.length ||
            !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined);
          }
          return array;
        });
      });
  
      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }
  
      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
  
      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
  
        return { 'done': done, 'value': value };
      }
  
      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }
  
      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;
  
        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }
  
      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
  
      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });
  
      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }
  
      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
  
      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);
  
      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);
  
      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }
  
      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }
  
      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }
  
      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }
  
      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }
  
      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });
  
      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
  
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection)
          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
      }
  
      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
  
        baseEach(collection, function(value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
  
      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function(result, value, key) {
        baseAssignValue(result, key, value);
      });
  
      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }
  
      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
  
      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });
  
      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
  
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }
  
      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
  
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }
  
      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
  
      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }
  
      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
  
      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
  
      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }
  
      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }
  
      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
       */
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function() {
        return root.Date.now();
      };
  
      /*------------------------------------------------------------------------*/
  
      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
  
      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = (func && n == null) ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }
  
      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined;
          }
          return result;
        };
      }
  
      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
  
      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
  
      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }
  
      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }
  
      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;
  
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
  
        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
  
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
  
        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }
  
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              result = wait - timeSinceLastCall;
  
          return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
        }
  
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
  
          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }
  
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
  
        function trailingEdge(time) {
          timerId = undefined;
  
          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
          return result;
        }
  
        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }
  
        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }
  
        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
  
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
  
          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
  
      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
  
      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
  
      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
  
      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;
  
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }
  
      // Expose `MapCache`.
      memoize.Cache = MapCache;
  
      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0: return !predicate.call(this);
            case 1: return !predicate.call(this, args[0]);
            case 2: return !predicate.call(this, args[0], args[1]);
            case 3: return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
  
      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }
  
      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function(func, transforms) {
        transforms = (transforms.length == 1 && isArray(transforms[0]))
          ? arrayMap(transforms[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
  
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);
  
          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });
  
      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
  
      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
  
      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });
  
      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }
  
      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);
  
          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }
  
      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;
  
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }
  
      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }
  
      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }
  
      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
  
      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
  
      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
  
      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
  
      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }
  
      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other);
      }
  
      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);
  
      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
  
      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee');
      };
  
      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;
  
      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
  
      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
  
      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
  
      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false ||
          (isObjectLike(value) && baseGetTag(value) == boolTag);
      }
  
      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;
  
      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
  
      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }
  
      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) &&
            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
              isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }
  
      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
  
      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }
  
      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag ||
          (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
      }
  
      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }
  
      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
  
      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }
  
      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' &&
          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
  
      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }
  
      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }
  
      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  
      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }
  
      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }
  
      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }
  
      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
  
      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }
  
      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }
  
      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' ||
          (isObjectLike(value) && baseGetTag(value) == numberTag);
      }
  
      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString;
      }
  
      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
  
      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }
  
      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  
      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' ||
          (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
      }
  
      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' ||
          (isObjectLike(value) && baseGetTag(value) == symbolTag);
      }
  
      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  
      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined;
      }
  
      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }
  
      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }
  
      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);
  
      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
  
      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
  
        return func(value);
      }
  
      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = (value < 0 ? -1 : 1);
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
  
      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
  
        return result === result ? (remainder ? result - remainder : result) : 0;
      }
  
      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
  
      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }
  
      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
  
      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return value
          ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
          : (value === 0 ? value : 0);
      }
  
      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
  
      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });
  
      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
  
      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
  
      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);
  
      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }
  
      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function(args) {
        args.push(undefined, customDefaultsAssignIn);
        return apply(assignInWith, undefined, args);
      });
  
      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });
  
      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }
  
      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
  
      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null
          ? object
          : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }
  
      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null
          ? object
          : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }
  
      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }
  
      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }
  
      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }
  
      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
  
      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }
  
      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }
  
      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
  
      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function(result, value, key) {
        result[value] = key;
      }, constant(identity));
  
      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function(result, value, key) {
        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
  
      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);
  
      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
  
      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
  
      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
  
        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }
  
      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
  
        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }
  
      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
  
      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
  
      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });
  
      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }
  
      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
  
      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }
  
      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = castPath(path, object);
  
        var index = -1,
            length = path.length;
  
        // Ensure the loop is entered when path is empty.
        if (!length) {
          length = 1;
          object = undefined;
        }
        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];
          if (value === undefined) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }
  
      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }
  
      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }
  
      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);
  
      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);
  
      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
  
        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor : [];
          }
          else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
          else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }
  
      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }
  
      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }
  
      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }
  
      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }
  
      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }
        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }
  
      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }
  
      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }
        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          }
          else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }
        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        }
        else {
          lower = toFinite(lower);
          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
        }
        return baseRandom(lower, upper);
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });
  
      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }
  
      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }
  
      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
  
        var length = string.length;
        position = position === undefined
          ? length
          : baseClamp(toInteger(position), 0, length);
  
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }
  
      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }
  
      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return (string && reHasRegExpChar.test(string))
          ? string.replace(reRegExpChar, '\\$&')
          : string;
      }
  
      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
  
      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
  
      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');
  
      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
  
        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return (
          createPadding(nativeFloor(mid), chars) +
          string +
          createPadding(nativeCeil(mid), chars)
        );
      }
  
      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
  
        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (string + createPadding(length - strLength, chars))
          : string;
      }
  
      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
  
        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (createPadding(length - strLength, chars) + string)
          : string;
      }
  
      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }
  
      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }
  
      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);
  
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }
  
      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });
  
      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }
        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (
              typeof separator == 'string' ||
              (separator != null && !isRegExp(separator))
            )) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }
  
      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });
  
      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null
          ? 0
          : baseClamp(toInteger(position), 0, string.length);
  
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }
  
      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;
  
        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
  
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
  
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
  
        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');
  
        // Use a sourceURL for easier debugging.
        var sourceURL = '//# sourceURL=' +
          ('sourceURL' in options
            ? options.sourceURL
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';
  
        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
  
          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
  
          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;
  
          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });
  
        source += "';\n";
  
        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');
  
        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';
  
        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source)
            .apply(undefined, importsValues);
        });
  
        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }
  
      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }
  
      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }
  
      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
  
        return castSlice(strSymbols, start, end).join('');
      }
  
      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
  
        return castSlice(strSymbols, 0, end).join('');
      }
  
      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
  
        return castSlice(strSymbols, start).join('');
      }
  
      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;
  
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);
  
        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols
          ? castSlice(strSymbols, 0, end).join('')
          : string.slice(0, end);
  
        if (separator === undefined) {
          return result + omission;
        }
        if (strSymbols) {
          end += (result.length - end);
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;
  
            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }
  
      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }
  
      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
  
      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');
  
      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;
  
        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
  
      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });
  
      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
  
        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
  
        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
  
      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }
  
      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }
  
      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return (value == null || value !== value) ? defaultValue : value;
      }
  
      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();
  
      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);
  
      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }
  
      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
  
      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }
  
      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
  
      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });
  
      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });
  
      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);
  
        if (options == null &&
            !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
  
        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
  
                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
  
        return object;
      }
  
      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }
  
      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }
  
      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
  
      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);
  
      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);
  
      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       */
      var overSome = createOver(arraySome);
  
      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
  
      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }
  
      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();
  
      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);
  
      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }
  
      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }
  
      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }
  
      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }
  
      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }
  
      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
  
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
  
        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }
  
      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }
  
      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }
  
      /*------------------------------------------------------------------------*/
  
      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
  
      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');
  
      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
  
      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');
  
      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseGt)
          : undefined;
      }
  
      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
          : undefined;
      }
  
      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }
  
      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }
  
      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseLt)
          : undefined;
      }
  
      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
          : undefined;
      }
  
      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
  
      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');
  
      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
  
      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return (array && array.length)
          ? baseSum(array, identity)
          : 0;
      }
  
      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return (array && array.length)
          ? baseSum(array, getIteratee(iteratee, 2))
          : 0;
      }
  
      /*------------------------------------------------------------------------*/
  
      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
  
      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
  
      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);
  
      /*------------------------------------------------------------------------*/
  
      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
  
      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
  
      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }()), { 'chain': false });
  
      /*------------------------------------------------------------------------*/
  
      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;
  
      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });
  
      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
  
          var result = (this.__filtered__ && !index)
            ? new LazyWrapper(this)
            : this.clone();
  
          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };
  
        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
  
      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
  
        LazyWrapper.prototype[methodName] = function(iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
  
      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');
  
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
  
      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');
  
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
  
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };
  
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
  
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
  
      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });
  
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
  
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
  
        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };
  
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
  
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
  
      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);
  
        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);
  
          var interceptor = function(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return (isTaker && chainAll) ? result[0] : result;
          };
  
          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;
  
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
        };
      });
  
      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);
  
        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
  
      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = (lodashFunc.name + ''),
              names = realNames[key] || (realNames[key] = []);
  
          names.push({ 'name': methodName, 'func': lodashFunc });
        }
      });
  
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
  
      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
  
      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
  
      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;
  
      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    });
  
    /*--------------------------------------------------------------------------*/
  
    // Export lodash.
    var _ = runInContext();
  
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      // Expose Lodash on the global object to prevent errors when Lodash is
      // loaded by a script tag in the presence of an AMD loader.
      // See http://requirejs.org/docs/errors.html#mismatch for more details.
      // Use `_.noConflict` to remove Lodash from the global object.
      root._ = _;
  
      // Define as an anonymous module so, through path mapping, it can be
      // referenced as the "underscore" module.
      define(function() {
        return _;
      });
    }
    // Check for `exports` after `define` in case a build optimizer adds it.
    else if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    }
    else {
      // Export to the global object.
      root._ = _;
    }
  }.call(this));
  

});

;/*!node_modules/q/q.js*/
define('node_modules/q/q', function(require, exports, module) {

  var process = require('node_modules/process/browser');
  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  // vim:ts=4:sts=4:sw=4:
  /*!
   *
   * Copyright 2009-2017 Kris Kowal under the terms of the MIT
   * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
   *
   * With parts by Tyler Close
   * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
   * at http://www.opensource.org/licenses/mit-license.html
   * Forked at ref_send.js version: 2009-05-11
   *
   * With parts by Mark Miller
   * Copyright (C) 2011 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   */
  
  (function (definition) {
      "use strict";
  
      // This file will function properly as a <script> tag, or a module
      // using CommonJS and NodeJS or RequireJS module formats.  In
      // Common/Node/RequireJS, the module exports the Q API and when
      // executed as a simple <script>, it creates a Q global instead.
  
      // Montage Require
      if (typeof bootstrap === "function") {
          bootstrap("promise", definition);
  
      // CommonJS
      } else if (typeof exports === "object" && typeof module === "object") {
          module.exports = definition();
  
      // RequireJS
      } else if (typeof define === "function" && define.amd) {
          define(definition);
  
      // SES (Secure EcmaScript)
      } else if (typeof ses !== "undefined") {
          if (!ses.ok()) {
              return;
          } else {
              ses.makeQ = definition;
          }
  
      // <script>
      } else if (typeof window !== "undefined" || typeof self !== "undefined") {
          // Prefer window over self for add-on scripts. Use self for
          // non-windowed contexts.
          var global = typeof window !== "undefined" ? window : self;
  
          // Get the `window` object, save the previous Q global
          // and initialize Q as a global.
          var previousQ = global.Q;
          global.Q = definition();
  
          // Add a noConflict function so Q can be removed from the
          // global namespace.
          global.Q.noConflict = function () {
              global.Q = previousQ;
              return this;
          };
  
      } else {
          throw new Error("This environment was not anticipated by Q. Please file a bug.");
      }
  
  })(function () {
  "use strict";
  
  var hasStacks = false;
  try {
      throw new Error();
  } catch (e) {
      hasStacks = !!e.stack;
  }
  
  // All code after this point will be filtered from stack traces reported
  // by Q.
  var qStartingLine = captureLine();
  var qFileName;
  
  // shims
  
  // used for fallback in "allResolved"
  var noop = function () {};
  
  // Use the fastest possible means to execute a task in a future turn
  // of the event loop.
  var nextTick =(function () {
      // linked list of tasks (single, with head node)
      var head = {task: void 0, next: null};
      var tail = head;
      var flushing = false;
      var requestTick = void 0;
      var isNodeJS = false;
      // queue for late tasks, used by unhandled rejection tracking
      var laterQueue = [];
  
      function flush() {
          /* jshint loopfunc: true */
          var task, domain;
  
          while (head.next) {
              head = head.next;
              task = head.task;
              head.task = void 0;
              domain = head.domain;
  
              if (domain) {
                  head.domain = void 0;
                  domain.enter();
              }
              runSingle(task, domain);
  
          }
          while (laterQueue.length) {
              task = laterQueue.pop();
              runSingle(task);
          }
          flushing = false;
      }
      // runs a single function in the async queue
      function runSingle(task, domain) {
          try {
              task();
  
          } catch (e) {
              if (isNodeJS) {
                  // In node, uncaught exceptions are considered fatal errors.
                  // Re-throw them synchronously to interrupt flushing!
  
                  // Ensure continuation if the uncaught exception is suppressed
                  // listening "uncaughtException" events (as domains does).
                  // Continue in next event to avoid tick recursion.
                  if (domain) {
                      domain.exit();
                  }
                  setTimeout(flush, 0);
                  if (domain) {
                      domain.enter();
                  }
  
                  throw e;
  
              } else {
                  // In browsers, uncaught exceptions are not fatal.
                  // Re-throw them asynchronously to avoid slow-downs.
                  setTimeout(function () {
                      throw e;
                  }, 0);
              }
          }
  
          if (domain) {
              domain.exit();
          }
      }
  
      nextTick = function (task) {
          tail = tail.next = {
              task: task,
              domain: isNodeJS && process.domain,
              next: null
          };
  
          if (!flushing) {
              flushing = true;
              requestTick();
          }
      };
  
      if ("undefined" === "object" &&
          process.toString() === "[object process]" && process.nextTick) {
          // Ensure Q is in a real Node environment, with a `process.nextTick`.
          // To see through fake Node environments:
          // * Mocha test runner - exposes a `process` global without a `nextTick`
          // * Browserify - exposes a `process.nexTick` function that uses
          //   `setTimeout`. In this case `setImmediate` is preferred because
          //    it is faster. Browserify's `process.toString()` yields
          //   "[object Object]", while in a real Node environment
          //   `process.toString()` yields "[object process]".
          isNodeJS = true;
  
          requestTick = function () {
              process.nextTick(flush);
          };
  
      } else if (typeof setImmediate === "function") {
          // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
          if (typeof window !== "undefined") {
              requestTick = setImmediate.bind(window, flush);
          } else {
              requestTick = function () {
                  setImmediate(flush);
              };
          }
  
      } else if (typeof MessageChannel !== "undefined") {
          // modern browsers
          // http://www.nonblocking.io/2011/06/windownexttick.html
          var channel = new MessageChannel();
          // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
          // working message ports the first time a page loads.
          channel.port1.onmessage = function () {
              requestTick = requestPortTick;
              channel.port1.onmessage = flush;
              flush();
          };
          var requestPortTick = function () {
              // Opera requires us to provide a message payload, regardless of
              // whether we use it.
              channel.port2.postMessage(0);
          };
          requestTick = function () {
              setTimeout(flush, 0);
              requestPortTick();
          };
  
      } else {
          // old browsers
          requestTick = function () {
              setTimeout(flush, 0);
          };
      }
      // runs a task after all other tasks have been run
      // this is useful for unhandled rejection tracking that needs to happen
      // after all `then`d tasks have been run.
      nextTick.runAfter = function (task) {
          laterQueue.push(task);
          if (!flushing) {
              flushing = true;
              requestTick();
          }
      };
      return nextTick;
  })();
  
  // Attempt to make generics safe in the face of downstream
  // modifications.
  // There is no situation where this is necessary.
  // If you need a security guarantee, these primordials need to be
  // deeply frozen anyway, and if you don’t need a security guarantee,
  // this is just plain paranoid.
  // However, this **might** have the nice side-effect of reducing the size of
  // the minified code by reducing x.call() to merely x()
  // See Mark Miller’s explanation of what this does.
  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
  var call = Function.call;
  function uncurryThis(f) {
      return function () {
          return call.apply(f, arguments);
      };
  }
  // This is equivalent, but slower:
  // uncurryThis = Function_bind.bind(Function_bind.call);
  // http://jsperf.com/uncurrythis
  
  var array_slice = uncurryThis(Array.prototype.slice);
  
  var array_reduce = uncurryThis(
      Array.prototype.reduce || function (callback, basis) {
          var index = 0,
              length = this.length;
          // concerning the initial value, if one is not provided
          if (arguments.length === 1) {
              // seek to the first value in the array, accounting
              // for the possibility that is is a sparse array
              do {
                  if (index in this) {
                      basis = this[index++];
                      break;
                  }
                  if (++index >= length) {
                      throw new TypeError();
                  }
              } while (1);
          }
          // reduce
          for (; index < length; index++) {
              // account for the possibility that the array is sparse
              if (index in this) {
                  basis = callback(basis, this[index], index);
              }
          }
          return basis;
      }
  );
  
  var array_indexOf = uncurryThis(
      Array.prototype.indexOf || function (value) {
          // not a very good shim, but good enough for our one use of it
          for (var i = 0; i < this.length; i++) {
              if (this[i] === value) {
                  return i;
              }
          }
          return -1;
      }
  );
  
  var array_map = uncurryThis(
      Array.prototype.map || function (callback, thisp) {
          var self = this;
          var collect = [];
          array_reduce(self, function (undefined, value, index) {
              collect.push(callback.call(thisp, value, index, self));
          }, void 0);
          return collect;
      }
  );
  
  var object_create = Object.create || function (prototype) {
      function Type() { }
      Type.prototype = prototype;
      return new Type();
  };
  
  var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {
      obj[prop] = descriptor.value;
      return obj;
  };
  
  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
  
  var object_keys = Object.keys || function (object) {
      var keys = [];
      for (var key in object) {
          if (object_hasOwnProperty(object, key)) {
              keys.push(key);
          }
      }
      return keys;
  };
  
  var object_toString = uncurryThis(Object.prototype.toString);
  
  function isObject(value) {
      return value === Object(value);
  }
  
  // generator related shims
  
  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.
  function isStopIteration(exception) {
      return (
          object_toString(exception) === "[object StopIteration]" ||
          exception instanceof QReturnValue
      );
  }
  
  // FIXME: Remove this helper and Q.return once ES6 generators are in
  // SpiderMonkey.
  var QReturnValue;
  if (typeof ReturnValue !== "undefined") {
      QReturnValue = ReturnValue;
  } else {
      QReturnValue = function (value) {
          this.value = value;
      };
  }
  
  // long stack traces
  
  var STACK_JUMP_SEPARATOR = "From previous event:";
  
  function makeStackTraceLong(error, promise) {
      // If possible, transform the error stack trace by removing Node and Q
      // cruft, then concatenating with the stack trace of `promise`. See #57.
      if (hasStacks &&
          promise.stack &&
          typeof error === "object" &&
          error !== null &&
          error.stack
      ) {
          var stacks = [];
          for (var p = promise; !!p; p = p.source) {
              if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
                  object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
                  stacks.unshift(p.stack);
              }
          }
          stacks.unshift(error.stack);
  
          var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
          var stack = filterStackString(concatedStacks);
          object_defineProperty(error, "stack", {value: stack, configurable: true});
      }
  }
  
  function filterStackString(stackString) {
      var lines = stackString.split("\n");
      var desiredLines = [];
      for (var i = 0; i < lines.length; ++i) {
          var line = lines[i];
  
          if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
              desiredLines.push(line);
          }
      }
      return desiredLines.join("\n");
  }
  
  function isNodeFrame(stackLine) {
      return stackLine.indexOf("(module.js:") !== -1 ||
             stackLine.indexOf("(node.js:") !== -1;
  }
  
  function getFileNameAndLineNumber(stackLine) {
      // Named functions: "at functionName (filename:lineNumber:columnNumber)"
      // In IE10 function name can have spaces ("Anonymous function") O_o
      var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
      if (attempt1) {
          return [attempt1[1], Number(attempt1[2])];
      }
  
      // Anonymous functions: "at filename:lineNumber:columnNumber"
      var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
      if (attempt2) {
          return [attempt2[1], Number(attempt2[2])];
      }
  
      // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
      var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
      if (attempt3) {
          return [attempt3[1], Number(attempt3[2])];
      }
  }
  
  function isInternalFrame(stackLine) {
      var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
  
      if (!fileNameAndLineNumber) {
          return false;
      }
  
      var fileName = fileNameAndLineNumber[0];
      var lineNumber = fileNameAndLineNumber[1];
  
      return fileName === qFileName &&
          lineNumber >= qStartingLine &&
          lineNumber <= qEndingLine;
  }
  
  // discover own file name and line number range for filtering stack
  // traces
  function captureLine() {
      if (!hasStacks) {
          return;
      }
  
      try {
          throw new Error();
      } catch (e) {
          var lines = e.stack.split("\n");
          var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
          var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
          if (!fileNameAndLineNumber) {
              return;
          }
  
          qFileName = fileNameAndLineNumber[0];
          return fileNameAndLineNumber[1];
      }
  }
  
  function deprecate(callback, name, alternative) {
      return function () {
          if (typeof console !== "undefined" &&
              typeof console.warn === "function") {
              console.warn(name + " is deprecated, use " + alternative +
                           " instead.", new Error("").stack);
          }
          return callback.apply(callback, arguments);
      };
  }
  
  // end of shims
  // beginning of real work
  
  /**
   * Constructs a promise for an immediate reference, passes promises through, or
   * coerces promises from different systems.
   * @param value immediate reference or promise
   */
  function Q(value) {
      // If the object is already a Promise, return it directly.  This enables
      // the resolve function to both be used to created references from objects,
      // but to tolerably coerce non-promises to promises.
      if (value instanceof Promise) {
          return value;
      }
  
      // assimilate thenables
      if (isPromiseAlike(value)) {
          return coerce(value);
      } else {
          return fulfill(value);
      }
  }
  Q.resolve = Q;
  
  /**
   * Performs a task in a future turn of the event loop.
   * @param {Function} task
   */
  Q.nextTick = nextTick;
  
  /**
   * Controls whether or not long stack traces will be on
   */
  Q.longStackSupport = false;
  
  /**
   * The counter is used to determine the stopping point for building
   * long stack traces. In makeStackTraceLong we walk backwards through
   * the linked list of promises, only stacks which were created before
   * the rejection are concatenated.
   */
  var longStackCounter = 1;
  
  // enable long stacks if Q_DEBUG is set
  if ("undefined" === "object" && process && process.env && process.env.Q_DEBUG) {
      Q.longStackSupport = true;
  }
  
  /**
   * Constructs a {promise, resolve, reject} object.
   *
   * `resolve` is a callback to invoke with a more resolved value for the
   * promise. To fulfill the promise, invoke `resolve` with any value that is
   * not a thenable. To reject the promise, invoke `resolve` with a rejected
   * thenable, or invoke `reject` with the reason directly. To resolve the
   * promise to another thenable, thus putting it in the same state, invoke
   * `resolve` with that other thenable.
   */
  Q.defer = defer;
  function defer() {
      // if "messages" is an "Array", that indicates that the promise has not yet
      // been resolved.  If it is "undefined", it has been resolved.  Each
      // element of the messages array is itself an array of complete arguments to
      // forward to the resolved promise.  We coerce the resolution value to a
      // promise using the `resolve` function because it handles both fully
      // non-thenable values and other thenables gracefully.
      var messages = [], progressListeners = [], resolvedPromise;
  
      var deferred = object_create(defer.prototype);
      var promise = object_create(Promise.prototype);
  
      promise.promiseDispatch = function (resolve, op, operands) {
          var args = array_slice(arguments);
          if (messages) {
              messages.push(args);
              if (op === "when" && operands[1]) { // progress operand
                  progressListeners.push(operands[1]);
              }
          } else {
              Q.nextTick(function () {
                  resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
              });
          }
      };
  
      // XXX deprecated
      promise.valueOf = function () {
          if (messages) {
              return promise;
          }
          var nearerValue = nearer(resolvedPromise);
          if (isPromise(nearerValue)) {
              resolvedPromise = nearerValue; // shorten chain
          }
          return nearerValue;
      };
  
      promise.inspect = function () {
          if (!resolvedPromise) {
              return { state: "pending" };
          }
          return resolvedPromise.inspect();
      };
  
      if (Q.longStackSupport && hasStacks) {
          try {
              throw new Error();
          } catch (e) {
              // NOTE: don't try to use `Error.captureStackTrace` or transfer the
              // accessor around; that causes memory leaks as per GH-111. Just
              // reify the stack trace as a string ASAP.
              //
              // At the same time, cut off the first line; it's always just
              // "[object Promise]\n", as per the `toString`.
              promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
              promise.stackCounter = longStackCounter++;
          }
      }
  
      // NOTE: we do the checks for `resolvedPromise` in each method, instead of
      // consolidating them into `become`, since otherwise we'd create new
      // promises with the lines `become(whatever(value))`. See e.g. GH-252.
  
      function become(newPromise) {
          resolvedPromise = newPromise;
  
          if (Q.longStackSupport && hasStacks) {
              // Only hold a reference to the new promise if long stacks
              // are enabled to reduce memory usage
              promise.source = newPromise;
          }
  
          array_reduce(messages, function (undefined, message) {
              Q.nextTick(function () {
                  newPromise.promiseDispatch.apply(newPromise, message);
              });
          }, void 0);
  
          messages = void 0;
          progressListeners = void 0;
      }
  
      deferred.promise = promise;
      deferred.resolve = function (value) {
          if (resolvedPromise) {
              return;
          }
  
          become(Q(value));
      };
  
      deferred.fulfill = function (value) {
          if (resolvedPromise) {
              return;
          }
  
          become(fulfill(value));
      };
      deferred.reject = function (reason) {
          if (resolvedPromise) {
              return;
          }
  
          become(reject(reason));
      };
      deferred.notify = function (progress) {
          if (resolvedPromise) {
              return;
          }
  
          array_reduce(progressListeners, function (undefined, progressListener) {
              Q.nextTick(function () {
                  progressListener(progress);
              });
          }, void 0);
      };
  
      return deferred;
  }
  
  /**
   * Creates a Node-style callback that will resolve or reject the deferred
   * promise.
   * @returns a nodeback
   */
  defer.prototype.makeNodeResolver = function () {
      var self = this;
      return function (error, value) {
          if (error) {
              self.reject(error);
          } else if (arguments.length > 2) {
              self.resolve(array_slice(arguments, 1));
          } else {
              self.resolve(value);
          }
      };
  };
  
  /**
   * @param resolver {Function} a function that returns nothing and accepts
   * the resolve, reject, and notify functions for a deferred.
   * @returns a promise that may be resolved with the given resolve and reject
   * functions, or rejected by a thrown exception in resolver
   */
  Q.Promise = promise; // ES6
  Q.promise = promise;
  function promise(resolver) {
      if (typeof resolver !== "function") {
          throw new TypeError("resolver must be a function.");
      }
      var deferred = defer();
      try {
          resolver(deferred.resolve, deferred.reject, deferred.notify);
      } catch (reason) {
          deferred.reject(reason);
      }
      return deferred.promise;
  }
  
  promise.race = race; // ES6
  promise.all = all; // ES6
  promise.reject = reject; // ES6
  promise.resolve = Q; // ES6
  
  // XXX experimental.  This method is a way to denote that a local value is
  // serializable and should be immediately dispatched to a remote upon request,
  // instead of passing a reference.
  Q.passByCopy = function (object) {
      //freeze(object);
      //passByCopies.set(object, true);
      return object;
  };
  
  Promise.prototype.passByCopy = function () {
      //freeze(object);
      //passByCopies.set(object, true);
      return this;
  };
  
  /**
   * If two promises eventually fulfill to the same value, promises that value,
   * but otherwise rejects.
   * @param x {Any*}
   * @param y {Any*}
   * @returns {Any*} a promise for x and y if they are the same, but a rejection
   * otherwise.
   *
   */
  Q.join = function (x, y) {
      return Q(x).join(y);
  };
  
  Promise.prototype.join = function (that) {
      return Q([this, that]).spread(function (x, y) {
          if (x === y) {
              // TODO: "===" should be Object.is or equiv
              return x;
          } else {
              throw new Error("Q can't join: not the same: " + x + " " + y);
          }
      });
  };
  
  /**
   * Returns a promise for the first of an array of promises to become settled.
   * @param answers {Array[Any*]} promises to race
   * @returns {Any*} the first promise to be settled
   */
  Q.race = race;
  function race(answerPs) {
      return promise(function (resolve, reject) {
          // Switch to this once we can assume at least ES5
          // answerPs.forEach(function (answerP) {
          //     Q(answerP).then(resolve, reject);
          // });
          // Use this in the meantime
          for (var i = 0, len = answerPs.length; i < len; i++) {
              Q(answerPs[i]).then(resolve, reject);
          }
      });
  }
  
  Promise.prototype.race = function () {
      return this.then(Q.race);
  };
  
  /**
   * Constructs a Promise with a promise descriptor object and optional fallback
   * function.  The descriptor contains methods like when(rejected), get(name),
   * set(name, value), post(name, args), and delete(name), which all
   * return either a value, a promise for a value, or a rejection.  The fallback
   * accepts the operation name, a resolver, and any further arguments that would
   * have been forwarded to the appropriate method above had a method been
   * provided with the proper name.  The API makes no guarantees about the nature
   * of the returned object, apart from that it is usable whereever promises are
   * bought and sold.
   */
  Q.makePromise = Promise;
  function Promise(descriptor, fallback, inspect) {
      if (fallback === void 0) {
          fallback = function (op) {
              return reject(new Error(
                  "Promise does not support operation: " + op
              ));
          };
      }
      if (inspect === void 0) {
          inspect = function () {
              return {state: "unknown"};
          };
      }
  
      var promise = object_create(Promise.prototype);
  
      promise.promiseDispatch = function (resolve, op, args) {
          var result;
          try {
              if (descriptor[op]) {
                  result = descriptor[op].apply(promise, args);
              } else {
                  result = fallback.call(promise, op, args);
              }
          } catch (exception) {
              result = reject(exception);
          }
          if (resolve) {
              resolve(result);
          }
      };
  
      promise.inspect = inspect;
  
      // XXX deprecated `valueOf` and `exception` support
      if (inspect) {
          var inspected = inspect();
          if (inspected.state === "rejected") {
              promise.exception = inspected.reason;
          }
  
          promise.valueOf = function () {
              var inspected = inspect();
              if (inspected.state === "pending" ||
                  inspected.state === "rejected") {
                  return promise;
              }
              return inspected.value;
          };
      }
  
      return promise;
  }
  
  Promise.prototype.toString = function () {
      return "[object Promise]";
  };
  
  Promise.prototype.then = function (fulfilled, rejected, progressed) {
      var self = this;
      var deferred = defer();
      var done = false;   // ensure the untrusted promise makes at most a
                          // single call to one of the callbacks
  
      function _fulfilled(value) {
          try {
              return typeof fulfilled === "function" ? fulfilled(value) : value;
          } catch (exception) {
              return reject(exception);
          }
      }
  
      function _rejected(exception) {
          if (typeof rejected === "function") {
              makeStackTraceLong(exception, self);
              try {
                  return rejected(exception);
              } catch (newException) {
                  return reject(newException);
              }
          }
          return reject(exception);
      }
  
      function _progressed(value) {
          return typeof progressed === "function" ? progressed(value) : value;
      }
  
      Q.nextTick(function () {
          self.promiseDispatch(function (value) {
              if (done) {
                  return;
              }
              done = true;
  
              deferred.resolve(_fulfilled(value));
          }, "when", [function (exception) {
              if (done) {
                  return;
              }
              done = true;
  
              deferred.resolve(_rejected(exception));
          }]);
      });
  
      // Progress propagator need to be attached in the current tick.
      self.promiseDispatch(void 0, "when", [void 0, function (value) {
          var newValue;
          var threw = false;
          try {
              newValue = _progressed(value);
          } catch (e) {
              threw = true;
              if (Q.onerror) {
                  Q.onerror(e);
              } else {
                  throw e;
              }
          }
  
          if (!threw) {
              deferred.notify(newValue);
          }
      }]);
  
      return deferred.promise;
  };
  
  Q.tap = function (promise, callback) {
      return Q(promise).tap(callback);
  };
  
  /**
   * Works almost like "finally", but not called for rejections.
   * Original resolution value is passed through callback unaffected.
   * Callback may return a promise that will be awaited for.
   * @param {Function} callback
   * @returns {Q.Promise}
   * @example
   * doSomething()
   *   .then(...)
   *   .tap(console.log)
   *   .then(...);
   */
  Promise.prototype.tap = function (callback) {
      callback = Q(callback);
  
      return this.then(function (value) {
          return callback.fcall(value).thenResolve(value);
      });
  };
  
  /**
   * Registers an observer on a promise.
   *
   * Guarantees:
   *
   * 1. that fulfilled and rejected will be called only once.
   * 2. that either the fulfilled callback or the rejected callback will be
   *    called, but not both.
   * 3. that fulfilled and rejected will not be called in this turn.
   *
   * @param value      promise or immediate reference to observe
   * @param fulfilled  function to be called with the fulfilled value
   * @param rejected   function to be called with the rejection exception
   * @param progressed function to be called on any progress notifications
   * @return promise for the return value from the invoked callback
   */
  Q.when = when;
  function when(value, fulfilled, rejected, progressed) {
      return Q(value).then(fulfilled, rejected, progressed);
  }
  
  Promise.prototype.thenResolve = function (value) {
      return this.then(function () { return value; });
  };
  
  Q.thenResolve = function (promise, value) {
      return Q(promise).thenResolve(value);
  };
  
  Promise.prototype.thenReject = function (reason) {
      return this.then(function () { throw reason; });
  };
  
  Q.thenReject = function (promise, reason) {
      return Q(promise).thenReject(reason);
  };
  
  /**
   * If an object is not a promise, it is as "near" as possible.
   * If a promise is rejected, it is as "near" as possible too.
   * If it’s a fulfilled promise, the fulfillment value is nearer.
   * If it’s a deferred promise and the deferred has been resolved, the
   * resolution is "nearer".
   * @param object
   * @returns most resolved (nearest) form of the object
   */
  
  // XXX should we re-do this?
  Q.nearer = nearer;
  function nearer(value) {
      if (isPromise(value)) {
          var inspected = value.inspect();
          if (inspected.state === "fulfilled") {
              return inspected.value;
          }
      }
      return value;
  }
  
  /**
   * @returns whether the given object is a promise.
   * Otherwise it is a fulfilled value.
   */
  Q.isPromise = isPromise;
  function isPromise(object) {
      return object instanceof Promise;
  }
  
  Q.isPromiseAlike = isPromiseAlike;
  function isPromiseAlike(object) {
      return isObject(object) && typeof object.then === "function";
  }
  
  /**
   * @returns whether the given object is a pending promise, meaning not
   * fulfilled or rejected.
   */
  Q.isPending = isPending;
  function isPending(object) {
      return isPromise(object) && object.inspect().state === "pending";
  }
  
  Promise.prototype.isPending = function () {
      return this.inspect().state === "pending";
  };
  
  /**
   * @returns whether the given object is a value or fulfilled
   * promise.
   */
  Q.isFulfilled = isFulfilled;
  function isFulfilled(object) {
      return !isPromise(object) || object.inspect().state === "fulfilled";
  }
  
  Promise.prototype.isFulfilled = function () {
      return this.inspect().state === "fulfilled";
  };
  
  /**
   * @returns whether the given object is a rejected promise.
   */
  Q.isRejected = isRejected;
  function isRejected(object) {
      return isPromise(object) && object.inspect().state === "rejected";
  }
  
  Promise.prototype.isRejected = function () {
      return this.inspect().state === "rejected";
  };
  
  //// BEGIN UNHANDLED REJECTION TRACKING
  
  // This promise library consumes exceptions thrown in handlers so they can be
  // handled by a subsequent promise.  The exceptions get added to this array when
  // they are created, and removed when they are handled.  Note that in ES6 or
  // shimmed environments, this would naturally be a `Set`.
  var unhandledReasons = [];
  var unhandledRejections = [];
  var reportedUnhandledRejections = [];
  var trackUnhandledRejections = true;
  
  function resetUnhandledRejections() {
      unhandledReasons.length = 0;
      unhandledRejections.length = 0;
  
      if (!trackUnhandledRejections) {
          trackUnhandledRejections = true;
      }
  }
  
  function trackRejection(promise, reason) {
      if (!trackUnhandledRejections) {
          return;
      }
      if ("undefined" === "object" && typeof process.emit === "function") {
          Q.nextTick.runAfter(function () {
              if (array_indexOf(unhandledRejections, promise) !== -1) {
                  process.emit("unhandledRejection", reason, promise);
                  reportedUnhandledRejections.push(promise);
              }
          });
      }
  
      unhandledRejections.push(promise);
      if (reason && typeof reason.stack !== "undefined") {
          unhandledReasons.push(reason.stack);
      } else {
          unhandledReasons.push("(no stack) " + reason);
      }
  }
  
  function untrackRejection(promise) {
      if (!trackUnhandledRejections) {
          return;
      }
  
      var at = array_indexOf(unhandledRejections, promise);
      if (at !== -1) {
          if ("undefined" === "object" && typeof process.emit === "function") {
              Q.nextTick.runAfter(function () {
                  var atReport = array_indexOf(reportedUnhandledRejections, promise);
                  if (atReport !== -1) {
                      process.emit("rejectionHandled", unhandledReasons[at], promise);
                      reportedUnhandledRejections.splice(atReport, 1);
                  }
              });
          }
          unhandledRejections.splice(at, 1);
          unhandledReasons.splice(at, 1);
      }
  }
  
  Q.resetUnhandledRejections = resetUnhandledRejections;
  
  Q.getUnhandledReasons = function () {
      // Make a copy so that consumers can't interfere with our internal state.
      return unhandledReasons.slice();
  };
  
  Q.stopUnhandledRejectionTracking = function () {
      resetUnhandledRejections();
      trackUnhandledRejections = false;
  };
  
  resetUnhandledRejections();
  
  //// END UNHANDLED REJECTION TRACKING
  
  /**
   * Constructs a rejected promise.
   * @param reason value describing the failure
   */
  Q.reject = reject;
  function reject(reason) {
      var rejection = Promise({
          "when": function (rejected) {
              // note that the error has been handled
              if (rejected) {
                  untrackRejection(this);
              }
              return rejected ? rejected(reason) : this;
          }
      }, function fallback() {
          return this;
      }, function inspect() {
          return { state: "rejected", reason: reason };
      });
  
      // Note that the reason has not been handled.
      trackRejection(rejection, reason);
  
      return rejection;
  }
  
  /**
   * Constructs a fulfilled promise for an immediate reference.
   * @param value immediate reference
   */
  Q.fulfill = fulfill;
  function fulfill(value) {
      return Promise({
          "when": function () {
              return value;
          },
          "get": function (name) {
              return value[name];
          },
          "set": function (name, rhs) {
              value[name] = rhs;
          },
          "delete": function (name) {
              delete value[name];
          },
          "post": function (name, args) {
              // Mark Miller proposes that post with no name should apply a
              // promised function.
              if (name === null || name === void 0) {
                  return value.apply(void 0, args);
              } else {
                  return value[name].apply(value, args);
              }
          },
          "apply": function (thisp, args) {
              return value.apply(thisp, args);
          },
          "keys": function () {
              return object_keys(value);
          }
      }, void 0, function inspect() {
          return { state: "fulfilled", value: value };
      });
  }
  
  /**
   * Converts thenables to Q promises.
   * @param promise thenable promise
   * @returns a Q promise
   */
  function coerce(promise) {
      var deferred = defer();
      Q.nextTick(function () {
          try {
              promise.then(deferred.resolve, deferred.reject, deferred.notify);
          } catch (exception) {
              deferred.reject(exception);
          }
      });
      return deferred.promise;
  }
  
  /**
   * Annotates an object such that it will never be
   * transferred away from this process over any promise
   * communication channel.
   * @param object
   * @returns promise a wrapping of that object that
   * additionally responds to the "isDef" message
   * without a rejection.
   */
  Q.master = master;
  function master(object) {
      return Promise({
          "isDef": function () {}
      }, function fallback(op, args) {
          return dispatch(object, op, args);
      }, function () {
          return Q(object).inspect();
      });
  }
  
  /**
   * Spreads the values of a promised array of arguments into the
   * fulfillment callback.
   * @param fulfilled callback that receives variadic arguments from the
   * promised array
   * @param rejected callback that receives the exception if the promise
   * is rejected.
   * @returns a promise for the return value or thrown exception of
   * either callback.
   */
  Q.spread = spread;
  function spread(value, fulfilled, rejected) {
      return Q(value).spread(fulfilled, rejected);
  }
  
  Promise.prototype.spread = function (fulfilled, rejected) {
      return this.all().then(function (array) {
          return fulfilled.apply(void 0, array);
      }, rejected);
  };
  
  /**
   * The async function is a decorator for generator functions, turning
   * them into asynchronous generators.  Although generators are only part
   * of the newest ECMAScript 6 drafts, this code does not cause syntax
   * errors in older engines.  This code should continue to work and will
   * in fact improve over time as the language improves.
   *
   * ES6 generators are currently part of V8 version 3.19 with the
   * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
   * for longer, but under an older Python-inspired form.  This function
   * works on both kinds of generators.
   *
   * Decorates a generator function such that:
   *  - it may yield promises
   *  - execution will continue when that promise is fulfilled
   *  - the value of the yield expression will be the fulfilled value
   *  - it returns a promise for the return value (when the generator
   *    stops iterating)
   *  - the decorated function returns a promise for the return value
   *    of the generator or the first rejected promise among those
   *    yielded.
   *  - if an error is thrown in the generator, it propagates through
   *    every following yield until it is caught, or until it escapes
   *    the generator function altogether, and is translated into a
   *    rejection for the promise returned by the decorated generator.
   */
  Q.async = async;
  function async(makeGenerator) {
      return function () {
          // when verb is "send", arg is a value
          // when verb is "throw", arg is an exception
          function continuer(verb, arg) {
              var result;
  
              // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
              // engine that has a deployed base of browsers that support generators.
              // However, SM's generators use the Python-inspired semantics of
              // outdated ES6 drafts.  We would like to support ES6, but we'd also
              // like to make it possible to use generators in deployed browsers, so
              // we also support Python-style generators.  At some point we can remove
              // this block.
  
              if (typeof StopIteration === "undefined") {
                  // ES6 Generators
                  try {
                      result = generator[verb](arg);
                  } catch (exception) {
                      return reject(exception);
                  }
                  if (result.done) {
                      return Q(result.value);
                  } else {
                      return when(result.value, callback, errback);
                  }
              } else {
                  // SpiderMonkey Generators
                  // FIXME: Remove this case when SM does ES6 generators.
                  try {
                      result = generator[verb](arg);
                  } catch (exception) {
                      if (isStopIteration(exception)) {
                          return Q(exception.value);
                      } else {
                          return reject(exception);
                      }
                  }
                  return when(result, callback, errback);
              }
          }
          var generator = makeGenerator.apply(this, arguments);
          var callback = continuer.bind(continuer, "next");
          var errback = continuer.bind(continuer, "throw");
          return callback();
      };
  }
  
  /**
   * The spawn function is a small wrapper around async that immediately
   * calls the generator and also ends the promise chain, so that any
   * unhandled errors are thrown instead of forwarded to the error
   * handler. This is useful because it's extremely common to run
   * generators at the top-level to work with libraries.
   */
  Q.spawn = spawn;
  function spawn(makeGenerator) {
      Q.done(Q.async(makeGenerator)());
  }
  
  // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
  /**
   * Throws a ReturnValue exception to stop an asynchronous generator.
   *
   * This interface is a stop-gap measure to support generator return
   * values in older Firefox/SpiderMonkey.  In browsers that support ES6
   * generators like Chromium 29, just use "return" in your generator
   * functions.
   *
   * @param value the return value for the surrounding generator
   * @throws ReturnValue exception with the value.
   * @example
   * // ES6 style
   * Q.async(function* () {
   *      var foo = yield getFooPromise();
   *      var bar = yield getBarPromise();
   *      return foo + bar;
   * })
   * // Older SpiderMonkey style
   * Q.async(function () {
   *      var foo = yield getFooPromise();
   *      var bar = yield getBarPromise();
   *      Q.return(foo + bar);
   * })
   */
  Q["return"] = _return;
  function _return(value) {
      throw new QReturnValue(value);
  }
  
  /**
   * The promised function decorator ensures that any promise arguments
   * are settled and passed as values (`this` is also settled and passed
   * as a value).  It will also ensure that the result of a function is
   * always a promise.
   *
   * @example
   * var add = Q.promised(function (a, b) {
   *     return a + b;
   * });
   * add(Q(a), Q(B));
   *
   * @param {function} callback The function to decorate
   * @returns {function} a function that has been decorated.
   */
  Q.promised = promised;
  function promised(callback) {
      return function () {
          return spread([this, all(arguments)], function (self, args) {
              return callback.apply(self, args);
          });
      };
  }
  
  /**
   * sends a message to a value in a future turn
   * @param object* the recipient
   * @param op the name of the message operation, e.g., "when",
   * @param args further arguments to be forwarded to the operation
   * @returns result {Promise} a promise for the result of the operation
   */
  Q.dispatch = dispatch;
  function dispatch(object, op, args) {
      return Q(object).dispatch(op, args);
  }
  
  Promise.prototype.dispatch = function (op, args) {
      var self = this;
      var deferred = defer();
      Q.nextTick(function () {
          self.promiseDispatch(deferred.resolve, op, args);
      });
      return deferred.promise;
  };
  
  /**
   * Gets the value of a property in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of property to get
   * @return promise for the property value
   */
  Q.get = function (object, key) {
      return Q(object).dispatch("get", [key]);
  };
  
  Promise.prototype.get = function (key) {
      return this.dispatch("get", [key]);
  };
  
  /**
   * Sets the value of a property in a future turn.
   * @param object    promise or immediate reference for object object
   * @param name      name of property to set
   * @param value     new value of property
   * @return promise for the return value
   */
  Q.set = function (object, key, value) {
      return Q(object).dispatch("set", [key, value]);
  };
  
  Promise.prototype.set = function (key, value) {
      return this.dispatch("set", [key, value]);
  };
  
  /**
   * Deletes a property in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of property to delete
   * @return promise for the return value
   */
  Q.del = // XXX legacy
  Q["delete"] = function (object, key) {
      return Q(object).dispatch("delete", [key]);
  };
  
  Promise.prototype.del = // XXX legacy
  Promise.prototype["delete"] = function (key) {
      return this.dispatch("delete", [key]);
  };
  
  /**
   * Invokes a method in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of method to invoke
   * @param value     a value to post, typically an array of
   *                  invocation arguments for promises that
   *                  are ultimately backed with `resolve` values,
   *                  as opposed to those backed with URLs
   *                  wherein the posted value can be any
   *                  JSON serializable object.
   * @return promise for the return value
   */
  // bound locally because it is used by other methods
  Q.mapply = // XXX As proposed by "Redsandro"
  Q.post = function (object, name, args) {
      return Q(object).dispatch("post", [name, args]);
  };
  
  Promise.prototype.mapply = // XXX As proposed by "Redsandro"
  Promise.prototype.post = function (name, args) {
      return this.dispatch("post", [name, args]);
  };
  
  /**
   * Invokes a method in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of method to invoke
   * @param ...args   array of invocation arguments
   * @return promise for the return value
   */
  Q.send = // XXX Mark Miller's proposed parlance
  Q.mcall = // XXX As proposed by "Redsandro"
  Q.invoke = function (object, name /*...args*/) {
      return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
  };
  
  Promise.prototype.send = // XXX Mark Miller's proposed parlance
  Promise.prototype.mcall = // XXX As proposed by "Redsandro"
  Promise.prototype.invoke = function (name /*...args*/) {
      return this.dispatch("post", [name, array_slice(arguments, 1)]);
  };
  
  /**
   * Applies the promised function in a future turn.
   * @param object    promise or immediate reference for target function
   * @param args      array of application arguments
   */
  Q.fapply = function (object, args) {
      return Q(object).dispatch("apply", [void 0, args]);
  };
  
  Promise.prototype.fapply = function (args) {
      return this.dispatch("apply", [void 0, args]);
  };
  
  /**
   * Calls the promised function in a future turn.
   * @param object    promise or immediate reference for target function
   * @param ...args   array of application arguments
   */
  Q["try"] =
  Q.fcall = function (object /* ...args*/) {
      return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
  };
  
  Promise.prototype.fcall = function (/*...args*/) {
      return this.dispatch("apply", [void 0, array_slice(arguments)]);
  };
  
  /**
   * Binds the promised function, transforming return values into a fulfilled
   * promise and thrown errors into a rejected one.
   * @param object    promise or immediate reference for target function
   * @param ...args   array of application arguments
   */
  Q.fbind = function (object /*...args*/) {
      var promise = Q(object);
      var args = array_slice(arguments, 1);
      return function fbound() {
          return promise.dispatch("apply", [
              this,
              args.concat(array_slice(arguments))
          ]);
      };
  };
  Promise.prototype.fbind = function (/*...args*/) {
      var promise = this;
      var args = array_slice(arguments);
      return function fbound() {
          return promise.dispatch("apply", [
              this,
              args.concat(array_slice(arguments))
          ]);
      };
  };
  
  /**
   * Requests the names of the owned properties of a promised
   * object in a future turn.
   * @param object    promise or immediate reference for target object
   * @return promise for the keys of the eventually settled object
   */
  Q.keys = function (object) {
      return Q(object).dispatch("keys", []);
  };
  
  Promise.prototype.keys = function () {
      return this.dispatch("keys", []);
  };
  
  /**
   * Turns an array of promises into a promise for an array.  If any of
   * the promises gets rejected, the whole array is rejected immediately.
   * @param {Array*} an array (or promise for an array) of values (or
   * promises for values)
   * @returns a promise for an array of the corresponding values
   */
  // By Mark Miller
  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
  Q.all = all;
  function all(promises) {
      return when(promises, function (promises) {
          var pendingCount = 0;
          var deferred = defer();
          array_reduce(promises, function (undefined, promise, index) {
              var snapshot;
              if (
                  isPromise(promise) &&
                  (snapshot = promise.inspect()).state === "fulfilled"
              ) {
                  promises[index] = snapshot.value;
              } else {
                  ++pendingCount;
                  when(
                      promise,
                      function (value) {
                          promises[index] = value;
                          if (--pendingCount === 0) {
                              deferred.resolve(promises);
                          }
                      },
                      deferred.reject,
                      function (progress) {
                          deferred.notify({ index: index, value: progress });
                      }
                  );
              }
          }, void 0);
          if (pendingCount === 0) {
              deferred.resolve(promises);
          }
          return deferred.promise;
      });
  }
  
  Promise.prototype.all = function () {
      return all(this);
  };
  
  /**
   * Returns the first resolved promise of an array. Prior rejected promises are
   * ignored.  Rejects only if all promises are rejected.
   * @param {Array*} an array containing values or promises for values
   * @returns a promise fulfilled with the value of the first resolved promise,
   * or a rejected promise if all promises are rejected.
   */
  Q.any = any;
  
  function any(promises) {
      if (promises.length === 0) {
          return Q.resolve();
      }
  
      var deferred = Q.defer();
      var pendingCount = 0;
      array_reduce(promises, function (prev, current, index) {
          var promise = promises[index];
  
          pendingCount++;
  
          when(promise, onFulfilled, onRejected, onProgress);
          function onFulfilled(result) {
              deferred.resolve(result);
          }
          function onRejected(err) {
              pendingCount--;
              if (pendingCount === 0) {
                  err.message = ("Q can't get fulfillment value from any promise, all " +
                      "promises were rejected. Last error message: " + err.message);
                  deferred.reject(err);
              }
          }
          function onProgress(progress) {
              deferred.notify({
                  index: index,
                  value: progress
              });
          }
      }, undefined);
  
      return deferred.promise;
  }
  
  Promise.prototype.any = function () {
      return any(this);
  };
  
  /**
   * Waits for all promises to be settled, either fulfilled or
   * rejected.  This is distinct from `all` since that would stop
   * waiting at the first rejection.  The promise returned by
   * `allResolved` will never be rejected.
   * @param promises a promise for an array (or an array) of promises
   * (or values)
   * @return a promise for an array of promises
   */
  Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
  function allResolved(promises) {
      return when(promises, function (promises) {
          promises = array_map(promises, Q);
          return when(all(array_map(promises, function (promise) {
              return when(promise, noop, noop);
          })), function () {
              return promises;
          });
      });
  }
  
  Promise.prototype.allResolved = function () {
      return allResolved(this);
  };
  
  /**
   * @see Promise#allSettled
   */
  Q.allSettled = allSettled;
  function allSettled(promises) {
      return Q(promises).allSettled();
  }
  
  /**
   * Turns an array of promises into a promise for an array of their states (as
   * returned by `inspect`) when they have all settled.
   * @param {Array[Any*]} values an array (or promise for an array) of values (or
   * promises for values)
   * @returns {Array[State]} an array of states for the respective values.
   */
  Promise.prototype.allSettled = function () {
      return this.then(function (promises) {
          return all(array_map(promises, function (promise) {
              promise = Q(promise);
              function regardless() {
                  return promise.inspect();
              }
              return promise.then(regardless, regardless);
          }));
      });
  };
  
  /**
   * Captures the failure of a promise, giving an oportunity to recover
   * with a callback.  If the given promise is fulfilled, the returned
   * promise is fulfilled.
   * @param {Any*} promise for something
   * @param {Function} callback to fulfill the returned promise if the
   * given promise is rejected
   * @returns a promise for the return value of the callback
   */
  Q.fail = // XXX legacy
  Q["catch"] = function (object, rejected) {
      return Q(object).then(void 0, rejected);
  };
  
  Promise.prototype.fail = // XXX legacy
  Promise.prototype["catch"] = function (rejected) {
      return this.then(void 0, rejected);
  };
  
  /**
   * Attaches a listener that can respond to progress notifications from a
   * promise's originating deferred. This listener receives the exact arguments
   * passed to ``deferred.notify``.
   * @param {Any*} promise for something
   * @param {Function} callback to receive any progress notifications
   * @returns the given promise, unchanged
   */
  Q.progress = progress;
  function progress(object, progressed) {
      return Q(object).then(void 0, void 0, progressed);
  }
  
  Promise.prototype.progress = function (progressed) {
      return this.then(void 0, void 0, progressed);
  };
  
  /**
   * Provides an opportunity to observe the settling of a promise,
   * regardless of whether the promise is fulfilled or rejected.  Forwards
   * the resolution to the returned promise when the callback is done.
   * The callback can return a promise to defer completion.
   * @param {Any*} promise
   * @param {Function} callback to observe the resolution of the given
   * promise, takes no arguments.
   * @returns a promise for the resolution of the given promise when
   * ``fin`` is done.
   */
  Q.fin = // XXX legacy
  Q["finally"] = function (object, callback) {
      return Q(object)["finally"](callback);
  };
  
  Promise.prototype.fin = // XXX legacy
  Promise.prototype["finally"] = function (callback) {
      if (!callback || typeof callback.apply !== "function") {
          throw new Error("Q can't apply finally callback");
      }
      callback = Q(callback);
      return this.then(function (value) {
          return callback.fcall().then(function () {
              return value;
          });
      }, function (reason) {
          // TODO attempt to recycle the rejection with "this".
          return callback.fcall().then(function () {
              throw reason;
          });
      });
  };
  
  /**
   * Terminates a chain of promises, forcing rejections to be
   * thrown as exceptions.
   * @param {Any*} promise at the end of a chain of promises
   * @returns nothing
   */
  Q.done = function (object, fulfilled, rejected, progress) {
      return Q(object).done(fulfilled, rejected, progress);
  };
  
  Promise.prototype.done = function (fulfilled, rejected, progress) {
      var onUnhandledError = function (error) {
          // forward to a future turn so that ``when``
          // does not catch it and turn it into a rejection.
          Q.nextTick(function () {
              makeStackTraceLong(error, promise);
              if (Q.onerror) {
                  Q.onerror(error);
              } else {
                  throw error;
              }
          });
      };
  
      // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
      var promise = fulfilled || rejected || progress ?
          this.then(fulfilled, rejected, progress) :
          this;
  
      if ("undefined" === "object" && process && process.domain) {
          onUnhandledError = process.domain.bind(onUnhandledError);
      }
  
      promise.then(void 0, onUnhandledError);
  };
  
  /**
   * Causes a promise to be rejected if it does not get fulfilled before
   * some milliseconds time out.
   * @param {Any*} promise
   * @param {Number} milliseconds timeout
   * @param {Any*} custom error message or Error object (optional)
   * @returns a promise for the resolution of the given promise if it is
   * fulfilled before the timeout, otherwise rejected.
   */
  Q.timeout = function (object, ms, error) {
      return Q(object).timeout(ms, error);
  };
  
  Promise.prototype.timeout = function (ms, error) {
      var deferred = defer();
      var timeoutId = setTimeout(function () {
          if (!error || "string" === typeof error) {
              error = new Error(error || "Timed out after " + ms + " ms");
              error.code = "ETIMEDOUT";
          }
          deferred.reject(error);
      }, ms);
  
      this.then(function (value) {
          clearTimeout(timeoutId);
          deferred.resolve(value);
      }, function (exception) {
          clearTimeout(timeoutId);
          deferred.reject(exception);
      }, deferred.notify);
  
      return deferred.promise;
  };
  
  /**
   * Returns a promise for the given value (or promised value), some
   * milliseconds after it resolved. Passes rejections immediately.
   * @param {Any*} promise
   * @param {Number} milliseconds
   * @returns a promise for the resolution of the given promise after milliseconds
   * time has elapsed since the resolution of the given promise.
   * If the given promise rejects, that is passed immediately.
   */
  Q.delay = function (object, timeout) {
      if (timeout === void 0) {
          timeout = object;
          object = void 0;
      }
      return Q(object).delay(timeout);
  };
  
  Promise.prototype.delay = function (timeout) {
      return this.then(function (value) {
          var deferred = defer();
          setTimeout(function () {
              deferred.resolve(value);
          }, timeout);
          return deferred.promise;
      });
  };
  
  /**
   * Passes a continuation to a Node function, which is called with the given
   * arguments provided as an array, and returns a promise.
   *
   *      Q.nfapply(FS.readFile, ["/node_modules/q/q.js"])
   *      .then(function (content) {
   *      })
   *
   */
  Q.nfapply = function (callback, args) {
      return Q(callback).nfapply(args);
  };
  
  Promise.prototype.nfapply = function (args) {
      var deferred = defer();
      var nodeArgs = array_slice(args);
      nodeArgs.push(deferred.makeNodeResolver());
      this.fapply(nodeArgs).fail(deferred.reject);
      return deferred.promise;
  };
  
  /**
   * Passes a continuation to a Node function, which is called with the given
   * arguments provided individually, and returns a promise.
   * @example
   * Q.nfcall(FS.readFile, "/node_modules/q/q.js")
   * .then(function (content) {
   * })
   *
   */
  Q.nfcall = function (callback /*...args*/) {
      var args = array_slice(arguments, 1);
      return Q(callback).nfapply(args);
  };
  
  Promise.prototype.nfcall = function (/*...args*/) {
      var nodeArgs = array_slice(arguments);
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      this.fapply(nodeArgs).fail(deferred.reject);
      return deferred.promise;
  };
  
  /**
   * Wraps a NodeJS continuation passing function and returns an equivalent
   * version that returns a promise.
   * @example
   * Q.nfbind(FS.readFile, "/node_modules/q/q.js")("utf-8")
   * .then(console.log)
   * .done()
   */
  Q.nfbind =
  Q.denodeify = function (callback /*...args*/) {
      if (callback === undefined) {
          throw new Error("Q can't wrap an undefined function");
      }
      var baseArgs = array_slice(arguments, 1);
      return function () {
          var nodeArgs = baseArgs.concat(array_slice(arguments));
          var deferred = defer();
          nodeArgs.push(deferred.makeNodeResolver());
          Q(callback).fapply(nodeArgs).fail(deferred.reject);
          return deferred.promise;
      };
  };
  
  Promise.prototype.nfbind =
  Promise.prototype.denodeify = function (/*...args*/) {
      var args = array_slice(arguments);
      args.unshift(this);
      return Q.denodeify.apply(void 0, args);
  };
  
  Q.nbind = function (callback, thisp /*...args*/) {
      var baseArgs = array_slice(arguments, 2);
      return function () {
          var nodeArgs = baseArgs.concat(array_slice(arguments));
          var deferred = defer();
          nodeArgs.push(deferred.makeNodeResolver());
          function bound() {
              return callback.apply(thisp, arguments);
          }
          Q(bound).fapply(nodeArgs).fail(deferred.reject);
          return deferred.promise;
      };
  };
  
  Promise.prototype.nbind = function (/*thisp, ...args*/) {
      var args = array_slice(arguments, 0);
      args.unshift(this);
      return Q.nbind.apply(void 0, args);
  };
  
  /**
   * Calls a method of a Node-style object that accepts a Node-style
   * callback with a given array of arguments, plus a provided callback.
   * @param object an object that has the named method
   * @param {String} name name of the method of object
   * @param {Array} args arguments to pass to the method; the callback
   * will be provided by Q and appended to these arguments.
   * @returns a promise for the value or error
   */
  Q.nmapply = // XXX As proposed by "Redsandro"
  Q.npost = function (object, name, args) {
      return Q(object).npost(name, args);
  };
  
  Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
  Promise.prototype.npost = function (name, args) {
      var nodeArgs = array_slice(args || []);
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
      return deferred.promise;
  };
  
  /**
   * Calls a method of a Node-style object that accepts a Node-style
   * callback, forwarding the given variadic arguments, plus a provided
   * callback argument.
   * @param object an object that has the named method
   * @param {String} name name of the method of object
   * @param ...args arguments to pass to the method; the callback will
   * be provided by Q and appended to these arguments.
   * @returns a promise for the value or error
   */
  Q.nsend = // XXX Based on Mark Miller's proposed "send"
  Q.nmcall = // XXX Based on "Redsandro's" proposal
  Q.ninvoke = function (object, name /*...args*/) {
      var nodeArgs = array_slice(arguments, 2);
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
      return deferred.promise;
  };
  
  Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
  Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
  Promise.prototype.ninvoke = function (name /*...args*/) {
      var nodeArgs = array_slice(arguments, 1);
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
      return deferred.promise;
  };
  
  /**
   * If a function would like to support both Node continuation-passing-style and
   * promise-returning-style, it can end its internal promise chain with
   * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
   * elects to use a nodeback, the result will be sent there.  If they do not
   * pass a nodeback, they will receive the result promise.
   * @param object a result (or a promise for a result)
   * @param {Function} nodeback a Node.js-style callback
   * @returns either the promise or nothing
   */
  Q.nodeify = nodeify;
  function nodeify(object, nodeback) {
      return Q(object).nodeify(nodeback);
  }
  
  Promise.prototype.nodeify = function (nodeback) {
      if (nodeback) {
          this.then(function (value) {
              Q.nextTick(function () {
                  nodeback(null, value);
              });
          }, function (error) {
              Q.nextTick(function () {
                  nodeback(error);
              });
          });
      } else {
          return this;
      }
  };
  
  Q.noConflict = function() {
      throw new Error("Q.noConflict only works when Q is used as a global");
  };
  
  // All code before this point will be filtered from stack traces.
  var qEndingLine = captureLine();
  
  return Q;
  
  });
  

});

;/*!node_modules/chai/node_modules/assertion-error/index.js*/
define('node_modules/chai/node_modules/assertion-error/index', function(require, exports, module) {

  /*!
   * assertion-error
   * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
   * MIT Licensed
   */
  
  /*!
   * Return a function that will copy properties from
   * one object to another excluding any originally
   * listed. Returned function will create a new `{}`.
   *
   * @param {String} excluded properties ...
   * @return {Function}
   */
  
  function exclude () {
    var excludes = [].slice.call(arguments);
  
    function excludeProps (res, obj) {
      Object.keys(obj).forEach(function (key) {
        if (!~excludes.indexOf(key)) res[key] = obj[key];
      });
    }
  
    return function extendExclude () {
      var args = [].slice.call(arguments)
        , i = 0
        , res = {};
  
      for (; i < args.length; i++) {
        excludeProps(res, args[i]);
      }
  
      return res;
    };
  };
  
  /*!
   * Primary Exports
   */
  
  module.exports = AssertionError;
  
  /**
   * ### AssertionError
   *
   * An extension of the JavaScript `Error` constructor for
   * assertion and validation scenarios.
   *
   * @param {String} message
   * @param {Object} properties to include (optional)
   * @param {callee} start stack function (optional)
   */
  
  function AssertionError (message, _props, ssf) {
    var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
      , props = extend(_props || {});
  
    // default values
    this.message = message || 'Unspecified AssertionError';
    this.showDiff = false;
  
    // copy from properties
    for (var key in props) {
      this[key] = props[key];
    }
  
    // capture stack trace
    ssf = ssf || arguments.callee;
    if (ssf && Error.captureStackTrace) {
      Error.captureStackTrace(this, ssf);
    } else {
      try {
        throw new Error();
      } catch(e) {
        this.stack = e.stack;
      }
    }
  }
  
  /*!
   * Inherit from Error.prototype
   */
  
  AssertionError.prototype = Object.create(Error.prototype);
  
  /*!
   * Statically set name
   */
  
  AssertionError.prototype.name = 'AssertionError';
  
  /*!
   * Ensure correct constructor
   */
  
  AssertionError.prototype.constructor = AssertionError;
  
  /**
   * Allow errors to be converted to JSON for static transfer.
   *
   * @param {Boolean} include stack (default: `true`)
   * @return {Object} object that can be `JSON.stringify`
   */
  
  AssertionError.prototype.toJSON = function (stack) {
    var extend = exclude('constructor', 'toJSON', 'stack')
      , props = extend({ name: this.name }, this);
  
    // include stack if exists and not turned off
    if (false !== stack && this.stack) {
      props.stack = this.stack;
    }
  
    return props;
  };
  

});

;/*!node_modules/chai/node_modules/pathval/index.js*/
define('node_modules/chai/node_modules/pathval/index', function(require, exports, module) {

  'use strict';
  
  /* !
   * Chai - pathval utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * @see https://github.com/logicalparadox/filtr
   * MIT Licensed
   */
  
  /**
   * ### .hasProperty(object, name)
   *
   * This allows checking whether an object has own
   * or inherited from prototype chain named property.
   *
   * Basically does the same thing as the `in`
   * operator but works properly with null/undefined values
   * and other primitives.
   *
   *     var obj = {
   *         arr: ['a', 'b', 'c']
   *       , str: 'Hello'
   *     }
   *
   * The following would be the results.
   *
   *     hasProperty(obj, 'str');  // true
   *     hasProperty(obj, 'constructor');  // true
   *     hasProperty(obj, 'bar');  // false
   *
   *     hasProperty(obj.str, 'length'); // true
   *     hasProperty(obj.str, 1);  // true
   *     hasProperty(obj.str, 5);  // false
   *
   *     hasProperty(obj.arr, 'length');  // true
   *     hasProperty(obj.arr, 2);  // true
   *     hasProperty(obj.arr, 3);  // false
   *
   * @param {Object} object
   * @param {String|Symbol} name
   * @returns {Boolean} whether it exists
   * @namespace Utils
   * @name hasProperty
   * @api public
   */
  
  function hasProperty(obj, name) {
    if (typeof obj === 'undefined' || obj === null) {
      return false;
    }
  
    // The `in` operator does not work with primitives.
    return name in Object(obj);
  }
  
  /* !
   * ## parsePath(path)
   *
   * Helper function used to parse string object
   * paths. Use in conjunction with `internalGetPathValue`.
   *
   *      var parsed = parsePath('myobject.property.subprop');
   *
   * ### Paths:
   *
   * * Can be infinitely deep and nested.
   * * Arrays are also valid using the formal `myobject.document[3].property`.
   * * Literal dots and brackets (not delimiter) must be backslash-escaped.
   *
   * @param {String} path
   * @returns {Object} parsed
   * @api private
   */
  
  function parsePath(path) {
    var str = path.replace(/([^\\])\[/g, '$1.[');
    var parts = str.match(/(\\\.|[^.]+?)+/g);
    return parts.map(function mapMatches(value) {
      var regexp = /^\[(\d+)\]$/;
      var mArr = regexp.exec(value);
      var parsed = null;
      if (mArr) {
        parsed = { i: parseFloat(mArr[1]) };
      } else {
        parsed = { p: value.replace(/\\([.\[\]])/g, '$1') };
      }
  
      return parsed;
    });
  }
  
  /* !
   * ## internalGetPathValue(obj, parsed[, pathDepth])
   *
   * Helper companion function for `.parsePath` that returns
   * the value located at the parsed address.
   *
   *      var value = getPathValue(obj, parsed);
   *
   * @param {Object} object to search against
   * @param {Object} parsed definition from `parsePath`.
   * @param {Number} depth (nesting level) of the property we want to retrieve
   * @returns {Object|Undefined} value
   * @api private
   */
  
  function internalGetPathValue(obj, parsed, pathDepth) {
    var temporaryValue = obj;
    var res = null;
    pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);
  
    for (var i = 0; i < pathDepth; i++) {
      var part = parsed[i];
      if (temporaryValue) {
        if (typeof part.p === 'undefined') {
          temporaryValue = temporaryValue[part.i];
        } else {
          temporaryValue = temporaryValue[part.p];
        }
  
        if (i === (pathDepth - 1)) {
          res = temporaryValue;
        }
      }
    }
  
    return res;
  }
  
  /* !
   * ## internalSetPathValue(obj, value, parsed)
   *
   * Companion function for `parsePath` that sets
   * the value located at a parsed address.
   *
   *  internalSetPathValue(obj, 'value', parsed);
   *
   * @param {Object} object to search and define on
   * @param {*} value to use upon set
   * @param {Object} parsed definition from `parsePath`
   * @api private
   */
  
  function internalSetPathValue(obj, val, parsed) {
    var tempObj = obj;
    var pathDepth = parsed.length;
    var part = null;
    // Here we iterate through every part of the path
    for (var i = 0; i < pathDepth; i++) {
      var propName = null;
      var propVal = null;
      part = parsed[i];
  
      // If it's the last part of the path, we set the 'propName' value with the property name
      if (i === (pathDepth - 1)) {
        propName = typeof part.p === 'undefined' ? part.i : part.p;
        // Now we set the property with the name held by 'propName' on object with the desired val
        tempObj[propName] = val;
      } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
        tempObj = tempObj[part.p];
      } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
        tempObj = tempObj[part.i];
      } else {
        // If the obj doesn't have the property we create one with that name to define it
        var next = parsed[i + 1];
        // Here we set the name of the property which will be defined
        propName = typeof part.p === 'undefined' ? part.i : part.p;
        // Here we decide if this property will be an array or a new object
        propVal = typeof next.p === 'undefined' ? [] : {};
        tempObj[propName] = propVal;
        tempObj = tempObj[propName];
      }
    }
  }
  
  /**
   * ### .getPathInfo(object, path)
   *
   * This allows the retrieval of property info in an
   * object given a string path.
   *
   * The path info consists of an object with the
   * following properties:
   *
   * * parent - The parent object of the property referenced by `path`
   * * name - The name of the final property, a number if it was an array indexer
   * * value - The value of the property, if it exists, otherwise `undefined`
   * * exists - Whether the property exists or not
   *
   * @param {Object} object
   * @param {String} path
   * @returns {Object} info
   * @namespace Utils
   * @name getPathInfo
   * @api public
   */
  
  function getPathInfo(obj, path) {
    var parsed = parsePath(path);
    var last = parsed[parsed.length - 1];
    var info = {
      parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
      name: last.p || last.i,
      value: internalGetPathValue(obj, parsed),
    };
    info.exists = hasProperty(info.parent, info.name);
  
    return info;
  }
  
  /**
   * ### .getPathValue(object, path)
   *
   * This allows the retrieval of values in an
   * object given a string path.
   *
   *     var obj = {
   *         prop1: {
   *             arr: ['a', 'b', 'c']
   *           , str: 'Hello'
   *         }
   *       , prop2: {
   *             arr: [ { nested: 'Universe' } ]
   *           , str: 'Hello again!'
   *         }
   *     }
   *
   * The following would be the results.
   *
   *     getPathValue(obj, 'prop1.str'); // Hello
   *     getPathValue(obj, 'prop1.att[2]'); // b
   *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
   *
   * @param {Object} object
   * @param {String} path
   * @returns {Object} value or `undefined`
   * @namespace Utils
   * @name getPathValue
   * @api public
   */
  
  function getPathValue(obj, path) {
    var info = getPathInfo(obj, path);
    return info.value;
  }
  
  /**
   * ### .setPathValue(object, path, value)
   *
   * Define the value in an object at a given string path.
   *
   * ```js
   * var obj = {
   *     prop1: {
   *         arr: ['a', 'b', 'c']
   *       , str: 'Hello'
   *     }
   *   , prop2: {
   *         arr: [ { nested: 'Universe' } ]
   *       , str: 'Hello again!'
   *     }
   * };
   * ```
   *
   * The following would be acceptable.
   *
   * ```js
   * var properties = require('tea-properties');
   * properties.set(obj, 'prop1.str', 'Hello Universe!');
   * properties.set(obj, 'prop1.arr[2]', 'B');
   * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
   * ```
   *
   * @param {Object} object
   * @param {String} path
   * @param {Mixed} value
   * @api private
   */
  
  function setPathValue(obj, path, val) {
    var parsed = parsePath(path);
    internalSetPathValue(obj, val, parsed);
    return obj;
  }
  
  module.exports = {
    hasProperty: hasProperty,
    getPathInfo: getPathInfo,
    getPathValue: getPathValue,
    setPathValue: setPathValue,
  };
  

});

;/*!node_modules/chai/lib/chai/utils/flag.js*/
define('node_modules/chai/lib/chai/utils/flag', function(require, exports, module) {

  /*!
   * Chai - flag utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .flag(object, key, [value])
   *
   * Get or set a flag value on an object. If a
   * value is provided it will be set, else it will
   * return the currently set value or `undefined` if
   * the value is not set.
   *
   *     utils.flag(this, 'foo', 'bar'); // setter
   *     utils.flag(this, 'foo'); // getter, returns `bar`
   *
   * @param {Object} object constructed Assertion
   * @param {String} key
   * @param {Mixed} value (optional)
   * @namespace Utils
   * @name flag
   * @api private
   */
  
  module.exports = function flag(obj, key, value) {
    var flags = obj.__flags || (obj.__flags = Object.create(null));
    if (arguments.length === 3) {
      flags[key] = value;
    } else {
      return flags[key];
    }
  };
  

});

;/*!node_modules/chai/lib/chai/utils/test.js*/
define('node_modules/chai/lib/chai/utils/test', function(require, exports, module) {

  /*!
   * Chai - test utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependancies
   */
  
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  
  /**
   * ### .test(object, expression)
   *
   * Test and object for expression.
   *
   * @param {Object} object (constructed Assertion)
   * @param {Arguments} chai.Assertion.prototype.assert arguments
   * @namespace Utils
   * @name test
   */
  
  module.exports = function test(obj, args) {
    var negate = flag(obj, 'negate')
      , expr = args[0];
    return negate ? !expr : expr;
  };
  

});

;/*!node_modules/chai/node_modules/type-detect/index.js*/
define('node_modules/chai/node_modules/type-detect/index', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  'use strict';
  
  /* !
   * type-detect
   * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  var promiseExists = typeof Promise === 'function';
  var globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self; // eslint-disable-line
  var isDom = 'location' in globalObject && 'document' in globalObject;
  var symbolExists = typeof Symbol !== 'undefined';
  var mapExists = typeof Map !== 'undefined';
  var setExists = typeof Set !== 'undefined';
  var weakMapExists = typeof WeakMap !== 'undefined';
  var weakSetExists = typeof WeakSet !== 'undefined';
  var dataViewExists = typeof DataView !== 'undefined';
  var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
  var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
  var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
  var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
  var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
  var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
  var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
  var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
  var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
  var toStringLeftSliceLength = 8;
  var toStringRightSliceLength = -1;
  /**
   * ### typeOf (obj)
   *
   * Uses `Object.prototype.toString` to determine the type of an object,
   * normalising behaviour across engine versions & well optimised.
   *
   * @param {Mixed} object
   * @return {String} object type
   * @api public
   */
  module.exports = function typeDetect(obj) {
    /* ! Speed optimisation
     * Pre:
     *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
     *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
     *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
     *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
     *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
     * Post:
     *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
     *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
     *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
     *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
     *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
     */
    var typeofObj = typeof obj;
    if (typeofObj !== 'object') {
      return typeofObj;
    }
  
    /* ! Speed optimisation
     * Pre:
     *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
     * Post:
     *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
     */
    if (obj === null) {
      return 'null';
    }
  
    /* ! Spec Conformance
     * Test: `Object.prototype.toString.call(window)``
     *  - Node === "[object global]"
     *  - Chrome === "[object global]"
     *  - Firefox === "[object Window]"
     *  - PhantomJS === "[object Window]"
     *  - Safari === "[object Window]"
     *  - IE 11 === "[object Window]"
     *  - IE Edge === "[object Window]"
     * Test: `Object.prototype.toString.call(this)``
     *  - Chrome Worker === "[object global]"
     *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
     *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
     *  - IE 11 Worker === "[object WorkerGlobalScope]"
     *  - IE Edge Worker === "[object WorkerGlobalScope]"
     */
    if (obj === globalObject) {
      return 'global';
    }
  
    /* ! Speed optimisation
     * Pre:
     *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
     * Post:
     *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
     */
    if (
      Array.isArray(obj) &&
      (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))
    ) {
      return 'Array';
    }
  
    if (isDom) {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/browsers.html#location)
       * WhatWG HTML$7.7.3 - The `Location` interface
       * Test: `Object.prototype.toString.call(window.location)``
       *  - IE <=11 === "[object Object]"
       *  - IE Edge <=13 === "[object Object]"
       */
      if (obj === globalObject.location) {
        return 'Location';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#document)
       * WhatWG HTML$3.1.1 - The `Document` object
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       *       WhatWG HTML states:
       *         > For historical reasons, Window objects must also have a
       *         > writable, configurable, non-enumerable property named
       *         > HTMLDocument whose value is the Document interface object.
       * Test: `Object.prototype.toString.call(document)``
       *  - Chrome === "[object HTMLDocument]"
       *  - Firefox === "[object HTMLDocument]"
       *  - Safari === "[object HTMLDocument]"
       *  - IE <=10 === "[object Document]"
       *  - IE 11 === "[object HTMLDocument]"
       *  - IE Edge <=13 === "[object HTMLDocument]"
       */
      if (obj === globalObject.document) {
        return 'Document';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */
      if (obj === (globalObject.navigator || {}).mimeTypes) {
        return 'MimeTypeArray';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */
      if (obj === (globalObject.navigator || {}).plugins) {
        return 'PluginArray';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
       * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
       *  - IE <=10 === "[object HTMLBlockElement]"
       */
      if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj instanceof HTMLElement && obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (obj instanceof HTMLElement && obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
  
    /* ! Speed optimisation
    * Pre:
    *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
    *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
    *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
    *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
    *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
    *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
    *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
    *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
    *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
    * Post:
    *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
    *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
    *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
    *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
    *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
    *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
    *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
    *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
    *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
    */
    var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
    if (typeof stringTag === 'string') {
      return stringTag;
    }
  
    var objPrototype = Object.getPrototypeOf(obj);
    /* ! Speed optimisation
    * Pre:
    *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
    *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
    * Post:
    *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
    *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
    */
    if (objPrototype === RegExp.prototype) {
      return 'RegExp';
    }
  
    /* ! Speed optimisation
    * Pre:
    *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
    * Post:
    *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
    */
    if (objPrototype === Date.prototype) {
      return 'Date';
    }
  
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
     * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
     * Test: `Object.prototype.toString.call(Promise.resolve())``
     *  - Chrome <=47 === "[object Object]"
     *  - Edge <=20 === "[object Object]"
     *  - Firefox 29-Latest === "[object Promise]"
     *  - Safari 7.1-Latest === "[object Promise]"
     */
    if (promiseExists && objPrototype === Promise.prototype) {
      return 'Promise';
    }
  
    /* ! Speed optimisation
    * Pre:
    *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
    * Post:
    *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
    */
    if (setExists && objPrototype === Set.prototype) {
      return 'Set';
    }
  
    /* ! Speed optimisation
    * Pre:
    *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
    * Post:
    *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
    */
    if (mapExists && objPrototype === Map.prototype) {
      return 'Map';
    }
  
    /* ! Speed optimisation
    * Pre:
    *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
    * Post:
    *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
    */
    if (weakSetExists && objPrototype === WeakSet.prototype) {
      return 'WeakSet';
    }
  
    /* ! Speed optimisation
    * Pre:
    *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
    * Post:
    *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
    */
    if (weakMapExists && objPrototype === WeakMap.prototype) {
      return 'WeakMap';
    }
  
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
     * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
     * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
     *  - Edge <=13 === "[object Object]"
     */
    if (dataViewExists && objPrototype === DataView.prototype) {
      return 'DataView';
    }
  
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
     * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
     * Test: `Object.prototype.toString.call(new Map().entries())``
     *  - Edge <=13 === "[object Object]"
     */
    if (mapExists && objPrototype === mapIteratorPrototype) {
      return 'Map Iterator';
    }
  
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
     * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
     * Test: `Object.prototype.toString.call(new Set().entries())``
     *  - Edge <=13 === "[object Object]"
     */
    if (setExists && objPrototype === setIteratorPrototype) {
      return 'Set Iterator';
    }
  
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
     * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
     * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
     *  - Edge <=13 === "[object Object]"
     */
    if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
      return 'Array Iterator';
    }
  
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
     * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
     * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
     *  - Edge <=13 === "[object Object]"
     */
    if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
      return 'String Iterator';
    }
  
    /* ! Speed optimisation
    * Pre:
    *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
    * Post:
    *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
    */
    if (objPrototype === null) {
      return 'Object';
    }
  
    return Object
      .prototype
      .toString
      .call(obj)
      .slice(toStringLeftSliceLength, toStringRightSliceLength);
  };
  
  module.exports.typeDetect = module.exports;
  

});

;/*!node_modules/chai/lib/chai/utils/expectTypes.js*/
define('node_modules/chai/lib/chai/utils/expectTypes', function(require, exports, module) {

  /*!
   * Chai - expectTypes utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .expectTypes(obj, types)
   *
   * Ensures that the object being tested against is of a valid type.
   *
   *     utils.expectTypes(this, ['array', 'object', 'string']);
   *
   * @param {Mixed} obj constructed Assertion
   * @param {Array} type A list of allowed types for this assertion
   * @namespace Utils
   * @name expectTypes
   * @api public
   */
  
  var AssertionError = require('node_modules/chai/node_modules/assertion-error/index');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var type = require('node_modules/chai/node_modules/type-detect/index');
  
  module.exports = function expectTypes(obj, types) {
    var flagMsg = flag(obj, 'message');
    var ssfi = flag(obj, 'ssfi');
  
    flagMsg = flagMsg ? flagMsg + ': ' : '';
  
    obj = flag(obj, 'object');
    types = types.map(function (t) { return t.toLowerCase(); });
    types.sort();
  
    // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'
    var str = types.map(function (t, index) {
      var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';
      var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
      return or + art + ' ' + t;
    }).join(', ');
  
    var objType = type(obj).toLowerCase();
  
    if (!types.some(function (expected) { return objType === expected; })) {
      throw new AssertionError(
        flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',
        undefined,
        ssfi
      );
    }
  };
  

});

;/*!node_modules/chai/lib/chai/utils/getActual.js*/
define('node_modules/chai/lib/chai/utils/getActual', function(require, exports, module) {

  /*!
   * Chai - getActual utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .getActual(object, [actual])
   *
   * Returns the `actual` value for an Assertion.
   *
   * @param {Object} object (constructed Assertion)
   * @param {Arguments} chai.Assertion.prototype.assert arguments
   * @namespace Utils
   * @name getActual
   */
  
  module.exports = function getActual(obj, args) {
    return args.length > 4 ? args[4] : obj._obj;
  };
  

});

;/*!node_modules/chai/node_modules/get-func-name/index.js*/
define('node_modules/chai/node_modules/get-func-name/index', function(require, exports, module) {

  'use strict';
  
  /* !
   * Chai - getFuncName utility
   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .getFuncName(constructorFn)
   *
   * Returns the name of a function.
   * When a non-function instance is passed, returns `null`.
   * This also includes a polyfill function if `aFunc.name` is not defined.
   *
   * @name getFuncName
   * @param {Function} funct
   * @namespace Utils
   * @api public
   */
  
  var toString = Function.prototype.toString;
  var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
  function getFuncName(aFunc) {
    if (typeof aFunc !== 'function') {
      return null;
    }
  
    var name = '';
    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
      // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
      var match = toString.call(aFunc).match(functionNameMatch);
      if (match) {
        name = match[1];
      }
    } else {
      // If we've got a `name` property we just use it
      name = aFunc.name;
    }
  
    return name;
  }
  
  module.exports = getFuncName;
  

});

;/*!node_modules/chai/lib/chai/utils/getProperties.js*/
define('node_modules/chai/lib/chai/utils/getProperties', function(require, exports, module) {

  /*!
   * Chai - getProperties utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .getProperties(object)
   *
   * This allows the retrieval of property names of an object, enumerable or not,
   * inherited or not.
   *
   * @param {Object} object
   * @returns {Array}
   * @namespace Utils
   * @name getProperties
   * @api public
   */
  
  module.exports = function getProperties(object) {
    var result = Object.getOwnPropertyNames(object);
  
    function addProperty(property) {
      if (result.indexOf(property) === -1) {
        result.push(property);
      }
    }
  
    var proto = Object.getPrototypeOf(object);
    while (proto !== null) {
      Object.getOwnPropertyNames(proto).forEach(addProperty);
      proto = Object.getPrototypeOf(proto);
    }
  
    return result;
  };
  

});

;/*!node_modules/chai/lib/chai/utils/getEnumerableProperties.js*/
define('node_modules/chai/lib/chai/utils/getEnumerableProperties', function(require, exports, module) {

  /*!
   * Chai - getEnumerableProperties utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .getEnumerableProperties(object)
   *
   * This allows the retrieval of enumerable property names of an object,
   * inherited or not.
   *
   * @param {Object} object
   * @returns {Array}
   * @namespace Utils
   * @name getEnumerableProperties
   * @api public
   */
  
  module.exports = function getEnumerableProperties(object) {
    var result = [];
    for (var name in object) {
      result.push(name);
    }
    return result;
  };
  

});

;/*!node_modules/chai/lib/chai/config.js*/
define('node_modules/chai/lib/chai/config', function(require, exports, module) {

  module.exports = {
  
    /**
     * ### config.includeStack
     *
     * User configurable property, influences whether stack trace
     * is included in Assertion error message. Default of false
     * suppresses stack trace in the error message.
     *
     *     chai.config.includeStack = true;  // enable stack on error
     *
     * @param {Boolean}
     * @api public
     */
  
    includeStack: false,
  
    /**
     * ### config.showDiff
     *
     * User configurable property, influences whether or not
     * the `showDiff` flag should be included in the thrown
     * AssertionErrors. `false` will always be `false`; `true`
     * will be true when the assertion has requested a diff
     * be shown.
     *
     * @param {Boolean}
     * @api public
     */
  
    showDiff: true,
  
    /**
     * ### config.truncateThreshold
     *
     * User configurable property, sets length threshold for actual and
     * expected values in assertion errors. If this threshold is exceeded, for
     * example for large data structures, the value is replaced with something
     * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
     *
     * Set it to zero if you want to disable truncating altogether.
     *
     * This is especially userful when doing assertions on arrays: having this
     * set to a reasonable large value makes the failure messages readily
     * inspectable.
     *
     *     chai.config.truncateThreshold = 0;  // disable truncating
     *
     * @param {Number}
     * @api public
     */
  
    truncateThreshold: 40,
  
    /**
     * ### config.useProxy
     *
     * User configurable property, defines if chai will use a Proxy to throw
     * an error when a non-existent property is read, which protects users
     * from typos when using property-based assertions.
     *
     * Set it to false if you want to disable this feature.
     *
     *     chai.config.useProxy = false;  // disable use of Proxy
     *
     * This feature is automatically disabled regardless of this config value
     * in environments that don't support proxies.
     *
     * @param {Boolean}
     * @api public
     */
  
    useProxy: true,
  
    /**
     * ### config.proxyExcludedKeys
     *
     * User configurable property, defines which properties should be ignored
     * instead of throwing an error if they do not exist on the assertion.
     * This is only applied if the environment Chai is running in supports proxies and
     * if the `useProxy` configuration setting is enabled.
     * By default, `then` and `inspect` will not throw an error if they do not exist on the
     * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
     * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
     *
     *     // By default these keys will not throw an error if they do not exist on the assertion object
     *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
     *
     * @param {Array}
     * @api public
     */
  
    proxyExcludedKeys: ['then', 'inspect', 'toJSON']
  };
  

});

;/*!node_modules/chai/lib/chai/utils/inspect.js*/
define('node_modules/chai/lib/chai/utils/inspect', function(require, exports, module) {

  // This is (almost) directly from Node.js utils
  // https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js
  
  var getName = require('node_modules/chai/node_modules/get-func-name/index');
  var getProperties = require('node_modules/chai/lib/chai/utils/getProperties');
  var getEnumerableProperties = require('node_modules/chai/lib/chai/utils/getEnumerableProperties');
  var config = require('node_modules/chai/lib/chai/config');
  
  module.exports = inspect;
  
  /**
   * ### .inspect(obj, [showHidden], [depth], [colors])
   *
   * Echoes the value of a value. Tries to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
   *    properties of objects. Default is false.
   * @param {Number} depth Depth in which to descend in object. Default is 2.
   * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
   *    output. Default is false (no coloring).
   * @namespace Utils
   * @name inspect
   */
  function inspect(obj, showHidden, depth, colors) {
    var ctx = {
      showHidden: showHidden,
      seen: [],
      stylize: function (str) { return str; }
    };
    return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
  }
  
  // Returns true if object is a DOM element.
  var isDOMElement = function (object) {
    if (typeof HTMLElement === 'object') {
      return object instanceof HTMLElement;
    } else {
      return object &&
        typeof object === 'object' &&
        'nodeType' in object &&
        object.nodeType === 1 &&
        typeof object.nodeName === 'string';
    }
  };
  
  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (typeof ret !== 'string') {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }
  
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }
  
    // If this is a DOM element, try to get the outer HTML.
    if (isDOMElement(value)) {
      if ('outerHTML' in value) {
        return value.outerHTML;
        // This value does not have an outerHTML attribute,
        //   it could still be an XML element
      } else {
        // Attempt to serialize it
        try {
          if (document.xmlVersion) {
            var xmlSerializer = new XMLSerializer();
            return xmlSerializer.serializeToString(value);
          } else {
            // Firefox 11- do not support outerHTML
            //   It does, however, support innerHTML
            //   Use the following to render the element
            var ns = "http://www.w3.org/1999/xhtml";
            var container = document.createElementNS(ns, '_');
  
            container.appendChild(value.cloneNode(false));
            var html = container.innerHTML
              .replace('><', '>' + value.innerHTML + '<');
            container.innerHTML = '';
            return html;
          }
        } catch (err) {
          // This could be a non-native DOM implementation,
          //   continue with the normal flow:
          //   printing the element as if it is an object.
        }
      }
    }
  
    // Look up the keys of the object.
    var visibleKeys = getEnumerableProperties(value);
    var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
  
    var name, nameSuffix;
  
    // Some type of object without properties can be shortcutted.
    // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
    // a `stack` plus `description` property; ignore those for consistency.
    if (keys.length === 0 || (isError(value) && (
        (keys.length === 1 && keys[0] === 'stack') ||
        (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
       ))) {
      if (typeof value === 'function') {
        name = getName(value);
        nameSuffix = name ? ': ' + name : '';
        return ctx.stylize('[Function' + nameSuffix + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }
  
    var base = ''
      , array = false
      , typedArray = false
      , braces = ['{', '}'];
  
    if (isTypedArray(value)) {
      typedArray = true;
      braces = ['[', ']'];
    }
  
    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }
  
    // Make functions say that they are functions
    if (typeof value === 'function') {
      name = getName(value);
      nameSuffix = name ? ': ' + name : '';
      base = ' [Function' + nameSuffix + ']';
    }
  
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }
  
    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }
  
    // Make error with message first say the error
    if (isError(value)) {
      return formatError(value);
    }
  
    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }
  
    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }
  
    ctx.seen.push(value);
  
    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else if (typedArray) {
      return formatTypedArray(value);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }
  
    ctx.seen.pop();
  
    return reduceToSingleString(output, base, braces);
  }
  
  
  function formatPrimitive(ctx, value) {
    switch (typeof value) {
      case 'undefined':
        return ctx.stylize('undefined', 'undefined');
  
      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
  
      case 'number':
        if (value === 0 && (1/value) === -Infinity) {
          return ctx.stylize('-0', 'number');
        }
        return ctx.stylize('' + value, 'number');
  
      case 'boolean':
        return ctx.stylize('' + value, 'boolean');
  
      case 'symbol':
        return ctx.stylize(value.toString(), 'symbol');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
      return ctx.stylize('null', 'null');
    }
  }
  
  
  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }
  
  
  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (Object.prototype.hasOwnProperty.call(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
  
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }
  
  function formatTypedArray(value) {
    var str = '[ ';
  
    for (var i = 0; i < value.length; ++i) {
      if (str.length >= config.truncateThreshold - 7) {
        str += '...';
        break;
      }
      str += value[i] + ', ';
    }
    str += ' ]';
  
    // Removing trailing `, ` if the array was not truncated
    if (str.indexOf(',  ]') !== -1) {
      str = str.replace(',  ]', ' ]');
    }
  
    return str;
  }
  
  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name;
    var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
    var str;
  
    if (propDescriptor) {
      if (propDescriptor.get) {
        if (propDescriptor.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (propDescriptor.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
    }
    if (visibleKeys.indexOf(key) < 0) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(value[key]) < 0) {
        if (recurseTimes === null) {
          str = formatValue(ctx, value[key], null);
        } else {
          str = formatValue(ctx, value[key], recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (typeof name === 'undefined') {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }
  
    return name + ': ' + str;
  }
  
  
  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.length + 1;
    }, 0);
  
    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }
  
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }
  
  function isTypedArray(ar) {
    // Unfortunately there's no way to check if an object is a TypedArray
    // We have to check if it's one of these types
    return (typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar)));
  }
  
  function isArray(ar) {
    return Array.isArray(ar) ||
           (typeof ar === 'object' && objectToString(ar) === '[object Array]');
  }
  
  function isRegExp(re) {
    return typeof re === 'object' && objectToString(re) === '[object RegExp]';
  }
  
  function isDate(d) {
    return typeof d === 'object' && objectToString(d) === '[object Date]';
  }
  
  function isError(e) {
    return typeof e === 'object' && objectToString(e) === '[object Error]';
  }
  
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  

});

;/*!node_modules/chai/lib/chai/utils/objDisplay.js*/
define('node_modules/chai/lib/chai/utils/objDisplay', function(require, exports, module) {

  /*!
   * Chai - flag utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependancies
   */
  
  var inspect = require('node_modules/chai/lib/chai/utils/inspect');
  var config = require('node_modules/chai/lib/chai/config');
  
  /**
   * ### .objDisplay(object)
   *
   * Determines if an object or an array matches
   * criteria to be inspected in-line for error
   * messages or should be truncated.
   *
   * @param {Mixed} javascript object to inspect
   * @name objDisplay
   * @namespace Utils
   * @api public
   */
  
  module.exports = function objDisplay(obj) {
    var str = inspect(obj)
      , type = Object.prototype.toString.call(obj);
  
    if (config.truncateThreshold && str.length >= config.truncateThreshold) {
      if (type === '[object Function]') {
        return !obj.name || obj.name === ''
          ? '[Function]'
          : '[Function: ' + obj.name + ']';
      } else if (type === '[object Array]') {
        return '[ Array(' + obj.length + ') ]';
      } else if (type === '[object Object]') {
        var keys = Object.keys(obj)
          , kstr = keys.length > 2
            ? keys.splice(0, 2).join(', ') + ', ...'
            : keys.join(', ');
        return '{ Object (' + kstr + ') }';
      } else {
        return str;
      }
    } else {
      return str;
    }
  };
  

});

;/*!node_modules/chai/lib/chai/utils/getMessage.js*/
define('node_modules/chai/lib/chai/utils/getMessage', function(require, exports, module) {

  /*!
   * Chai - message composition utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependancies
   */
  
  var flag = require('node_modules/chai/lib/chai/utils/flag')
    , getActual = require('node_modules/chai/lib/chai/utils/getActual')
    , inspect = require('node_modules/chai/lib/chai/utils/inspect')
    , objDisplay = require('node_modules/chai/lib/chai/utils/objDisplay');
  
  /**
   * ### .getMessage(object, message, negateMessage)
   *
   * Construct the error message based on flags
   * and template tags. Template tags will return
   * a stringified inspection of the object referenced.
   *
   * Message template tags:
   * - `#{this}` current asserted object
   * - `#{act}` actual value
   * - `#{exp}` expected value
   *
   * @param {Object} object (constructed Assertion)
   * @param {Arguments} chai.Assertion.prototype.assert arguments
   * @namespace Utils
   * @name getMessage
   * @api public
   */
  
  module.exports = function getMessage(obj, args) {
    var negate = flag(obj, 'negate')
      , val = flag(obj, 'object')
      , expected = args[3]
      , actual = getActual(obj, args)
      , msg = negate ? args[2] : args[1]
      , flagMsg = flag(obj, 'message');
  
    if(typeof msg === "function") msg = msg();
    msg = msg || '';
    msg = msg
      .replace(/#\{this\}/g, function () { return objDisplay(val); })
      .replace(/#\{act\}/g, function () { return objDisplay(actual); })
      .replace(/#\{exp\}/g, function () { return objDisplay(expected); });
  
    return flagMsg ? flagMsg + ': ' + msg : msg;
  };
  

});

;/*!node_modules/chai/lib/chai/utils/transferFlags.js*/
define('node_modules/chai/lib/chai/utils/transferFlags', function(require, exports, module) {

  /*!
   * Chai - transferFlags utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .transferFlags(assertion, object, includeAll = true)
   *
   * Transfer all the flags for `assertion` to `object`. If
   * `includeAll` is set to `false`, then the base Chai
   * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
   * and `message`) will not be transferred.
   *
   *
   *     var newAssertion = new Assertion();
   *     utils.transferFlags(assertion, newAssertion);
   *
   *     var anotherAsseriton = new Assertion(myObj);
   *     utils.transferFlags(assertion, anotherAssertion, false);
   *
   * @param {Assertion} assertion the assertion to transfer the flags from
   * @param {Object} object the object to transfer the flags to; usually a new assertion
   * @param {Boolean} includeAll
   * @namespace Utils
   * @name transferFlags
   * @api private
   */
  
  module.exports = function transferFlags(assertion, object, includeAll) {
    var flags = assertion.__flags || (assertion.__flags = Object.create(null));
  
    if (!object.__flags) {
      object.__flags = Object.create(null);
    }
  
    includeAll = arguments.length === 3 ? includeAll : true;
  
    for (var flag in flags) {
      if (includeAll ||
          (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
        object.__flags[flag] = flags[flag];
      }
    }
  };
  

});

;/*!node_modules/chai/node_modules/deep-eql/node_modules/type-detect/index.js*/
define('node_modules/chai/node_modules/deep-eql/node_modules/type-detect/index', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  'use strict';
  /* !
   * type-detect
   * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  var getPrototypeOfExists = typeof Object.getPrototypeOf === 'function';
  var promiseExists = typeof Promise === 'function';
  var globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self; // eslint-disable-line
  var isDom = 'location' in globalObject && 'document' in globalObject;
  var htmlElementExists = typeof HTMLElement !== 'undefined';
  var isArrayExists = typeof Array.isArray === 'function';
  var symbolExists = typeof Symbol !== 'undefined';
  var mapExists = typeof Map !== 'undefined';
  var setExists = typeof Set !== 'undefined';
  var weakMapExists = typeof WeakMap !== 'undefined';
  var weakSetExists = typeof WeakSet !== 'undefined';
  var dataViewExists = typeof DataView !== 'undefined';
  var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
  var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
  var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
  var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
  var setIteratorPrototype = getPrototypeOfExists && setEntriesExists && Object.getPrototypeOf(new Set().entries());
  var mapIteratorPrototype = getPrototypeOfExists && mapEntriesExists && Object.getPrototypeOf(new Map().entries());
  var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
  var stringIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
  var toStringLeftSliceLength = 8;
  var toStringRightSliceLength = -1;
  /**
   * ### typeOf (obj)
   *
   * Uses `Object.prototype.toString` to determine the type of an object,
   * normalising behaviour across engine versions & well optimised.
   *
   * @param {Mixed} object
   * @return {String} object type
   * @api public
   */
  module.exports = function typeDetect(obj) {
    /* ! Speed optimisation
     * Pre:
     *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
     *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
     *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
     *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
     *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
     * Post:
     *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
     *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
     *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
     *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
     *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
     */
    var typeofObj = typeof obj;
    if (typeofObj !== 'object') {
      return typeofObj;
    }
  
    /* ! Speed optimisation
     * Pre:
     *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
     * Post:
     *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
     */
    if (obj === null) {
      return 'null';
    }
  
    /* ! Spec Conformance
     * Test: `Object.prototype.toString.call(window)``
     *  - Node === "[object global]"
     *  - Chrome === "[object global]"
     *  - Firefox === "[object Window]"
     *  - PhantomJS === "[object Window]"
     *  - Safari === "[object Window]"
     *  - IE 11 === "[object Window]"
     *  - IE Edge === "[object Window]"
     * Test: `Object.prototype.toString.call(this)``
     *  - Chrome Worker === "[object global]"
     *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
     *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
     *  - IE 11 Worker === "[object WorkerGlobalScope]"
     *  - IE Edge Worker === "[object WorkerGlobalScope]"
     */
    if (obj === globalObject) {
      return 'global';
    }
  
    /* ! Speed optimisation
     * Pre:
     *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
     * Post:
     *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
     */
    if (isArrayExists && Array.isArray(obj)) {
      return 'Array';
    }
  
    if (isDom) {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/browsers.html#location)
       * WhatWG HTML$7.7.3 - The `Location` interface
       * Test: `Object.prototype.toString.call(window.location)``
       *  - IE <=11 === "[object Object]"
       *  - IE Edge <=13 === "[object Object]"
       */
      if (obj === globalObject.location) {
        return 'Location';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#document)
       * WhatWG HTML$3.1.1 - The `Document` object
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       *       WhatWG HTML states:
       *         > For historical reasons, Window objects must also have a
       *         > writable, configurable, non-enumerable property named
       *         > HTMLDocument whose value is the Document interface object.
       * Test: `Object.prototype.toString.call(document)``
       *  - Chrome === "[object HTMLDocument]"
       *  - Firefox === "[object HTMLDocument]"
       *  - Safari === "[object HTMLDocument]"
       *  - IE <=10 === "[object Document]"
       *  - IE 11 === "[object HTMLDocument]"
       *  - IE Edge <=13 === "[object HTMLDocument]"
       */
      if (obj === globalObject.document) {
        return 'Document';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */
      if (obj === (globalObject.navigator || {}).mimeTypes) {
        return 'MimeTypeArray';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */
      if (obj === (globalObject.navigator || {}).plugins) {
        return 'PluginArray';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
       * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
       *  - IE <=10 === "[object HTMLBlockElement]"
       */
      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }
  
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */
      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
  
    /* ! Speed optimisation
    * Pre:
    *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
    *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
    *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
    *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
    *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
    *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
    *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
    *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
    *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
    * Post:
    *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
    *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
    *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
    *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
    *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
    *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
    *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
    *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
    *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
    */
    var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
    if (typeof stringTag === 'string') {
      return stringTag;
    }
  
    if (getPrototypeOfExists) {
      var objPrototype = Object.getPrototypeOf(obj);
      /* ! Speed optimisation
      * Pre:
      *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
      *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
      * Post:
      *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
      *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
      */
      if (objPrototype === RegExp.prototype) {
        return 'RegExp';
      }
  
      /* ! Speed optimisation
      * Pre:
      *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
      * Post:
      *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
      */
      if (objPrototype === Date.prototype) {
        return 'Date';
      }
  
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
       * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
       * Test: `Object.prototype.toString.call(Promise.resolve())``
       *  - Chrome <=47 === "[object Object]"
       *  - Edge <=20 === "[object Object]"
       *  - Firefox 29-Latest === "[object Promise]"
       *  - Safari 7.1-Latest === "[object Promise]"
       */
      if (promiseExists && objPrototype === Promise.prototype) {
        return 'Promise';
      }
  
      /* ! Speed optimisation
      * Pre:
      *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
      * Post:
      *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
      */
      if (setExists && objPrototype === Set.prototype) {
        return 'Set';
      }
  
      /* ! Speed optimisation
      * Pre:
      *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
      * Post:
      *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
      */
      if (mapExists && objPrototype === Map.prototype) {
        return 'Map';
      }
  
      /* ! Speed optimisation
      * Pre:
      *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
      * Post:
      *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
      */
      if (weakSetExists && objPrototype === WeakSet.prototype) {
        return 'WeakSet';
      }
  
      /* ! Speed optimisation
      * Pre:
      *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
      * Post:
      *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
      */
      if (weakMapExists && objPrototype === WeakMap.prototype) {
        return 'WeakMap';
      }
  
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
       * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
       * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
       *  - Edge <=13 === "[object Object]"
       */
      if (dataViewExists && objPrototype === DataView.prototype) {
        return 'DataView';
      }
  
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
       * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
       * Test: `Object.prototype.toString.call(new Map().entries())``
       *  - Edge <=13 === "[object Object]"
       */
      if (mapExists && objPrototype === mapIteratorPrototype) {
        return 'Map Iterator';
      }
  
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
       * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
       * Test: `Object.prototype.toString.call(new Set().entries())``
       *  - Edge <=13 === "[object Object]"
       */
      if (setExists && objPrototype === setIteratorPrototype) {
        return 'Set Iterator';
      }
  
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
       * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
       * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */
      if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
        return 'Array Iterator';
      }
  
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
       * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
       * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */
      if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
        return 'String Iterator';
      }
  
      /* ! Speed optimisation
      * Pre:
      *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
      * Post:
      *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
      */
      if (objPrototype === null) {
        return 'Object';
      }
    }
  
    return Object
      .prototype
      .toString
      .call(obj)
      .slice(toStringLeftSliceLength, toStringRightSliceLength);
  };
  
  module.exports.typeDetect = module.exports;
  

});

;/*!node_modules/chai/node_modules/deep-eql/index.js*/
define('node_modules/chai/node_modules/deep-eql/index', function(require, exports, module) {

  'use strict';
  /* globals Symbol: true, Uint8Array: true, WeakMap: true */
  /*!
   * deep-eql
   * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependencies
   */
  
  var type = require('node_modules/chai/node_modules/deep-eql/node_modules/type-detect/index');
  function FakeMap() {
    this.clear();
  }
  FakeMap.prototype = {
    clear: function clearMap() {
      this.keys = [];
      this.values = [];
      return this;
    },
    set: function setMap(key, value) {
      var index = this.keys.indexOf(key);
      if (index >= 0) {
        this.values[index] = value;
      } else {
        this.keys.push(key);
        this.values.push(value);
      }
      return this;
    },
    get: function getMap(key) {
      return this.values[this.keys.indexOf(key)];
    },
    delete: function deleteMap(key) {
      var index = this.keys.indexOf(key);
      if (index >= 0) {
        this.values = this.values.slice(0, index).concat(this.values.slice(index + 1));
        this.keys = this.keys.slice(0, index).concat(this.keys.slice(index + 1));
      }
      return this;
    },
  };
  
  var MemoizeMap = null;
  if (typeof WeakMap === 'function') {
    MemoizeMap = WeakMap;
  } else {
    MemoizeMap = FakeMap;
  }
  
  /*!
   * Check to see if the MemoizeMap has recorded a result of the two operands
   *
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @param {MemoizeMap} memoizeMap
   * @returns {Boolean|null} result
  */
  function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
    // Technically, WeakMap keys can *only* be objects, not primitives.
    if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
      return null;
    }
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) {
      var result = leftHandMap.get(rightHandOperand);
      if (typeof result === 'boolean') {
        return result;
      }
    }
    return null;
  }
  
  /*!
   * Set the result of the equality into the MemoizeMap
   *
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @param {MemoizeMap} memoizeMap
   * @param {Boolean} result
  */
  function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
    // Technically, WeakMap keys can *only* be objects, not primitives.
    if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
      return;
    }
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) {
      leftHandMap.set(rightHandOperand, result);
    } else {
      leftHandMap = new MemoizeMap();
      leftHandMap.set(rightHandOperand, result);
      memoizeMap.set(leftHandOperand, leftHandMap);
    }
  }
  
  /*!
   * Primary Export
   */
  
  module.exports = deepEqual;
  module.exports.MemoizeMap = MemoizeMap;
  
  /**
   * Assert deeply nested sameValue equality between two objects of any type.
   *
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @param {Object} [options] (optional) Additional options
   * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
   * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
      complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
      references to blow the stack.
   * @return {Boolean} equal match
   */
  function deepEqual(leftHandOperand, rightHandOperand, options) {
    // If we have a comparator, we can't assume anything; so bail to its check first.
    if (options && options.comparator) {
      return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
    }
  
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) {
      return simpleResult;
    }
  
    // Deeper comparisons are pushed through to a larger function
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }
  
  /**
   * Many comparisons can be canceled out early via simple equality or primitive checks.
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @return {Boolean|null} equal match
   */
  function simpleEqual(leftHandOperand, rightHandOperand) {
    // Equal references (except for Numbers) can be returned early
    if (leftHandOperand === rightHandOperand) {
      // Handle +-0 cases
      return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
    }
  
    // handle NaN cases
    if (
      leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
      rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
    ) {
      return true;
    }
  
    // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
    // strings, and undefined, can be compared by reference.
    if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
      // Easy out b/c it would have passed the first equality check
      return false;
    }
    return null;
  }
  
  /*!
   * The main logic of the `deepEqual` function.
   *
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @param {Object} [options] (optional) Additional options
   * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
   * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
      complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
      references to blow the stack.
   * @return {Boolean} equal match
  */
  function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
    options = options || {};
    options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
    var comparator = options && options.comparator;
  
    // Check if a memoized result exists.
    var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
    if (memoizeResultLeft !== null) {
      return memoizeResultLeft;
    }
    var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
    if (memoizeResultRight !== null) {
      return memoizeResultRight;
    }
  
    // If a comparator is present, use it.
    if (comparator) {
      var comparatorResult = comparator(leftHandOperand, rightHandOperand);
      // Comparators may return null, in which case we want to go back to default behavior.
      if (comparatorResult === false || comparatorResult === true) {
        memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
        return comparatorResult;
      }
      // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
      // what to do, we need to make sure to return the basic tests first before we move on.
      var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
      if (simpleResult !== null) {
        // Don't memoize this, it takes longer to set/retrieve than to just compare.
        return simpleResult;
      }
    }
  
    var leftHandType = type(leftHandOperand);
    if (leftHandType !== type(rightHandOperand)) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
      return false;
    }
  
    // Temporarily set the operands in the memoize object to prevent blowing the stack
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
  
    var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
    return result;
  }
  
  function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
    switch (leftHandType) {
      case 'String':
      case 'Number':
      case 'Boolean':
      case 'Date':
        // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
        return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
      case 'Promise':
      case 'Symbol':
      case 'function':
      case 'WeakMap':
      case 'WeakSet':
      case 'Error':
        return leftHandOperand === rightHandOperand;
      case 'Arguments':
      case 'Int8Array':
      case 'Uint8Array':
      case 'Uint8ClampedArray':
      case 'Int16Array':
      case 'Uint16Array':
      case 'Int32Array':
      case 'Uint32Array':
      case 'Float32Array':
      case 'Float64Array':
      case 'Array':
        return iterableEqual(leftHandOperand, rightHandOperand, options);
      case 'RegExp':
        return regexpEqual(leftHandOperand, rightHandOperand);
      case 'Generator':
        return generatorEqual(leftHandOperand, rightHandOperand, options);
      case 'DataView':
        return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
      case 'ArrayBuffer':
        return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
      case 'Set':
        return entriesEqual(leftHandOperand, rightHandOperand, options);
      case 'Map':
        return entriesEqual(leftHandOperand, rightHandOperand, options);
      default:
        return objectEqual(leftHandOperand, rightHandOperand, options);
    }
  }
  
  /*!
   * Compare two Regular Expressions for equality.
   *
   * @param {RegExp} leftHandOperand
   * @param {RegExp} rightHandOperand
   * @return {Boolean} result
   */
  
  function regexpEqual(leftHandOperand, rightHandOperand) {
    return leftHandOperand.toString() === rightHandOperand.toString();
  }
  
  /*!
   * Compare two Sets/Maps for equality. Faster than other equality functions.
   *
   * @param {Set} leftHandOperand
   * @param {Set} rightHandOperand
   * @param {Object} [options] (Optional)
   * @return {Boolean} result
   */
  
  function entriesEqual(leftHandOperand, rightHandOperand, options) {
    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
    if (leftHandOperand.size !== rightHandOperand.size) {
      return false;
    }
    if (leftHandOperand.size === 0) {
      return true;
    }
    var leftHandItems = [];
    var rightHandItems = [];
    leftHandOperand.forEach(function gatherEntries(key, value) {
      leftHandItems.push([ key, value ]);
    });
    rightHandOperand.forEach(function gatherEntries(key, value) {
      rightHandItems.push([ key, value ]);
    });
    return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
  }
  
  /*!
   * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
   *
   * @param {Iterable} leftHandOperand
   * @param {Iterable} rightHandOperand
   * @param {Object} [options] (Optional)
   * @return {Boolean} result
   */
  
  function iterableEqual(leftHandOperand, rightHandOperand, options) {
    var length = leftHandOperand.length;
    if (length !== rightHandOperand.length) {
      return false;
    }
    if (length === 0) {
      return true;
    }
    var index = -1;
    while (++index < length) {
      if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
        return false;
      }
    }
    return true;
  }
  
  /*!
   * Simple equality for generator objects such as those returned by generator functions.
   *
   * @param {Iterable} leftHandOperand
   * @param {Iterable} rightHandOperand
   * @param {Object} [options] (Optional)
   * @return {Boolean} result
   */
  
  function generatorEqual(leftHandOperand, rightHandOperand, options) {
    return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
  }
  
  /*!
   * Determine if the given object has an @@iterator function.
   *
   * @param {Object} target
   * @return {Boolean} `true` if the object has an @@iterator function.
   */
  function hasIteratorFunction(target) {
    return typeof Symbol !== 'undefined' &&
      typeof target === 'object' &&
      typeof Symbol.iterator !== 'undefined' &&
      typeof target[Symbol.iterator] === 'function';
  }
  
  /*!
   * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
   * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
   *
   * @param {Object} target
   * @returns {Array} an array of entries from the @@iterator function
   */
  function getIteratorEntries(target) {
    if (hasIteratorFunction(target)) {
      try {
        return getGeneratorEntries(target[Symbol.iterator]());
      } catch (iteratorError) {
        return [];
      }
    }
    return [];
  }
  
  /*!
   * Gets all entries from a Generator. This will consume the generator - which could have side effects.
   *
   * @param {Generator} target
   * @returns {Array} an array of entries from the Generator.
   */
  function getGeneratorEntries(generator) {
    var generatorResult = generator.next();
    var accumulator = [ generatorResult.value ];
    while (generatorResult.done === false) {
      generatorResult = generator.next();
      accumulator.push(generatorResult.value);
    }
    return accumulator;
  }
  
  /*!
   * Gets all own and inherited enumerable keys from a target.
   *
   * @param {Object} target
   * @returns {Array} an array of own and inherited enumerable keys from the target.
   */
  function getEnumerableKeys(target) {
    var keys = [];
    for (var key in target) {
      keys.push(key);
    }
    return keys;
  }
  
  /*!
   * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
   * each key. If any value of the given key is not equal, the function will return false (early).
   *
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
   * @param {Object} [options] (Optional)
   * @return {Boolean} result
   */
  function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
    var length = keys.length;
    if (length === 0) {
      return true;
    }
    for (var i = 0; i < length; i += 1) {
      if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
        return false;
      }
    }
    return true;
  }
  
  /*!
   * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
   * for each enumerable key in the object.
   *
   * @param {Mixed} leftHandOperand
   * @param {Mixed} rightHandOperand
   * @param {Object} [options] (Optional)
   * @return {Boolean} result
   */
  
  function objectEqual(leftHandOperand, rightHandOperand, options) {
    var leftHandKeys = getEnumerableKeys(leftHandOperand);
    var rightHandKeys = getEnumerableKeys(rightHandOperand);
    if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
      leftHandKeys.sort();
      rightHandKeys.sort();
      if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
        return false;
      }
      return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
    }
  
    var leftHandEntries = getIteratorEntries(leftHandOperand);
    var rightHandEntries = getIteratorEntries(rightHandOperand);
    if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
      leftHandEntries.sort();
      rightHandEntries.sort();
      return iterableEqual(leftHandEntries, rightHandEntries, options);
    }
  
    if (leftHandKeys.length === 0 &&
        leftHandEntries.length === 0 &&
        rightHandKeys.length === 0 &&
        rightHandEntries.length === 0) {
      return true;
    }
  
    return false;
  }
  
  /*!
   * Returns true if the argument is a primitive.
   *
   * This intentionally returns true for all objects that can be compared by reference,
   * including functions and symbols.
   *
   * @param {Mixed} value
   * @return {Boolean} result
   */
  function isPrimitive(value) {
    return value === null || typeof value !== 'object';
  }
  

});

;/*!node_modules/chai/lib/chai/utils/isProxyEnabled.js*/
define('node_modules/chai/lib/chai/utils/isProxyEnabled', function(require, exports, module) {

  var config = require('node_modules/chai/lib/chai/config');
  
  /*!
   * Chai - isProxyEnabled helper
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .isProxyEnabled()
   *
   * Helper function to check if Chai's proxy protection feature is enabled. If
   * proxies are unsupported or disabled via the user's Chai config, then return
   * false. Otherwise, return true.
   *
   * @namespace Utils
   * @name isProxyEnabled
   */
  
  module.exports = function isProxyEnabled() {
    return config.useProxy && 
      typeof Proxy !== 'undefined' &&
      typeof Reflect !== 'undefined';
  };
  

});

;/*!node_modules/chai/lib/chai/utils/addProperty.js*/
define('node_modules/chai/lib/chai/utils/addProperty', function(require, exports, module) {

  /*!
   * Chai - addProperty utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var chai = require('node_modules/chai/lib/chai');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var isProxyEnabled = require('node_modules/chai/lib/chai/utils/isProxyEnabled');
  var transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /**
   * ### .addProperty(ctx, name, getter)
   *
   * Adds a property to the prototype of an object.
   *
   *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
   *       var obj = utils.flag(this, 'object');
   *       new chai.Assertion(obj).to.be.instanceof(Foo);
   *     });
   *
   * Can also be accessed directly from `chai.Assertion`.
   *
   *     chai.Assertion.addProperty('foo', fn);
   *
   * Then can be used as any other assertion.
   *
   *     expect(myFoo).to.be.foo;
   *
   * @param {Object} ctx object to which the property is added
   * @param {String} name of property to add
   * @param {Function} getter function to be used for name
   * @namespace Utils
   * @name addProperty
   * @api public
   */
  
  module.exports = function addProperty(ctx, name, getter) {
    getter = getter === undefined ? new Function() : getter;
  
    Object.defineProperty(ctx, name,
      { get: function propertyGetter() {
          // Setting the `ssfi` flag to `propertyGetter` causes this function to
          // be the starting point for removing implementation frames from the
          // stack trace of a failed assertion.
          //
          // However, we only want to use this function as the starting point if
          // the `lockSsfi` flag isn't set and proxy protection is disabled.
          //
          // If the `lockSsfi` flag is set, then either this assertion has been
          // overwritten by another assertion, or this assertion is being invoked
          // from inside of another assertion. In the first case, the `ssfi` flag
          // has already been set by the overwriting assertion. In the second
          // case, the `ssfi` flag has already been set by the outer assertion.
          //
          // If proxy protection is enabled, then the `ssfi` flag has already been
          // set by the proxy getter.
          if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', propertyGetter);
          }
  
          var result = getter.call(this);
          if (result !== undefined)
            return result;
  
          var newAssertion = new chai.Assertion();
          transferFlags(this, newAssertion);
          return newAssertion;
        }
      , configurable: true
    });
  };
  

});

;/*!node_modules/chai/lib/chai/utils/addLengthGuard.js*/
define('node_modules/chai/lib/chai/utils/addLengthGuard', function(require, exports, module) {

  var config = require('node_modules/chai/lib/chai/config');
  
  var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
  
  /*!
   * Chai - addLengthGuard utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .addLengthGuard(fn, assertionName, isChainable)
   *
   * Define `length` as a getter on the given uninvoked method assertion. The
   * getter acts as a guard against chaining `length` directly off of an uninvoked
   * method assertion, which is a problem because it references `function`'s
   * built-in `length` property instead of Chai's `length` assertion. When the
   * getter catches the user making this mistake, it throws an error with a
   * helpful message.
   *
   * There are two ways in which this mistake can be made. The first way is by
   * chaining the `length` assertion directly off of an uninvoked chainable
   * method. In this case, Chai suggests that the user use `lengthOf` instead. The
   * second way is by chaining the `length` assertion directly off of an uninvoked
   * non-chainable method. Non-chainable methods must be invoked prior to
   * chaining. In this case, Chai suggests that the user consult the docs for the
   * given assertion.
   *
   * If the `length` property of functions is unconfigurable, then return `fn`
   * without modification.
   *
   * Note that in ES6, the function's `length` property is configurable, so once
   * support for legacy environments is dropped, Chai's `length` property can
   * replace the built-in function's `length` property, and this length guard will
   * no longer be necessary. In the mean time, maintaining consistency across all
   * environments is the priority.
   *
   * @param {Function} fn
   * @param {String} assertionName
   * @param {Boolean} isChainable
   * @namespace Utils
   * @name addLengthGuard
   */
  
  module.exports = function addLengthGuard (fn, assertionName, isChainable) {
    if (!fnLengthDesc.configurable) return fn;
  
    Object.defineProperty(fn, 'length', {
      get: function () {
        if (isChainable) {
          throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +
            ' to a compatibility issue, "length" cannot directly follow "' +
            assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
        }
  
        throw Error('Invalid Chai property: ' + assertionName + '.length. See' +
          ' docs for proper usage of "' + assertionName + '".');
      }
    });
  
    return fn;
  };
  

});

;/*!node_modules/chai/lib/chai/utils/proxify.js*/
define('node_modules/chai/lib/chai/utils/proxify', function(require, exports, module) {

  var config = require('node_modules/chai/lib/chai/config');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var getProperties = require('node_modules/chai/lib/chai/utils/getProperties');
  var isProxyEnabled = require('node_modules/chai/lib/chai/utils/isProxyEnabled');
  
  /*!
   * Chai - proxify utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .proxify(object)
   *
   * Return a proxy of given object that throws an error when a non-existent
   * property is read. By default, the root cause is assumed to be a misspelled
   * property, and thus an attempt is made to offer a reasonable suggestion from
   * the list of existing properties. However, if a nonChainableMethodName is
   * provided, then the root cause is instead a failure to invoke a non-chainable
   * method prior to reading the non-existent property.
   * 
   * If proxies are unsupported or disabled via the user's Chai config, then
   * return object without modification.
   *
   * @param {Object} obj
   * @param {String} nonChainableMethodName
   * @namespace Utils
   * @name proxify
   */
  
  var builtins = ['__flags', '__methods', '_obj', 'assert'];
  
  module.exports = function proxify(obj, nonChainableMethodName) {
    if (!isProxyEnabled()) return obj;
  
    return new Proxy(obj, {
      get: function proxyGetter(target, property) {
        // This check is here because we should not throw errors on Symbol properties
        // such as `Symbol.toStringTag`.
        // The values for which an error should be thrown can be configured using
        // the `config.proxyExcludedKeys` setting.
        if (typeof property === 'string' &&
            config.proxyExcludedKeys.indexOf(property) === -1 &&
            !Reflect.has(target, property)) {
          // Special message for invalid property access of non-chainable methods.
          if (nonChainableMethodName) {
            throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +
              property + '. See docs for proper usage of "' +
              nonChainableMethodName + '".');
          }
  
          var orderedProperties = getProperties(target).filter(function(property) {
            return !Object.prototype.hasOwnProperty(property) &&
              builtins.indexOf(property) === -1;
          }).sort(function(a, b) {
            return stringDistance(property, a) - stringDistance(property, b);
          });
  
          if (orderedProperties.length &&
              stringDistance(orderedProperties[0], property) < 4) {
            // If the property is reasonably close to an existing Chai property,
            // suggest that property to the user.
            throw Error('Invalid Chai property: ' + property +
              '. Did you mean "' + orderedProperties[0] + '"?');
          } else {
            throw Error('Invalid Chai property: ' + property);
          }
        }
  
        // Use this proxy getter as the starting point for removing implementation
        // frames from the stack trace of a failed assertion. For property
        // assertions, this prevents the proxy getter from showing up in the stack
        // trace since it's invoked before the property getter. For method and
        // chainable method assertions, this flag will end up getting changed to
        // the method wrapper, which is good since this frame will no longer be in
        // the stack once the method is invoked. Note that Chai builtin assertion
        // properties such as `__flags` are skipped since this is only meant to
        // capture the starting point of an assertion. This step is also skipped
        // if the `lockSsfi` flag is set, thus indicating that this assertion is
        // being called from within another assertion. In that case, the `ssfi`
        // flag is already set to the outer assertion's starting point.
        if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
          flag(target, 'ssfi', proxyGetter);
        }
  
        return Reflect.get(target, property);
      }
    });
  };
  
  /**
   * # stringDistance(strA, strB)
   * Return the Levenshtein distance between two strings.
   * @param {string} strA
   * @param {string} strB
   * @return {number} the string distance between strA and strB
   * @api private
   */
  
  function stringDistance(strA, strB, memo) {
    if (!memo) {
      // `memo` is a two-dimensional array containing a cache of distances
      // memo[i][j] is the distance between strA.slice(0, i) and
      // strB.slice(0, j).
      memo = [];
      for (var i = 0; i <= strA.length; i++) {
        memo[i] = [];
      }
    }
  
    if (!memo[strA.length] || !memo[strA.length][strB.length]) {
      if (strA.length === 0 || strB.length === 0) {
        memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
      } else {
        memo[strA.length][strB.length] = Math.min(
          stringDistance(strA.slice(0, -1), strB, memo) + 1,
          stringDistance(strA, strB.slice(0, -1), memo) + 1,
          stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) +
            (strA.slice(-1) === strB.slice(-1) ? 0 : 1)
        );
      }
    }
  
    return memo[strA.length][strB.length];
  }
  

});

;/*!node_modules/chai/lib/chai/utils/addMethod.js*/
define('node_modules/chai/lib/chai/utils/addMethod', function(require, exports, module) {

  /*!
   * Chai - addMethod utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var addLengthGuard = require('node_modules/chai/lib/chai/utils/addLengthGuard');
  var chai = require('node_modules/chai/lib/chai');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var proxify = require('node_modules/chai/lib/chai/utils/proxify');
  var transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /**
   * ### .addMethod(ctx, name, method)
   *
   * Adds a method to the prototype of an object.
   *
   *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
   *       var obj = utils.flag(this, 'object');
   *       new chai.Assertion(obj).to.be.equal(str);
   *     });
   *
   * Can also be accessed directly from `chai.Assertion`.
   *
   *     chai.Assertion.addMethod('foo', fn);
   *
   * Then can be used as any other assertion.
   *
   *     expect(fooStr).to.be.foo('bar');
   *
   * @param {Object} ctx object to which the method is added
   * @param {String} name of method to add
   * @param {Function} method function to be used for name
   * @namespace Utils
   * @name addMethod
   * @api public
   */
  
  module.exports = function addMethod(ctx, name, method) {
    var methodWrapper = function () {
      // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
      // starting point for removing implementation frames from the stack trace of
      // a failed assertion.
      //
      // However, we only want to use this function as the starting point if the
      // `lockSsfi` flag isn't set.
      //
      // If the `lockSsfi` flag is set, then either this assertion has been
      // overwritten by another assertion, or this assertion is being invoked from
      // inside of another assertion. In the first case, the `ssfi` flag has
      // already been set by the overwriting assertion. In the second case, the
      // `ssfi` flag has already been set by the outer assertion.
      if (!flag(this, 'lockSsfi')) {
        flag(this, 'ssfi', methodWrapper);
      }
  
      var result = method.apply(this, arguments);
      if (result !== undefined)
        return result;
  
      var newAssertion = new chai.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    };
  
    addLengthGuard(methodWrapper, name, false);
    ctx[name] = proxify(methodWrapper, name);
  };
  

});

;/*!node_modules/chai/lib/chai/utils/overwriteProperty.js*/
define('node_modules/chai/lib/chai/utils/overwriteProperty', function(require, exports, module) {

  /*!
   * Chai - overwriteProperty utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var chai = require('node_modules/chai/lib/chai');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var isProxyEnabled = require('node_modules/chai/lib/chai/utils/isProxyEnabled');
  var transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /**
   * ### .overwriteProperty(ctx, name, fn)
   *
   * Overwites an already existing property getter and provides
   * access to previous value. Must return function to use as getter.
   *
   *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
   *       return function () {
   *         var obj = utils.flag(this, 'object');
   *         if (obj instanceof Foo) {
   *           new chai.Assertion(obj.name).to.equal('bar');
   *         } else {
   *           _super.call(this);
   *         }
   *       }
   *     });
   *
   *
   * Can also be accessed directly from `chai.Assertion`.
   *
   *     chai.Assertion.overwriteProperty('foo', fn);
   *
   * Then can be used as any other assertion.
   *
   *     expect(myFoo).to.be.ok;
   *
   * @param {Object} ctx object whose property is to be overwritten
   * @param {String} name of property to overwrite
   * @param {Function} getter function that returns a getter function to be used for name
   * @namespace Utils
   * @name overwriteProperty
   * @api public
   */
  
  module.exports = function overwriteProperty(ctx, name, getter) {
    var _get = Object.getOwnPropertyDescriptor(ctx, name)
      , _super = function () {};
  
    if (_get && 'function' === typeof _get.get)
      _super = _get.get
  
    Object.defineProperty(ctx, name,
      { get: function overwritingPropertyGetter() {
          // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
          // function to be the starting point for removing implementation frames
          // from the stack trace of a failed assertion.
          //
          // However, we only want to use this function as the starting point if
          // the `lockSsfi` flag isn't set and proxy protection is disabled.
          //
          // If the `lockSsfi` flag is set, then either this assertion has been
          // overwritten by another assertion, or this assertion is being invoked
          // from inside of another assertion. In the first case, the `ssfi` flag
          // has already been set by the overwriting assertion. In the second
          // case, the `ssfi` flag has already been set by the outer assertion.
          //
          // If proxy protection is enabled, then the `ssfi` flag has already been
          // set by the proxy getter.
          if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', overwritingPropertyGetter);
          }
  
          // Setting the `lockSsfi` flag to `true` prevents the overwritten
          // assertion from changing the `ssfi` flag. By this point, the `ssfi`
          // flag is already set to the correct starting point for this assertion.
          var origLockSsfi = flag(this, 'lockSsfi');
          flag(this, 'lockSsfi', true);
          var result = getter(_super).call(this);
          flag(this, 'lockSsfi', origLockSsfi);
  
          if (result !== undefined) {
            return result;
          }
  
          var newAssertion = new chai.Assertion();
          transferFlags(this, newAssertion);
          return newAssertion;
        }
      , configurable: true
    });
  };
  

});

;/*!node_modules/chai/lib/chai/utils/overwriteMethod.js*/
define('node_modules/chai/lib/chai/utils/overwriteMethod', function(require, exports, module) {

  /*!
   * Chai - overwriteMethod utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var addLengthGuard = require('node_modules/chai/lib/chai/utils/addLengthGuard');
  var chai = require('node_modules/chai/lib/chai');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var proxify = require('node_modules/chai/lib/chai/utils/proxify');
  var transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /**
   * ### .overwriteMethod(ctx, name, fn)
   *
   * Overwites an already existing method and provides
   * access to previous function. Must return function
   * to be used for name.
   *
   *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
   *       return function (str) {
   *         var obj = utils.flag(this, 'object');
   *         if (obj instanceof Foo) {
   *           new chai.Assertion(obj.value).to.equal(str);
   *         } else {
   *           _super.apply(this, arguments);
   *         }
   *       }
   *     });
   *
   * Can also be accessed directly from `chai.Assertion`.
   *
   *     chai.Assertion.overwriteMethod('foo', fn);
   *
   * Then can be used as any other assertion.
   *
   *     expect(myFoo).to.equal('bar');
   *
   * @param {Object} ctx object whose method is to be overwritten
   * @param {String} name of method to overwrite
   * @param {Function} method function that returns a function to be used for name
   * @namespace Utils
   * @name overwriteMethod
   * @api public
   */
  
  module.exports = function overwriteMethod(ctx, name, method) {
    var _method = ctx[name]
      , _super = function () {
        throw new Error(name + ' is not a function');
      };
  
    if (_method && 'function' === typeof _method)
      _super = _method;
  
    var overwritingMethodWrapper = function () {
      // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
      // function to be the starting point for removing implementation frames from
      // the stack trace of a failed assertion.
      //
      // However, we only want to use this function as the starting point if the
      // `lockSsfi` flag isn't set.
      //
      // If the `lockSsfi` flag is set, then either this assertion has been
      // overwritten by another assertion, or this assertion is being invoked from
      // inside of another assertion. In the first case, the `ssfi` flag has
      // already been set by the overwriting assertion. In the second case, the
      // `ssfi` flag has already been set by the outer assertion.
      if (!flag(this, 'lockSsfi')) {
        flag(this, 'ssfi', overwritingMethodWrapper);
      }
  
      // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
      // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
      // set to the correct starting point for this assertion.
      var origLockSsfi = flag(this, 'lockSsfi');
      flag(this, 'lockSsfi', true);
      var result = method(_super).apply(this, arguments);
      flag(this, 'lockSsfi', origLockSsfi);
  
      if (result !== undefined) {
        return result;
      }
  
      var newAssertion = new chai.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    }
  
    addLengthGuard(overwritingMethodWrapper, name, false);
    ctx[name] = proxify(overwritingMethodWrapper, name);
  };
  

});

;/*!node_modules/chai/lib/chai/utils/addChainableMethod.js*/
define('node_modules/chai/lib/chai/utils/addChainableMethod', function(require, exports, module) {

  /*!
   * Chai - addChainingMethod utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependencies
   */
  
  var addLengthGuard = require('node_modules/chai/lib/chai/utils/addLengthGuard');
  var chai = require('node_modules/chai/lib/chai');
  var flag = require('node_modules/chai/lib/chai/utils/flag');
  var proxify = require('node_modules/chai/lib/chai/utils/proxify');
  var transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /*!
   * Module variables
   */
  
  // Check whether `Object.setPrototypeOf` is supported
  var canSetPrototype = typeof Object.setPrototypeOf === 'function';
  
  // Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
  // However, some of functions' own props are not configurable and should be skipped.
  var testFn = function() {};
  var excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {
    var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
  
    // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
    // but then returns `undefined` as the property descriptor for `callee`. As a
    // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
    // and then filter it out if it's not an object as it should be.
    if (typeof propDesc !== 'object')
      return true;
  
    return !propDesc.configurable;
  });
  
  // Cache `Function` properties
  var call  = Function.prototype.call,
      apply = Function.prototype.apply;
  
  /**
   * ### .addChainableMethod(ctx, name, method, chainingBehavior)
   *
   * Adds a method to an object, such that the method can also be chained.
   *
   *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
   *       var obj = utils.flag(this, 'object');
   *       new chai.Assertion(obj).to.be.equal(str);
   *     });
   *
   * Can also be accessed directly from `chai.Assertion`.
   *
   *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
   *
   * The result can then be used as both a method assertion, executing both `method` and
   * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
   *
   *     expect(fooStr).to.be.foo('bar');
   *     expect(fooStr).to.be.foo.equal('foo');
   *
   * @param {Object} ctx object to which the method is added
   * @param {String} name of method to add
   * @param {Function} method function to be used for `name`, when called
   * @param {Function} chainingBehavior function to be called every time the property is accessed
   * @namespace Utils
   * @name addChainableMethod
   * @api public
   */
  
  module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
    if (typeof chainingBehavior !== 'function') {
      chainingBehavior = function () { };
    }
  
    var chainableBehavior = {
        method: method
      , chainingBehavior: chainingBehavior
    };
  
    // save the methods so we can overwrite them later, if we need to.
    if (!ctx.__methods) {
      ctx.__methods = {};
    }
    ctx.__methods[name] = chainableBehavior;
  
    Object.defineProperty(ctx, name,
      { get: function chainableMethodGetter() {
          chainableBehavior.chainingBehavior.call(this);
  
          var chainableMethodWrapper = function () {
            // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
            // function to be the starting point for removing implementation
            // frames from the stack trace of a failed assertion.
            //
            // However, we only want to use this function as the starting point if
            // the `lockSsfi` flag isn't set.
            //
            // If the `lockSsfi` flag is set, then this assertion is being
            // invoked from inside of another assertion. In this case, the `ssfi`
            // flag has already been set by the outer assertion.
            //
            // Note that overwriting a chainable method merely replaces the saved
            // methods in `ctx.__methods` instead of completely replacing the
            // overwritten assertion. Therefore, an overwriting assertion won't
            // set the `ssfi` or `lockSsfi` flags.
            if (!flag(this, 'lockSsfi')) {
              flag(this, 'ssfi', chainableMethodWrapper);
            }
  
            var result = chainableBehavior.method.apply(this, arguments);
            if (result !== undefined) {
              return result;
            }
  
            var newAssertion = new chai.Assertion();
            transferFlags(this, newAssertion);
            return newAssertion;
          };
  
          addLengthGuard(chainableMethodWrapper, name, true);
  
          // Use `Object.setPrototypeOf` if available
          if (canSetPrototype) {
            // Inherit all properties from the object by replacing the `Function` prototype
            var prototype = Object.create(this);
            // Restore the `call` and `apply` methods from `Function`
            prototype.call = call;
            prototype.apply = apply;
            Object.setPrototypeOf(chainableMethodWrapper, prototype);
          }
          // Otherwise, redefine all properties (slow!)
          else {
            var asserterNames = Object.getOwnPropertyNames(ctx);
            asserterNames.forEach(function (asserterName) {
              if (excludeNames.indexOf(asserterName) !== -1) {
                return;
              }
  
              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
              Object.defineProperty(chainableMethodWrapper, asserterName, pd);
            });
          }
  
          transferFlags(this, chainableMethodWrapper);
          return proxify(chainableMethodWrapper);
        }
      , configurable: true
    });
  };
  

});

;/*!node_modules/chai/lib/chai/utils/overwriteChainableMethod.js*/
define('node_modules/chai/lib/chai/utils/overwriteChainableMethod', function(require, exports, module) {

  /*!
   * Chai - overwriteChainableMethod utility
   * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var chai = require('node_modules/chai/lib/chai');
  var transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /**
   * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
   *
   * Overwites an already existing chainable method
   * and provides access to the previous function or
   * property.  Must return functions to be used for
   * name.
   *
   *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
   *       function (_super) {
   *       }
   *     , function (_super) {
   *       }
   *     );
   *
   * Can also be accessed directly from `chai.Assertion`.
   *
   *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
   *
   * Then can be used as any other assertion.
   *
   *     expect(myFoo).to.have.lengthOf(3);
   *     expect(myFoo).to.have.lengthOf.above(3);
   *
   * @param {Object} ctx object whose method / property is to be overwritten
   * @param {String} name of method / property to overwrite
   * @param {Function} method function that returns a function to be used for name
   * @param {Function} chainingBehavior function that returns a function to be used for property
   * @namespace Utils
   * @name overwriteChainableMethod
   * @api public
   */
  
  module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
    var chainableBehavior = ctx.__methods[name];
  
    var _chainingBehavior = chainableBehavior.chainingBehavior;
    chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
      var result = chainingBehavior(_chainingBehavior).call(this);
      if (result !== undefined) {
        return result;
      }
  
      var newAssertion = new chai.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    };
  
    var _method = chainableBehavior.method;
    chainableBehavior.method = function overwritingChainableMethodWrapper() {
      var result = method(_method).apply(this, arguments);
      if (result !== undefined) {
        return result;
      }
  
      var newAssertion = new chai.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    };
  };
  

});

;/*!node_modules/chai/lib/chai/utils/compareByInspect.js*/
define('node_modules/chai/lib/chai/utils/compareByInspect', function(require, exports, module) {

  /*!
   * Chai - compareByInspect utility
   * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependancies
   */
  
  var inspect = require('node_modules/chai/lib/chai/utils/inspect');
  
  /**
   * ### .compareByInspect(mixed, mixed)
   *
   * To be used as a compareFunction with Array.prototype.sort. Compares elements
   * using inspect instead of default behavior of using toString so that Symbols
   * and objects with irregular/missing toString can still be sorted without a
   * TypeError.
   *
   * @param {Mixed} first element to compare
   * @param {Mixed} second element to compare
   * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1 
   * @name compareByInspect
   * @namespace Utils
   * @api public
   */
  
  module.exports = function compareByInspect(a, b) {
    return inspect(a) < inspect(b) ? -1 : 1;
  };
  

});

;/*!node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js*/
define('node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols', function(require, exports, module) {

  /*!
   * Chai - getOwnEnumerablePropertySymbols utility
   * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .getOwnEnumerablePropertySymbols(object)
   *
   * This allows the retrieval of directly-owned enumerable property symbols of an
   * object. This function is necessary because Object.getOwnPropertySymbols
   * returns both enumerable and non-enumerable property symbols.
   *
   * @param {Object} object
   * @returns {Array}
   * @namespace Utils
   * @name getOwnEnumerablePropertySymbols
   * @api public
   */
  
  module.exports = function getOwnEnumerablePropertySymbols(obj) {
    if (typeof Object.getOwnPropertySymbols !== 'function') return [];
  
    return Object.getOwnPropertySymbols(obj).filter(function (sym) {
      return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
    });
  };
  

});

;/*!node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js*/
define('node_modules/chai/lib/chai/utils/getOwnEnumerableProperties', function(require, exports, module) {

  /*!
   * Chai - getOwnEnumerableProperties utility
   * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Module dependancies
   */
  
  var getOwnEnumerablePropertySymbols = require('node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols');
  
  /**
   * ### .getOwnEnumerableProperties(object)
   *
   * This allows the retrieval of directly-owned enumerable property names and
   * symbols of an object. This function is necessary because Object.keys only
   * returns enumerable property names, not enumerable property symbols.
   *
   * @param {Object} object
   * @returns {Array}
   * @namespace Utils
   * @name getOwnEnumerableProperties
   * @api public
   */
  
  module.exports = function getOwnEnumerableProperties(obj) {
    return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
  };
  

});

;/*!node_modules/chai/node_modules/check-error/index.js*/
define('node_modules/chai/node_modules/check-error/index', function(require, exports, module) {

  'use strict';
  
  /* !
   * Chai - checkError utility
   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /**
   * ### .checkError
   *
   * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
   *
   * @api public
   */
  
  /**
   * ### .compatibleInstance(thrown, errorLike)
   *
   * Checks if two instances are compatible (strict equal).
   * Returns false if errorLike is not an instance of Error, because instances
   * can only be compatible if they're both error instances.
   *
   * @name compatibleInstance
   * @param {Error} thrown error
   * @param {Error|ErrorConstructor} errorLike object to compare against
   * @namespace Utils
   * @api public
   */
  
  function compatibleInstance(thrown, errorLike) {
    return errorLike instanceof Error && thrown === errorLike;
  }
  
  /**
   * ### .compatibleConstructor(thrown, errorLike)
   *
   * Checks if two constructors are compatible.
   * This function can receive either an error constructor or
   * an error instance as the `errorLike` argument.
   * Constructors are compatible if they're the same or if one is
   * an instance of another.
   *
   * @name compatibleConstructor
   * @param {Error} thrown error
   * @param {Error|ErrorConstructor} errorLike object to compare against
   * @namespace Utils
   * @api public
   */
  
  function compatibleConstructor(thrown, errorLike) {
    if (errorLike instanceof Error) {
      // If `errorLike` is an instance of any error we compare their constructors
      return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
    } else if (errorLike.prototype instanceof Error || errorLike === Error) {
      // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
      return thrown.constructor === errorLike || thrown instanceof errorLike;
    }
  
    return false;
  }
  
  /**
   * ### .compatibleMessage(thrown, errMatcher)
   *
   * Checks if an error's message is compatible with a matcher (String or RegExp).
   * If the message contains the String or passes the RegExp test,
   * it is considered compatible.
   *
   * @name compatibleMessage
   * @param {Error} thrown error
   * @param {String|RegExp} errMatcher to look for into the message
   * @namespace Utils
   * @api public
   */
  
  function compatibleMessage(thrown, errMatcher) {
    var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
    if (errMatcher instanceof RegExp) {
      return errMatcher.test(comparisonString);
    } else if (typeof errMatcher === 'string') {
      return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
    }
  
    return false;
  }
  
  /**
   * ### .getFunctionName(constructorFn)
   *
   * Returns the name of a function.
   * This also includes a polyfill function if `constructorFn.name` is not defined.
   *
   * @name getFunctionName
   * @param {Function} constructorFn
   * @namespace Utils
   * @api private
   */
  
  var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
  function getFunctionName(constructorFn) {
    var name = '';
    if (typeof constructorFn.name === 'undefined') {
      // Here we run a polyfill if constructorFn.name is not defined
      var match = String(constructorFn).match(functionNameMatch);
      if (match) {
        name = match[1];
      }
    } else {
      name = constructorFn.name;
    }
  
    return name;
  }
  
  /**
   * ### .getConstructorName(errorLike)
   *
   * Gets the constructor name for an Error instance or constructor itself.
   *
   * @name getConstructorName
   * @param {Error|ErrorConstructor} errorLike
   * @namespace Utils
   * @api public
   */
  
  function getConstructorName(errorLike) {
    var constructorName = errorLike;
    if (errorLike instanceof Error) {
      constructorName = getFunctionName(errorLike.constructor);
    } else if (typeof errorLike === 'function') {
      // If `err` is not an instance of Error it is an error constructor itself or another function.
      // If we've got a common function we get its name, otherwise we may need to create a new instance
      // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
      constructorName = getFunctionName(errorLike).trim() ||
          getFunctionName(new errorLike()); // eslint-disable-line new-cap
    }
  
    return constructorName;
  }
  
  /**
   * ### .getMessage(errorLike)
   *
   * Gets the error message from an error.
   * If `err` is a String itself, we return it.
   * If the error has no message, we return an empty string.
   *
   * @name getMessage
   * @param {Error|String} errorLike
   * @namespace Utils
   * @api public
   */
  
  function getMessage(errorLike) {
    var msg = '';
    if (errorLike && errorLike.message) {
      msg = errorLike.message;
    } else if (typeof errorLike === 'string') {
      msg = errorLike;
    }
  
    return msg;
  }
  
  module.exports = {
    compatibleInstance: compatibleInstance,
    compatibleConstructor: compatibleConstructor,
    compatibleMessage: compatibleMessage,
    getMessage: getMessage,
    getConstructorName: getConstructorName,
  };
  

});

;/*!node_modules/chai/lib/chai/utils/isNaN.js*/
define('node_modules/chai/lib/chai/utils/isNaN', function(require, exports, module) {

  /*!
   * Chai - isNaN utility
   * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
   * MIT Licensed
   */
  
  /**
   * ### .isNaN(value)
   *
   * Checks if the given value is NaN or not.
   *
   *     utils.isNaN(NaN); // true
   *
   * @param {Value} The value which has to be checked if it is NaN
   * @name isNaN
   * @api private
   */
  
  function isNaN(value) {
    // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
    // section's NOTE.
    return value !== value;
  }
  
  // If ECMAScript 6's Number.isNaN is present, prefer that.
  module.exports = Number.isNaN || isNaN;
  

});

;/*!node_modules/chai/lib/chai/utils/index.js*/
define('node_modules/chai/lib/chai/utils/index', function(require, exports, module) {

  /*!
   * chai
   * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  /*!
   * Dependencies that are used for multiple exports are required here only once
   */
  
  var pathval = require('node_modules/chai/node_modules/pathval/index');
  
  /*!
   * test utility
   */
  
  exports.test = require('node_modules/chai/lib/chai/utils/test');
  
  /*!
   * type utility
   */
  
  exports.type = require('node_modules/chai/node_modules/type-detect/index');
  
  /*!
   * expectTypes utility
   */
  exports.expectTypes = require('node_modules/chai/lib/chai/utils/expectTypes');
  
  /*!
   * message utility
   */
  
  exports.getMessage = require('node_modules/chai/lib/chai/utils/getMessage');
  
  /*!
   * actual utility
   */
  
  exports.getActual = require('node_modules/chai/lib/chai/utils/getActual');
  
  /*!
   * Inspect util
   */
  
  exports.inspect = require('node_modules/chai/lib/chai/utils/inspect');
  
  /*!
   * Object Display util
   */
  
  exports.objDisplay = require('node_modules/chai/lib/chai/utils/objDisplay');
  
  /*!
   * Flag utility
   */
  
  exports.flag = require('node_modules/chai/lib/chai/utils/flag');
  
  /*!
   * Flag transferring utility
   */
  
  exports.transferFlags = require('node_modules/chai/lib/chai/utils/transferFlags');
  
  /*!
   * Deep equal utility
   */
  
  exports.eql = require('node_modules/chai/node_modules/deep-eql/index');
  
  /*!
   * Deep path info
   */
  
  exports.getPathInfo = pathval.getPathInfo;
  
  /*!
   * Check if a property exists
   */
  
  exports.hasProperty = pathval.hasProperty;
  
  /*!
   * Function name
   */
  
  exports.getName = require('node_modules/chai/node_modules/get-func-name/index');
  
  /*!
   * add Property
   */
  
  exports.addProperty = require('node_modules/chai/lib/chai/utils/addProperty');
  
  /*!
   * add Method
   */
  
  exports.addMethod = require('node_modules/chai/lib/chai/utils/addMethod');
  
  /*!
   * overwrite Property
   */
  
  exports.overwriteProperty = require('node_modules/chai/lib/chai/utils/overwriteProperty');
  
  /*!
   * overwrite Method
   */
  
  exports.overwriteMethod = require('node_modules/chai/lib/chai/utils/overwriteMethod');
  
  /*!
   * Add a chainable method
   */
  
  exports.addChainableMethod = require('node_modules/chai/lib/chai/utils/addChainableMethod');
  
  /*!
   * Overwrite chainable method
   */
  
  exports.overwriteChainableMethod = require('node_modules/chai/lib/chai/utils/overwriteChainableMethod');
  
  /*!
   * Compare by inspect method
   */
  
  exports.compareByInspect = require('node_modules/chai/lib/chai/utils/compareByInspect');
  
  /*!
   * Get own enumerable property symbols method
   */
  
  exports.getOwnEnumerablePropertySymbols = require('node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols');
  
  /*!
   * Get own enumerable properties method
   */
  
  exports.getOwnEnumerableProperties = require('node_modules/chai/lib/chai/utils/getOwnEnumerableProperties');
  
  /*!
   * Checks error against a given set of criteria
   */
  
  exports.checkError = require('node_modules/chai/node_modules/check-error/index');
  
  /*!
   * Proxify util
   */
  
  exports.proxify = require('node_modules/chai/lib/chai/utils/proxify');
  
  /*!
   * addLengthGuard util
   */
  
  exports.addLengthGuard = require('node_modules/chai/lib/chai/utils/addLengthGuard');
  
  /*!
   * isProxyEnabled helper
   */
  
  exports.isProxyEnabled = require('node_modules/chai/lib/chai/utils/isProxyEnabled');
  
  /*!
   * isNaN method
   */
  
  exports.isNaN = require('node_modules/chai/lib/chai/utils/isNaN');
  

});

;/*!node_modules/chai/lib/chai/assertion.js*/
define('node_modules/chai/lib/chai/assertion', function(require, exports, module) {

  /*!
   * chai
   * http://chaijs.com
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var config = require('node_modules/chai/lib/chai/config');
  
  module.exports = function (_chai, util) {
    /*!
     * Module dependencies.
     */
  
    var AssertionError = _chai.AssertionError
      , flag = util.flag;
  
    /*!
     * Module export.
     */
  
    _chai.Assertion = Assertion;
  
    /*!
     * Assertion Constructor
     *
     * Creates object for chaining.
     *
     * `Assertion` objects contain metadata in the form of flags. Three flags can
     * be assigned during instantiation by passing arguments to this constructor:
     *
     * - `object`: This flag contains the target of the assertion. For example, in
     *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
     *   contain `numKittens` so that the `equal` assertion can reference it when
     *   needed.
     *
     * - `message`: This flag contains an optional custom error message to be
     *   prepended to the error message that's generated by the assertion when it
     *   fails.
     *
     * - `ssfi`: This flag stands for "start stack function indicator". It
     *   contains a function reference that serves as the starting point for
     *   removing frames from the stack trace of the error that's created by the
     *   assertion when it fails. The goal is to provide a cleaner stack trace to
     *   end users by removing Chai's internal functions. Note that it only works
     *   in environments that support `Error.captureStackTrace`, and only when
     *   `Chai.config.includeStack` hasn't been set to `false`.
     *
     * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
     *   should retain its current value, even as assertions are chained off of
     *   this object. This is usually set to `true` when creating a new assertion
     *   from within another assertion. It's also temporarily set to `true` before
     *   an overwritten assertion gets called by the overwriting assertion.
     *
     * @param {Mixed} obj target of the assertion
     * @param {String} msg (optional) custom error message
     * @param {Function} ssfi (optional) starting point for removing stack frames
     * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
     * @api private
     */
  
    function Assertion (obj, msg, ssfi, lockSsfi) {
      flag(this, 'ssfi', ssfi || Assertion);
      flag(this, 'lockSsfi', lockSsfi);
      flag(this, 'object', obj);
      flag(this, 'message', msg);
  
      return util.proxify(this);
    }
  
    Object.defineProperty(Assertion, 'includeStack', {
      get: function() {
        console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
        return config.includeStack;
      },
      set: function(value) {
        console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
        config.includeStack = value;
      }
    });
  
    Object.defineProperty(Assertion, 'showDiff', {
      get: function() {
        console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
        return config.showDiff;
      },
      set: function(value) {
        console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
        config.showDiff = value;
      }
    });
  
    Assertion.addProperty = function (name, fn) {
      util.addProperty(this.prototype, name, fn);
    };
  
    Assertion.addMethod = function (name, fn) {
      util.addMethod(this.prototype, name, fn);
    };
  
    Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
      util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
    };
  
    Assertion.overwriteProperty = function (name, fn) {
      util.overwriteProperty(this.prototype, name, fn);
    };
  
    Assertion.overwriteMethod = function (name, fn) {
      util.overwriteMethod(this.prototype, name, fn);
    };
  
    Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
      util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
    };
  
    /**
     * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
     *
     * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
     *
     * @name assert
     * @param {Philosophical} expression to be tested
     * @param {String|Function} message or function that returns message to display if expression fails
     * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
     * @param {Mixed} expected value (remember to check for negation)
     * @param {Mixed} actual (optional) will default to `this.obj`
     * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
     * @api private
     */
  
    Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
      var ok = util.test(this, arguments);
      if (false !== showDiff) showDiff = true;
      if (undefined === expected && undefined === _actual) showDiff = false;
      if (true !== config.showDiff) showDiff = false;
  
      if (!ok) {
        msg = util.getMessage(this, arguments);
        var actual = util.getActual(this, arguments);
        throw new AssertionError(msg, {
            actual: actual
          , expected: expected
          , showDiff: showDiff
        }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
      }
    };
  
    /*!
     * ### ._obj
     *
     * Quick reference to stored `actual` value for plugin developers.
     *
     * @api private
     */
  
    Object.defineProperty(Assertion.prototype, '_obj',
      { get: function () {
          return flag(this, 'object');
        }
      , set: function (val) {
          flag(this, 'object', val);
        }
    });
  };
  

});

;/*!node_modules/chai/lib/chai/core/assertions.js*/
define('node_modules/chai/lib/chai/core/assertions', function(require, exports, module) {

  /*!
   * chai
   * http://chaijs.com
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  module.exports = function (chai, _) {
    var Assertion = chai.Assertion
      , AssertionError = chai.AssertionError
      , flag = _.flag;
  
    /**
     * ### Language Chains
     *
     * The following are provided as chainable getters to improve the readability
     * of your assertions.
     *
     * **Chains**
     *
     * - to
     * - be
     * - been
     * - is
     * - that
     * - which
     * - and
     * - has
     * - have
     * - with
     * - at
     * - of
     * - same
     * - but
     * - does
     *
     * @name language chains
     * @namespace BDD
     * @api public
     */
  
    [ 'to', 'be', 'been'
    , 'is', 'and', 'has', 'have'
    , 'with', 'that', 'which', 'at'
    , 'of', 'same', 'but', 'does' ].forEach(function (chain) {
      Assertion.addProperty(chain);
    });
  
    /**
     * ### .not
     *
     * Negates all assertions that follow in the chain.
     *
     *     expect(function () {}).to.not.throw();
     *     expect({a: 1}).to.not.have.property('b');
     *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
     *
     * Just because you can negate any assertion with `.not` doesn't mean you
     * should. With great power comes great responsibility. It's often best to
     * assert that the one expected output was produced, rather than asserting
     * that one of countless unexpected outputs wasn't produced. See individual
     * assertions for specific guidance.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.not.equal(1); // Not recommended
     *
     * @name not
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('not', function () {
      flag(this, 'negate', true);
    });
  
    /**
     * ### .deep
     *
     * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
     * assertions that follow in the chain to use deep equality instead of strict
     * (`===`) equality. See the `deep-eql` project page for info on the deep
     * equality algorithm: https://github.com/chaijs/deep-eql.
     *
     *     // Target object deeply (but not strictly) equals `{a: 1}`
     *     expect({a: 1}).to.deep.equal({a: 1});
     *     expect({a: 1}).to.not.equal({a: 1});
     *
     *     // Target array deeply (but not strictly) includes `{a: 1}`
     *     expect([{a: 1}]).to.deep.include({a: 1});
     *     expect([{a: 1}]).to.not.include({a: 1});
     *
     *     // Target object deeply (but not strictly) includes `x: {a: 1}`
     *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
     *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
     *
     *     // Target array deeply (but not strictly) has member `{a: 1}`
     *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
     *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
     *
     *     // Target set deeply (but not strictly) has key `{a: 1}`
     *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
     *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
     *
     *     // Target object deeply (but not strictly) has property `x: {a: 1}`
     *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
     *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
     *
     * @name deep
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('deep', function () {
      flag(this, 'deep', true);
    });
  
    /**
     * ### .nested
     *
     * Enables dot- and bracket-notation in all `.property` and `.include`
     * assertions that follow in the chain.
     *
     *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
     *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
     *
     * If `.` or `[]` are part of an actual property name, they can be escaped by
     * adding two backslashes before them.
     *
     *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
     *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
     *
     * `.nested` cannot be combined with `.own`.
     *
     * @name nested
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('nested', function () {
      flag(this, 'nested', true);
    });
  
    /**
     * ### .own
     *
     * Causes all `.property` and `.include` assertions that follow in the chain
     * to ignore inherited properties.
     *
     *     Object.prototype.b = 2;
     *
     *     expect({a: 1}).to.have.own.property('a');
     *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); 
     *
     *     expect({a: 1}).to.own.include({a: 1});
     *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
     *
     * `.own` cannot be combined with `.nested`.
     *
     * @name own
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('own', function () {
      flag(this, 'own', true);
    });
  
    /**
     * ### .ordered
     *
     * Causes all `.members` assertions that follow in the chain to require that
     * members be in the same order.
     *
     *     expect([1, 2]).to.have.ordered.members([1, 2])
     *       .but.not.have.ordered.members([2, 1]);
     *
     * When `.include` and `.ordered` are combined, the ordering begins at the
     * start of both arrays.
     *
     *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
     *       .but.not.include.ordered.members([2, 3]);
     *
     * @name ordered
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('ordered', function () {
      flag(this, 'ordered', true);
    });
  
    /**
     * ### .any
     *
     * Causes all `.keys` assertions that follow in the chain to only require that
     * the target have at least one of the given keys. This is the opposite of
     * `.all`, which requires that the target have all of the given keys.
     *
     *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
     *
     * See the `.keys` doc for guidance on when to use `.any` or `.all`.
     *
     * @name any
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('any', function () {
      flag(this, 'any', true);
      flag(this, 'all', false);
    });
  
  
    /**
     * ### .all
     *
     * Causes all `.keys` assertions that follow in the chain to require that the
     * target have all of the given keys. This is the opposite of `.any`, which
     * only requires that the target have at least one of the given keys.
     *
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
     *
     * Note that `.all` is used by default when neither `.all` nor `.any` are
     * added earlier in the chain. However, it's often best to add `.all` anyway
     * because it improves readability.
     *
     * See the `.keys` doc for guidance on when to use `.any` or `.all`.
     *
     * @name all
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('all', function () {
      flag(this, 'all', true);
      flag(this, 'any', false);
    });
  
    /**
     * ### .a(type[, msg])
     *
     * Asserts that the target's type is equal to the given string `type`. Types
     * are case insensitive. See the `type-detect` project page for info on the
     * type detection algorithm: https://github.com/chaijs/type-detect.
     *
     *     expect('foo').to.be.a('string');
     *     expect({a: 1}).to.be.an('object');
     *     expect(null).to.be.a('null');
     *     expect(undefined).to.be.an('undefined');
     *     expect(new Error).to.be.an('error');
     *     expect(Promise.resolve()).to.be.a('promise');
     *     expect(new Float32Array).to.be.a('float32array');
     *     expect(Symbol()).to.be.a('symbol');
     *
     * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
     *
     *     var myObj = {
     *       [Symbol.toStringTag]: 'myCustomType'
     *     };
     *
     *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
     *
     * It's often best to use `.a` to check a target's type before making more
     * assertions on the same target. That way, you avoid unexpected behavior from
     * any assertion that does different things based on the target's type.
     *
     *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
     *     expect([]).to.be.an('array').that.is.empty;
     *
     * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
     * assert that the target is the expected type, rather than asserting that it
     * isn't one of many unexpected types.
     *
     *     expect('foo').to.be.a('string'); // Recommended
     *     expect('foo').to.not.be.an('array'); // Not recommended
     *
     * `.a` accepts an optional `msg` argument which is a custom error message to
     * show when the assertion fails. The message can also be given as the second
     * argument to `expect`.
     *
     *     expect(1).to.be.a('string', 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.a('string');
     *
     * `.a` can also be used as a language chain to improve the readability of
     * your assertions. 
     *
     *     expect({b: 2}).to.have.a.property('b');
     *
     * The alias `.an` can be used interchangeably with `.a`.
     *
     * @name a
     * @alias an
     * @param {String} type
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function an (type, msg) {
      if (msg) flag(this, 'message', msg);
      type = type.toLowerCase();
      var obj = flag(this, 'object')
        , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';
  
      this.assert(
          type === _.type(obj).toLowerCase()
        , 'expected #{this} to be ' + article + type
        , 'expected #{this} not to be ' + article + type
      );
    }
  
    Assertion.addChainableMethod('an', an);
    Assertion.addChainableMethod('a', an);
  
    /**
     * ### .include(val[, msg])
     *
     * When the target is a string, `.include` asserts that the given string `val`
     * is a substring of the target.
     *
     *     expect('foobar').to.include('foo');
     *
     * When the target is an array, `.include` asserts that the given `val` is a
     * member of the target.
     *
     *     expect([1, 2, 3]).to.include(2);
     *
     * When the target is an object, `.include` asserts that the given object
     * `val`'s properties are a subset of the target's properties.
     *
     *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
     *
     * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
     * member of the target. SameValueZero equality algorithm is used.
     *
     *     expect(new Set([1, 2])).to.include(2);
     *
     * When the target is a Map, `.include` asserts that the given `val` is one of
     * the values of the target. SameValueZero equality algorithm is used.
     *
     *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
     *
     * Because `.include` does different things based on the target's type, it's
     * important to check the target's type before using `.include`. See the `.a`
     * doc for info on testing a target's type.
     *
     *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
     *
     * By default, strict (`===`) equality is used to compare array members and
     * object properties. Add `.deep` earlier in the chain to use deep equality
     * instead (WeakSet targets are not supported). See the `deep-eql` project
     * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
     *
     *     // Target array deeply (but not strictly) includes `{a: 1}`
     *     expect([{a: 1}]).to.deep.include({a: 1});
     *     expect([{a: 1}]).to.not.include({a: 1});
     *
     *     // Target object deeply (but not strictly) includes `x: {a: 1}`
     *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
     *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
     *
     * By default, all of the target's properties are searched when working with
     * objects. This includes properties that are inherited and/or non-enumerable.
     * Add `.own` earlier in the chain to exclude the target's inherited
     * properties from the search.
     *
     *     Object.prototype.b = 2;
     *
     *     expect({a: 1}).to.own.include({a: 1});
     *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
     *
     * Note that a target object is always only searched for `val`'s own
     * enumerable properties.
     *
     * `.deep` and `.own` can be combined.
     *
     *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
     *
     * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
     * referencing nested properties.
     *
     *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
     *
     * If `.` or `[]` are part of an actual property name, they can be escaped by
     * adding two backslashes before them.
     *
     *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
     *
     * `.deep` and `.nested` can be combined.
     *
     *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
     *
     * `.own` and `.nested` cannot be combined.
     *
     * Add `.not` earlier in the chain to negate `.include`.
     *
     *     expect('foobar').to.not.include('taco');
     *     expect([1, 2, 3]).to.not.include(4);
     * 
     * However, it's dangerous to negate `.include` when the target is an object.
     * The problem is that it creates uncertain expectations by asserting that the
     * target object doesn't have all of `val`'s key/value pairs but may or may
     * not have some of them. It's often best to identify the exact output that's
     * expected, and then write an assertion that only accepts that exact output.
     *
     * When the target object isn't even expected to have `val`'s keys, it's
     * often best to assert exactly that.
     *
     *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
     *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
     *
     * When the target object is expected to have `val`'s keys, it's often best to
     * assert that each of the properties has its expected value, rather than
     * asserting that each property doesn't have one of many unexpected values.
     *
     *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
     *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
     *
     * `.include` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
     *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
     *
     * `.include` can also be used as a language chain, causing all `.members` and
     * `.keys` assertions that follow in the chain to require the target to be a
     * superset of the expected set, rather than an identical set. Note that
     * `.members` ignores duplicates in the subset when `.include` is added.
     *
     *     // Target object's keys are a superset of ['a', 'b'] but not identical
     *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
     *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
     *
     *     // Target array is a superset of [1, 2] but not identical
     *     expect([1, 2, 3]).to.include.members([1, 2]);
     *     expect([1, 2, 3]).to.not.have.members([1, 2]);
     *
     *     // Duplicates in the subset are ignored
     *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
     *
     * Note that adding `.any` earlier in the chain causes the `.keys` assertion
     * to ignore `.include`.
     *
     *     // Both assertions are identical
     *     expect({a: 1}).to.include.any.keys('a', 'b');
     *     expect({a: 1}).to.have.any.keys('a', 'b');
     *
     * The aliases `.includes`, `.contain`, and `.contains` can be used
     * interchangeably with `.include`.
     *
     * @name include
     * @alias contain
     * @alias includes
     * @alias contains
     * @param {Mixed} val
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function SameValueZero(a, b) {
      return (_.isNaN(a) && _.isNaN(b)) || a === b;
    }
  
    function includeChainingBehavior () {
      flag(this, 'contains', true);
    }
  
    function include (val, msg) {
      if (msg) flag(this, 'message', msg);
      
      var obj = flag(this, 'object')
        , objType = _.type(obj).toLowerCase()
        , flagMsg = flag(this, 'message')
        , negate = flag(this, 'negate')
        , ssfi = flag(this, 'ssfi')
        , isDeep = flag(this, 'deep')
        , descriptor = isDeep ? 'deep ' : '';
  
      flagMsg = flagMsg ? flagMsg + ': ' : '';
  
      var included = false;
  
      switch (objType) {
        case 'string':
          included = obj.indexOf(val) !== -1;
          break;
  
        case 'weakset':
          if (isDeep) {
            throw new AssertionError(
              flagMsg + 'unable to use .deep.include with WeakSet',
              undefined,
              ssfi
            );
          }
  
          included = obj.has(val);
          break;
  
        case 'map':
          var isEql = isDeep ? _.eql : SameValueZero;
          obj.forEach(function (item) {
            included = included || isEql(item, val);
          });
          break;
  
        case 'set':
          if (isDeep) {
            obj.forEach(function (item) {
              included = included || _.eql(item, val);
            });
          } else {
            included = obj.has(val);
          }
          break;
  
        case 'array':
          if (isDeep) {
            included = obj.some(function (item) {
              return _.eql(item, val);
            })
          } else {
            included = obj.indexOf(val) !== -1;
          }
          break;
  
        default:
          // This block is for asserting a subset of properties in an object.
          // `_.expectTypes` isn't used here because `.include` should work with
          // objects with a custom `@@toStringTag`.
          if (val !== Object(val)) {
            throw new AssertionError(
              flagMsg + 'object tested must be an array, a map, an object,'
                + ' a set, a string, or a weakset, but ' + objType + ' given',
              undefined,
              ssfi
            );
          }
  
          var props = Object.keys(val)
            , firstErr = null
            , numErrs = 0;
    
          props.forEach(function (prop) {
            var propAssertion = new Assertion(obj);
            _.transferFlags(this, propAssertion, true);
            flag(propAssertion, 'lockSsfi', true);
    
            if (!negate || props.length === 1) {
              propAssertion.property(prop, val[prop]);
              return;
            }
    
            try {
              propAssertion.property(prop, val[prop]);
            } catch (err) {
              if (!_.checkError.compatibleConstructor(err, AssertionError)) {
                throw err;
              }
              if (firstErr === null) firstErr = err;
              numErrs++;
            }
          }, this);
    
          // When validating .not.include with multiple properties, we only want
          // to throw an assertion error if all of the properties are included,
          // in which case we throw the first property assertion error that we
          // encountered.
          if (negate && props.length > 1 && numErrs === props.length) {
            throw firstErr;
          }
          return;
      }
  
      // Assert inclusion in collection or substring in a string.
      this.assert(
        included
        , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)
        , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
    }
  
    Assertion.addChainableMethod('include', include, includeChainingBehavior);
    Assertion.addChainableMethod('contain', include, includeChainingBehavior);
    Assertion.addChainableMethod('contains', include, includeChainingBehavior);
    Assertion.addChainableMethod('includes', include, includeChainingBehavior);
  
    /**
     * ### .ok
     *
     * Asserts that the target is loosely (`==`) equal to `true`. However, it's
     * often best to assert that the target is strictly (`===`) or deeply equal to
     * its expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.ok; // Not recommended
     *
     *     expect(true).to.be.true; // Recommended
     *     expect(true).to.be.ok; // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.ok`.
     *
     *     expect(0).to.equal(0); // Recommended
     *     expect(0).to.not.be.ok; // Not recommended
     *
     *     expect(false).to.be.false; // Recommended
     *     expect(false).to.not.be.ok; // Not recommended
     *
     *     expect(null).to.be.null; // Recommended
     *     expect(null).to.not.be.ok; // Not recommended
     *
     *     expect(undefined).to.be.undefined; // Recommended
     *     expect(undefined).to.not.be.ok; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(false, 'nooo why fail??').to.be.ok;
     *
     * @name ok
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('ok', function () {
      this.assert(
          flag(this, 'object')
        , 'expected #{this} to be truthy'
        , 'expected #{this} to be falsy');
    });
  
    /**
     * ### .true
     *
     * Asserts that the target is strictly (`===`) equal to `true`.
     *
     *     expect(true).to.be.true;
     *
     * Add `.not` earlier in the chain to negate `.true`. However, it's often best
     * to assert that the target is equal to its expected value, rather than not
     * equal to `true`.
     *
     *     expect(false).to.be.false; // Recommended
     *     expect(false).to.not.be.true; // Not recommended
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.true; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(false, 'nooo why fail??').to.be.true;
     *
     * @name true
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('true', function () {
      this.assert(
          true === flag(this, 'object')
        , 'expected #{this} to be true'
        , 'expected #{this} to be false'
        , flag(this, 'negate') ? false : true
      );
    });
  
    /**
     * ### .false
     *
     * Asserts that the target is strictly (`===`) equal to `false`.
     *
     *     expect(false).to.be.false;
     *
     * Add `.not` earlier in the chain to negate `.false`. However, it's often
     * best to assert that the target is equal to its expected value, rather than
     * not equal to `false`.
     *
     *     expect(true).to.be.true; // Recommended
     *     expect(true).to.not.be.false; // Not recommended
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.false; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(true, 'nooo why fail??').to.be.false;
     *
     * @name false
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('false', function () {
      this.assert(
          false === flag(this, 'object')
        , 'expected #{this} to be false'
        , 'expected #{this} to be true'
        , flag(this, 'negate') ? true : false
      );
    });
  
    /**
     * ### .null
     *
     * Asserts that the target is strictly (`===`) equal to `null`.
     *
     *     expect(null).to.be.null;
     *
     * Add `.not` earlier in the chain to negate `.null`. However, it's often best
     * to assert that the target is equal to its expected value, rather than not
     * equal to `null`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.null; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(42, 'nooo why fail??').to.be.null;
     *
     * @name null
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('null', function () {
      this.assert(
          null === flag(this, 'object')
        , 'expected #{this} to be null'
        , 'expected #{this} not to be null'
      );
    });
  
    /**
     * ### .undefined
     *
     * Asserts that the target is strictly (`===`) equal to `undefined`.
     *
     *     expect(undefined).to.be.undefined;
     *
     * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
     * best to assert that the target is equal to its expected value, rather than
     * not equal to `undefined`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.undefined; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(42, 'nooo why fail??').to.be.undefined;
     *
     * @name undefined
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('undefined', function () {
      this.assert(
          undefined === flag(this, 'object')
        , 'expected #{this} to be undefined'
        , 'expected #{this} not to be undefined'
      );
    });
  
    /**
     * ### .NaN
     *
     * Asserts that the target is exactly `NaN`.
     *
     *     expect(NaN).to.be.NaN;
     *
     * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
     * to assert that the target is equal to its expected value, rather than not
     * equal to `NaN`.
     *
     *     expect('foo').to.equal('foo'); // Recommended
     *     expect('foo').to.not.be.NaN; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(42, 'nooo why fail??').to.be.NaN;
     *
     * @name NaN
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('NaN', function () {
      this.assert(
          _.isNaN(flag(this, 'object'))
          , 'expected #{this} to be NaN'
          , 'expected #{this} not to be NaN'
      );
    });
  
    /**
     * ### .exist
     *
     * Asserts that the target is not strictly (`===`) equal to either `null` or
     * `undefined`. However, it's often best to assert that the target is equal to
     * its expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.exist; // Not recommended
     *
     *     expect(0).to.equal(0); // Recommended
     *     expect(0).to.exist; // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.exist`.
     *
     *     expect(null).to.be.null; // Recommended
     *     expect(null).to.not.exist; // Not recommended
     *
     *     expect(undefined).to.be.undefined; // Recommended
     *     expect(undefined).to.not.exist; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(null, 'nooo why fail??').to.exist;
     *
     * @name exist
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('exist', function () {
      var val = flag(this, 'object');
      this.assert(
          val !== null && val !== undefined
        , 'expected #{this} to exist'
        , 'expected #{this} to not exist'
      );
    });
  
    /**
     * ### .empty
     *
     * When the target is a string or array, `.empty` asserts that the target's
     * `length` property is strictly (`===`) equal to `0`.
     *
     *     expect([]).to.be.empty;
     *     expect('').to.be.empty;
     *
     * When the target is a map or set, `.empty` asserts that the target's `size`
     * property is strictly equal to `0`.
     *
     *     expect(new Set()).to.be.empty;
     *     expect(new Map()).to.be.empty;
     *
     * When the target is a non-function object, `.empty` asserts that the target
     * doesn't have any own enumerable properties. Properties with Symbol-based
     * keys are excluded from the count.
     *
     *     expect({}).to.be.empty;
     *
     * Because `.empty` does different things based on the target's type, it's
     * important to check the target's type before using `.empty`. See the `.a`
     * doc for info on testing a target's type.
     *
     *     expect([]).to.be.an('array').that.is.empty;
     *
     * Add `.not` earlier in the chain to negate `.empty`. However, it's often
     * best to assert that the target contains its expected number of values,
     * rather than asserting that it's not empty.
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
     *
     *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
     *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
     *
     *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
     *     expect({a: 1}).to.not.be.empty; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
     *
     * @name empty
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('empty', function () {
      var val = flag(this, 'object')
        , ssfi = flag(this, 'ssfi')
        , flagMsg = flag(this, 'message')
        , itemsCount;
  
      flagMsg = flagMsg ? flagMsg + ': ' : '';
  
      switch (_.type(val).toLowerCase()) {
        case 'array':
        case 'string':
          itemsCount = val.length;
          break;
        case 'map':
        case 'set':
          itemsCount = val.size;
          break;
        case 'weakmap':
        case 'weakset':
          throw new AssertionError(
            flagMsg + '.empty was passed a weak collection',
            undefined,
            ssfi
          );
        case 'function':
          var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
          throw new AssertionError(msg.trim(), undefined, ssfi);
        default:
          if (val !== Object(val)) {
            throw new AssertionError(
              flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),
              undefined,
              ssfi
            );
          }
          itemsCount = Object.keys(val).length;
      }
  
      this.assert(
          0 === itemsCount
        , 'expected #{this} to be empty'
        , 'expected #{this} not to be empty'
      );
    });
  
    /**
     * ### .arguments
     *
     * Asserts that the target is an `arguments` object.
     *
     *     function test () {
     *       expect(arguments).to.be.arguments;
     *     }
     *
     *     test();
     *
     * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
     * best to assert which type the target is expected to be, rather than
     * asserting that its not an `arguments` object.
     *
     *     expect('foo').to.be.a('string'); // Recommended
     *     expect('foo').to.not.be.arguments; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({}, 'nooo why fail??').to.be.arguments;
     *
     * The alias `.Arguments` can be used interchangeably with `.arguments`.
     *
     * @name arguments
     * @alias Arguments
     * @namespace BDD
     * @api public
     */
  
    function checkArguments () {
      var obj = flag(this, 'object')
        , type = _.type(obj);
      this.assert(
          'Arguments' === type
        , 'expected #{this} to be arguments but got ' + type
        , 'expected #{this} to not be arguments'
      );
    }
  
    Assertion.addProperty('arguments', checkArguments);
    Assertion.addProperty('Arguments', checkArguments);
  
    /**
     * ### .equal(val[, msg])
     *
     * Asserts that the target is strictly (`===`) equal to the given `val`.
     *
     *     expect(1).to.equal(1);
     *     expect('foo').to.equal('foo');
     * 
     * Add `.deep` earlier in the chain to use deep equality instead. See the
     * `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target object deeply (but not strictly) equals `{a: 1}`
     *     expect({a: 1}).to.deep.equal({a: 1});
     *     expect({a: 1}).to.not.equal({a: 1});
     *
     *     // Target array deeply (but not strictly) equals `[1, 2]`
     *     expect([1, 2]).to.deep.equal([1, 2]);
     *     expect([1, 2]).to.not.equal([1, 2]);
     *
     * Add `.not` earlier in the chain to negate `.equal`. However, it's often
     * best to assert that the target is equal to its expected value, rather than
     * not equal to one of countless unexpected values.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.equal(2); // Not recommended
     *
     * `.equal` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.equal(2, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.equal(2);
     *
     * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
     *
     * @name equal
     * @alias equals
     * @alias eq
     * @param {Mixed} val
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertEqual (val, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object');
      if (flag(this, 'deep')) {
        return this.eql(val);
      } else {
        this.assert(
            val === obj
          , 'expected #{this} to equal #{exp}'
          , 'expected #{this} to not equal #{exp}'
          , val
          , this._obj
          , true
        );
      }
    }
  
    Assertion.addMethod('equal', assertEqual);
    Assertion.addMethod('equals', assertEqual);
    Assertion.addMethod('eq', assertEqual);
  
    /**
     * ### .eql(obj[, msg])
     *
     * Asserts that the target is deeply equal to the given `obj`. See the
     * `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target object is deeply (but not strictly) equal to {a: 1}
     *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
     *
     *     // Target array is deeply (but not strictly) equal to [1, 2]
     *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
     *
     * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
     * to assert that the target is deeply equal to its expected value, rather
     * than not deeply equal to one of countless unexpected values.
     *
     *     expect({a: 1}).to.eql({a: 1}); // Recommended
     *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
     *
     * `.eql` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
     *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
     *
     * The alias `.eqls` can be used interchangeably with `.eql`.
     *
     * The `.deep.equal` assertion is almost identical to `.eql` but with one
     * difference: `.deep.equal` causes deep equality comparisons to also be used
     * for any other assertions that follow in the chain.
     *
     * @name eql
     * @alias eqls
     * @param {Mixed} obj
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertEql(obj, msg) {
      if (msg) flag(this, 'message', msg);
      this.assert(
          _.eql(obj, flag(this, 'object'))
        , 'expected #{this} to deeply equal #{exp}'
        , 'expected #{this} to not deeply equal #{exp}'
        , obj
        , this._obj
        , true
      );
    }
  
    Assertion.addMethod('eql', assertEql);
    Assertion.addMethod('eqls', assertEql);
  
    /**
     * ### .above(n[, msg])
     *
     * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
     * However, it's often best to assert that the target is equal to its expected
     * value.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.be.above(1); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the value of the
     * target's `length` property is greater than the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.above(2); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.above`.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(1).to.not.be.above(2); // Not recommended
     *
     * `.above` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.be.above(2, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.above(2);
     *
     * The aliases `.gt` and `.greaterThan` can be used interchangeably with
     * `.above`.
     *
     * @name above
     * @alias gt
     * @alias greaterThan
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertAbove (n, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , doLength = flag(this, 'doLength')
        , flagMsg = flag(this, 'message')
        , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
        , ssfi = flag(this, 'ssfi')
        , objType = _.type(obj).toLowerCase()
        , nType = _.type(n).toLowerCase()
        , shouldThrow = true;
  
      if (doLength) {
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
      }
      
      if (!doLength && (objType === 'date' && nType !== 'date')) {
        errorMessage = msgPrefix + 'the argument to above must be a date';
      } else if (nType !== 'number' && (doLength || objType === 'number')) {
        errorMessage = msgPrefix + 'the argument to above must be a number';
      } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
        var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
      } else {
        shouldThrow = false;
      }
  
      if (shouldThrow) {
        throw new AssertionError(errorMessage, undefined, ssfi);
      }
  
      if (doLength) {
        var len = obj.length;
        this.assert(
            len > n
          , 'expected #{this} to have a length above #{exp} but got #{act}'
          , 'expected #{this} to not have a length above #{exp}'
          , n
          , len
        );
      } else {
        this.assert(
            obj > n
          , 'expected #{this} to be above #{exp}'
          , 'expected #{this} to be at most #{exp}'
          , n
        );
      }
    }
  
    Assertion.addMethod('above', assertAbove);
    Assertion.addMethod('gt', assertAbove);
    Assertion.addMethod('greaterThan', assertAbove);
  
    /**
     * ### .least(n[, msg])
     *
     * Asserts that the target is a number or a date greater than or equal to the given
     * number or date `n` respectively. However, it's often best to assert that the target is equal to
     * its expected value.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.be.at.least(1); // Not recommended
     *     expect(2).to.be.at.least(2); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the value of the
     * target's `length` property is greater than or equal to the given number
     * `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.least`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.at.least(2); // Not recommended
     *
     * `.least` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.be.at.least(2, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.at.least(2);
     *
     * The alias `.gte` can be used interchangeably with `.least`.
     *
     * @name least
     * @alias gte
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertLeast (n, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , doLength = flag(this, 'doLength')
        , flagMsg = flag(this, 'message')
        , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
        , ssfi = flag(this, 'ssfi')
        , objType = _.type(obj).toLowerCase()
        , nType = _.type(n).toLowerCase()
        , shouldThrow = true;
  
      if (doLength) {
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
      }
  
      if (!doLength && (objType === 'date' && nType !== 'date')) {
        errorMessage = msgPrefix + 'the argument to least must be a date';
      } else if (nType !== 'number' && (doLength || objType === 'number')) {
        errorMessage = msgPrefix + 'the argument to least must be a number';
      } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
        var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
      } else {
        shouldThrow = false;
      }
  
      if (shouldThrow) {
        throw new AssertionError(errorMessage, undefined, ssfi);
      }
  
      if (doLength) {
        var len = obj.length;
        this.assert(
            len >= n
          , 'expected #{this} to have a length at least #{exp} but got #{act}'
          , 'expected #{this} to have a length below #{exp}'
          , n
          , len
        );
      } else {
        this.assert(
            obj >= n
          , 'expected #{this} to be at least #{exp}'
          , 'expected #{this} to be below #{exp}'
          , n
        );
      }
    }
  
    Assertion.addMethod('least', assertLeast);
    Assertion.addMethod('gte', assertLeast);
  
    /**
     * ### .below(n[, msg])
     *
     * Asserts that the target is a number or a date less than the given number or date `n` respectively.
     * However, it's often best to assert that the target is equal to its expected
     * value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.below(2); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the value of the
     * target's `length` property is less than the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.below(4); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.length(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.below`.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.not.be.below(1); // Not recommended
     *
     * `.below` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(2).to.be.below(1, 'nooo why fail??');
     *     expect(2, 'nooo why fail??').to.be.below(1);
     *
     * The aliases `.lt` and `.lessThan` can be used interchangeably with
     * `.below`.
     *
     * @name below
     * @alias lt
     * @alias lessThan
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertBelow (n, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , doLength = flag(this, 'doLength')
        , flagMsg = flag(this, 'message')
        , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
        , ssfi = flag(this, 'ssfi')
        , objType = _.type(obj).toLowerCase()
        , nType = _.type(n).toLowerCase()
        , shouldThrow = true;
  
      if (doLength) {
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
      }
  
      if (!doLength && (objType === 'date' && nType !== 'date')) {
        errorMessage = msgPrefix + 'the argument to below must be a date';
      } else if (nType !== 'number' && (doLength || objType === 'number')) {
        errorMessage = msgPrefix + 'the argument to below must be a number';
      } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
        var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
      } else {
        shouldThrow = false;
      }
  
      if (shouldThrow) {
        throw new AssertionError(errorMessage, undefined, ssfi);
      }
  
      if (doLength) {
        var len = obj.length;
        this.assert(
            len < n
          , 'expected #{this} to have a length below #{exp} but got #{act}'
          , 'expected #{this} to not have a length below #{exp}'
          , n
          , len
        );
      } else {
        this.assert(
            obj < n
          , 'expected #{this} to be below #{exp}'
          , 'expected #{this} to be at least #{exp}'
          , n
        );
      }
    }
  
    Assertion.addMethod('below', assertBelow);
    Assertion.addMethod('lt', assertBelow);
    Assertion.addMethod('lessThan', assertBelow);
  
    /**
     * ### .most(n[, msg])
     *
     * Asserts that the target is a number or a date less than or equal to the given number
     * or date `n` respectively. However, it's often best to assert that the target is equal to its
     * expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.at.most(2); // Not recommended
     *     expect(1).to.be.at.most(1); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the value of the
     * target's `length` property is less than or equal to the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.most`.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.not.be.at.most(1); // Not recommended
     *
     * `.most` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(2).to.be.at.most(1, 'nooo why fail??');
     *     expect(2, 'nooo why fail??').to.be.at.most(1);
     *
     * The alias `.lte` can be used interchangeably with `.most`.
     *
     * @name most
     * @alias lte
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertMost (n, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , doLength = flag(this, 'doLength')
        , flagMsg = flag(this, 'message')
        , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
        , ssfi = flag(this, 'ssfi')
        , objType = _.type(obj).toLowerCase()
        , nType = _.type(n).toLowerCase()
        , shouldThrow = true;
  
      if (doLength) {
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
      }
      
      if (!doLength && (objType === 'date' && nType !== 'date')) {
        errorMessage = msgPrefix + 'the argument to most must be a date';
      } else if (nType !== 'number' && (doLength || objType === 'number')) {
        errorMessage = msgPrefix + 'the argument to most must be a number';
      } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
        var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
      } else {
        shouldThrow = false;
      }
  
      if (shouldThrow) {
        throw new AssertionError(errorMessage, undefined, ssfi);
      }
  
      if (doLength) {
        var len = obj.length;
        this.assert(
            len <= n
          , 'expected #{this} to have a length at most #{exp} but got #{act}'
          , 'expected #{this} to have a length above #{exp}'
          , n
          , len
        );
      } else {
        this.assert(
            obj <= n
          , 'expected #{this} to be at most #{exp}'
          , 'expected #{this} to be above #{exp}'
          , n
        );
      }
    }
  
    Assertion.addMethod('most', assertMost);
    Assertion.addMethod('lte', assertMost);
  
    /**
     * ### .within(start, finish[, msg])
     *
     * Asserts that the target is a number or a date greater than or equal to the given
     * number or date `start`, and less than or equal to the given number or date `finish` respectively.
     * However, it's often best to assert that the target is equal to its expected
     * value.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.be.within(1, 3); // Not recommended
     *     expect(2).to.be.within(2, 3); // Not recommended
     *     expect(2).to.be.within(1, 2); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the value of the
     * target's `length` property is greater than or equal to the given number
     * `start`, and less than or equal to the given number `finish`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.within`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.within(2, 4); // Not recommended
     *
     * `.within` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(4).to.be.within(1, 3, 'nooo why fail??');
     *     expect(4, 'nooo why fail??').to.be.within(1, 3);
     *
     * @name within
     * @param {Number} start lower bound inclusive
     * @param {Number} finish upper bound inclusive
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    Assertion.addMethod('within', function (start, finish, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , doLength = flag(this, 'doLength')
        , flagMsg = flag(this, 'message')
        , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')
        , ssfi = flag(this, 'ssfi')
        , objType = _.type(obj).toLowerCase()
        , startType = _.type(start).toLowerCase()
        , finishType = _.type(finish).toLowerCase()
        , shouldThrow = true
        , range = (startType === 'date' && finishType === 'date')
            ? start.toUTCString() + '..' + finish.toUTCString()
            : start + '..' + finish;
  
      if (doLength) {
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
      }
  
      if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
        errorMessage = msgPrefix + 'the arguments to within must be dates';
      } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
        errorMessage = msgPrefix + 'the arguments to within must be numbers';
      } else if (!doLength && (objType !== 'date' && objType !== 'number')) {
        var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
        errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
      } else {
        shouldThrow = false;
      }
  
      if (shouldThrow) {
        throw new AssertionError(errorMessage, undefined, ssfi);
      }
  
      if (doLength) {
        var len = obj.length;
        this.assert(
            len >= start && len <= finish
          , 'expected #{this} to have a length within ' + range
          , 'expected #{this} to not have a length within ' + range
        );
      } else {
        this.assert(
            obj >= start && obj <= finish
          , 'expected #{this} to be within ' + range
          , 'expected #{this} to not be within ' + range
        );
      }
    });
  
    /**
     * ### .instanceof(constructor[, msg])
     *
     * Asserts that the target is an instance of the given `constructor`.
     *
     *     function Cat () { }
     *
     *     expect(new Cat()).to.be.an.instanceof(Cat);
     *     expect([1, 2]).to.be.an.instanceof(Array);
     *
     * Add `.not` earlier in the chain to negate `.instanceof`.
     *
     *     expect({a: 1}).to.not.be.an.instanceof(Array);
     *
     * `.instanceof` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
     *
     * Due to limitations in ES5, `.instanceof` may not always work as expected
     * when using a transpiler such as Babel or TypeScript. In particular, it may
     * produce unexpected results when subclassing built-in object such as
     * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
     *
     * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
     * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
     *
     * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
     *
     * @name instanceof
     * @param {Constructor} constructor
     * @param {String} msg _optional_
     * @alias instanceOf
     * @namespace BDD
     * @api public
     */
  
    function assertInstanceOf (constructor, msg) {
      if (msg) flag(this, 'message', msg);
  
      var target = flag(this, 'object')
      var ssfi = flag(this, 'ssfi');
      var flagMsg = flag(this, 'message');
  
      try {
        var isInstanceOf = target instanceof constructor;
      } catch (err) {
        if (err instanceof TypeError) {
          flagMsg = flagMsg ? flagMsg + ': ' : '';
          throw new AssertionError(
            flagMsg + 'The instanceof assertion needs a constructor but '
              + _.type(constructor) + ' was given.',
            undefined,
            ssfi
          );
        }
        throw err;
      }
  
      var name = _.getName(constructor);
      if (name === null) {
        name = 'an unnamed constructor';
      }
  
      this.assert(
          isInstanceOf
        , 'expected #{this} to be an instance of ' + name
        , 'expected #{this} to not be an instance of ' + name
      );
    };
  
    Assertion.addMethod('instanceof', assertInstanceOf);
    Assertion.addMethod('instanceOf', assertInstanceOf);
  
    /**
     * ### .property(name[, val[, msg]])
     *
     * Asserts that the target has a property with the given key `name`.
     *
     *     expect({a: 1}).to.have.property('a');
     *
     * When `val` is provided, `.property` also asserts that the property's value
     * is equal to the given `val`.
     *
     *     expect({a: 1}).to.have.property('a', 1);
     *
     * By default, strict (`===`) equality is used. Add `.deep` earlier in the
     * chain to use deep equality instead. See the `deep-eql` project page for
     * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
     *
     *     // Target object deeply (but not strictly) has property `x: {a: 1}`
     *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
     *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
     *
     * The target's enumerable and non-enumerable properties are always included
     * in the search. By default, both own and inherited properties are included.
     * Add `.own` earlier in the chain to exclude inherited properties from the
     * search.
     *
     *     Object.prototype.b = 2;
     *
     *     expect({a: 1}).to.have.own.property('a');
     *     expect({a: 1}).to.have.own.property('a', 1);
     *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); 
     *
     * `.deep` and `.own` can be combined.
     *
     *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
     *
     * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
     * referencing nested properties.
     *
     *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
     *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
     *
     * If `.` or `[]` are part of an actual property name, they can be escaped by
     * adding two backslashes before them.
     *
     *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
     *
     * `.deep` and `.nested` can be combined.
     *
     *     expect({a: {b: [{c: 3}]}})
     *       .to.have.deep.nested.property('a.b[0]', {c: 3});
     *
     * `.own` and `.nested` cannot be combined.
     *
     * Add `.not` earlier in the chain to negate `.property`.
     *
     *     expect({a: 1}).to.not.have.property('b');
     * 
     * However, it's dangerous to negate `.property` when providing `val`. The
     * problem is that it creates uncertain expectations by asserting that the
     * target either doesn't have a property with the given key `name`, or that it
     * does have a property with the given key `name` but its value isn't equal to
     * the given `val`. It's often best to identify the exact output that's
     * expected, and then write an assertion that only accepts that exact output.
     *
     * When the target isn't expected to have a property with the given key
     * `name`, it's often best to assert exactly that.
     *
     *     expect({b: 2}).to.not.have.property('a'); // Recommended
     *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
     *
     * When the target is expected to have a property with the given key `name`,
     * it's often best to assert that the property has its expected value, rather
     * than asserting that it doesn't have one of many unexpected values.
     *
     *     expect({a: 3}).to.have.property('a', 3); // Recommended
     *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
     *
     * `.property` changes the target of any assertions that follow in the chain
     * to be the value of the property from the original target object.
     *
     *     expect({a: 1}).to.have.property('a').that.is.a('number');
     *
     * `.property` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing `val`, only use the
     * second form.
     *
     *     // Recommended
     *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
     *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
     *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
     *
     *     // Not recommended
     *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
     * 
     * The above assertion isn't the same thing as not providing `val`. Instead,
     * it's asserting that the target object has a `b` property that's equal to
     * `undefined`.
     *
     * The assertions `.ownProperty` and `.haveOwnProperty` can be used
     * interchangeably with `.own.property`.
     *
     * @name property
     * @param {String} name
     * @param {Mixed} val (optional)
     * @param {String} msg _optional_
     * @returns value of property for chaining
     * @namespace BDD
     * @api public
     */
  
    function assertProperty (name, val, msg) {
      if (msg) flag(this, 'message', msg);
  
      var isNested = flag(this, 'nested')
        , isOwn = flag(this, 'own')
        , flagMsg = flag(this, 'message')
        , obj = flag(this, 'object')
        , ssfi = flag(this, 'ssfi');
  
      if (isNested && isOwn) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(
          flagMsg + 'The "nested" and "own" flags cannot be combined.',
          undefined,
          ssfi
        );
      }
  
      if (obj === null || obj === undefined) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(
          flagMsg + 'Target cannot be null or undefined.',
          undefined,
          ssfi
        );
      }
  
      var isDeep = flag(this, 'deep')
        , negate = flag(this, 'negate')
        , pathInfo = isNested ? _.getPathInfo(obj, name) : null
        , value = isNested ? pathInfo.value : obj[name];
  
      var descriptor = '';
      if (isDeep) descriptor += 'deep ';
      if (isOwn) descriptor += 'own ';
      if (isNested) descriptor += 'nested ';
      descriptor += 'property ';
  
      var hasProperty;
      if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);
      else if (isNested) hasProperty = pathInfo.exists;
      else hasProperty = _.hasProperty(obj, name);
  
      // When performing a negated assertion for both name and val, merely having
      // a property with the given name isn't enough to cause the assertion to
      // fail. It must both have a property with the given name, and the value of
      // that property must equal the given val. Therefore, skip this assertion in
      // favor of the next.
      if (!negate || arguments.length === 1) {
        this.assert(
            hasProperty
          , 'expected #{this} to have ' + descriptor + _.inspect(name)
          , 'expected #{this} to not have ' + descriptor + _.inspect(name));
      }
  
      if (arguments.length > 1) {
        this.assert(
            hasProperty && (isDeep ? _.eql(val, value) : val === value)
          , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
          , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'
          , val
          , value
        );
      }
  
      flag(this, 'object', value);
    }
  
    Assertion.addMethod('property', assertProperty);
  
    function assertOwnProperty (name, value, msg) {
      flag(this, 'own', true);
      assertProperty.apply(this, arguments);
    }
  
    Assertion.addMethod('ownProperty', assertOwnProperty);
    Assertion.addMethod('haveOwnProperty', assertOwnProperty);
  
    /**
     * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
     *
     * Asserts that the target has its own property descriptor with the given key
     * `name`. Enumerable and non-enumerable properties are included in the
     * search.
     *
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
     *
     * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
     * the property's descriptor is deeply equal to the given `descriptor`. See
     * the `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 1,
     *     });
     *
     * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
     *
     *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
     * 
     * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
     * a `descriptor`. The problem is that it creates uncertain expectations by
     * asserting that the target either doesn't have a property descriptor with
     * the given key `name`, or that it does have a property descriptor with the
     * given key `name` but its not deeply equal to the given `descriptor`. It's
     * often best to identify the exact output that's expected, and then write an
     * assertion that only accepts that exact output.
     *
     * When the target isn't expected to have a property descriptor with the given
     * key `name`, it's often best to assert exactly that.
     *
     *     // Recommended
     *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
     *
     *     // Not recommended
     *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 1,
     *     });
     *
     * When the target is expected to have a property descriptor with the given
     * key `name`, it's often best to assert that the property has its expected
     * descriptor, rather than asserting that it doesn't have one of many
     * unexpected descriptors.
     *
     *     // Recommended
     *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 3,
     *     });
     *
     *     // Not recommended
     *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 1,
     *     });
     *
     * `.ownPropertyDescriptor` changes the target of any assertions that follow
     * in the chain to be the value of the property descriptor from the original
     * target object.
     *
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
     *       .that.has.property('enumerable', true);
     *
     * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
     * custom error message to show when the assertion fails. The message can also
     * be given as the second argument to `expect`. When not providing
     * `descriptor`, only use the second form.
     *
     *     // Recommended
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 2,
     *     }, 'nooo why fail??');
     *
     *     // Recommended
     *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 2,
     *     });
     * 
     *     // Recommended
     *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
     *
     *     // Not recommended
     *     expect({a: 1})
     *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
     *
     * The above assertion isn't the same thing as not providing `descriptor`.
     * Instead, it's asserting that the target object has a `b` property
     * descriptor that's deeply equal to `undefined`.
     *
     * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
     * `.ownPropertyDescriptor`.
     *
     * @name ownPropertyDescriptor
     * @alias haveOwnPropertyDescriptor
     * @param {String} name
     * @param {Object} descriptor _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertOwnPropertyDescriptor (name, descriptor, msg) {
      if (typeof descriptor === 'string') {
        msg = descriptor;
        descriptor = null;
      }
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object');
      var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
      if (actualDescriptor && descriptor) {
        this.assert(
            _.eql(descriptor, actualDescriptor)
          , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
          , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
          , descriptor
          , actualDescriptor
          , true
        );
      } else {
        this.assert(
            actualDescriptor
          , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
          , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
        );
      }
      flag(this, 'object', actualDescriptor);
    }
  
    Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
    Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
  
    /**
     * ### .lengthOf(n[, msg])
     *
     * Asserts that the target's `length` property is equal to the given number
     * `n`.
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3);
     *     expect('foo').to.have.lengthOf(3);
     *
     * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
     * best to assert that the target's `length` property is equal to its expected
     * value, rather than not equal to one of many unexpected values.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.not.have.lengthOf(4); // Not recommended
     *
     * `.lengthOf` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
     *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
     *
     * `.lengthOf` can also be used as a language chain, causing all `.above`,
     * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
     * chain to use the target's `length` property as the target. However, it's
     * often best to assert that the target's `length` property is equal to its
     * expected length, rather than asserting that its `length` property falls
     * within some range of values.
     *
     *     // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf(3);
     *
     *     // Not recommended
     *     expect([1, 2, 3]).to.have.lengthOf.above(2);
     *     expect([1, 2, 3]).to.have.lengthOf.below(4);
     *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
     *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
     *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
     *
     * Due to a compatibility issue, the alias `.length` can't be chained directly
     * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
     * interchangeably with `.lengthOf` in every situation. It's recommended to
     * always use `.lengthOf` instead of `.length`.
     *
     *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
     *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
     *
     * @name lengthOf
     * @alias length
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertLengthChain () {
      flag(this, 'doLength', true);
    }
  
    function assertLength (n, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
      var len = obj.length;
  
      this.assert(
          len == n
        , 'expected #{this} to have a length of #{exp} but got #{act}'
        , 'expected #{this} to not have a length of #{act}'
        , n
        , len
      );
    }
  
    Assertion.addChainableMethod('length', assertLength, assertLengthChain);
    Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
  
    /**
     * ### .match(re[, msg])
     *
     * Asserts that the target matches the given regular expression `re`.
     *
     *     expect('foobar').to.match(/^foo/);
     *
     * Add `.not` earlier in the chain to negate `.match`.
     *
     *     expect('foobar').to.not.match(/taco/);
     *
     * `.match` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect('foobar').to.match(/taco/, 'nooo why fail??');
     *     expect('foobar', 'nooo why fail??').to.match(/taco/);
     *
     * The alias `.matches` can be used interchangeably with `.match`.
     *
     * @name match
     * @alias matches
     * @param {RegExp} re
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertMatch(re, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object');
      this.assert(
          re.exec(obj)
        , 'expected #{this} to match ' + re
        , 'expected #{this} not to match ' + re
      );
    }
  
    Assertion.addMethod('match', assertMatch);
    Assertion.addMethod('matches', assertMatch);
  
    /**
     * ### .string(str[, msg])
     *
     * Asserts that the target string contains the given substring `str`.
     *
     *     expect('foobar').to.have.string('bar');
     *
     * Add `.not` earlier in the chain to negate `.string`.
     *
     *     expect('foobar').to.not.have.string('taco');
     *
     * `.string` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect('foobar').to.have.string(/taco/, 'nooo why fail??');
     *     expect('foobar', 'nooo why fail??').to.have.string(/taco/);
     *
     * @name string
     * @param {String} str
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    Assertion.addMethod('string', function (str, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
      new Assertion(obj, flagMsg, ssfi, true).is.a('string');
  
      this.assert(
          ~obj.indexOf(str)
        , 'expected #{this} to contain ' + _.inspect(str)
        , 'expected #{this} to not contain ' + _.inspect(str)
      );
    });
  
    /**
     * ### .keys(key1[, key2[, ...]])
     *
     * Asserts that the target object, array, map, or set has the given keys. Only
     * the target's own inherited properties are included in the search. 
     *
     * When the target is an object or array, keys can be provided as one or more
     * string arguments, a single array argument, or a single object argument. In
     * the latter case, only the keys in the given object matter; the values are
     * ignored.
     *
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
     *     expect(['x', 'y']).to.have.all.keys(0, 1);
     *
     *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
     *     expect(['x', 'y']).to.have.all.keys([0, 1]);
     *
     *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
     *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
     *
     * When the target is a map or set, each key must be provided as a separate
     * argument.
     *
     *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
     *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
     *
     * Because `.keys` does different things based on the target's type, it's
     * important to check the target's type before using `.keys`. See the `.a` doc
     * for info on testing a target's type.
     *
     *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
     *
     * By default, strict (`===`) equality is used to compare keys of maps and
     * sets. Add `.deep` earlier in the chain to use deep equality instead. See
     * the `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target set deeply (but not strictly) has key `{a: 1}`
     *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
     *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
     *
     * By default, the target must have all of the given keys and no more. Add
     * `.any` earlier in the chain to only require that the target have at least
     * one of the given keys. Also, add `.not` earlier in the chain to negate
     * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
     * `.all` when asserting `.keys` without negation.
     *
     * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
     * exactly what's expected of the output, whereas `.not.all.keys` creates
     * uncertain expectations.
     *
     *     // Recommended; asserts that target doesn't have any of the given keys
     *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
     *
     *     // Not recommended; asserts that target doesn't have all of the given
     *     // keys but may or may not have some of them
     *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
     *
     * When asserting `.keys` without negation, `.all` is preferred because
     * `.all.keys` asserts exactly what's expected of the output, whereas
     * `.any.keys` creates uncertain expectations.
     *
     *     // Recommended; asserts that target has all the given keys
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
     *
     *     // Not recommended; asserts that target has at least one of the given
     *     // keys but may or may not have more of them
     *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
     *
     * Note that `.all` is used by default when neither `.all` nor `.any` appear
     * earlier in the chain. However, it's often best to add `.all` anyway because
     * it improves readability.
     *
     *     // Both assertions are identical
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
     *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
     *
     * Add `.include` earlier in the chain to require that the target's keys be a
     * superset of the expected keys, rather than identical sets.
     *
     *     // Target object's keys are a superset of ['a', 'b'] but not identical
     *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
     *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
     *
     * However, if `.any` and `.include` are combined, only the `.any` takes
     * effect. The `.include` is ignored in this case.
     *
     *     // Both assertions are identical
     *     expect({a: 1}).to.have.any.keys('a', 'b');
     *     expect({a: 1}).to.include.any.keys('a', 'b');
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
     *
     * The alias `.key` can be used interchangeably with `.keys`.
     *
     * @name keys
     * @alias key
     * @param {...String|Array|Object} keys
     * @namespace BDD
     * @api public
     */
  
    function assertKeys (keys) {
      var obj = flag(this, 'object')
        , objType = _.type(obj)
        , keysType = _.type(keys)
        , ssfi = flag(this, 'ssfi')
        , isDeep = flag(this, 'deep')
        , str
        , deepStr = ''
        , ok = true
        , flagMsg = flag(this, 'message');
  
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';
  
      if (objType === 'Map' || objType === 'Set') {
        deepStr = isDeep ? 'deeply ' : '';
        actual = [];
  
        // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.
        obj.forEach(function (val, key) { actual.push(key) });
  
        if (keysType !== 'Array') {
          keys = Array.prototype.slice.call(arguments);
        }
  
      } else {
        actual = _.getOwnEnumerableProperties(obj);
  
        switch (keysType) {
          case 'Array':
            if (arguments.length > 1) {
              throw new AssertionError(mixedArgsMsg, undefined, ssfi);
            }
            break;
          case 'Object':
            if (arguments.length > 1) {
              throw new AssertionError(mixedArgsMsg, undefined, ssfi);
            }
            keys = Object.keys(keys);
            break;
          default:
            keys = Array.prototype.slice.call(arguments);
        }
  
        // Only stringify non-Symbols because Symbols would become "Symbol()"
        keys = keys.map(function (val) {
          return typeof val === 'symbol' ? val : String(val);
        });
      }
  
      if (!keys.length) {
        throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
      }
  
      var len = keys.length
        , any = flag(this, 'any')
        , all = flag(this, 'all')
        , expected = keys
        , actual;
  
      if (!any && !all) {
        all = true;
      }
  
      // Has any
      if (any) {
        ok = expected.some(function(expectedKey) {
          return actual.some(function(actualKey) {
            if (isDeep) {
              return _.eql(expectedKey, actualKey);
            } else {
              return expectedKey === actualKey;
            }
          });
        });
      }
  
      // Has all
      if (all) {
        ok = expected.every(function(expectedKey) {
          return actual.some(function(actualKey) {
            if (isDeep) {
              return _.eql(expectedKey, actualKey);
            } else {
              return expectedKey === actualKey;
            }
          });
        });
  
        if (!flag(this, 'contains')) {
          ok = ok && keys.length == actual.length;
        }
      }
  
      // Key string
      if (len > 1) {
        keys = keys.map(function(key) {
          return _.inspect(key);
        });
        var last = keys.pop();
        if (all) {
          str = keys.join(', ') + ', and ' + last;
        }
        if (any) {
          str = keys.join(', ') + ', or ' + last;
        }
      } else {
        str = _.inspect(keys[0]);
      }
  
      // Form
      str = (len > 1 ? 'keys ' : 'key ') + str;
  
      // Have / include
      str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
  
      // Assertion
      this.assert(
          ok
        , 'expected #{this} to ' + deepStr + str
        , 'expected #{this} to not ' + deepStr + str
        , expected.slice(0).sort(_.compareByInspect)
        , actual.sort(_.compareByInspect)
        , true
      );
    }
  
    Assertion.addMethod('keys', assertKeys);
    Assertion.addMethod('key', assertKeys);
  
    /**
     * ### .throw([errorLike], [errMsgMatcher], [msg])
     *
     * When no arguments are provided, `.throw` invokes the target function and
     * asserts that an error is thrown.
     * 
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw();
     *
     * When one argument is provided, and it's an error constructor, `.throw`
     * invokes the target function and asserts that an error is thrown that's an
     * instance of that error constructor.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw(TypeError);
     *
     * When one argument is provided, and it's an error instance, `.throw` invokes
     * the target function and asserts that an error is thrown that's strictly
     * (`===`) equal to that error instance.
     *
     *     var err = new TypeError('Illegal salmon!');
     *     var badFn = function () { throw err; };
     *
     *     expect(badFn).to.throw(err);
     *
     * When one argument is provided, and it's a string, `.throw` invokes the
     * target function and asserts that an error is thrown with a message that
     * contains that string.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw('salmon');
     *
     * When one argument is provided, and it's a regular expression, `.throw`
     * invokes the target function and asserts that an error is thrown with a
     * message that matches that regular expression.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw(/salmon/);
     *
     * When two arguments are provided, and the first is an error instance or
     * constructor, and the second is a string or regular expression, `.throw`
     * invokes the function and asserts that an error is thrown that fulfills both
     * conditions as described above.
     *
     *     var err = new TypeError('Illegal salmon!');
     *     var badFn = function () { throw err; };
     *
     *     expect(badFn).to.throw(TypeError, 'salmon');
     *     expect(badFn).to.throw(TypeError, /salmon/);
     *     expect(badFn).to.throw(err, 'salmon');
     *     expect(badFn).to.throw(err, /salmon/);
     *
     * Add `.not` earlier in the chain to negate `.throw`.
     *     
     *     var goodFn = function () {};
     *
     *     expect(goodFn).to.not.throw();
     * 
     * However, it's dangerous to negate `.throw` when providing any arguments.
     * The problem is that it creates uncertain expectations by asserting that the
     * target either doesn't throw an error, or that it throws an error but of a
     * different type than the given type, or that it throws an error of the given
     * type but with a message that doesn't include the given string. It's often
     * best to identify the exact output that's expected, and then write an
     * assertion that only accepts that exact output.
     *
     * When the target isn't expected to throw an error, it's often best to assert
     * exactly that.
     *
     *     var goodFn = function () {};
     *
     *     expect(goodFn).to.not.throw(); // Recommended
     *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
     *
     * When the target is expected to throw an error, it's often best to assert
     * that the error is of its expected type, and has a message that includes an
     * expected string, rather than asserting that it doesn't have one of many
     * unexpected types, and doesn't have a message that includes some string.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
     *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
     *
     * `.throw` changes the target of any assertions that follow in the chain to
     * be the error object that's thrown.
     *
     *     var err = new TypeError('Illegal salmon!');
     *     err.code = 42;
     *     var badFn = function () { throw err; };
     *
     *     expect(badFn).to.throw(TypeError).with.property('code', 42);
     *
     * `.throw` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`. When not providing two arguments, always use
     * the second form.
     *
     *     var goodFn = function () {};
     *
     *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
     *     expect(goodFn, 'nooo why fail??').to.throw();
     *
     * Due to limitations in ES5, `.throw` may not always work as expected when
     * using a transpiler such as Babel or TypeScript. In particular, it may
     * produce unexpected results when subclassing the built-in `Error` object and
     * then passing the subclassed constructor to `.throw`. See your transpiler's
     * docs for details:
     *
     * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
     * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
     *
     * Beware of some common mistakes when using the `throw` assertion. One common
     * mistake is to accidentally invoke the function yourself instead of letting
     * the `throw` assertion invoke the function for you. For example, when
     * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
     * the target for the assertion.
     *
     *     expect(fn).to.throw();     // Good! Tests `fn` as desired
     *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
     *
     * If you need to assert that your function `fn` throws when passed certain
     * arguments, then wrap a call to `fn` inside of another function.
     *
     *     expect(function () { fn(42); }).to.throw();  // Function expression
     *     expect(() => fn(42)).to.throw();             // ES6 arrow function
     *
     * Another common mistake is to provide an object method (or any stand-alone
     * function that relies on `this`) as the target of the assertion. Doing so is
     * problematic because the `this` context will be lost when the function is
     * invoked by `.throw`; there's no way for it to know what `this` is supposed
     * to be. There are two ways around this problem. One solution is to wrap the
     * method or function call inside of another function. Another solution is to
     * use `bind`.
     *
     *     expect(function () { cat.meow(); }).to.throw();  // Function expression
     *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
     *     expect(cat.meow.bind(cat)).to.throw();           // Bind
     *
     * Finally, it's worth mentioning that it's a best practice in JavaScript to
     * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
     * `TypeError`, and user-defined objects that extend `Error`. No other type of
     * value will generate a stack trace when initialized. With that said, the
     * `throw` assertion does technically support any type of value being thrown,
     * not just `Error` and its derivatives.
     *
     * The aliases `.throws` and `.Throw` can be used interchangeably with
     * `.throw`.
     *
     * @name throw
     * @alias throws
     * @alias Throw
     * @param {Error|ErrorConstructor} errorLike
     * @param {String|RegExp} errMsgMatcher error message
     * @param {String} msg _optional_
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @returns error for chaining (null if no error)
     * @namespace BDD
     * @api public
     */
  
    function assertThrows (errorLike, errMsgMatcher, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , ssfi = flag(this, 'ssfi')
        , flagMsg = flag(this, 'message')
        , negate = flag(this, 'negate') || false;
      new Assertion(obj, flagMsg, ssfi, true).is.a('function');
  
      if (errorLike instanceof RegExp || typeof errorLike === 'string') {
        errMsgMatcher = errorLike;
        errorLike = null;
      }
  
      var caughtErr;
      try {
        obj();
      } catch (err) {
        caughtErr = err;
      }
  
      // If we have the negate flag enabled and at least one valid argument it means we do expect an error
      // but we want it to match a given set of criteria
      var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
  
      // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
      // See Issue #551 and PR #683@GitHub
      var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
      var errorLikeFail = false;
      var errMsgMatcherFail = false;
  
      // Checking if error was thrown
      if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
        // We need this to display results correctly according to their types
        var errorLikeString = 'an error';
        if (errorLike instanceof Error) {
          errorLikeString = '#{exp}';
        } else if (errorLike) {
          errorLikeString = _.checkError.getConstructorName(errorLike);
        }
  
        this.assert(
            caughtErr
          , 'expected #{this} to throw ' + errorLikeString
          , 'expected #{this} to not throw an error but #{act} was thrown'
          , errorLike && errorLike.toString()
          , (caughtErr instanceof Error ?
              caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&
                                      _.checkError.getConstructorName(caughtErr)))
        );
      }
  
      if (errorLike && caughtErr) {
        // We should compare instances only if `errorLike` is an instance of `Error`
        if (errorLike instanceof Error) {
          var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
  
          if (isCompatibleInstance === negate) {
            // These checks were created to ensure we won't fail too soon when we've got both args and a negate
            // See Issue #551 and PR #683@GitHub
            if (everyArgIsDefined && negate) {
              errorLikeFail = true;
            } else {
              this.assert(
                  negate
                , 'expected #{this} to throw #{exp} but #{act} was thrown'
                , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')
                , errorLike.toString()
                , caughtErr.toString()
              );
            }
          }
        }
  
        var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
        if (isCompatibleConstructor === negate) {
          if (everyArgIsDefined && negate) {
              errorLikeFail = true;
          } else {
            this.assert(
                negate
              , 'expected #{this} to throw #{exp} but #{act} was thrown'
              , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
              , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
              , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
            );
          }
        }
      }
  
      if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
        // Here we check compatible messages
        var placeholder = 'including';
        if (errMsgMatcher instanceof RegExp) {
          placeholder = 'matching'
        }
  
        var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
        if (isCompatibleMessage === negate) {
          if (everyArgIsDefined && negate) {
              errMsgMatcherFail = true;
          } else {
            this.assert(
              negate
              , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'
              , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'
              ,  errMsgMatcher
              ,  _.checkError.getMessage(caughtErr)
            );
          }
        }
      }
  
      // If both assertions failed and both should've matched we throw an error
      if (errorLikeFail && errMsgMatcherFail) {
        this.assert(
          negate
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')
          , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))
          , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))
        );
      }
  
      flag(this, 'object', caughtErr);
    };
  
    Assertion.addMethod('throw', assertThrows);
    Assertion.addMethod('throws', assertThrows);
    Assertion.addMethod('Throw', assertThrows);
  
    /**
     * ### .respondTo(method[, msg])
     *
     * When the target is a non-function object, `.respondTo` asserts that the
     * target has a method with the given name `method`. The method can be own or
     * inherited, and it can be enumerable or non-enumerable.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *
     *     expect(new Cat()).to.respondTo('meow');
     *
     * When the target is a function, `.respondTo` asserts that the target's
     * `prototype` property has a method with the given name `method`. Again, the
     * method can be own or inherited, and it can be enumerable or non-enumerable.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *
     *     expect(Cat).to.respondTo('meow');
     *
     * Add `.itself` earlier in the chain to force `.respondTo` to treat the
     * target as a non-function object, even if it's a function. Thus, it asserts
     * that the target has a method with the given name `method`, rather than
     * asserting that the target's `prototype` property has a method with the
     * given name `method`.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *     Cat.hiss = function () {};
     *
     *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
     *
     * When not adding `.itself`, it's important to check the target's type before
     * using `.respondTo`. See the `.a` doc for info on checking a target's type.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *
     *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
     *
     * Add `.not` earlier in the chain to negate `.respondTo`.
     *
     *     function Dog () {}
     *     Dog.prototype.bark = function () {};
     *
     *     expect(new Dog()).to.not.respondTo('meow');
     *
     * `.respondTo` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect({}).to.respondTo('meow', 'nooo why fail??');
     *     expect({}, 'nooo why fail??').to.respondTo('meow');
     *
     * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
     *
     * @name respondTo
     * @alias respondsTo
     * @param {String} method
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function respondTo (method, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , itself = flag(this, 'itself')
        , context = ('function' === typeof obj && !itself)
          ? obj.prototype[method]
          : obj[method];
  
      this.assert(
          'function' === typeof context
        , 'expected #{this} to respond to ' + _.inspect(method)
        , 'expected #{this} to not respond to ' + _.inspect(method)
      );
    }
  
    Assertion.addMethod('respondTo', respondTo);
    Assertion.addMethod('respondsTo', respondTo);
  
    /**
     * ### .itself
     *
     * Forces all `.respondTo` assertions that follow in the chain to behave as if
     * the target is a non-function object, even if it's a function. Thus, it
     * causes `.respondTo` to assert that the target has a method with the given
     * name, rather than asserting that the target's `prototype` property has a
     * method with the given name.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *     Cat.hiss = function () {};
     *
     *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
     *
     * @name itself
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('itself', function () {
      flag(this, 'itself', true);
    });
  
    /**
     * ### .satisfy(matcher[, msg])
     *
     * Invokes the given `matcher` function with the target being passed as the
     * first argument, and asserts that the value returned is truthy.
     *
     *     expect(1).to.satisfy(function(num) {
     *       return num > 0; 
     *     });
     *
     * Add `.not` earlier in the chain to negate `.satisfy`.
     *
     *     expect(1).to.not.satisfy(function(num) {
     *       return num > 2;
     *     });
     *
     * `.satisfy` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(1).to.satisfy(function(num) {
     *       return num > 2;
     *     }, 'nooo why fail??');
     *
     *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
     *       return num > 2;
     *     });
     *
     * The alias `.satisfies` can be used interchangeably with `.satisfy`.
     *
     * @name satisfy
     * @alias satisfies
     * @param {Function} matcher
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function satisfy (matcher, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object');
      var result = matcher(obj);
      this.assert(
          result
        , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
        , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
        , flag(this, 'negate') ? false : true
        , result
      );
    }
  
    Assertion.addMethod('satisfy', satisfy);
    Assertion.addMethod('satisfies', satisfy);
  
    /**
     * ### .closeTo(expected, delta[, msg])
     *
     * Asserts that the target is a number that's within a given +/- `delta` range
     * of the given number `expected`. However, it's often best to assert that the
     * target is equal to its expected value.
     *
     *     // Recommended
     *     expect(1.5).to.equal(1.5);
     *
     *     // Not recommended
     *     expect(1.5).to.be.closeTo(1, 0.5);
     *     expect(1.5).to.be.closeTo(2, 0.5);
     *     expect(1.5).to.be.closeTo(1, 1);
     *
     * Add `.not` earlier in the chain to negate `.closeTo`.
     *
     *     expect(1.5).to.equal(1.5); // Recommended
     *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
     *
     * `.closeTo` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
     *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
     *
     * The alias `.approximately` can be used interchangeably with `.closeTo`.
     *
     * @name closeTo
     * @alias approximately
     * @param {Number} expected
     * @param {Number} delta
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function closeTo(expected, delta, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
  
      new Assertion(obj, flagMsg, ssfi, true).is.a('number');
      if (typeof expected !== 'number' || typeof delta !== 'number') {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(
            flagMsg + 'the arguments to closeTo or approximately must be numbers',
            undefined,
            ssfi
        );
      }
  
      this.assert(
          Math.abs(obj - expected) <= delta
        , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
        , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
      );
    }
  
    Assertion.addMethod('closeTo', closeTo);
    Assertion.addMethod('approximately', closeTo);
  
    // Note: Duplicates are ignored if testing for inclusion instead of sameness.
    function isSubsetOf(subset, superset, cmp, contains, ordered) {
      if (!contains) {
        if (subset.length !== superset.length) return false;
        superset = superset.slice();
      }
  
      return subset.every(function(elem, idx) {
        if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
  
        if (!cmp) {
          var matchIdx = superset.indexOf(elem);
          if (matchIdx === -1) return false;
  
          // Remove match from superset so not counted twice if duplicate in subset.
          if (!contains) superset.splice(matchIdx, 1);
          return true;
        }
  
        return superset.some(function(elem2, matchIdx) {
          if (!cmp(elem, elem2)) return false;
  
          // Remove match from superset so not counted twice if duplicate in subset.
          if (!contains) superset.splice(matchIdx, 1);
          return true;
        });
      });
    }
  
    /**
     * ### .members(set[, msg])
     *
     * Asserts that the target array has the same members as the given array
     * `set`.
     *
     *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
     *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
     *
     * By default, members are compared using strict (`===`) equality. Add `.deep`
     * earlier in the chain to use deep equality instead. See the `deep-eql`
     * project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target array deeply (but not strictly) has member `{a: 1}`
     *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
     *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
     *
     * By default, order doesn't matter. Add `.ordered` earlier in the chain to
     * require that members appear in the same order.
     *
     *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
     *     expect([1, 2, 3]).to.have.members([2, 1, 3])
     *       .but.not.ordered.members([2, 1, 3]);
     *
     * By default, both arrays must be the same size. Add `.include` earlier in
     * the chain to require that the target's members be a superset of the
     * expected members. Note that duplicates are ignored in the subset when
     * `.include` is added.
     *
     *     // Target array is a superset of [1, 2] but not identical
     *     expect([1, 2, 3]).to.include.members([1, 2]);
     *     expect([1, 2, 3]).to.not.have.members([1, 2]);
     *
     *     // Duplicates in the subset are ignored
     *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
     *
     * `.deep`, `.ordered`, and `.include` can all be combined. However, if
     * `.include` and `.ordered` are combined, the ordering begins at the start of
     * both arrays.
     *
     *     expect([{a: 1}, {b: 2}, {c: 3}])
     *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
     *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
     *
     * Add `.not` earlier in the chain to negate `.members`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the target array doesn't have all of the same members as
     * the given array `set` but may or may not have some of them. It's often best
     * to identify the exact output that's expected, and then write an assertion
     * that only accepts that exact output.
     *
     *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
     *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
     *
     * `.members` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
     *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
     *
     * @name members
     * @param {Array} set
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    Assertion.addMethod('members', function (subset, msg) {
      if (msg) flag(this, 'message', msg);
      var obj = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
  
      new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
      new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
  
      var contains = flag(this, 'contains');
      var ordered = flag(this, 'ordered');
  
      var subject, failMsg, failNegateMsg, lengthCheck;
  
      if (contains) {
        subject = ordered ? 'an ordered superset' : 'a superset';
        failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
        failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
      } else {
        subject = ordered ? 'ordered members' : 'members';
        failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
        failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
      }
  
      var cmp = flag(this, 'deep') ? _.eql : undefined;
  
      this.assert(
          isSubsetOf(subset, obj, cmp, contains, ordered)
        , failMsg
        , failNegateMsg
        , subset
        , obj
        , true
      );
    });
  
    /**
     * ### .oneOf(list[, msg])
     *
     * Asserts that the target is a member of the given array `list`. However,
     * it's often best to assert that the target is equal to its expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
     *
     * Comparisons are performed using strict (`===`) equality.
     *
     * Add `.not` earlier in the chain to negate `.oneOf`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
     *
     * `.oneOf` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
     *
     * @name oneOf
     * @param {Array<*>} list
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function oneOf (list, msg) {
      if (msg) flag(this, 'message', msg);
      var expected = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
      new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
  
      this.assert(
          list.indexOf(expected) > -1
        , 'expected #{this} to be one of #{exp}'
        , 'expected #{this} to not be one of #{exp}'
        , list
        , expected
      );
    }
  
    Assertion.addMethod('oneOf', oneOf);
  
  
    /**
     * ### .change(subject[, prop[, msg]])
     *
     * When one argument is provided, `.change` asserts that the given function
     * `subject` returns a different value when it's invoked before the target
     * function compared to when it's invoked afterward. However, it's often best
     * to assert that `subject` is equal to its expected value.
     *
     *     var dots = ''
     *       , addDot = function () { dots += '.'; }
     *       , getDots = function () { return dots; };
     *
     *     // Recommended
     *     expect(getDots()).to.equal('');
     *     addDot();
     *     expect(getDots()).to.equal('.');
     *
     *     // Not recommended
     *     expect(addDot).to.change(getDots);
     *
     * When two arguments are provided, `.change` asserts that the value of the
     * given object `subject`'s `prop` property is different before invoking the
     * target function compared to afterward.
     *
     *     var myObj = {dots: ''}
     *       , addDot = function () { myObj.dots += '.'; };
     *
     *     // Recommended
     *     expect(myObj).to.have.property('dots', '');
     *     addDot();
     *     expect(myObj).to.have.property('dots', '.');
     *
     *     // Not recommended
     *     expect(addDot).to.change(myObj, 'dots');
     *
     * Strict (`===`) equality is used to compare before and after values.
     *
     * Add `.not` earlier in the chain to negate `.change`.
     *
     *     var dots = ''
     *       , noop = function () {}
     *       , getDots = function () { return dots; };
     *
     *     expect(noop).to.not.change(getDots);
     *
     *     var myObj = {dots: ''}
     *       , noop = function () {};
     *
     *     expect(noop).to.not.change(myObj, 'dots');
     *
     * `.change` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing two arguments, always
     * use the second form.
     *
     *     var myObj = {dots: ''}
     *       , addDot = function () { myObj.dots += '.'; };
     *
     *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
     *
     *     var dots = ''
     *       , addDot = function () { dots += '.'; }
     *       , getDots = function () { return dots; };
     *
     *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
     *
     * `.change` also causes all `.by` assertions that follow in the chain to
     * assert how much a numeric subject was increased or decreased by. However,
     * it's dangerous to use `.change.by`. The problem is that it creates
     * uncertain expectations by asserting that the subject either increases by
     * the given delta, or that it decreases by the given delta. It's often best
     * to identify the exact output that's expected, and then write an assertion
     * that only accepts that exact output.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; }
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     * The alias `.changes` can be used interchangeably with `.change`.
     *
     * @name change
     * @alias changes
     * @param {String} subject
     * @param {String} prop name _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertChanges (subject, prop, msg) {
      if (msg) flag(this, 'message', msg);
      var fn = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
      new Assertion(fn, flagMsg, ssfi, true).is.a('function');
  
      var initial;
      if (!prop) {
        new Assertion(subject, flagMsg, ssfi, true).is.a('function');
        initial = subject();
      } else {
        new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
        initial = subject[prop];
      }
  
      fn();
  
      var final = prop === undefined || prop === null ? subject() : subject[prop];
      var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
  
      // This gets flagged because of the .by(delta) assertion
      flag(this, 'deltaMsgObj', msgObj);
      flag(this, 'initialDeltaValue', initial);
      flag(this, 'finalDeltaValue', final);
      flag(this, 'deltaBehavior', 'change');
      flag(this, 'realDelta', final !== initial);
  
      this.assert(
        initial !== final
        , 'expected ' + msgObj + ' to change'
        , 'expected ' + msgObj + ' to not change'
      );
    }
  
    Assertion.addMethod('change', assertChanges);
    Assertion.addMethod('changes', assertChanges);
  
    /**
     * ### .increase(subject[, prop[, msg]])
     *
     * When one argument is provided, `.increase` asserts that the given function
     * `subject` returns a greater number when it's invoked after invoking the
     * target function compared to when it's invoked beforehand. `.increase` also
     * causes all `.by` assertions that follow in the chain to assert how much
     * greater of a number is returned. It's often best to assert that the return
     * value increased by the expected amount, rather than asserting it increased
     * by any amount.
     *
     *     var val = 1
     *       , addTwo = function () { val += 2; }
     *       , getVal = function () { return val; };
     *
     *     expect(addTwo).to.increase(getVal).by(2); // Recommended
     *     expect(addTwo).to.increase(getVal); // Not recommended
     *
     * When two arguments are provided, `.increase` asserts that the value of the
     * given object `subject`'s `prop` property is greater after invoking the
     * target function compared to beforehand.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.increase`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the subject either decreases, or that it stays the same.
     * It's often best to identify the exact output that's expected, and then
     * write an assertion that only accepts that exact output.
     *
     * When the subject is expected to decrease, it's often best to assert that it
     * decreased by the expected amount.
     *
     *     var myObj = {val: 1}
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
     * 
     * When the subject is expected to stay the same, it's often best to assert
     * exactly that.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.not.change(myObj, 'val'); // Recommended
     *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
     *
     * `.increase` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing two arguments, always
     * use the second form.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
     *
     *     var val = 1
     *       , noop = function () {}
     *       , getVal = function () { return val; };
     *
     *     expect(noop, 'nooo why fail??').to.increase(getVal);
     *
     * The alias `.increases` can be used interchangeably with `.increase`.
     *
     * @name increase
     * @alias increases
     * @param {String|Function} subject
     * @param {String} prop name _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertIncreases (subject, prop, msg) {
      if (msg) flag(this, 'message', msg);
      var fn = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
      new Assertion(fn, flagMsg, ssfi, true).is.a('function');
  
      var initial;
      if (!prop) {
        new Assertion(subject, flagMsg, ssfi, true).is.a('function');
        initial = subject();
      } else {
        new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
        initial = subject[prop];
      }
  
      // Make sure that the target is a number
      new Assertion(initial, flagMsg, ssfi, true).is.a('number');
  
      fn();
  
      var final = prop === undefined || prop === null ? subject() : subject[prop];
      var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
  
      flag(this, 'deltaMsgObj', msgObj);
      flag(this, 'initialDeltaValue', initial);
      flag(this, 'finalDeltaValue', final);
      flag(this, 'deltaBehavior', 'increase');
      flag(this, 'realDelta', final - initial);
  
      this.assert(
        final - initial > 0
        , 'expected ' + msgObj + ' to increase'
        , 'expected ' + msgObj + ' to not increase'
      );
    }
  
    Assertion.addMethod('increase', assertIncreases);
    Assertion.addMethod('increases', assertIncreases);
  
    /**
     * ### .decrease(subject[, prop[, msg]])
     *
     * When one argument is provided, `.decrease` asserts that the given function
     * `subject` returns a lesser number when it's invoked after invoking the
     * target function compared to when it's invoked beforehand. `.decrease` also
     * causes all `.by` assertions that follow in the chain to assert how much
     * lesser of a number is returned. It's often best to assert that the return
     * value decreased by the expected amount, rather than asserting it decreased
     * by any amount.
     *
     *     var val = 1
     *       , subtractTwo = function () { val -= 2; }
     *       , getVal = function () { return val; };
     *
     *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
     *     expect(subtractTwo).to.decrease(getVal); // Not recommended
     *
     * When two arguments are provided, `.decrease` asserts that the value of the
     * given object `subject`'s `prop` property is lesser after invoking the
     * target function compared to beforehand. 
     *
     *     var myObj = {val: 1}
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.decrease`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the subject either increases, or that it stays the same.
     * It's often best to identify the exact output that's expected, and then
     * write an assertion that only accepts that exact output.
     *
     * When the subject is expected to increase, it's often best to assert that it
     * increased by the expected amount.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
     * 
     * When the subject is expected to stay the same, it's often best to assert
     * exactly that.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.not.change(myObj, 'val'); // Recommended
     *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
     *
     * `.decrease` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing two arguments, always
     * use the second form.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
     *
     *     var val = 1
     *       , noop = function () {}
     *       , getVal = function () { return val; };
     *
     *     expect(noop, 'nooo why fail??').to.decrease(getVal);
     *
     * The alias `.decreases` can be used interchangeably with `.decrease`.
     *
     * @name decrease
     * @alias decreases
     * @param {String|Function} subject
     * @param {String} prop name _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertDecreases (subject, prop, msg) {
      if (msg) flag(this, 'message', msg);
      var fn = flag(this, 'object')
        , flagMsg = flag(this, 'message')
        , ssfi = flag(this, 'ssfi');
      new Assertion(fn, flagMsg, ssfi, true).is.a('function');
  
      var initial;
      if (!prop) {
        new Assertion(subject, flagMsg, ssfi, true).is.a('function');
        initial = subject();
      } else {
        new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
        initial = subject[prop];
      }
  
      // Make sure that the target is a number
      new Assertion(initial, flagMsg, ssfi, true).is.a('number');
  
      fn();
  
      var final = prop === undefined || prop === null ? subject() : subject[prop];
      var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
  
      flag(this, 'deltaMsgObj', msgObj);
      flag(this, 'initialDeltaValue', initial);
      flag(this, 'finalDeltaValue', final);
      flag(this, 'deltaBehavior', 'decrease');
      flag(this, 'realDelta', initial - final);
  
      this.assert(
        final - initial < 0
        , 'expected ' + msgObj + ' to decrease'
        , 'expected ' + msgObj + ' to not decrease'
      );
    }
  
    Assertion.addMethod('decrease', assertDecreases);
    Assertion.addMethod('decreases', assertDecreases);
  
    /**
     * ### .by(delta[, msg])
     *
     * When following an `.increase` assertion in the chain, `.by` asserts that
     * the subject of the `.increase` assertion increased by the given `delta`.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2);
     *
     * When following a `.decrease` assertion in the chain, `.by` asserts that the
     * subject of the `.decrease` assertion decreased by the given `delta`.
     *
     *     var myObj = {val: 1}
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
     *
     * When following a `.change` assertion in the chain, `.by` asserts that the
     * subject of the `.change` assertion either increased or decreased by the
     * given `delta`. However, it's dangerous to use `.change.by`. The problem is
     * that it creates uncertain expectations. It's often best to identify the
     * exact output that's expected, and then write an assertion that only accepts
     * that exact output.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; }
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.by`. However, it's often best
     * to assert that the subject changed by its expected delta, rather than
     * asserting that it didn't change by one of countless unexpected deltas.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     // Recommended
     *     expect(addTwo).to.increase(myObj, 'val').by(2);
     *
     *     // Not recommended
     *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
     *
     * `.by` accepts an optional `msg` argument which is a custom error message to
     * show when the assertion fails. The message can also be given as the second
     * argument to `expect`.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
     *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
     *
     * @name by
     * @param {Number} delta
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
  
    function assertDelta(delta, msg) {
      if (msg) flag(this, 'message', msg);
  
      var msgObj = flag(this, 'deltaMsgObj');
      var initial = flag(this, 'initialDeltaValue');
      var final = flag(this, 'finalDeltaValue');
      var behavior = flag(this, 'deltaBehavior');
      var realDelta = flag(this, 'realDelta');
  
      var expression;
      if (behavior === 'change') {
        expression = Math.abs(final - initial) === Math.abs(delta);
      } else {
        expression = realDelta === Math.abs(delta);
      }
  
      this.assert(
        expression
        , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta
        , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta
      );
    }
  
    Assertion.addMethod('by', assertDelta);
  
    /**
     * ### .extensible
     *
     * Asserts that the target is extensible, which means that new properties can
     * be added to it. Primitives are never extensible.
     *
     *     expect({a: 1}).to.be.extensible;
     *
     * Add `.not` earlier in the chain to negate `.extensible`.
     *
     *     var nonExtensibleObject = Object.preventExtensions({})
     *       , sealedObject = Object.seal({})
     *       , frozenObject = Object.freeze({});
     *
     *     expect(nonExtensibleObject).to.not.be.extensible;
     *     expect(sealedObject).to.not.be.extensible;
     *     expect(frozenObject).to.not.be.extensible;
     *     expect(1).to.not.be.extensible;
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(1, 'nooo why fail??').to.be.extensible;
     *
     * @name extensible
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('extensible', function() {
      var obj = flag(this, 'object');
  
      // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
      // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
      // The following provides ES6 behavior for ES5 environments.
  
      var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
  
      this.assert(
        isExtensible
        , 'expected #{this} to be extensible'
        , 'expected #{this} to not be extensible'
      );
    });
  
    /**
     * ### .sealed
     *
     * Asserts that the target is sealed, which means that new properties can't be
     * added to it, and its existing properties can't be reconfigured or deleted.
     * However, it's possible that its existing properties can still be reassigned
     * to different values. Primitives are always sealed.
     *
     *     var sealedObject = Object.seal({});
     *     var frozenObject = Object.freeze({});
     *
     *     expect(sealedObject).to.be.sealed;
     *     expect(frozenObject).to.be.sealed;
     *     expect(1).to.be.sealed;
     *
     * Add `.not` earlier in the chain to negate `.sealed`.
     *
     *     expect({a: 1}).to.not.be.sealed;
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
     *
     * @name sealed
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('sealed', function() {
      var obj = flag(this, 'object');
  
      // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
      // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
      // The following provides ES6 behavior for ES5 environments.
  
      var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
  
      this.assert(
        isSealed
        , 'expected #{this} to be sealed'
        , 'expected #{this} to not be sealed'
      );
    });
  
    /**
     * ### .frozen
     *
     * Asserts that the target is frozen, which means that new properties can't be
     * added to it, and its existing properties can't be reassigned to different
     * values, reconfigured, or deleted. Primitives are always frozen.
     *
     *     var frozenObject = Object.freeze({});
     *
     *     expect(frozenObject).to.be.frozen;
     *     expect(1).to.be.frozen;
     *
     * Add `.not` earlier in the chain to negate `.frozen`.
     *
     *     expect({a: 1}).to.not.be.frozen;
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
     *
     * @name frozen
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('frozen', function() {
      var obj = flag(this, 'object');
  
      // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
      // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
      // The following provides ES6 behavior for ES5 environments.
  
      var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
  
      this.assert(
        isFrozen
        , 'expected #{this} to be frozen'
        , 'expected #{this} to not be frozen'
      );
    });
  
    /**
     * ### .finite
     *
     * Asserts that the target is a number, and isn't `NaN` or positive/negative
     * `Infinity`.
     *
     *     expect(1).to.be.finite;
     *
     * Add `.not` earlier in the chain to negate `.finite`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the subject either isn't a number, or that it's `NaN`, or
     * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
     * best to identify the exact output that's expected, and then write an
     * assertion that only accepts that exact output.
     *
     * When the target isn't expected to be a number, it's often best to assert
     * that it's the expected type, rather than asserting that it isn't one of
     * many unexpected types.
     *
     *     expect('foo').to.be.a('string'); // Recommended
     *     expect('foo').to.not.be.finite; // Not recommended
     *
     * When the target is expected to be `NaN`, it's often best to assert exactly
     * that.
     *
     *     expect(NaN).to.be.NaN; // Recommended
     *     expect(NaN).to.not.be.finite; // Not recommended
     *
     * When the target is expected to be positive infinity, it's often best to
     * assert exactly that.
     *
     *     expect(Infinity).to.equal(Infinity); // Recommended
     *     expect(Infinity).to.not.be.finite; // Not recommended
     *
     * When the target is expected to be negative infinity, it's often best to
     * assert exactly that.
     *
     *     expect(-Infinity).to.equal(-Infinity); // Recommended
     *     expect(-Infinity).to.not.be.finite; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect('foo', 'nooo why fail??').to.be.finite;
     *
     * @name finite
     * @namespace BDD
     * @api public
     */
  
    Assertion.addProperty('finite', function(msg) {
      var obj = flag(this, 'object');
  
      this.assert(
          typeof obj === "number" && isFinite(obj)
        , 'expected #{this} to be a finite number'
        , 'expected #{this} to not be a finite number'
      );
    });
  };
  

});

;/*!node_modules/chai/lib/chai/interface/expect.js*/
define('node_modules/chai/lib/chai/interface/expect', function(require, exports, module) {

  /*!
   * chai
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  module.exports = function (chai, util) {
    chai.expect = function (val, message) {
      return new chai.Assertion(val, message);
    };
  
    /**
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */
  
    chai.expect.fail = function (actual, expected, message, operator) {
      message = message || 'expect.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, chai.expect.fail);
    };
  };
  

});

;/*!node_modules/chai/lib/chai/interface/should.js*/
define('node_modules/chai/lib/chai/interface/should', function(require, exports, module) {

  /*!
   * chai
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  module.exports = function (chai, util) {
    var Assertion = chai.Assertion;
  
    function loadShould () {
      // explicitly define this method as function as to have it's name to include as `ssfi`
      function shouldGetter() {
        if (this instanceof String
            || this instanceof Number
            || this instanceof Boolean
            || typeof Symbol === 'function' && this instanceof Symbol) {
          return new Assertion(this.valueOf(), null, shouldGetter);
        }
        return new Assertion(this, null, shouldGetter);
      }
      function shouldSetter(value) {
        // See https://github.com/chaijs/chai/issues/86: this makes
        // `whatever.should = someValue` actually set `someValue`, which is
        // especially useful for `global.should = require('chai').should()`.
        //
        // Note that we have to use [[DefineProperty]] instead of [[Put]]
        // since otherwise we would trigger this very setter!
        Object.defineProperty(this, 'should', {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      }
      // modify Object.prototype to have `should`
      Object.defineProperty(Object.prototype, 'should', {
        set: shouldSetter
        , get: shouldGetter
        , configurable: true
      });
  
      var should = {};
  
      /**
       * ### .fail(actual, expected, [message], [operator])
       *
       * Throw a failure.
       *
       * @name fail
       * @param {Mixed} actual
       * @param {Mixed} expected
       * @param {String} message
       * @param {String} operator
       * @namespace BDD
       * @api public
       */
  
      should.fail = function (actual, expected, message, operator) {
        message = message || 'should.fail()';
        throw new chai.AssertionError(message, {
            actual: actual
          , expected: expected
          , operator: operator
        }, should.fail);
      };
  
      /**
       * ### .equal(actual, expected, [message])
       *
       * Asserts non-strict equality (`==`) of `actual` and `expected`.
       *
       *     should.equal(3, '3', '== coerces values to strings');
       *
       * @name equal
       * @param {Mixed} actual
       * @param {Mixed} expected
       * @param {String} message
       * @namespace Should
       * @api public
       */
  
      should.equal = function (val1, val2, msg) {
        new Assertion(val1, msg).to.equal(val2);
      };
  
      /**
       * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
       *
       * Asserts that `function` will throw an error that is an instance of
       * `constructor`, or alternately that it will throw an error with message
       * matching `regexp`.
       *
       *     should.throw(fn, 'function throws a reference error');
       *     should.throw(fn, /function throws a reference error/);
       *     should.throw(fn, ReferenceError);
       *     should.throw(fn, ReferenceError, 'function throws a reference error');
       *     should.throw(fn, ReferenceError, /function throws a reference error/);
       *
       * @name throw
       * @alias Throw
       * @param {Function} function
       * @param {ErrorConstructor} constructor
       * @param {RegExp} regexp
       * @param {String} message
       * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
       * @namespace Should
       * @api public
       */
  
      should.Throw = function (fn, errt, errs, msg) {
        new Assertion(fn, msg).to.Throw(errt, errs);
      };
  
      /**
       * ### .exist
       *
       * Asserts that the target is neither `null` nor `undefined`.
       *
       *     var foo = 'hi';
       *
       *     should.exist(foo, 'foo exists');
       *
       * @name exist
       * @namespace Should
       * @api public
       */
  
      should.exist = function (val, msg) {
        new Assertion(val, msg).to.exist;
      }
  
      // negation
      should.not = {}
  
      /**
       * ### .not.equal(actual, expected, [message])
       *
       * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
       *
       *     should.not.equal(3, 4, 'these numbers are not equal');
       *
       * @name not.equal
       * @param {Mixed} actual
       * @param {Mixed} expected
       * @param {String} message
       * @namespace Should
       * @api public
       */
  
      should.not.equal = function (val1, val2, msg) {
        new Assertion(val1, msg).to.not.equal(val2);
      };
  
      /**
       * ### .throw(function, [constructor/regexp], [message])
       *
       * Asserts that `function` will _not_ throw an error that is an instance of
       * `constructor`, or alternately that it will not throw an error with message
       * matching `regexp`.
       *
       *     should.not.throw(fn, Error, 'function does not throw');
       *
       * @name not.throw
       * @alias not.Throw
       * @param {Function} function
       * @param {ErrorConstructor} constructor
       * @param {RegExp} regexp
       * @param {String} message
       * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
       * @namespace Should
       * @api public
       */
  
      should.not.Throw = function (fn, errt, errs, msg) {
        new Assertion(fn, msg).to.not.Throw(errt, errs);
      };
  
      /**
       * ### .not.exist
       *
       * Asserts that the target is neither `null` nor `undefined`.
       *
       *     var bar = null;
       *
       *     should.not.exist(bar, 'bar does not exist');
       *
       * @name not.exist
       * @namespace Should
       * @api public
       */
  
      should.not.exist = function (val, msg) {
        new Assertion(val, msg).to.not.exist;
      }
  
      should['throw'] = should['Throw'];
      should.not['throw'] = should.not['Throw'];
  
      return should;
    };
  
    chai.should = loadShould;
    chai.Should = loadShould;
  };
  

});

;/*!node_modules/chai/lib/chai/interface/assert.js*/
define('node_modules/chai/lib/chai/interface/assert', function(require, exports, module) {

  /*!
   * chai
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  
  module.exports = function (chai, util) {
  
    /*!
     * Chai dependencies.
     */
  
    var Assertion = chai.Assertion
      , flag = util.flag;
  
    /*!
     * Module export.
     */
  
    /**
     * ### assert(expression, message)
     *
     * Write your own test expressions.
     *
     *     assert('foo' !== 'bar', 'foo is not bar');
     *     assert(Array.isArray([]), 'empty arrays are arrays');
     *
     * @param {Mixed} expression to test for truthiness
     * @param {String} message to display on error
     * @name assert
     * @namespace Assert
     * @api public
     */
  
    var assert = chai.assert = function (express, errmsg) {
      var test = new Assertion(null, null, chai.assert, true);
      test.assert(
          express
        , errmsg
        , '[ negation message unavailable ]'
      );
    };
  
    /**
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure. Node.js `assert` module-compatible.
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace Assert
     * @api public
     */
  
    assert.fail = function (actual, expected, message, operator) {
      message = message || 'assert.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, assert.fail);
    };
  
    /**
     * ### .isOk(object, [message])
     *
     * Asserts that `object` is truthy.
     *
     *     assert.isOk('everything', 'everything is ok');
     *     assert.isOk(false, 'this will fail');
     *
     * @name isOk
     * @alias ok
     * @param {Mixed} object to test
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isOk = function (val, msg) {
      new Assertion(val, msg, assert.isOk, true).is.ok;
    };
  
    /**
     * ### .isNotOk(object, [message])
     *
     * Asserts that `object` is falsy.
     *
     *     assert.isNotOk('everything', 'this will fail');
     *     assert.isNotOk(false, 'this will pass');
     *
     * @name isNotOk
     * @alias notOk
     * @param {Mixed} object to test
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotOk = function (val, msg) {
      new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
    };
  
    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     assert.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.equal = function (act, exp, msg) {
      var test = new Assertion(act, msg, assert.equal, true);
  
      test.assert(
          exp == flag(test, 'object')
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{act}'
        , exp
        , act
        , true
      );
    };
  
    /**
     * ### .notEqual(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     assert.notEqual(3, 4, 'these numbers are not equal');
     *
     * @name notEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notEqual = function (act, exp, msg) {
      var test = new Assertion(act, msg, assert.notEqual, true);
  
      test.assert(
          exp != flag(test, 'object')
        , 'expected #{this} to not equal #{exp}'
        , 'expected #{this} to equal #{act}'
        , exp
        , act
        , true
      );
    };
  
    /**
     * ### .strictEqual(actual, expected, [message])
     *
     * Asserts strict equality (`===`) of `actual` and `expected`.
     *
     *     assert.strictEqual(true, true, 'these booleans are strictly equal');
     *
     * @name strictEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.strictEqual = function (act, exp, msg) {
      new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
    };
  
    /**
     * ### .notStrictEqual(actual, expected, [message])
     *
     * Asserts strict inequality (`!==`) of `actual` and `expected`.
     *
     *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
     *
     * @name notStrictEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notStrictEqual = function (act, exp, msg) {
      new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
    };
  
    /**
     * ### .deepEqual(actual, expected, [message])
     *
     * Asserts that `actual` is deeply equal to `expected`.
     *
     *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
     *
     * @name deepEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @alias deepStrictEqual
     * @namespace Assert
     * @api public
     */
  
    assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
      new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
    };
  
    /**
     * ### .notDeepEqual(actual, expected, [message])
     *
     * Assert that `actual` is not deeply equal to `expected`.
     *
     *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
     *
     * @name notDeepEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notDeepEqual = function (act, exp, msg) {
      new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
    };
  
     /**
     * ### .isAbove(valueToCheck, valueToBeAbove, [message])
     *
     * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
     *
     *     assert.isAbove(5, 2, '5 is strictly greater than 2');
     *
     * @name isAbove
     * @param {Mixed} valueToCheck
     * @param {Mixed} valueToBeAbove
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isAbove = function (val, abv, msg) {
      new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
    };
  
     /**
     * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
     *
     * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
     *
     *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
     *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
     *
     * @name isAtLeast
     * @param {Mixed} valueToCheck
     * @param {Mixed} valueToBeAtLeast
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isAtLeast = function (val, atlst, msg) {
      new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
    };
  
     /**
     * ### .isBelow(valueToCheck, valueToBeBelow, [message])
     *
     * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
     *
     *     assert.isBelow(3, 6, '3 is strictly less than 6');
     *
     * @name isBelow
     * @param {Mixed} valueToCheck
     * @param {Mixed} valueToBeBelow
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isBelow = function (val, blw, msg) {
      new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
    };
  
     /**
     * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
     *
     * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
     *
     *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
     *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
     *
     * @name isAtMost
     * @param {Mixed} valueToCheck
     * @param {Mixed} valueToBeAtMost
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isAtMost = function (val, atmst, msg) {
      new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
    };
  
    /**
     * ### .isTrue(value, [message])
     *
     * Asserts that `value` is true.
     *
     *     var teaServed = true;
     *     assert.isTrue(teaServed, 'the tea has been served');
     *
     * @name isTrue
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isTrue = function (val, msg) {
      new Assertion(val, msg, assert.isTrue, true).is['true'];
    };
  
    /**
     * ### .isNotTrue(value, [message])
     *
     * Asserts that `value` is not true.
     *
     *     var tea = 'tasty chai';
     *     assert.isNotTrue(tea, 'great, time for tea!');
     *
     * @name isNotTrue
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotTrue = function (val, msg) {
      new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
    };
  
    /**
     * ### .isFalse(value, [message])
     *
     * Asserts that `value` is false.
     *
     *     var teaServed = false;
     *     assert.isFalse(teaServed, 'no tea yet? hmm...');
     *
     * @name isFalse
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isFalse = function (val, msg) {
      new Assertion(val, msg, assert.isFalse, true).is['false'];
    };
  
    /**
     * ### .isNotFalse(value, [message])
     *
     * Asserts that `value` is not false.
     *
     *     var tea = 'tasty chai';
     *     assert.isNotFalse(tea, 'great, time for tea!');
     *
     * @name isNotFalse
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotFalse = function (val, msg) {
      new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
    };
  
    /**
     * ### .isNull(value, [message])
     *
     * Asserts that `value` is null.
     *
     *     assert.isNull(err, 'there was no error');
     *
     * @name isNull
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNull = function (val, msg) {
      new Assertion(val, msg, assert.isNull, true).to.equal(null);
    };
  
    /**
     * ### .isNotNull(value, [message])
     *
     * Asserts that `value` is not null.
     *
     *     var tea = 'tasty chai';
     *     assert.isNotNull(tea, 'great, time for tea!');
     *
     * @name isNotNull
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotNull = function (val, msg) {
      new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
    };
  
    /**
     * ### .isNaN
     *
     * Asserts that value is NaN.
     *
     *     assert.isNaN(NaN, 'NaN is NaN');
     *
     * @name isNaN
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNaN = function (val, msg) {
      new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
    };
  
    /**
     * ### .isNotNaN
     *
     * Asserts that value is not NaN.
     *
     *     assert.isNotNaN(4, '4 is not NaN');
     *
     * @name isNotNaN
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotNaN = function (val, msg) {
      new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
    };
  
    /**
     * ### .exists
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
     *
     * @name exists
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.exists = function (val, msg) {
      new Assertion(val, msg, assert.exists, true).to.exist;
    };
  
    /**
     * ### .notExists
     *
     * Asserts that the target is either `null` or `undefined`.
     *
     *     var bar = null
     *       , baz;
     *
     *     assert.notExists(bar);
     *     assert.notExists(baz, 'baz is either null or undefined');
     *
     * @name notExists
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notExists = function (val, msg) {
      new Assertion(val, msg, assert.notExists, true).to.not.exist;
    };
  
    /**
     * ### .isUndefined(value, [message])
     *
     * Asserts that `value` is `undefined`.
     *
     *     var tea;
     *     assert.isUndefined(tea, 'no tea defined');
     *
     * @name isUndefined
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isUndefined = function (val, msg) {
      new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
    };
  
    /**
     * ### .isDefined(value, [message])
     *
     * Asserts that `value` is not `undefined`.
     *
     *     var tea = 'cup of chai';
     *     assert.isDefined(tea, 'tea has been defined');
     *
     * @name isDefined
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isDefined = function (val, msg) {
      new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
    };
  
    /**
     * ### .isFunction(value, [message])
     *
     * Asserts that `value` is a function.
     *
     *     function serveTea() { return 'cup of tea'; };
     *     assert.isFunction(serveTea, 'great, we can have tea now');
     *
     * @name isFunction
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isFunction = function (val, msg) {
      new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
    };
  
    /**
     * ### .isNotFunction(value, [message])
     *
     * Asserts that `value` is _not_ a function.
     *
     *     var serveTea = [ 'heat', 'pour', 'sip' ];
     *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
     *
     * @name isNotFunction
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotFunction = function (val, msg) {
      new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
    };
  
    /**
     * ### .isObject(value, [message])
     *
     * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
     * _The assertion does not match subclassed objects._
     *
     *     var selection = { name: 'Chai', serve: 'with spices' };
     *     assert.isObject(selection, 'tea selection is an object');
     *
     * @name isObject
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isObject = function (val, msg) {
      new Assertion(val, msg, assert.isObject, true).to.be.a('object');
    };
  
    /**
     * ### .isNotObject(value, [message])
     *
     * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
     *
     *     var selection = 'chai'
     *     assert.isNotObject(selection, 'tea selection is not an object');
     *     assert.isNotObject(null, 'null is not an object');
     *
     * @name isNotObject
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotObject = function (val, msg) {
      new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
    };
  
    /**
     * ### .isArray(value, [message])
     *
     * Asserts that `value` is an array.
     *
     *     var menu = [ 'green', 'chai', 'oolong' ];
     *     assert.isArray(menu, 'what kind of tea do we want?');
     *
     * @name isArray
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isArray = function (val, msg) {
      new Assertion(val, msg, assert.isArray, true).to.be.an('array');
    };
  
    /**
     * ### .isNotArray(value, [message])
     *
     * Asserts that `value` is _not_ an array.
     *
     *     var menu = 'green|chai|oolong';
     *     assert.isNotArray(menu, 'what kind of tea do we want?');
     *
     * @name isNotArray
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotArray = function (val, msg) {
      new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
    };
  
    /**
     * ### .isString(value, [message])
     *
     * Asserts that `value` is a string.
     *
     *     var teaOrder = 'chai';
     *     assert.isString(teaOrder, 'order placed');
     *
     * @name isString
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isString = function (val, msg) {
      new Assertion(val, msg, assert.isString, true).to.be.a('string');
    };
  
    /**
     * ### .isNotString(value, [message])
     *
     * Asserts that `value` is _not_ a string.
     *
     *     var teaOrder = 4;
     *     assert.isNotString(teaOrder, 'order placed');
     *
     * @name isNotString
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotString = function (val, msg) {
      new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
    };
  
    /**
     * ### .isNumber(value, [message])
     *
     * Asserts that `value` is a number.
     *
     *     var cups = 2;
     *     assert.isNumber(cups, 'how many cups');
     *
     * @name isNumber
     * @param {Number} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNumber = function (val, msg) {
      new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
    };
  
    /**
     * ### .isNotNumber(value, [message])
     *
     * Asserts that `value` is _not_ a number.
     *
     *     var cups = '2 cups please';
     *     assert.isNotNumber(cups, 'how many cups');
     *
     * @name isNotNumber
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotNumber = function (val, msg) {
      new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
    };
  
     /**
     * ### .isFinite(value, [message])
     *
     * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
     *
     *     var cups = 2;
     *     assert.isFinite(cups, 'how many cups');
     *
     *     assert.isFinite(NaN); // throws
     *
     * @name isFinite
     * @param {Number} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isFinite = function (val, msg) {
      new Assertion(val, msg, assert.isFinite, true).to.be.finite;
    };
  
    /**
     * ### .isBoolean(value, [message])
     *
     * Asserts that `value` is a boolean.
     *
     *     var teaReady = true
     *       , teaServed = false;
     *
     *     assert.isBoolean(teaReady, 'is the tea ready');
     *     assert.isBoolean(teaServed, 'has tea been served');
     *
     * @name isBoolean
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isBoolean = function (val, msg) {
      new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
    };
  
    /**
     * ### .isNotBoolean(value, [message])
     *
     * Asserts that `value` is _not_ a boolean.
     *
     *     var teaReady = 'yep'
     *       , teaServed = 'nope';
     *
     *     assert.isNotBoolean(teaReady, 'is the tea ready');
     *     assert.isNotBoolean(teaServed, 'has tea been served');
     *
     * @name isNotBoolean
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.isNotBoolean = function (val, msg) {
      new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
    };
  
    /**
     * ### .typeOf(value, name, [message])
     *
     * Asserts that `value`'s type is `name`, as determined by
     * `Object.prototype.toString`.
     *
     *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
     *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
     *     assert.typeOf('tea', 'string', 'we have a string');
     *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
     *     assert.typeOf(null, 'null', 'we have a null');
     *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
     *
     * @name typeOf
     * @param {Mixed} value
     * @param {String} name
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.typeOf = function (val, type, msg) {
      new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
    };
  
    /**
     * ### .notTypeOf(value, name, [message])
     *
     * Asserts that `value`'s type is _not_ `name`, as determined by
     * `Object.prototype.toString`.
     *
     *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
     *
     * @name notTypeOf
     * @param {Mixed} value
     * @param {String} typeof name
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notTypeOf = function (val, type, msg) {
      new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
    };
  
    /**
     * ### .instanceOf(object, constructor, [message])
     *
     * Asserts that `value` is an instance of `constructor`.
     *
     *     var Tea = function (name) { this.name = name; }
     *       , chai = new Tea('chai');
     *
     *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
     *
     * @name instanceOf
     * @param {Object} object
     * @param {Constructor} constructor
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.instanceOf = function (val, type, msg) {
      new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
    };
  
    /**
     * ### .notInstanceOf(object, constructor, [message])
     *
     * Asserts `value` is not an instance of `constructor`.
     *
     *     var Tea = function (name) { this.name = name; }
     *       , chai = new String('chai');
     *
     *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
     *
     * @name notInstanceOf
     * @param {Object} object
     * @param {Constructor} constructor
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notInstanceOf = function (val, type, msg) {
      new Assertion(val, msg, assert.notInstanceOf, true)
        .to.not.be.instanceOf(type);
    };
  
    /**
     * ### .include(haystack, needle, [message])
     *
     * Asserts that `haystack` includes `needle`. Can be used to assert the
     * inclusion of a value in an array, a substring in a string, or a subset of
     * properties in an object.
     *
     *     assert.include([1,2,3], 2, 'array contains value');
     *     assert.include('foobar', 'foo', 'string contains substring');
     *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
     *
     * Strict equality (===) is used. When asserting the inclusion of a value in
     * an array, the array is searched for an element that's strictly equal to the
     * given value. When asserting a subset of properties in an object, the object
     * is searched for the given property keys, checking that each one is present
     * and stricty equal to the given property value. For instance:
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.include([obj1, obj2], obj1);
     *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
     *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
     *
     * @name include
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.include = function (exp, inc, msg) {
      new Assertion(exp, msg, assert.include, true).include(inc);
    };
  
    /**
     * ### .notInclude(haystack, needle, [message])
     *
     * Asserts that `haystack` does not include `needle`. Can be used to assert
     * the absence of a value in an array, a substring in a string, or a subset of
     * properties in an object.
     *
     *     assert.notInclude([1,2,3], 4, 'array doesn't contain value');
     *     assert.notInclude('foobar', 'baz', 'string doesn't contain substring');
     *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
     *
     * Strict equality (===) is used. When asserting the absence of a value in an
     * array, the array is searched to confirm the absence of an element that's
     * strictly equal to the given value. When asserting a subset of properties in
     * an object, the object is searched to confirm that at least one of the given
     * property keys is either not present or not strictly equal to the given
     * property value. For instance:
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.notInclude([obj1, obj2], {a: 1});
     *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
     *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
     *
     * @name notInclude
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notInclude = function (exp, inc, msg) {
      new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
    };
  
    /**
     * ### .deepInclude(haystack, needle, [message])
     *
     * Asserts that `haystack` includes `needle`. Can be used to assert the
     * inclusion of a value in an array or a subset of properties in an object.
     * Deep equality is used.
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.deepInclude([obj1, obj2], {a: 1});
     *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
     *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
     *
     * @name deepInclude
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.deepInclude = function (exp, inc, msg) {
      new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
    };
  
    /**
     * ### .notDeepInclude(haystack, needle, [message])
     *
     * Asserts that `haystack` does not include `needle`. Can be used to assert
     * the absence of a value in an array or a subset of properties in an object.
     * Deep equality is used.
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.notDeepInclude([obj1, obj2], {a: 9});
     *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
     *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
     *
     * @name notDeepInclude
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notDeepInclude = function (exp, inc, msg) {
      new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
    };
  
    /**
     * ### .nestedInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' includes 'needle'. 
     * Can be used to assert the inclusion of a subset of properties in an 
     * object.
     * Enables the use of dot- and bracket-notation for referencing nested 
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     * 
     *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
     *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
     * 
     * @name nestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public 
     */ 
  
    assert.nestedInclude = function (exp, inc, msg) {
      new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
    };
  
    /**
     * ### .notNestedInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' does not include 'needle'. 
     * Can be used to assert the absence of a subset of properties in an 
     * object.
     * Enables the use of dot- and bracket-notation for referencing nested 
     * properties. 
     * '[]' and '.' in property names can be escaped using double backslashes.
     * 
     *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
     *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
     * 
     * @name notNestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public 
     */ 
  
    assert.notNestedInclude = function (exp, inc, msg) {
      new Assertion(exp, msg, assert.notNestedInclude, true)
        .not.nested.include(inc);
    };
  
    /**
     * ### .deepNestedInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an 
     * object while checking for deep equality.
     * Enables the use of dot- and bracket-notation for referencing nested 
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     * 
     *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
     *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
     *    
     * @name deepNestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public 
     */
  
    assert.deepNestedInclude = function(exp, inc, msg) {
      new Assertion(exp, msg, assert.deepNestedInclude, true)
        .deep.nested.include(inc);
    };
  
    /**
     * ### .notDeepNestedInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' does not include 'needle'.
     * Can be used to assert the absence of a subset of properties in an 
     * object while checking for deep equality.
     * Enables the use of dot- and bracket-notation for referencing nested 
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     * 
     *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
     *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
     *    
     * @name notDeepNestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public 
     */
  
    assert.notDeepNestedInclude = function(exp, inc, msg) {
      new Assertion(exp, msg, assert.notDeepNestedInclude, true)
        .not.deep.nested.include(inc);
    };
  
    /**
     * ### .ownInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an 
     * object while ignoring inherited properties.
     * 
     *     assert.ownInclude({ a: 1 }, { a: 1 });
     * 
     * @name ownInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.ownInclude = function(exp, inc, msg) {
      new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
    };
  
    /**
     * ### .notOwnInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the absence of a subset of properties in an 
     * object while ignoring inherited properties.
     * 
     *     Object.prototype.b = 2;
     * 
     *     assert.notOwnInclude({ a: 1 }, { b: 2 });
     * 
     * @name notOwnInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notOwnInclude = function(exp, inc, msg) {
      new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
    };
  
    /**
     * ### .deepOwnInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an 
     * object while ignoring inherited properties and checking for deep equality.
     * 
     *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
     *      
     * @name deepOwnInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.deepOwnInclude = function(exp, inc, msg) {
      new Assertion(exp, msg, assert.deepOwnInclude, true)
        .deep.own.include(inc);
    };
  
     /**
     * ### .notDeepOwnInclude(haystack, needle, [message])
     * 
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the absence of a subset of properties in an 
     * object while ignoring inherited properties and checking for deep equality.
     * 
     *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
     *      
     * @name notDeepOwnInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notDeepOwnInclude = function(exp, inc, msg) {
      new Assertion(exp, msg, assert.notDeepOwnInclude, true)
        .not.deep.own.include(inc);
    };
  
    /**
     * ### .match(value, regexp, [message])
     *
     * Asserts that `value` matches the regular expression `regexp`.
     *
     *     assert.match('foobar', /^foo/, 'regexp matches');
     *
     * @name match
     * @param {Mixed} value
     * @param {RegExp} regexp
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.match = function (exp, re, msg) {
      new Assertion(exp, msg, assert.match, true).to.match(re);
    };
  
    /**
     * ### .notMatch(value, regexp, [message])
     *
     * Asserts that `value` does not match the regular expression `regexp`.
     *
     *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
     *
     * @name notMatch
     * @param {Mixed} value
     * @param {RegExp} regexp
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notMatch = function (exp, re, msg) {
      new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
    };
  
    /**
     * ### .property(object, property, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property`.
     *
     *     assert.property({ tea: { green: 'matcha' }}, 'tea');
     *     assert.property({ tea: { green: 'matcha' }}, 'toString');
     *
     * @name property
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.property = function (obj, prop, msg) {
      new Assertion(obj, msg, assert.property, true).to.have.property(prop);
    };
  
    /**
     * ### .notProperty(object, property, [message])
     *
     * Asserts that `object` does _not_ have a direct or inherited property named
     * by `property`.
     *
     *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
     *
     * @name notProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notProperty = function (obj, prop, msg) {
      new Assertion(obj, msg, assert.notProperty, true)
        .to.not.have.property(prop);
    };
  
    /**
     * ### .propertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property` with a value given by `value`. Uses a strict equality check
     * (===).
     *
     *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
     *
     * @name propertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.propertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.propertyVal, true)
        .to.have.property(prop, val);
    };
  
    /**
     * ### .notPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct or inherited property named
     * by `property` with value given by `value`. Uses a strict equality check
     * (===).
     *
     *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
     *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
     *
     * @name notPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.notPropertyVal, true)
        .to.not.have.property(prop, val);
    };
  
    /**
     * ### .deepPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property` with a value given by `value`. Uses a deep equality check.
     *
     *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
     *
     * @name deepPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.deepPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.deepPropertyVal, true)
        .to.have.deep.property(prop, val);
    };
  
    /**
     * ### .notDeepPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct or inherited property named
     * by `property` with value given by `value`. Uses a deep equality check.
     *
     *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
     *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
     *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
     *
     * @name notDeepPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notDeepPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.notDeepPropertyVal, true)
        .to.not.have.deep.property(prop, val);
    };
  
    /**
     * ### .ownProperty(object, property, [message])
     *
     * Asserts that `object` has a direct property named by `property`. Inherited
     * properties aren't checked.
     *
     *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
     *
     * @name ownProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @api public
     */
  
    assert.ownProperty = function (obj, prop, msg) {
      new Assertion(obj, msg, assert.ownProperty, true)
        .to.have.own.property(prop);
    };
  
    /**
     * ### .notOwnProperty(object, property, [message])
     *
     * Asserts that `object` does _not_ have a direct property named by
     * `property`. Inherited properties aren't checked.
     *
     *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
     *     assert.notOwnProperty({}, 'toString');
     *
     * @name notOwnProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @api public
     */
  
    assert.notOwnProperty = function (obj, prop, msg) {
      new Assertion(obj, msg, assert.notOwnProperty, true)
        .to.not.have.own.property(prop);
    };
  
    /**
     * ### .ownPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct property named by `property` and a value
     * equal to the provided `value`. Uses a strict equality check (===).
     * Inherited properties aren't checked.
     *
     *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
     *
     * @name ownPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
  
    assert.ownPropertyVal = function (obj, prop, value, msg) {
      new Assertion(obj, msg, assert.ownPropertyVal, true)
        .to.have.own.property(prop, value);
    };
  
    /**
     * ### .notOwnPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct property named by `property`
     * with a value equal to the provided `value`. Uses a strict equality check
     * (===). Inherited properties aren't checked.
     *
     *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
     *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
     *
     * @name notOwnPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
  
    assert.notOwnPropertyVal = function (obj, prop, value, msg) {
      new Assertion(obj, msg, assert.notOwnPropertyVal, true)
        .to.not.have.own.property(prop, value);
    };
  
    /**
     * ### .deepOwnPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct property named by `property` and a value
     * equal to the provided `value`. Uses a deep equality check. Inherited
     * properties aren't checked.
     *
     *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
     *
     * @name deepOwnPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
  
    assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
      new Assertion(obj, msg, assert.deepOwnPropertyVal, true)
        .to.have.deep.own.property(prop, value);
    };
  
    /**
     * ### .notDeepOwnPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct property named by `property`
     * with a value equal to the provided `value`. Uses a deep equality check.
     * Inherited properties aren't checked.
     *
     *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
     *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
     *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
     *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
     *
     * @name notDeepOwnPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
  
    assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
      new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)
        .to.not.have.deep.own.property(prop, value);
    };
  
    /**
     * ### .nestedProperty(object, property, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property`, which can be a string using dot- and bracket-notation for
     * nested reference.
     *
     *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
     *
     * @name nestedProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.nestedProperty = function (obj, prop, msg) {
      new Assertion(obj, msg, assert.nestedProperty, true)
        .to.have.nested.property(prop);
    };
  
    /**
     * ### .notNestedProperty(object, property, [message])
     *
     * Asserts that `object` does _not_ have a property named by `property`, which
     * can be a string using dot- and bracket-notation for nested reference. The
     * property cannot exist on the object nor anywhere in its prototype chain.
     *
     *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
     *
     * @name notNestedProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notNestedProperty = function (obj, prop, msg) {
      new Assertion(obj, msg, assert.notNestedProperty, true)
        .to.not.have.nested.property(prop);
    };
  
    /**
     * ### .nestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a property named by `property` with value given
     * by `value`. `property` can use dot- and bracket-notation for nested
     * reference. Uses a strict equality check (===).
     *
     *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
     *
     * @name nestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.nestedPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.nestedPropertyVal, true)
        .to.have.nested.property(prop, val);
    };
  
    /**
     * ### .notNestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a property named by `property` with
     * value given by `value`. `property` can use dot- and bracket-notation for
     * nested reference. Uses a strict equality check (===).
     *
     *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
     *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
     *
     * @name notNestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notNestedPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.notNestedPropertyVal, true)
        .to.not.have.nested.property(prop, val);
    };
  
    /**
     * ### .deepNestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a property named by `property` with a value given
     * by `value`. `property` can use dot- and bracket-notation for nested
     * reference. Uses a deep equality check.
     *
     *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
     *
     * @name deepNestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.deepNestedPropertyVal, true)
        .to.have.deep.nested.property(prop, val);
    };
  
    /**
     * ### .notDeepNestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a property named by `property` with
     * value given by `value`. `property` can use dot- and bracket-notation for
     * nested reference. Uses a deep equality check.
     *
     *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
     *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
     *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
     *
     * @name notDeepNestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
      new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)
        .to.not.have.deep.nested.property(prop, val);
    }
  
    /**
     * ### .lengthOf(object, length, [message])
     *
     * Asserts that `object` has a `length` property with the expected value.
     *
     *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
     *     assert.lengthOf('foobar', 6, 'string has length of 6');
     *
     * @name lengthOf
     * @param {Mixed} object
     * @param {Number} length
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.lengthOf = function (exp, len, msg) {
      new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
    };
  
    /**
     * ### .hasAnyKeys(object, [keys], [message])
     *
     * Asserts that `object` has at least one of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
     *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
     *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
     *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
     *
     * @name hasAnyKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.hasAnyKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
    }
  
    /**
     * ### .hasAllKeys(object, [keys], [message])
     *
     * Asserts that `object` has all and only all of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
     *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
     *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
     *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
     *
     * @name hasAllKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.hasAllKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
    }
  
    /**
     * ### .containsAllKeys(object, [keys], [message])
     *
     * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
     *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
     *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
     *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
     *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
     *
     * @name containsAllKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.containsAllKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.containsAllKeys, true)
        .to.contain.all.keys(keys);
    }
  
    /**
     * ### .doesNotHaveAnyKeys(object, [keys], [message])
     *
     * Asserts that `object` has none of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
     *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
     *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
     *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
     *
     * @name doesNotHaveAnyKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)
        .to.not.have.any.keys(keys);
    }
  
    /**
     * ### .doesNotHaveAllKeys(object, [keys], [message])
     *
     * Asserts that `object` does not have at least one of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
     *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
     *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
     *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
     *
     * @name doesNotHaveAllKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotHaveAllKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)
        .to.not.have.all.keys(keys);
    }
  
    /**
     * ### .hasAnyDeepKeys(object, [keys], [message])
     *
     * Asserts that `object` has at least one of the `keys` provided.
     * Since Sets and Maps can have objects as keys you can use this assertion to perform
     * a deep comparison.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
     *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
     *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
     *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
     *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
     *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
     *
     * @name doesNotHaveAllKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.hasAnyDeepKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.hasAnyDeepKeys, true)
        .to.have.any.deep.keys(keys);
    }
  
   /**
     * ### .hasAllDeepKeys(object, [keys], [message])
     *
     * Asserts that `object` has all and only all of the `keys` provided.
     * Since Sets and Maps can have objects as keys you can use this assertion to perform
     * a deep comparison.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
     *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
     *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
     *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
     *
     * @name hasAllDeepKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.hasAllDeepKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.hasAllDeepKeys, true)
        .to.have.all.deep.keys(keys);
    }
  
   /**
     * ### .containsAllDeepKeys(object, [keys], [message])
     *
     * Asserts that `object` contains all of the `keys` provided.
     * Since Sets and Maps can have objects as keys you can use this assertion to perform
     * a deep comparison.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
     *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
     *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
     *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
     *
     * @name containsAllDeepKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.containsAllDeepKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.containsAllDeepKeys, true)
        .to.contain.all.deep.keys(keys);
    }
  
   /**
     * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
     *
     * Asserts that `object` has none of the `keys` provided.
     * Since Sets and Maps can have objects as keys you can use this assertion to perform
     * a deep comparison.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
     *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
     *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
     *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
     *
     * @name doesNotHaveAnyDeepKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)
        .to.not.have.any.deep.keys(keys);
    }
  
   /**
     * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
     *
     * Asserts that `object` does not have at least one of the `keys` provided.
     * Since Sets and Maps can have objects as keys you can use this assertion to perform
     * a deep comparison.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
     *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
     *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
     *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
     *
     * @name doesNotHaveAllDeepKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
      new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)
        .to.not.have.all.deep.keys(keys);
    }
  
   /**
     * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
     *
     * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
     * instance of `errorLike`.
     * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
     * instance as `errorLike`.
     * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
     * message matching `errMsgMatcher`.
     *
     *     assert.throws(fn, 'function throws a reference error');
     *     assert.throws(fn, /function throws a reference error/);
     *     assert.throws(fn, ReferenceError);
     *     assert.throws(fn, errorInstance);
     *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
     *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
     *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
     *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
     *
     * @name throws
     * @alias throw
     * @alias Throw
     * @param {Function} fn
     * @param {ErrorConstructor|Error} errorLike
     * @param {RegExp|String} errMsgMatcher
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Assert
     * @api public
     */
  
    assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
      if ('string' === typeof errorLike || errorLike instanceof RegExp) {
        errMsgMatcher = errorLike;
        errorLike = null;
      }
  
      var assertErr = new Assertion(fn, msg, assert.throws, true)
        .to.throw(errorLike, errMsgMatcher);
      return flag(assertErr, 'object');
    };
  
    /**
     * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
     *
     * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
     * instance of `errorLike`.
     * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
     * instance as `errorLike`.
     * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
     * message matching `errMsgMatcher`.
     *
     *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
     *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
     *     assert.doesNotThrow(fn, Error);
     *     assert.doesNotThrow(fn, errorInstance);
     *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
     *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
     *     assert.doesNotThrow(fn, Error, /Error must not match this/);
     *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
     *
     * @name doesNotThrow
     * @param {Function} fn
     * @param {ErrorConstructor} errorLike
     * @param {RegExp|String} errMsgMatcher
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
      if ('string' === typeof errorLike || errorLike instanceof RegExp) {
        errMsgMatcher = errorLike;
        errorLike = null;
      }
  
      new Assertion(fn, msg, assert.doesNotThrow, true)
        .to.not.throw(errorLike, errMsgMatcher);
    };
  
    /**
     * ### .operator(val1, operator, val2, [message])
     *
     * Compares two values using `operator`.
     *
     *     assert.operator(1, '<', 2, 'everything is ok');
     *     assert.operator(1, '>', 2, 'this will fail');
     *
     * @name operator
     * @param {Mixed} val1
     * @param {String} operator
     * @param {Mixed} val2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.operator = function (val, operator, val2, msg) {
      var ok;
      switch(operator) {
        case '==':
          ok = val == val2;
          break;
        case '===':
          ok = val === val2;
          break;
        case '>':
          ok = val > val2;
          break;
        case '>=':
          ok = val >= val2;
          break;
        case '<':
          ok = val < val2;
          break;
        case '<=':
          ok = val <= val2;
          break;
        case '!=':
          ok = val != val2;
          break;
        case '!==':
          ok = val !== val2;
          break;
        default:
          msg = msg ? msg + ': ' : msg;
          throw new chai.AssertionError(
            msg + 'Invalid operator "' + operator + '"',
            undefined,
            assert.operator
          );
      }
      var test = new Assertion(ok, msg, assert.operator, true);
      test.assert(
          true === flag(test, 'object')
        , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
        , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
    };
  
    /**
     * ### .closeTo(actual, expected, delta, [message])
     *
     * Asserts that the target is equal `expected`, to within a +/- `delta` range.
     *
     *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
     *
     * @name closeTo
     * @param {Number} actual
     * @param {Number} expected
     * @param {Number} delta
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.closeTo = function (act, exp, delta, msg) {
      new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
    };
  
    /**
     * ### .approximately(actual, expected, delta, [message])
     *
     * Asserts that the target is equal `expected`, to within a +/- `delta` range.
     *
     *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
     *
     * @name approximately
     * @param {Number} actual
     * @param {Number} expected
     * @param {Number} delta
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.approximately = function (act, exp, delta, msg) {
      new Assertion(act, msg, assert.approximately, true)
        .to.be.approximately(exp, delta);
    };
  
    /**
     * ### .sameMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in any order. Uses a
     * strict equality check (===).
     *
     *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
     *
     * @name sameMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.sameMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.sameMembers, true)
        .to.have.same.members(set2);
    }
  
    /**
     * ### .notSameMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in any order.
     * Uses a strict equality check (===).
     *
     *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
     *
     * @name notSameMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notSameMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.notSameMembers, true)
        .to.not.have.same.members(set2);
    }
  
    /**
     * ### .sameDeepMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in any order. Uses a
     * deep equality check.
     *
     *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
     *
     * @name sameDeepMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.sameDeepMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.sameDeepMembers, true)
        .to.have.same.deep.members(set2);
    }
  
    /**
     * ### .notSameDeepMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in any order.
     * Uses a deep equality check.
     *
     *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
     *
     * @name notSameDeepMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notSameDeepMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.notSameDeepMembers, true)
        .to.not.have.same.deep.members(set2);
    }
  
    /**
     * ### .sameOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in the same order.
     * Uses a strict equality check (===).
     *
     *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
     *
     * @name sameOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.sameOrderedMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.sameOrderedMembers, true)
        .to.have.same.ordered.members(set2);
    }
  
    /**
     * ### .notSameOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in the same
     * order. Uses a strict equality check (===).
     *
     *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
     *
     * @name notSameOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notSameOrderedMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.notSameOrderedMembers, true)
        .to.not.have.same.ordered.members(set2);
    }
  
    /**
     * ### .sameDeepOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in the same order.
     * Uses a deep equality check.
     *
     * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
     *
     * @name sameDeepOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.sameDeepOrderedMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)
        .to.have.same.deep.ordered.members(set2);
    }
  
    /**
     * ### .notSameDeepOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in the same
     * order. Uses a deep equality check.
     *
     * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
     * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
     *
     * @name notSameDeepOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
      new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)
        .to.not.have.same.deep.ordered.members(set2);
    }
  
    /**
     * ### .includeMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in any order. Uses a
     * strict equality check (===). Duplicates are ignored.
     *
     *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
     *
     * @name includeMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.includeMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.includeMembers, true)
        .to.include.members(subset);
    }
  
    /**
     * ### .notIncludeMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in any order. Uses a
     * strict equality check (===). Duplicates are ignored.
     *
     *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
     *
     * @name notIncludeMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notIncludeMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.notIncludeMembers, true)
        .to.not.include.members(subset);
    }
  
    /**
     * ### .includeDeepMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in any order. Uses a deep
     * equality check. Duplicates are ignored.
     *
     *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
     *
     * @name includeDeepMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.includeDeepMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.includeDeepMembers, true)
        .to.include.deep.members(subset);
    }
  
    /**
     * ### .notIncludeDeepMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in any order. Uses a
     * deep equality check. Duplicates are ignored.
     *
     *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
     *
     * @name notIncludeDeepMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notIncludeDeepMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.notIncludeDeepMembers, true)
        .to.not.include.deep.members(subset);
    }
  
    /**
     * ### .includeOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a strict equality
     * check (===).
     *
     *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
     *
     * @name includeOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.includeOrderedMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.includeOrderedMembers, true)
        .to.include.ordered.members(subset);
    }
  
    /**
     * ### .notIncludeOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a strict equality
     * check (===).
     *
     *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
     *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
     *
     * @name notIncludeOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notIncludeOrderedMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)
        .to.not.include.ordered.members(subset);
    }
  
    /**
     * ### .includeDeepOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a deep equality
     * check.
     *
     *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
     *
     * @name includeDeepOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.includeDeepOrderedMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)
        .to.include.deep.ordered.members(subset);
    }
  
    /**
     * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a deep equality
     * check.
     *
     *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
     *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
     *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
     *
     * @name notIncludeDeepOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
      new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)
        .to.not.include.deep.ordered.members(subset);
    }
  
    /**
     * ### .oneOf(inList, list, [message])
     *
     * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
     *
     *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
     *
     * @name oneOf
     * @param {*} inList
     * @param {Array<*>} list
     * @param {String} message
     * @namespace Assert
     * @api public
     */
  
    assert.oneOf = function (inList, list, msg) {
      new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
    }
  
    /**
     * ### .changes(function, object, property, [message])
     *
     * Asserts that a function changes the value of a property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 22 };
     *     assert.changes(fn, obj, 'val');
     *
     * @name changes
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.changes = function (fn, obj, prop, msg) {
      if (arguments.length === 3 && typeof obj === 'function') {
        msg = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
    }
  
     /**
     * ### .changesBy(function, object, property, delta, [message])
     *
     * Asserts that a function changes the value of a property by an amount (delta).
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val += 2 };
     *     assert.changesBy(fn, obj, 'val', 2);
     *
     * @name changesBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.changesBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.changesBy, true)
        .to.change(obj, prop).by(delta);
    }
  
     /**
     * ### .doesNotChange(function, object, property, [message])
     *
     * Asserts that a function does not change the value of a property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { console.log('foo'); };
     *     assert.doesNotChange(fn, obj, 'val');
     *
     * @name doesNotChange
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotChange = function (fn, obj, prop, msg) {
      if (arguments.length === 3 && typeof obj === 'function') {
        msg = prop;
        prop = null;
      }
  
      return new Assertion(fn, msg, assert.doesNotChange, true)
        .to.not.change(obj, prop);
    }
  
    /**
     * ### .changesButNotBy(function, object, property, delta, [message])
     *
     * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val += 10 };
     *     assert.changesButNotBy(fn, obj, 'val', 5);
     *
     * @name changesButNotBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.changesButNotBy, true)
        .to.change(obj, prop).but.not.by(delta);
    }
  
    /**
     * ### .increases(function, object, property, [message])
     *
     * Asserts that a function increases a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 13 };
     *     assert.increases(fn, obj, 'val');
     *
     * @name increases
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.increases = function (fn, obj, prop, msg) {
      if (arguments.length === 3 && typeof obj === 'function') {
        msg = prop;
        prop = null;
      }
  
      return new Assertion(fn, msg, assert.increases, true)
        .to.increase(obj, prop);
    }
  
    /**
     * ### .increasesBy(function, object, property, delta, [message])
     *
     * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val += 10 };
     *     assert.increasesBy(fn, obj, 'val', 10);
     *
     * @name increasesBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.increasesBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.increasesBy, true)
        .to.increase(obj, prop).by(delta);
    }
  
    /**
     * ### .doesNotIncrease(function, object, property, [message])
     *
     * Asserts that a function does not increase a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 8 };
     *     assert.doesNotIncrease(fn, obj, 'val');
     *
     * @name doesNotIncrease
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotIncrease = function (fn, obj, prop, msg) {
      if (arguments.length === 3 && typeof obj === 'function') {
        msg = prop;
        prop = null;
      }
  
      return new Assertion(fn, msg, assert.doesNotIncrease, true)
        .to.not.increase(obj, prop);
    }
  
    /**
     * ### .increasesButNotBy(function, object, property, [message])
     *
     * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 15 };
     *     assert.increasesButNotBy(fn, obj, 'val', 10);
     *
     * @name increasesButNotBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.increasesButNotBy, true)
        .to.increase(obj, prop).but.not.by(delta);
    }
  
    /**
     * ### .decreases(function, object, property, [message])
     *
     * Asserts that a function decreases a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 5 };
     *     assert.decreases(fn, obj, 'val');
     *
     * @name decreases
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.decreases = function (fn, obj, prop, msg) {
      if (arguments.length === 3 && typeof obj === 'function') {
        msg = prop;
        prop = null;
      }
  
      return new Assertion(fn, msg, assert.decreases, true)
        .to.decrease(obj, prop);
    }
  
    /**
     * ### .decreasesBy(function, object, property, delta, [message])
     *
     * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val -= 5 };
     *     assert.decreasesBy(fn, obj, 'val', 5);
     *
     * @name decreasesBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.decreasesBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.decreasesBy, true)
        .to.decrease(obj, prop).by(delta);
    }
  
    /**
     * ### .doesNotDecrease(function, object, property, [message])
     *
     * Asserts that a function does not decreases a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 15 };
     *     assert.doesNotDecrease(fn, obj, 'val');
     *
     * @name doesNotDecrease
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotDecrease = function (fn, obj, prop, msg) {
      if (arguments.length === 3 && typeof obj === 'function') {
        msg = prop;
        prop = null;
      }
  
      return new Assertion(fn, msg, assert.doesNotDecrease, true)
        .to.not.decrease(obj, prop);
    }
  
    /**
     * ### .doesNotDecreaseBy(function, object, property, delta, [message])
     *
     * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 5 };
     *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
     *
     * @name doesNotDecrease
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)
        .to.not.decrease(obj, prop).by(delta);
    }
  
    /**
     * ### .decreasesButNotBy(function, object, property, delta, [message])
     *
     * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 5 };
     *     assert.decreasesButNotBy(fn, obj, 'val', 1);
     *
     * @name decreasesButNotBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
      if (arguments.length === 4 && typeof obj === 'function') {
        var tmpMsg = delta;
        delta = prop;
        msg = tmpMsg;
      } else if (arguments.length === 3) {
        delta = prop;
        prop = null;
      }
  
      new Assertion(fn, msg, assert.decreasesButNotBy, true)
        .to.decrease(obj, prop).but.not.by(delta);
    }
  
    /*!
     * ### .ifError(object)
     *
     * Asserts if value is not a false value, and throws if it is a true value.
     * This is added to allow for chai to be a drop-in replacement for Node's
     * assert class.
     *
     *     var err = new Error('I am a custom error');
     *     assert.ifError(err); // Rethrows err!
     *
     * @name ifError
     * @param {Object} object
     * @namespace Assert
     * @api public
     */
  
    assert.ifError = function (val) {
      if (val) {
        throw(val);
      }
    };
  
    /**
     * ### .isExtensible(object)
     *
     * Asserts that `object` is extensible (can have new properties added to it).
     *
     *     assert.isExtensible({});
     *
     * @name isExtensible
     * @alias extensible
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isExtensible = function (obj, msg) {
      new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
    };
  
    /**
     * ### .isNotExtensible(object)
     *
     * Asserts that `object` is _not_ extensible.
     *
     *     var nonExtensibleObject = Object.preventExtensions({});
     *     var sealedObject = Object.seal({});
     *     var frozenObject = Object.freeze({});
     *
     *     assert.isNotExtensible(nonExtensibleObject);
     *     assert.isNotExtensible(sealedObject);
     *     assert.isNotExtensible(frozenObject);
     *
     * @name isNotExtensible
     * @alias notExtensible
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isNotExtensible = function (obj, msg) {
      new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
    };
  
    /**
     * ### .isSealed(object)
     *
     * Asserts that `object` is sealed (cannot have new properties added to it
     * and its existing properties cannot be removed).
     *
     *     var sealedObject = Object.seal({});
     *     var frozenObject = Object.seal({});
     *
     *     assert.isSealed(sealedObject);
     *     assert.isSealed(frozenObject);
     *
     * @name isSealed
     * @alias sealed
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isSealed = function (obj, msg) {
      new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
    };
  
    /**
     * ### .isNotSealed(object)
     *
     * Asserts that `object` is _not_ sealed.
     *
     *     assert.isNotSealed({});
     *
     * @name isNotSealed
     * @alias notSealed
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isNotSealed = function (obj, msg) {
      new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
    };
  
    /**
     * ### .isFrozen(object)
     *
     * Asserts that `object` is frozen (cannot have new properties added to it
     * and its existing properties cannot be modified).
     *
     *     var frozenObject = Object.freeze({});
     *     assert.frozen(frozenObject);
     *
     * @name isFrozen
     * @alias frozen
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isFrozen = function (obj, msg) {
      new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
    };
  
    /**
     * ### .isNotFrozen(object)
     *
     * Asserts that `object` is _not_ frozen.
     *
     *     assert.isNotFrozen({});
     *
     * @name isNotFrozen
     * @alias notFrozen
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isNotFrozen = function (obj, msg) {
      new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
    };
  
    /**
     * ### .isEmpty(target)
     *
     * Asserts that the target does not contain any values.
     * For arrays and strings, it checks the `length` property.
     * For `Map` and `Set` instances, it checks the `size` property.
     * For non-function objects, it gets the count of own
     * enumerable string keys.
     *
     *     assert.isEmpty([]);
     *     assert.isEmpty('');
     *     assert.isEmpty(new Map);
     *     assert.isEmpty({});
     *
     * @name isEmpty
     * @alias empty
     * @param {Object|Array|String|Map|Set} target
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isEmpty = function(val, msg) {
      new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
    };
  
    /**
     * ### .isNotEmpty(target)
     *
     * Asserts that the target contains values.
     * For arrays and strings, it checks the `length` property.
     * For `Map` and `Set` instances, it checks the `size` property.
     * For non-function objects, it gets the count of own
     * enumerable string keys.
     *
     *     assert.isNotEmpty([1, 2]);
     *     assert.isNotEmpty('34');
     *     assert.isNotEmpty(new Set([5, 6]));
     *     assert.isNotEmpty({ key: 7 });
     *
     * @name isNotEmpty
     * @alias notEmpty
     * @param {Object|Array|String|Map|Set} target
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
  
    assert.isNotEmpty = function(val, msg) {
      new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
    };
  
    /*!
     * Aliases.
     */
  
    (function alias(name, as){
      assert[as] = assert[name];
      return alias;
    })
    ('isOk', 'ok')
    ('isNotOk', 'notOk')
    ('throws', 'throw')
    ('throws', 'Throw')
    ('isExtensible', 'extensible')
    ('isNotExtensible', 'notExtensible')
    ('isSealed', 'sealed')
    ('isNotSealed', 'notSealed')
    ('isFrozen', 'frozen')
    ('isNotFrozen', 'notFrozen')
    ('isEmpty', 'empty')
    ('isNotEmpty', 'notEmpty');
  };
  

});

;/*!node_modules/chai/lib/chai.js*/
define('node_modules/chai/lib/chai', function(require, exports, module) {

  /*!
   * chai
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  
  var used = [];
  
  /*!
   * Chai version
   */
  
  exports.version = '4.1.1';
  
  /*!
   * Assertion Error
   */
  
  exports.AssertionError = require('node_modules/chai/node_modules/assertion-error/index');
  
  /*!
   * Utils for plugins (not exported)
   */
  
  var util = require('node_modules/chai/lib/chai/utils/index');
  
  /**
   * # .use(function)
   *
   * Provides a way to extend the internals of Chai.
   *
   * @param {Function}
   * @returns {this} for chaining
   * @api public
   */
  
  exports.use = function (fn) {
    if (!~used.indexOf(fn)) {
      fn(exports, util);
      used.push(fn);
    }
  
    return exports;
  };
  
  /*!
   * Utility Functions
   */
  
  exports.util = util;
  
  /*!
   * Configuration
   */
  
  var config = require('node_modules/chai/lib/chai/config');
  exports.config = config;
  
  /*!
   * Primary `Assertion` prototype
   */
  
  var assertion = require('node_modules/chai/lib/chai/assertion');
  exports.use(assertion);
  
  /*!
   * Core Assertions
   */
  
  var core = require('node_modules/chai/lib/chai/core/assertions');
  exports.use(core);
  
  /*!
   * Expect interface
   */
  
  var expect = require('node_modules/chai/lib/chai/interface/expect');
  exports.use(expect);
  
  /*!
   * Should interface
   */
  
  var should = require('node_modules/chai/lib/chai/interface/should');
  exports.use(should);
  
  /*!
   * Assert interface
   */
  
  var assert = require('node_modules/chai/lib/chai/interface/assert');
  exports.use(assert);
  

});

;/*!node_modules/chai/index.js*/
define('node_modules/chai/index', function(require, exports, module) {

  module.exports = require('node_modules/chai/lib/chai');
  

});

;/*!node_modules/async/dist/async.js*/
define('node_modules/async/dist/async', function(require, exports, module) {

  var process = require('node_modules/process/browser');
  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.async = global.async || {})));
  }(this, (function (exports) { 'use strict';
  
  function slice(arrayLike, start) {
      start = start|0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for(var idx = 0; idx < newLen; idx++)  {
          newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
  }
  
  var initialParams = function (fn) {
      return function (/*...args, callback*/) {
          var args = slice(arguments);
          var callback = args.pop();
          fn.call(this, args, callback);
      };
  };
  
  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }
  
  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
  var hasNextTick = "undefined" === 'object' && typeof process.nextTick === 'function';
  
  function fallback(fn) {
      setTimeout(fn, 0);
  }
  
  function wrap(defer) {
      return function (fn/*, ...args*/) {
          var args = slice(arguments, 1);
          defer(function () {
              fn.apply(null, args);
          });
      };
  }
  
  var _defer;
  
  if (hasSetImmediate) {
      _defer = setImmediate;
  } else if (hasNextTick) {
      _defer = process.nextTick;
  } else {
      _defer = fallback;
  }
  
  var setImmediate$1 = wrap(_defer);
  
  /**
   * Take a sync function and make it async, passing its return value to a
   * callback. This is useful for plugging sync functions into a waterfall,
   * series, or other async functions. Any arguments passed to the generated
   * function will be passed to the wrapped function (except for the final
   * callback argument). Errors thrown will be passed to the callback.
   *
   * If the function passed to `asyncify` returns a Promise, that promises's
   * resolved/rejected state will be used to call the callback, rather than simply
   * the synchronous return value.
   *
   * This also means you can asyncify ES2017 `async` functions.
   *
   * @name asyncify
   * @static
   * @memberOf module:Utils
   * @method
   * @alias wrapSync
   * @category Util
   * @param {Function} func - The synchronous function, or Promise-returning
   * function to convert to an {@link AsyncFunction}.
   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
   * invoked with `(args..., callback)`.
   * @example
   *
   * // passing a regular synchronous function
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(JSON.parse),
   *     function (data, next) {
   *         // data is the result of parsing the text.
   *         // If there was a parsing error, it would have been caught.
   *     }
   * ], callback);
   *
   * // passing a function returning a promise
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(function (contents) {
   *         return db.model.create(contents);
   *     }),
   *     function (model, next) {
   *         // `model` is the instantiated model object.
   *         // If there was an error, this function would be skipped.
   *     }
   * ], callback);
   *
   * // es2017 example, though `asyncify` is not needed if your JS environment
   * // supports async functions out of the box
   * var q = async.queue(async.asyncify(async function(file) {
   *     var intermediateStep = await processFile(file);
   *     return await somePromise(intermediateStep)
   * }));
   *
   * q.push(files);
   */
  function asyncify(func) {
      return initialParams(function (args, callback) {
          var result;
          try {
              result = func.apply(this, args);
          } catch (e) {
              return callback(e);
          }
          // if result is Promise object
          if (isObject(result) && typeof result.then === 'function') {
              result.then(function(value) {
                  invokeCallback(callback, null, value);
              }, function(err) {
                  invokeCallback(callback, err.message ? err : new Error(err));
              });
          } else {
              callback(null, result);
          }
      });
  }
  
  function invokeCallback(callback, error, value) {
      try {
          callback(error, value);
      } catch (e) {
          setImmediate$1(rethrow, e);
      }
  }
  
  function rethrow(error) {
      throw error;
  }
  
  var supportsSymbol = typeof Symbol === 'function';
  
  function isAsync(fn) {
      return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
  }
  
  function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
  }
  
  function applyEach$1(eachfn) {
      return function(fns/*, ...args*/) {
          var args = slice(arguments, 1);
          var go = initialParams(function(args, callback) {
              var that = this;
              return eachfn(fns, function (fn, cb) {
                  wrapAsync(fn).apply(that, args.concat(cb));
              }, callback);
          });
          if (args.length) {
              return go.apply(this, args);
          }
          else {
              return go;
          }
      };
  }
  
  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  
  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  
  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();
  
  /** Built-in value references. */
  var Symbol$1 = root.Symbol;
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;
  
  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
  
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];
  
    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}
  
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  
  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;
  
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }
  
  /** `Object#toString` result references. */
  var nullTag = '[object Null]';
  var undefinedTag = '[object Undefined]';
  
  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
  
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    value = Object(value);
    return (symToStringTag && symToStringTag in value)
      ? getRawTag(value)
      : objectToString(value);
  }
  
  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]';
  var funcTag = '[object Function]';
  var genTag = '[object GeneratorFunction]';
  var proxyTag = '[object Proxy]';
  
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  
  // A temporary value used to identify if the loop should be broken.
  // See #1064, #1293
  var breakLoop = {};
  
  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }
  
  function once(fn) {
      return function () {
          if (fn === null) return;
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  
  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
  
  var getIterator = function (coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
  };
  
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);
  
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }
  
  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';
  
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  
  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
  
  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
  
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };
  
  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  
  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }
  
  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  
  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;
  
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  
  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }
  
  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]';
  var arrayTag = '[object Array]';
  var boolTag = '[object Boolean]';
  var dateTag = '[object Date]';
  var errorTag = '[object Error]';
  var funcTag$1 = '[object Function]';
  var mapTag = '[object Map]';
  var numberTag = '[object Number]';
  var objectTag = '[object Object]';
  var regexpTag = '[object RegExp]';
  var setTag = '[object Set]';
  var stringTag = '[object String]';
  var weakMapTag = '[object WeakMap]';
  
  var arrayBufferTag = '[object ArrayBuffer]';
  var dataViewTag = '[object DataView]';
  var float32Tag = '[object Float32Array]';
  var float64Tag = '[object Float64Array]';
  var int8Tag = '[object Int8Array]';
  var int16Tag = '[object Int16Array]';
  var int32Tag = '[object Int32Array]';
  var uint8Tag = '[object Uint8Array]';
  var uint8ClampedTag = '[object Uint8ClampedArray]';
  var uint16Tag = '[object Uint16Array]';
  var uint32Tag = '[object Uint32Array]';
  
  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;
  
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  
  /** Detect free variable `exports`. */
  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
  
  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal.process;
  
  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }());
  
  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  
  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
  
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;
  
    for (var key in value) {
      if ((inherited || hasOwnProperty$1.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }
  
  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;
  
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;
  
    return value === proto;
  }
  
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);
  
  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
  
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }
  
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  
  function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
          return ++i < len ? {value: coll[i], key: i} : null;
      }
  }
  
  function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
          var item = iterator.next();
          if (item.done)
              return null;
          i++;
          return {value: item.value, key: i};
      }
  }
  
  function createObjectIterator(obj) {
      var okeys = keys(obj);
      var i = -1;
      var len = okeys.length;
      return function next() {
          var key = okeys[++i];
          return i < len ? {value: obj[key], key: key} : null;
      };
  }
  
  function iterator(coll) {
      if (isArrayLike(coll)) {
          return createArrayIterator(coll);
      }
  
      var iterator = getIterator(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
  }
  
  function onlyOnce(fn) {
      return function() {
          if (fn === null) throw new Error("Callback was already called.");
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  
  function _eachOfLimit(limit) {
      return function (obj, iteratee, callback) {
          callback = once(callback || noop);
          if (limit <= 0 || !obj) {
              return callback(null);
          }
          var nextElem = iterator(obj);
          var done = false;
          var running = 0;
  
          function iterateeCallback(err, value) {
              running -= 1;
              if (err) {
                  done = true;
                  callback(err);
              }
              else if (value === breakLoop || (done && running <= 0)) {
                  done = true;
                  return callback(null);
              }
              else {
                  replenish();
              }
          }
  
          function replenish () {
              while (running < limit && !done) {
                  var elem = nextElem();
                  if (elem === null) {
                      done = true;
                      if (running <= 0) {
                          callback(null);
                      }
                      return;
                  }
                  running += 1;
                  iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
              }
          }
  
          replenish();
      };
  }
  
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name eachOfLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`. The `key` is the item's key, or index in the case of an
   * array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachOfLimit(coll, limit, iteratee, callback) {
      _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
  }
  
  function doLimit(fn, limit) {
      return function (iterable, iteratee, callback) {
          return fn(iterable, limit, iteratee, callback);
      };
  }
  
  // eachOf implementation optimized for array-likes
  function eachOfArrayLike(coll, iteratee, callback) {
      callback = once(callback || noop);
      var index = 0,
          completed = 0,
          length = coll.length;
      if (length === 0) {
          callback(null);
      }
  
      function iteratorCallback(err, value) {
          if (err) {
              callback(err);
          } else if ((++completed === length) || value === breakLoop) {
              callback(null);
          }
      }
  
      for (; index < length; index++) {
          iteratee(coll[index], index, onlyOnce(iteratorCallback));
      }
  }
  
  // a generic version of eachOf which can handle array, object, and iterator cases.
  var eachOfGeneric = doLimit(eachOfLimit, Infinity);
  
  /**
   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
   * to the iteratee.
   *
   * @name eachOf
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEachOf
   * @category Collection
   * @see [async.each]{@link module:Collections.each}
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each
   * item in `coll`.
   * The `key` is the item's key, or index in the case of an array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
   * var configs = {};
   *
   * async.forEachOf(obj, function (value, key, callback) {
   *     fs.readFile("/node_modules/async/dist" + value, "utf8", function (err, data) {
   *         if (err) return callback(err);
   *         try {
   *             configs[key] = JSON.parse(data);
   *         } catch (e) {
   *             return callback(e);
   *         }
   *         callback();
   *     });
   * }, function (err) {
   *     if (err) console.error(err.message);
   *     // configs is now a map of JSON data
   *     doSomethingWith(configs);
   * });
   */
  var eachOf = function(coll, iteratee, callback) {
      var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, wrapAsync(iteratee), callback);
  };
  
  function doParallel(fn) {
      return function (obj, iteratee, callback) {
          return fn(eachOf, obj, wrapAsync(iteratee), callback);
      };
  }
  
  function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || noop;
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = wrapAsync(iteratee);
  
      eachfn(arr, function (value, _, callback) {
          var index = counter++;
          _iteratee(value, function (err, v) {
              results[index] = v;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  
  /**
   * Produces a new collection of values by mapping each value in `coll` through
   * the `iteratee` function. The `iteratee` is called with an item from `coll`
   * and a callback for when it has finished processing. Each of these callback
   * takes 2 arguments: an `error`, and the transformed item from `coll`. If
   * `iteratee` passes an error to its callback, the main `callback` (for the
   * `map` function) is immediately called with the error.
   *
   * Note, that since this function applies the `iteratee` to each item in
   * parallel, there is no guarantee that the `iteratee` functions will complete
   * in order. However, the results array will be in the same order as the
   * original `coll`.
   *
   * If `map` is passed an Object, the results will be an Array.  The results
   * will roughly be in the order of the original Objects' keys (but this can
   * vary across JavaScript engines).
   *
   * @name map
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an Array of the
   * transformed items from the `coll`. Invoked with (err, results).
   * @example
   *
   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
   *     // results is now an array of stats for each file
   * });
   */
  var map = doParallel(_asyncMap);
  
  /**
   * Applies the provided arguments to each function in the array, calling
   * `callback` after all functions have completed. If you only provide the first
   * argument, `fns`, then it will return a function which lets you pass in the
   * arguments as if it were a single function call. If more arguments are
   * provided, `callback` is required while `args` is still optional.
   *
   * @name applyEach
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s
   * to all call with the same arguments
   * @param {...*} [args] - any number of separate arguments to pass to the
   * function.
   * @param {Function} [callback] - the final argument should be the callback,
   * called when all functions have completed processing.
   * @returns {Function} - If only the first argument, `fns`, is provided, it will
   * return a function which lets you pass in the arguments as if it were a single
   * function call. The signature is `(..args, callback)`. If invoked with any
   * arguments, `callback` is required.
   * @example
   *
   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
   *
   * // partial application example:
   * async.each(
   *     buckets,
   *     async.applyEach([enableSearch, updateSchema]),
   *     callback
   * );
   */
  var applyEach = applyEach$1(map);
  
  function doParallelLimit(fn) {
      return function (obj, limit, iteratee, callback) {
          return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);
      };
  }
  
  /**
   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
   *
   * @name mapLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an array of the
   * transformed items from the `coll`. Invoked with (err, results).
   */
  var mapLimit = doParallelLimit(_asyncMap);
  
  /**
   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
   *
   * @name mapSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an array of the
   * transformed items from the `coll`. Invoked with (err, results).
   */
  var mapSeries = doLimit(mapLimit, 1);
  
  /**
   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
   *
   * @name applyEachSeries
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.applyEach]{@link module:ControlFlow.applyEach}
   * @category Control Flow
   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all
   * call with the same arguments
   * @param {...*} [args] - any number of separate arguments to pass to the
   * function.
   * @param {Function} [callback] - the final argument should be the callback,
   * called when all functions have completed processing.
   * @returns {Function} - If only the first argument is provided, it will return
   * a function which lets you pass in the arguments as if it were a single
   * function call.
   */
  var applyEachSeries = applyEach$1(mapSeries);
  
  /**
   * Creates a continuation function with some arguments already applied.
   *
   * Useful as a shorthand when combined with other control flow functions. Any
   * arguments passed to the returned function are added to the arguments
   * originally passed to apply.
   *
   * @name apply
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} fn - The function you want to eventually apply all
   * arguments to. Invokes with (arguments...).
   * @param {...*} arguments... - Any number of arguments to automatically apply
   * when the continuation is called.
   * @returns {Function} the partially-applied function
   * @example
   *
   * // using apply
   * async.parallel([
   *     async.apply(fs.writeFile, 'testfile1', 'test1'),
   *     async.apply(fs.writeFile, 'testfile2', 'test2')
   * ]);
   *
   *
   * // the same process without using apply
   * async.parallel([
   *     function(callback) {
   *         fs.writeFile('testfile1', 'test1', callback);
   *     },
   *     function(callback) {
   *         fs.writeFile('testfile2', 'test2', callback);
   *     }
   * ]);
   *
   * // It's possible to pass any number of additional arguments when calling the
   * // continuation:
   *
   * node> var fn = async.apply(sys.puts, 'one');
   * node> fn('two', 'three');
   * one
   * two
   * three
   */
  var apply = function(fn/*, ...args*/) {
      var args = slice(arguments, 1);
      return function(/*callArgs*/) {
          var callArgs = slice(arguments);
          return fn.apply(null, args.concat(callArgs));
      };
  };
  
  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;
  
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  
  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;
  
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  
  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();
  
  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }
  
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);
  
    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  
  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }
  
  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;
  
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  
  /**
   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
   * their requirements. Each function can optionally depend on other functions
   * being completed first, and each function is run as soon as its requirements
   * are satisfied.
   *
   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
   * will stop. Further tasks will not execute (so any other functions depending
   * on it will not run), and the main `callback` is immediately called with the
   * error.
   *
   * {@link AsyncFunction}s also receive an object containing the results of functions which
   * have completed so far as the first argument, if they have dependencies. If a
   * task function has no dependencies, it will only be passed a callback.
   *
   * @name auto
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Object} tasks - An object. Each of its properties is either a
   * function or an array of requirements, with the {@link AsyncFunction} itself the last item
   * in the array. The object's key of a property serves as the name of the task
   * defined by that property, i.e. can be used when specifying requirements for
   * other tasks. The function receives one or two arguments:
   * * a `results` object, containing the results of the previously executed
   *   functions, only passed if the task has any dependencies,
   * * a `callback(err, result)` function, which must be called when finished,
   *   passing an `error` (which can be `null`) and the result of the function's
   *   execution.
   * @param {number} [concurrency=Infinity] - An optional `integer` for
   * determining the maximum number of tasks that can be run in parallel. By
   * default, as many as possible.
   * @param {Function} [callback] - An optional callback which is called when all
   * the tasks have been completed. It receives the `err` argument if any `tasks`
   * pass an error to their callback. Results are always returned; however, if an
   * error occurs, no further `tasks` will be performed, and the results object
   * will only contain partial results. Invoked with (err, results).
   * @returns undefined
   * @example
   *
   * async.auto({
   *     // this function will just be passed a callback
   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
   *     showData: ['readData', function(results, cb) {
   *         // results.readData is the file's contents
   *         // ...
   *     }]
   * }, callback);
   *
   * async.auto({
   *     get_data: function(callback) {
   *         console.log('in get_data');
   *         // async code to get some data
   *         callback(null, 'data', 'converted to array');
   *     },
   *     make_folder: function(callback) {
   *         console.log('in make_folder');
   *         // async code to create a directory to store a file in
   *         // this is run at the same time as getting the data
   *         callback(null, 'folder');
   *     },
   *     write_file: ['get_data', 'make_folder', function(results, callback) {
   *         console.log('in write_file', JSON.stringify(results));
   *         // once there is some data and the directory exists,
   *         // write the data to a file in the directory
   *         callback(null, 'filename');
   *     }],
   *     email_link: ['write_file', function(results, callback) {
   *         console.log('in email_link', JSON.stringify(results));
   *         // once the file is written let's email a link to it...
   *         // results.write_file contains the filename returned by write_file.
   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
   *     }]
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('results = ', results);
   * });
   */
  var auto = function (tasks, concurrency, callback) {
      if (typeof concurrency === 'function') {
          // concurrency is optional, shift the args.
          callback = concurrency;
          concurrency = null;
      }
      callback = once(callback || noop);
      var keys$$1 = keys(tasks);
      var numTasks = keys$$1.length;
      if (!numTasks) {
          return callback(null);
      }
      if (!concurrency) {
          concurrency = numTasks;
      }
  
      var results = {};
      var runningTasks = 0;
      var hasError = false;
  
      var listeners = Object.create(null);
  
      var readyTasks = [];
  
      // for cycle detection:
      var readyToCheck = []; // tasks that have been identified as reachable
      // without the possibility of returning to an ancestor task
      var uncheckedDependencies = {};
  
      baseForOwn(tasks, function (task, key) {
          if (!isArray(task)) {
              // no dependencies
              enqueueTask(key, [task]);
              readyToCheck.push(key);
              return;
          }
  
          var dependencies = task.slice(0, task.length - 1);
          var remainingDependencies = dependencies.length;
          if (remainingDependencies === 0) {
              enqueueTask(key, task);
              readyToCheck.push(key);
              return;
          }
          uncheckedDependencies[key] = remainingDependencies;
  
          arrayEach(dependencies, function (dependencyName) {
              if (!tasks[dependencyName]) {
                  throw new Error('async.auto task `' + key +
                      '` has a non-existent dependency `' +
                      dependencyName + '` in ' +
                      dependencies.join(', '));
              }
              addListener(dependencyName, function () {
                  remainingDependencies--;
                  if (remainingDependencies === 0) {
                      enqueueTask(key, task);
                  }
              });
          });
      });
  
      checkForDeadlocks();
      processQueue();
  
      function enqueueTask(key, task) {
          readyTasks.push(function () {
              runTask(key, task);
          });
      }
  
      function processQueue() {
          if (readyTasks.length === 0 && runningTasks === 0) {
              return callback(null, results);
          }
          while(readyTasks.length && runningTasks < concurrency) {
              var run = readyTasks.shift();
              run();
          }
  
      }
  
      function addListener(taskName, fn) {
          var taskListeners = listeners[taskName];
          if (!taskListeners) {
              taskListeners = listeners[taskName] = [];
          }
  
          taskListeners.push(fn);
      }
  
      function taskComplete(taskName) {
          var taskListeners = listeners[taskName] || [];
          arrayEach(taskListeners, function (fn) {
              fn();
          });
          processQueue();
      }
  
  
      function runTask(key, task) {
          if (hasError) return;
  
          var taskCallback = onlyOnce(function(err, result) {
              runningTasks--;
              if (arguments.length > 2) {
                  result = slice(arguments, 1);
              }
              if (err) {
                  var safeResults = {};
                  baseForOwn(results, function(val, rkey) {
                      safeResults[rkey] = val;
                  });
                  safeResults[key] = result;
                  hasError = true;
                  listeners = Object.create(null);
  
                  callback(err, safeResults);
              } else {
                  results[key] = result;
                  taskComplete(key);
              }
          });
  
          runningTasks++;
          var taskFn = wrapAsync(task[task.length - 1]);
          if (task.length > 1) {
              taskFn(results, taskCallback);
          } else {
              taskFn(taskCallback);
          }
      }
  
      function checkForDeadlocks() {
          // Kahn's algorithm
          // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
          // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
          var currentTask;
          var counter = 0;
          while (readyToCheck.length) {
              currentTask = readyToCheck.pop();
              counter++;
              arrayEach(getDependents(currentTask), function (dependent) {
                  if (--uncheckedDependencies[dependent] === 0) {
                      readyToCheck.push(dependent);
                  }
              });
          }
  
          if (counter !== numTasks) {
              throw new Error(
                  'async.auto cannot execute tasks due to a recursive dependency'
              );
          }
      }
  
      function getDependents(taskName) {
          var result = [];
          baseForOwn(tasks, function (task, key) {
              if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
                  result.push(key);
              }
          });
          return result;
      }
  };
  
  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);
  
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  
  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';
  
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }
  
  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;
  
  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
  var symbolToString = symbolProto ? symbolProto.toString : undefined;
  
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }
  
  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;
  
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;
  
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }
  
  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : baseSlice(array, start, end);
  }
  
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
  
    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  
  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;
  
    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  
  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }
  
  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff';
  var rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23';
  var rsComboSymbolsRange = '\\u20d0-\\u20f0';
  var rsVarRange = '\\ufe0e\\ufe0f';
  
  /** Used to compose unicode capture groups. */
  var rsZWJ = '\\u200d';
  
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
  
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }
  
  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = '\\ud800-\\udfff';
  var rsComboMarksRange$1 = '\\u0300-\\u036f\\ufe20-\\ufe23';
  var rsComboSymbolsRange$1 = '\\u20d0-\\u20f0';
  var rsVarRange$1 = '\\ufe0e\\ufe0f';
  
  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange$1 + ']';
  var rsCombo = '[' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ']';
  var rsFitz = '\\ud83c[\\udffb-\\udfff]';
  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
  var rsNonAstral = '[^' + rsAstralRange$1 + ']';
  var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
  var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
  var rsZWJ$1 = '\\u200d';
  
  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?';
  var rsOptVar = '[' + rsVarRange$1 + ']?';
  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
  var rsSeq = rsOptVar + reOptMod + rsOptJoin;
  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }
  
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }
  
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }
  
  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;
  
  /**
   * Removes leading and trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trim('  abc  ');
   * // => 'abc'
   *
   * _.trim('-_-abc-_-', '_-');
   * // => 'abc'
   *
   * _.map(['  foo  ', '  bar  '], _.trim);
   * // => ['foo', 'bar']
   */
  function trim(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) {
      return string.replace(reTrim, '');
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string),
        chrSymbols = stringToArray(chars),
        start = charsStartIndex(strSymbols, chrSymbols),
        end = charsEndIndex(strSymbols, chrSymbols) + 1;
  
    return castSlice(strSymbols, start, end).join('');
  }
  
  var FN_ARGS = /^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /(=.+)?(\s*)$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
  
  function parseParams(func) {
      func = func.toString().replace(STRIP_COMMENTS, '');
      func = func.match(FN_ARGS)[2].replace(' ', '');
      func = func ? func.split(FN_ARG_SPLIT) : [];
      func = func.map(function (arg){
          return trim(arg.replace(FN_ARG, ''));
      });
      return func;
  }
  
  /**
   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
   * tasks are specified as parameters to the function, after the usual callback
   * parameter, with the parameter names matching the names of the tasks it
   * depends on. This can provide even more readable task graphs which can be
   * easier to maintain.
   *
   * If a final callback is specified, the task results are similarly injected,
   * specified as named parameters after the initial error parameter.
   *
   * The autoInject function is purely syntactic sugar and its semantics are
   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
   *
   * @name autoInject
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.auto]{@link module:ControlFlow.auto}
   * @category Control Flow
   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
   * the form 'func([dependencies...], callback). The object's key of a property
   * serves as the name of the task defined by that property, i.e. can be used
   * when specifying requirements for other tasks.
   * * The `callback` parameter is a `callback(err, result)` which must be called
   *   when finished, passing an `error` (which can be `null`) and the result of
   *   the function's execution. The remaining parameters name other tasks on
   *   which the task is dependent, and the results from those tasks are the
   *   arguments of those parameters.
   * @param {Function} [callback] - An optional callback which is called when all
   * the tasks have been completed. It receives the `err` argument if any `tasks`
   * pass an error to their callback, and a `results` object with any completed
   * task results, similar to `auto`.
   * @example
   *
   * //  The example from `auto` can be rewritten as follows:
   * async.autoInject({
   *     get_data: function(callback) {
   *         // async code to get some data
   *         callback(null, 'data', 'converted to array');
   *     },
   *     make_folder: function(callback) {
   *         // async code to create a directory to store a file in
   *         // this is run at the same time as getting the data
   *         callback(null, 'folder');
   *     },
   *     write_file: function(get_data, make_folder, callback) {
   *         // once there is some data and the directory exists,
   *         // write the data to a file in the directory
   *         callback(null, 'filename');
   *     },
   *     email_link: function(write_file, callback) {
   *         // once the file is written let's email a link to it...
   *         // write_file contains the filename returned by write_file.
   *         callback(null, {'file':write_file, 'email':'user@example.com'});
   *     }
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('email_link = ', results.email_link);
   * });
   *
   * // If you are using a JS minifier that mangles parameter names, `autoInject`
   * // will not work with plain functions, since the parameter names will be
   * // collapsed to a single letter identifier.  To work around this, you can
   * // explicitly specify the names of the parameters your task function needs
   * // in an array, similar to Angular.js dependency injection.
   *
   * // This still has an advantage over plain `auto`, since the results a task
   * // depends on are still spread into arguments.
   * async.autoInject({
   *     //...
   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
   *         callback(null, 'filename');
   *     }],
   *     email_link: ['write_file', function(write_file, callback) {
   *         callback(null, {'file':write_file, 'email':'user@example.com'});
   *     }]
   *     //...
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('email_link = ', results.email_link);
   * });
   */
  function autoInject(tasks, callback) {
      var newTasks = {};
  
      baseForOwn(tasks, function (taskFn, key) {
          var params;
          var fnIsAsync = isAsync(taskFn);
          var hasNoDeps =
              (!fnIsAsync && taskFn.length === 1) ||
              (fnIsAsync && taskFn.length === 0);
  
          if (isArray(taskFn)) {
              params = taskFn.slice(0, -1);
              taskFn = taskFn[taskFn.length - 1];
  
              newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
          } else if (hasNoDeps) {
              // no dependencies, use the function as-is
              newTasks[key] = taskFn;
          } else {
              params = parseParams(taskFn);
              if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
                  throw new Error("autoInject task functions require explicit parameters.");
              }
  
              // remove callback param
              if (!fnIsAsync) params.pop();
  
              newTasks[key] = params.concat(newTask);
          }
  
          function newTask(results, taskCb) {
              var newArgs = arrayMap(params, function (name) {
                  return results[name];
              });
              newArgs.push(taskCb);
              wrapAsync(taskFn).apply(null, newArgs);
          }
      });
  
      auto(newTasks, callback);
  }
  
  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
  // used for queues. This implementation assumes that the node provided by the user can be modified
  // to adjust the next and last properties. We implement only the minimal functionality
  // for queue support.
  function DLL() {
      this.head = this.tail = null;
      this.length = 0;
  }
  
  function setInitial(dll, node) {
      dll.length = 1;
      dll.head = dll.tail = node;
  }
  
  DLL.prototype.removeLink = function(node) {
      if (node.prev) node.prev.next = node.next;
      else this.head = node.next;
      if (node.next) node.next.prev = node.prev;
      else this.tail = node.prev;
  
      node.prev = node.next = null;
      this.length -= 1;
      return node;
  };
  
  DLL.prototype.empty = function () {
      while(this.head) this.shift();
      return this;
  };
  
  DLL.prototype.insertAfter = function(node, newNode) {
      newNode.prev = node;
      newNode.next = node.next;
      if (node.next) node.next.prev = newNode;
      else this.tail = newNode;
      node.next = newNode;
      this.length += 1;
  };
  
  DLL.prototype.insertBefore = function(node, newNode) {
      newNode.prev = node.prev;
      newNode.next = node;
      if (node.prev) node.prev.next = newNode;
      else this.head = newNode;
      node.prev = newNode;
      this.length += 1;
  };
  
  DLL.prototype.unshift = function(node) {
      if (this.head) this.insertBefore(this.head, node);
      else setInitial(this, node);
  };
  
  DLL.prototype.push = function(node) {
      if (this.tail) this.insertAfter(this.tail, node);
      else setInitial(this, node);
  };
  
  DLL.prototype.shift = function() {
      return this.head && this.removeLink(this.head);
  };
  
  DLL.prototype.pop = function() {
      return this.tail && this.removeLink(this.tail);
  };
  
  DLL.prototype.toArray = function () {
      var arr = Array(this.length);
      var curr = this.head;
      for(var idx = 0; idx < this.length; idx++) {
          arr[idx] = curr.data;
          curr = curr.next;
      }
      return arr;
  };
  
  DLL.prototype.remove = function (testFn) {
      var curr = this.head;
      while(!!curr) {
          var next = curr.next;
          if (testFn(curr)) {
              this.removeLink(curr);
          }
          curr = next;
      }
      return this;
  };
  
  function queue(worker, concurrency, payload) {
      if (concurrency == null) {
          concurrency = 1;
      }
      else if(concurrency === 0) {
          throw new Error('Concurrency must not be zero');
      }
  
      var _worker = wrapAsync(worker);
      var numRunning = 0;
      var workersList = [];
  
      function _insert(data, insertAtFront, callback) {
          if (callback != null && typeof callback !== 'function') {
              throw new Error('task callback must be a function');
          }
          q.started = true;
          if (!isArray(data)) {
              data = [data];
          }
          if (data.length === 0 && q.idle()) {
              // call drain immediately if there are no tasks
              return setImmediate$1(function() {
                  q.drain();
              });
          }
  
          for (var i = 0, l = data.length; i < l; i++) {
              var item = {
                  data: data[i],
                  callback: callback || noop
              };
  
              if (insertAtFront) {
                  q._tasks.unshift(item);
              } else {
                  q._tasks.push(item);
              }
          }
          setImmediate$1(q.process);
      }
  
      function _next(tasks) {
          return function(err){
              numRunning -= 1;
  
              for (var i = 0, l = tasks.length; i < l; i++) {
                  var task = tasks[i];
  
                  var index = baseIndexOf(workersList, task, 0);
                  if (index >= 0) {
                      workersList.splice(index, 1);
                  }
  
                  task.callback.apply(task, arguments);
  
                  if (err != null) {
                      q.error(err, task.data);
                  }
              }
  
              if (numRunning <= (q.concurrency - q.buffer) ) {
                  q.unsaturated();
              }
  
              if (q.idle()) {
                  q.drain();
              }
              q.process();
          };
      }
  
      var isProcessing = false;
      var q = {
          _tasks: new DLL(),
          concurrency: concurrency,
          payload: payload,
          saturated: noop,
          unsaturated:noop,
          buffer: concurrency / 4,
          empty: noop,
          drain: noop,
          error: noop,
          started: false,
          paused: false,
          push: function (data, callback) {
              _insert(data, false, callback);
          },
          kill: function () {
              q.drain = noop;
              q._tasks.empty();
          },
          unshift: function (data, callback) {
              _insert(data, true, callback);
          },
          remove: function (testFn) {
              q._tasks.remove(testFn);
          },
          process: function () {
              // Avoid trying to start too many processing operations. This can occur
              // when callbacks resolve synchronously (#1267).
              if (isProcessing) {
                  return;
              }
              isProcessing = true;
              while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                  var tasks = [], data = [];
                  var l = q._tasks.length;
                  if (q.payload) l = Math.min(l, q.payload);
                  for (var i = 0; i < l; i++) {
                      var node = q._tasks.shift();
                      tasks.push(node);
                      workersList.push(node);
                      data.push(node.data);
                  }
  
                  numRunning += 1;
  
                  if (q._tasks.length === 0) {
                      q.empty();
                  }
  
                  if (numRunning === q.concurrency) {
                      q.saturated();
                  }
  
                  var cb = onlyOnce(_next(tasks));
                  _worker(data, cb);
              }
              isProcessing = false;
          },
          length: function () {
              return q._tasks.length;
          },
          running: function () {
              return numRunning;
          },
          workersList: function () {
              return workersList;
          },
          idle: function() {
              return q._tasks.length + numRunning === 0;
          },
          pause: function () {
              q.paused = true;
          },
          resume: function () {
              if (q.paused === false) { return; }
              q.paused = false;
              setImmediate$1(q.process);
          }
      };
      return q;
  }
  
  /**
   * A cargo of tasks for the worker function to complete. Cargo inherits all of
   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
   * @typedef {Object} CargoObject
   * @memberOf module:ControlFlow
   * @property {Function} length - A function returning the number of items
   * waiting to be processed. Invoke like `cargo.length()`.
   * @property {number} payload - An `integer` for determining how many tasks
   * should be process per round. This property can be changed after a `cargo` is
   * created to alter the payload on-the-fly.
   * @property {Function} push - Adds `task` to the `queue`. The callback is
   * called once the `worker` has finished processing the task. Instead of a
   * single task, an array of `tasks` can be submitted. The respective callback is
   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
   * @property {Function} saturated - A callback that is called when the
   * `queue.length()` hits the concurrency and further tasks will be queued.
   * @property {Function} empty - A callback that is called when the last item
   * from the `queue` is given to a `worker`.
   * @property {Function} drain - A callback that is called when the last item
   * from the `queue` has returned from the `worker`.
   * @property {Function} idle - a function returning false if there are items
   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
   * @property {Function} pause - a function that pauses the processing of tasks
   * until `resume()` is called. Invoke like `cargo.pause()`.
   * @property {Function} resume - a function that resumes the processing of
   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
   * @property {Function} kill - a function that removes the `drain` callback and
   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
   */
  
  /**
   * Creates a `cargo` object with the specified payload. Tasks added to the
   * cargo will be processed altogether (up to the `payload` limit). If the
   * `worker` is in progress, the task is queued until it becomes available. Once
   * the `worker` has completed some tasks, each callback of those tasks is
   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
   * for how `cargo` and `queue` work.
   *
   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
   * at a time, cargo passes an array of tasks to a single worker, repeating
   * when the worker is finished.
   *
   * @name cargo
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.queue]{@link module:ControlFlow.queue}
   * @category Control Flow
   * @param {AsyncFunction} worker - An asynchronous function for processing an array
   * of queued tasks. Invoked with `(tasks, callback)`.
   * @param {number} [payload=Infinity] - An optional `integer` for determining
   * how many tasks should be processed per round; if omitted, the default is
   * unlimited.
   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
   * attached as certain properties to listen for specific events during the
   * lifecycle of the cargo and inner queue.
   * @example
   *
   * // create a cargo object with payload 2
   * var cargo = async.cargo(function(tasks, callback) {
   *     for (var i=0; i<tasks.length; i++) {
   *         console.log('hello ' + tasks[i].name);
   *     }
   *     callback();
   * }, 2);
   *
   * // add some items
   * cargo.push({name: 'foo'}, function(err) {
   *     console.log('finished processing foo');
   * });
   * cargo.push({name: 'bar'}, function(err) {
   *     console.log('finished processing bar');
   * });
   * cargo.push({name: 'baz'}, function(err) {
   *     console.log('finished processing baz');
   * });
   */
  function cargo(worker, payload) {
      return queue(worker, 1, payload);
  }
  
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
   *
   * @name eachOfSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Invoked with (err).
   */
  var eachOfSeries = doLimit(eachOfLimit, 1);
  
  /**
   * Reduces `coll` into a single value using an async `iteratee` to return each
   * successive step. `memo` is the initial state of the reduction. This function
   * only operates in series.
   *
   * For performance reasons, it may make sense to split a call to this function
   * into a parallel map, and then use the normal `Array.prototype.reduce` on the
   * results. This function is for situations where each step in the reduction
   * needs to be async; if you can get the data before reducing it, then it's
   * probably a good idea to do so.
   *
   * @name reduce
   * @static
   * @memberOf module:Collections
   * @method
   * @alias inject
   * @alias foldl
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {*} memo - The initial state of the reduction.
   * @param {AsyncFunction} iteratee - A function applied to each item in the
   * array to produce the next step in the reduction.
   * The `iteratee` should complete with the next state of the reduction.
   * If the iteratee complete with an error, the reduction is stopped and the
   * main `callback` is immediately called with the error.
   * Invoked with (memo, item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the reduced value. Invoked with
   * (err, result).
   * @example
   *
   * async.reduce([1,2,3], 0, function(memo, item, callback) {
   *     // pointless async:
   *     process.nextTick(function() {
   *         callback(null, memo + item)
   *     });
   * }, function(err, result) {
   *     // result is now equal to the last value of memo, which is 6
   * });
   */
  function reduce(coll, memo, iteratee, callback) {
      callback = once(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      eachOfSeries(coll, function(x, i, callback) {
          _iteratee(memo, x, function(err, v) {
              memo = v;
              callback(err);
          });
      }, function(err) {
          callback(err, memo);
      });
  }
  
  /**
   * Version of the compose function that is more natural to read. Each function
   * consumes the return value of the previous function. It is the equivalent of
   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
   *
   * Each function is executed with the `this` binding of the composed function.
   *
   * @name seq
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.compose]{@link module:ControlFlow.compose}
   * @category Control Flow
   * @param {...AsyncFunction} functions - the asynchronous functions to compose
   * @returns {Function} a function that composes the `functions` in order
   * @example
   *
   * // Requires lodash (or underscore), express3 and dresende's orm2.
   * // Part of an app, that fetches cats of the logged user.
   * // This example uses `seq` function to avoid overnesting and error
   * // handling clutter.
   * app.get('/cats', function(request, response) {
   *     var User = request.models.User;
   *     async.seq(
   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
   *         function(user, fn) {
   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
   *         }
   *     )(req.session.user_id, function (err, cats) {
   *         if (err) {
   *             console.error(err);
   *             response.json({ status: 'error', message: err.message });
   *         } else {
   *             response.json({ status: 'ok', message: 'Cats found', data: cats });
   *         }
   *     });
   * });
   */
  function seq(/*...functions*/) {
      var _functions = arrayMap(arguments, wrapAsync);
      return function(/*...args*/) {
          var args = slice(arguments);
          var that = this;
  
          var cb = args[args.length - 1];
          if (typeof cb == 'function') {
              args.pop();
          } else {
              cb = noop;
          }
  
          reduce(_functions, args, function(newargs, fn, cb) {
              fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {
                  var nextargs = slice(arguments, 1);
                  cb(err, nextargs);
              }));
          },
          function(err, results) {
              cb.apply(that, [err].concat(results));
          });
      };
  }
  
  /**
   * Creates a function which is a composition of the passed asynchronous
   * functions. Each function consumes the return value of the function that
   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
   *
   * Each function is executed with the `this` binding of the composed function.
   *
   * @name compose
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {...AsyncFunction} functions - the asynchronous functions to compose
   * @returns {Function} an asynchronous function that is the composed
   * asynchronous `functions`
   * @example
   *
   * function add1(n, callback) {
   *     setTimeout(function () {
   *         callback(null, n + 1);
   *     }, 10);
   * }
   *
   * function mul3(n, callback) {
   *     setTimeout(function () {
   *         callback(null, n * 3);
   *     }, 10);
   * }
   *
   * var add1mul3 = async.compose(mul3, add1);
   * add1mul3(4, function (err, result) {
   *     // result now equals 15
   * });
   */
  var compose = function(/*...args*/) {
      return seq.apply(null, slice(arguments).reverse());
  };
  
  var _concat = Array.prototype.concat;
  
  /**
   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
   *
   * @name concatLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.concat]{@link module:Collections.concat}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
   * which should use an array as its result. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   */
  var concatLimit = function(coll, limit, iteratee, callback) {
      callback = callback || noop;
      var _iteratee = wrapAsync(iteratee);
      mapLimit(coll, limit, function(val, callback) {
          _iteratee(val, function(err /*, ...args*/) {
              if (err) return callback(err);
              return callback(null, slice(arguments, 1));
          });
      }, function(err, mapResults) {
          var result = [];
          for (var i = 0; i < mapResults.length; i++) {
              if (mapResults[i]) {
                  result = _concat.apply(result, mapResults[i]);
              }
          }
  
          return callback(err, result);
      });
  };
  
  /**
   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
   * the concatenated list. The `iteratee`s are called in parallel, and the
   * results are concatenated as they return. There is no guarantee that the
   * results array will be returned in the original order of `coll` passed to the
   * `iteratee` function.
   *
   * @name concat
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
   * which should use an array as its result. Invoked with (item, callback).
   * @param {Function} [callback(err)] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   * @example
   *
   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
   *     // files is now a list of filenames that exist in the 3 directories
   * });
   */
  var concat = doLimit(concatLimit, Infinity);
  
  /**
   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
   *
   * @name concatSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.concat]{@link module:Collections.concat}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
   * The iteratee should complete with an array an array of results.
   * Invoked with (item, callback).
   * @param {Function} [callback(err)] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   */
  var concatSeries = doLimit(concatLimit, 1);
  
  /**
   * Returns a function that when called, calls-back with the values provided.
   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
   * [`auto`]{@link module:ControlFlow.auto}.
   *
   * @name constant
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {...*} arguments... - Any number of arguments to automatically invoke
   * callback with.
   * @returns {AsyncFunction} Returns a function that when invoked, automatically
   * invokes the callback with the previous given arguments.
   * @example
   *
   * async.waterfall([
   *     async.constant(42),
   *     function (value, next) {
   *         // value === 42
   *     },
   *     //...
   * ], callback);
   *
   * async.waterfall([
   *     async.constant(filename, "utf8"),
   *     fs.readFile,
   *     function (fileData, next) {
   *         //...
   *     }
   *     //...
   * ], callback);
   *
   * async.auto({
   *     hostname: async.constant("https://server.net/"),
   *     port: findFreePort,
   *     launchServer: ["hostname", "port", function (options, cb) {
   *         startServer(options, cb);
   *     }],
   *     //...
   * }, callback);
   */
  var constant = function(/*...values*/) {
      var values = slice(arguments);
      var args = [null].concat(values);
      return function (/*...ignoredArgs, callback*/) {
          var callback = arguments[arguments.length - 1];
          return callback.apply(this, args);
      };
  };
  
  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }
  
  function _createTester(check, getResult) {
      return function(eachfn, arr, iteratee, cb) {
          cb = cb || noop;
          var testPassed = false;
          var testResult;
          eachfn(arr, function(value, _, callback) {
              iteratee(value, function(err, result) {
                  if (err) {
                      callback(err);
                  } else if (check(result) && !testResult) {
                      testPassed = true;
                      testResult = getResult(true, value);
                      callback(null, breakLoop);
                  } else {
                      callback();
                  }
              });
          }, function(err) {
              if (err) {
                  cb(err);
              } else {
                  cb(null, testPassed ? testResult : getResult(false));
              }
          });
      };
  }
  
  function _findGetResult(v, x) {
      return x;
  }
  
  /**
   * Returns the first value in `coll` that passes an async truth test. The
   * `iteratee` is applied in parallel, meaning the first iteratee to return
   * `true` will fire the detect `callback` with that result. That means the
   * result might not be the first item in the original `coll` (in terms of order)
   * that passes the test.
  
   * If order within the original `coll` is important, then look at
   * [`detectSeries`]{@link module:Collections.detectSeries}.
   *
   * @name detect
   * @static
   * @memberOf module:Collections
   * @method
   * @alias find
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee must complete with a boolean value as its result.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   * @example
   *
   * async.detect(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // result now equals the first file in the list that exists
   * });
   */
  var detect = doParallel(_createTester(identity, _findGetResult));
  
  /**
   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name detectLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.detect]{@link module:Collections.detect}
   * @alias findLimit
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee must complete with a boolean value as its result.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   */
  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));
  
  /**
   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
   *
   * @name detectSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.detect]{@link module:Collections.detect}
   * @alias findSeries
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee must complete with a boolean value as its result.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   */
  var detectSeries = doLimit(detectLimit, 1);
  
  function consoleFunc(name) {
      return function (fn/*, ...args*/) {
          var args = slice(arguments, 1);
          args.push(function (err/*, ...args*/) {
              var args = slice(arguments, 1);
              if (typeof console === 'object') {
                  if (err) {
                      if (console.error) {
                          console.error(err);
                      }
                  } else if (console[name]) {
                      arrayEach(args, function (x) {
                          console[name](x);
                      });
                  }
              }
          });
          wrapAsync(fn).apply(null, args);
      };
  }
  
  /**
   * Logs the result of an [`async` function]{@link AsyncFunction} to the
   * `console` using `console.dir` to display the properties of the resulting object.
   * Only works in Node.js or in browsers that support `console.dir` and
   * `console.error` (such as FF and Chrome).
   * If multiple arguments are returned from the async function,
   * `console.dir` is called on each argument in order.
   *
   * @name dir
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} function - The function you want to eventually apply
   * all arguments to.
   * @param {...*} arguments... - Any number of arguments to apply to the function.
   * @example
   *
   * // in a module
   * var hello = function(name, callback) {
   *     setTimeout(function() {
   *         callback(null, {hello: name});
   *     }, 1000);
   * };
   *
   * // in the node repl
   * node> async.dir(hello, 'world');
   * {hello: 'world'}
   */
  var dir = consoleFunc('dir');
  
  /**
   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
   * the order of operations, the arguments `test` and `fn` are switched.
   *
   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
   * @name doDuring
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.during]{@link module:ControlFlow.during}
   * @category Control Flow
   * @param {AsyncFunction} fn - An async function which is called each time
   * `test` passes. Invoked with (callback).
   * @param {AsyncFunction} test - asynchronous truth test to perform before each
   * execution of `fn`. Invoked with (...args, callback), where `...args` are the
   * non-error args from the previous callback of `fn`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error if one occurred, otherwise `null`.
   */
  function doDuring(fn, test, callback) {
      callback = onlyOnce(callback || noop);
      var _fn = wrapAsync(fn);
      var _test = wrapAsync(test);
  
      function next(err/*, ...args*/) {
          if (err) return callback(err);
          var args = slice(arguments, 1);
          args.push(check);
          _test.apply(this, args);
      }
  
      function check(err, truth) {
          if (err) return callback(err);
          if (!truth) return callback(null);
          _fn(next);
      }
  
      check(null, true);
  
  }
  
  /**
   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
   * the order of operations, the arguments `test` and `iteratee` are switched.
   *
   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
   *
   * @name doWhilst
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {AsyncFunction} iteratee - A function which is called each time `test`
   * passes. Invoked with (callback).
   * @param {Function} test - synchronous truth test to perform after each
   * execution of `iteratee`. Invoked with any non-error callback results of
   * `iteratee`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `iteratee` has stopped.
   * `callback` will be passed an error and any arguments passed to the final
   * `iteratee`'s callback. Invoked with (err, [results]);
   */
  function doWhilst(iteratee, test, callback) {
      callback = onlyOnce(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      var next = function(err/*, ...args*/) {
          if (err) return callback(err);
          var args = slice(arguments, 1);
          if (test.apply(this, args)) return _iteratee(next);
          callback.apply(null, [null].concat(args));
      };
      _iteratee(next);
  }
  
  /**
   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
   * argument ordering differs from `until`.
   *
   * @name doUntil
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
   * @category Control Flow
   * @param {AsyncFunction} iteratee - An async function which is called each time
   * `test` fails. Invoked with (callback).
   * @param {Function} test - synchronous truth test to perform after each
   * execution of `iteratee`. Invoked with any non-error callback results of
   * `iteratee`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has passed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   */
  function doUntil(iteratee, test, callback) {
      doWhilst(iteratee, function() {
          return !test.apply(this, arguments);
      }, callback);
  }
  
  /**
   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
   * is passed a callback in the form of `function (err, truth)`. If error is
   * passed to `test` or `fn`, the main callback is immediately called with the
   * value of the error.
   *
   * @name during
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {AsyncFunction} test - asynchronous truth test to perform before each
   * execution of `fn`. Invoked with (callback).
   * @param {AsyncFunction} fn - An async function which is called each time
   * `test` passes. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error, if one occurred, otherwise `null`.
   * @example
   *
   * var count = 0;
   *
   * async.during(
   *     function (callback) {
   *         return callback(null, count < 5);
   *     },
   *     function (callback) {
   *         count++;
   *         setTimeout(callback, 1000);
   *     },
   *     function (err) {
   *         // 5 seconds have passed
   *     }
   * );
   */
  function during(test, fn, callback) {
      callback = onlyOnce(callback || noop);
      var _fn = wrapAsync(fn);
      var _test = wrapAsync(test);
  
      function next(err) {
          if (err) return callback(err);
          _test(check);
      }
  
      function check(err, truth) {
          if (err) return callback(err);
          if (!truth) return callback(null);
          _fn(next);
      }
  
      _test(check);
  }
  
  function _withoutIndex(iteratee) {
      return function (value, index, callback) {
          return iteratee(value, callback);
      };
  }
  
  /**
   * Applies the function `iteratee` to each item in `coll`, in parallel.
   * The `iteratee` is called with an item from the list, and a callback for when
   * it has finished. If the `iteratee` passes an error to its `callback`, the
   * main `callback` (for the `each` function) is immediately called with the
   * error.
   *
   * Note, that since this function applies `iteratee` to each item in parallel,
   * there is no guarantee that the iteratee functions will complete in order.
   *
   * @name each
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEach
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to
   * each item in `coll`. Invoked with (item, callback).
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOf`.
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * // assuming openFiles is an array of file names and saveFile is a function
   * // to save the modified contents of that file:
   *
   * async.each(openFiles, saveFile, function(err){
   *   // if any of the saves produced an error, err would equal that error
   * });
   *
   * // assuming openFiles is an array of file names
   * async.each(openFiles, function(file, callback) {
   *
   *     // Perform operation on file here.
   *     console.log('Processing file ' + file);
   *
   *     if( file.length > 32 ) {
   *       console.log('This file name is too long');
   *       callback('File name too long');
   *     } else {
   *       // Do work to process file here
   *       console.log('File processed');
   *       callback();
   *     }
   * }, function(err) {
   *     // if any of the file processing produced an error, err would equal that error
   *     if( err ) {
   *       // One of the iterations produced an error.
   *       // All processing will now stop.
   *       console.log('A file failed to process');
   *     } else {
   *       console.log('All files have been processed successfully');
   *     }
   * });
   */
  function eachLimit(coll, iteratee, callback) {
      eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);
  }
  
  /**
   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
   *
   * @name eachLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfLimit`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachLimit$1(coll, limit, iteratee, callback) {
      _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
  }
  
  /**
   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
   *
   * @name eachSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfSeries`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  var eachSeries = doLimit(eachLimit$1, 1);
  
  /**
   * Wrap an async function and ensure it calls its callback on a later tick of
   * the event loop.  If the function already calls its callback on a next tick,
   * no extra deferral is added. This is useful for preventing stack overflows
   * (`RangeError: Maximum call stack size exceeded`) and generally keeping
   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
   * contained. ES2017 `async` functions are returned as-is -- they are immune
   * to Zalgo's corrupting influences, as they always resolve on a later tick.
   *
   * @name ensureAsync
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} fn - an async function, one that expects a node-style
   * callback as its last argument.
   * @returns {AsyncFunction} Returns a wrapped function with the exact same call
   * signature as the function passed in.
   * @example
   *
   * function sometimesAsync(arg, callback) {
   *     if (cache[arg]) {
   *         return callback(null, cache[arg]); // this would be synchronous!!
   *     } else {
   *         doSomeIO(arg, callback); // this IO would be asynchronous
   *     }
   * }
   *
   * // this has a risk of stack overflows if many results are cached in a row
   * async.mapSeries(args, sometimesAsync, done);
   *
   * // this will defer sometimesAsync's callback if necessary,
   * // preventing stack overflows
   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
   */
  function ensureAsync(fn) {
      if (isAsync(fn)) return fn;
      return initialParams(function (args, callback) {
          var sync = true;
          args.push(function () {
              var innerArgs = arguments;
              if (sync) {
                  setImmediate$1(function () {
                      callback.apply(null, innerArgs);
                  });
              } else {
                  callback.apply(null, innerArgs);
              }
          });
          fn.apply(this, args);
          sync = false;
      });
  }
  
  function notId(v) {
      return !v;
  }
  
  /**
   * Returns `true` if every element in `coll` satisfies an async test. If any
   * iteratee call returns `false`, the main `callback` is immediately called.
   *
   * @name every
   * @static
   * @memberOf module:Collections
   * @method
   * @alias all
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collection in parallel.
   * The iteratee must complete with a boolean result value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   * @example
   *
   * async.every(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // if result is true then every file exists
   * });
   */
  var every = doParallel(_createTester(notId, notId));
  
  /**
   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
   *
   * @name everyLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.every]{@link module:Collections.every}
   * @alias allLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collection in parallel.
   * The iteratee must complete with a boolean result value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   */
  var everyLimit = doParallelLimit(_createTester(notId, notId));
  
  /**
   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
   *
   * @name everySeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.every]{@link module:Collections.every}
   * @alias allSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collection in series.
   * The iteratee must complete with a boolean result value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   */
  var everySeries = doLimit(everyLimit, 1);
  
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }
  
  function filterArray(eachfn, arr, iteratee, callback) {
      var truthValues = new Array(arr.length);
      eachfn(arr, function (x, index, callback) {
          iteratee(x, function (err, v) {
              truthValues[index] = !!v;
              callback(err);
          });
      }, function (err) {
          if (err) return callback(err);
          var results = [];
          for (var i = 0; i < arr.length; i++) {
              if (truthValues[i]) results.push(arr[i]);
          }
          callback(null, results);
      });
  }
  
  function filterGeneric(eachfn, coll, iteratee, callback) {
      var results = [];
      eachfn(coll, function (x, index, callback) {
          iteratee(x, function (err, v) {
              if (err) {
                  callback(err);
              } else {
                  if (v) {
                      results.push({index: index, value: x});
                  }
                  callback();
              }
          });
      }, function (err) {
          if (err) {
              callback(err);
          } else {
              callback(null, arrayMap(results.sort(function (a, b) {
                  return a.index - b.index;
              }), baseProperty('value')));
          }
      });
  }
  
  function _filter(eachfn, coll, iteratee, callback) {
      var filter = isArrayLike(coll) ? filterArray : filterGeneric;
      filter(eachfn, coll, wrapAsync(iteratee), callback || noop);
  }
  
  /**
   * Returns a new array of all the values in `coll` which pass an async truth
   * test. This operation is performed in parallel, but the results array will be
   * in the same order as the original.
   *
   * @name filter
   * @static
   * @memberOf module:Collections
   * @method
   * @alias select
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   * @example
   *
   * async.filter(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, results) {
   *     // results now equals an array of the existing files
   * });
   */
  var filter = doParallel(_filter);
  
  /**
   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name filterLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @alias selectLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */
  var filterLimit = doParallelLimit(_filter);
  
  /**
   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
   *
   * @name filterSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @alias selectSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results)
   */
  var filterSeries = doLimit(filterLimit, 1);
  
  /**
   * Calls the asynchronous function `fn` with a callback parameter that allows it
   * to call itself again, in series, indefinitely.
  
   * If an error is passed to the callback then `errback` is called with the
   * error, and execution stops, otherwise it will never be called.
   *
   * @name forever
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {AsyncFunction} fn - an async function to call repeatedly.
   * Invoked with (next).
   * @param {Function} [errback] - when `fn` passes an error to it's callback,
   * this function will be called, and execution stops. Invoked with (err).
   * @example
   *
   * async.forever(
   *     function(next) {
   *         // next is suitable for passing to things that need a callback(err [, whatever]);
   *         // it will result in this function being called again.
   *     },
   *     function(err) {
   *         // if next is called with a value in its first parameter, it will appear
   *         // in here as 'err', and execution will stop.
   *     }
   * );
   */
  function forever(fn, errback) {
      var done = onlyOnce(errback || noop);
      var task = wrapAsync(ensureAsync(fn));
  
      function next(err) {
          if (err) return done(err);
          task(next);
      }
      next();
  }
  
  /**
   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
   *
   * @name groupByLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.groupBy]{@link module:Collections.groupBy}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a `key` to group the value under.
   * Invoked with (value, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Result is an `Object` whoses
   * properties are arrays of values which returned the corresponding key.
   */
  var groupByLimit = function(coll, limit, iteratee, callback) {
      callback = callback || noop;
      var _iteratee = wrapAsync(iteratee);
      mapLimit(coll, limit, function(val, callback) {
          _iteratee(val, function(err, key) {
              if (err) return callback(err);
              return callback(null, {key: key, val: val});
          });
      }, function(err, mapResults) {
          var result = {};
          // from MDN, handle object having an `hasOwnProperty` prop
          var hasOwnProperty = Object.prototype.hasOwnProperty;
  
          for (var i = 0; i < mapResults.length; i++) {
              if (mapResults[i]) {
                  var key = mapResults[i].key;
                  var val = mapResults[i].val;
  
                  if (hasOwnProperty.call(result, key)) {
                      result[key].push(val);
                  } else {
                      result[key] = [val];
                  }
              }
          }
  
          return callback(err, result);
      });
  };
  
  /**
   * Returns a new object, where each value corresponds to an array of items, from
   * `coll`, that returned the corresponding key. That is, the keys of the object
   * correspond to the values passed to the `iteratee` callback.
   *
   * Note: Since this function applies the `iteratee` to each item in parallel,
   * there is no guarantee that the `iteratee` functions will complete in order.
   * However, the values for each key in the `result` will be in the same order as
   * the original `coll`. For Objects, the values will roughly be in the order of
   * the original Objects' keys (but this can vary across JavaScript engines).
   *
   * @name groupBy
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a `key` to group the value under.
   * Invoked with (value, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Result is an `Object` whoses
   * properties are arrays of values which returned the corresponding key.
   * @example
   *
   * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
   *     db.findById(userId, function(err, user) {
   *         if (err) return callback(err);
   *         return callback(null, user.age);
   *     });
   * }, function(err, result) {
   *     // result is object containing the userIds grouped by age
   *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
   * });
   */
  var groupBy = doLimit(groupByLimit, Infinity);
  
  /**
   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
   *
   * @name groupBySeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.groupBy]{@link module:Collections.groupBy}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a `key` to group the value under.
   * Invoked with (value, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Result is an `Object` whoses
   * properties are arrays of values which returned the corresponding key.
   */
  var groupBySeries = doLimit(groupByLimit, 1);
  
  /**
   * Logs the result of an `async` function to the `console`. Only works in
   * Node.js or in browsers that support `console.log` and `console.error` (such
   * as FF and Chrome). If multiple arguments are returned from the async
   * function, `console.log` is called on each argument in order.
   *
   * @name log
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} function - The function you want to eventually apply
   * all arguments to.
   * @param {...*} arguments... - Any number of arguments to apply to the function.
   * @example
   *
   * // in a module
   * var hello = function(name, callback) {
   *     setTimeout(function() {
   *         callback(null, 'hello ' + name);
   *     }, 1000);
   * };
   *
   * // in the node repl
   * node> async.log(hello, 'world');
   * 'hello world'
   */
  var log = consoleFunc('log');
  
  /**
   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name mapValuesLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.mapValues]{@link module:Collections.mapValues}
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - A function to apply to each value and key
   * in `coll`.
   * The iteratee should complete with the transformed value as its result.
   * Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   */
  function mapValuesLimit(obj, limit, iteratee, callback) {
      callback = once(callback || noop);
      var newObj = {};
      var _iteratee = wrapAsync(iteratee);
      eachOfLimit(obj, limit, function(val, key, next) {
          _iteratee(val, key, function (err, result) {
              if (err) return next(err);
              newObj[key] = result;
              next();
          });
      }, function (err) {
          callback(err, newObj);
      });
  }
  
  /**
   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
   *
   * Produces a new Object by mapping each value of `obj` through the `iteratee`
   * function. The `iteratee` is called each `value` and `key` from `obj` and a
   * callback for when it has finished processing. Each of these callbacks takes
   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
   * passes an error to its callback, the main `callback` (for the `mapValues`
   * function) is immediately called with the error.
   *
   * Note, the order of the keys in the result is not guaranteed.  The keys will
   * be roughly in the order they complete, (but this is very engine-specific)
   *
   * @name mapValues
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each value and key
   * in `coll`.
   * The iteratee should complete with the transformed value as its result.
   * Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   * @example
   *
   * async.mapValues({
   *     f1: 'file1',
   *     f2: 'file2',
   *     f3: 'file3'
   * }, function (file, key, callback) {
   *   fs.stat(file, callback);
   * }, function(err, result) {
   *     // result is now a map of stats for each file, e.g.
   *     // {
   *     //     f1: [stats for file1],
   *     //     f2: [stats for file2],
   *     //     f3: [stats for file3]
   *     // }
   * });
   */
  
  var mapValues = doLimit(mapValuesLimit, Infinity);
  
  /**
   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
   *
   * @name mapValuesSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.mapValues]{@link module:Collections.mapValues}
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each value and key
   * in `coll`.
   * The iteratee should complete with the transformed value as its result.
   * Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   */
  var mapValuesSeries = doLimit(mapValuesLimit, 1);
  
  function has(obj, key) {
      return key in obj;
  }
  
  /**
   * Caches the results of an async function. When creating a hash to store
   * function results against, the callback is omitted from the hash and an
   * optional hash function can be used.
   *
   * If no hash function is specified, the first argument is used as a hash key,
   * which may work reasonably if it is a string or a data type that converts to a
   * distinct string. Note that objects and arrays will not behave reasonably.
   * Neither will cases where the other arguments are significant. In such cases,
   * specify your own hash function.
   *
   * The cache of results is exposed as the `memo` property of the function
   * returned by `memoize`.
   *
   * @name memoize
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} fn - The async function to proxy and cache results from.
   * @param {Function} hasher - An optional function for generating a custom hash
   * for storing results. It has all the arguments applied to it apart from the
   * callback, and must be synchronous.
   * @returns {AsyncFunction} a memoized version of `fn`
   * @example
   *
   * var slow_fn = function(name, callback) {
   *     // do something
   *     callback(null, result);
   * };
   * var fn = async.memoize(slow_fn);
   *
   * // fn can now be used as if it were slow_fn
   * fn('some name', function() {
   *     // callback
   * });
   */
  function memoize(fn, hasher) {
      var memo = Object.create(null);
      var queues = Object.create(null);
      hasher = hasher || identity;
      var _fn = wrapAsync(fn);
      var memoized = initialParams(function memoized(args, callback) {
          var key = hasher.apply(null, args);
          if (has(memo, key)) {
              setImmediate$1(function() {
                  callback.apply(null, memo[key]);
              });
          } else if (has(queues, key)) {
              queues[key].push(callback);
          } else {
              queues[key] = [callback];
              _fn.apply(null, args.concat(function(/*args*/) {
                  var args = slice(arguments);
                  memo[key] = args;
                  var q = queues[key];
                  delete queues[key];
                  for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, args);
                  }
              }));
          }
      });
      memoized.memo = memo;
      memoized.unmemoized = fn;
      return memoized;
  }
  
  /**
   * Calls `callback` on a later loop around the event loop. In Node.js this just
   * calls `setImmediate`.  In the browser it will use `setImmediate` if
   * available, otherwise `setTimeout(callback, 0)`, which means other higher
   * priority events may precede the execution of `callback`.
   *
   * This is used internally for browser-compatibility purposes.
   *
   * @name nextTick
   * @static
   * @memberOf module:Utils
   * @method
   * @alias setImmediate
   * @category Util
   * @param {Function} callback - The function to call on a later loop around
   * the event loop. Invoked with (args...).
   * @param {...*} args... - any number of additional arguments to pass to the
   * callback on the next tick.
   * @example
   *
   * var call_order = [];
   * async.nextTick(function() {
   *     call_order.push('two');
   *     // call_order now equals ['one','two']
   * });
   * call_order.push('one');
   *
   * async.setImmediate(function (a, b, c) {
   *     // a, b, and c equal 1, 2, and 3
   * }, 1, 2, 3);
   */
  var _defer$1;
  
  if (hasNextTick) {
      _defer$1 = process.nextTick;
  } else if (hasSetImmediate) {
      _defer$1 = setImmediate;
  } else {
      _defer$1 = fallback;
  }
  
  var nextTick = wrap(_defer$1);
  
  function _parallel(eachfn, tasks, callback) {
      callback = callback || noop;
      var results = isArrayLike(tasks) ? [] : {};
  
      eachfn(tasks, function (task, key, callback) {
          wrapAsync(task)(function (err, result) {
              if (arguments.length > 2) {
                  result = slice(arguments, 1);
              }
              results[key] = result;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  
  /**
   * Run the `tasks` collection of functions in parallel, without waiting until
   * the previous function has completed. If any of the functions pass an error to
   * its callback, the main `callback` is immediately called with the value of the
   * error. Once the `tasks` have completed, the results are passed to the final
   * `callback` as an array.
   *
   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
   * parallel execution of code.  If your tasks do not use any timers or perform
   * any I/O, they will actually be executed in series.  Any synchronous setup
   * sections for each task will happen one after the other.  JavaScript remains
   * single-threaded.
   *
   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
   * execution of other tasks when a task fails.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   * results from {@link async.parallel}.
   *
   * @name parallel
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection of
   * [async functions]{@link AsyncFunction} to run.
   * Each async function can complete with any number of optional `result` values.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   *
   * @example
   * async.parallel([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // the results array will equal ['one','two'] even though
   *     // the second function had a shorter timeout.
   * });
   *
   * // an example using an object instead of an array
   * async.parallel({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equals to: {one: 1, two: 2}
   * });
   */
  function parallelLimit(tasks, callback) {
      _parallel(eachOf, tasks, callback);
  }
  
  /**
   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name parallelLimit
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.parallel]{@link module:ControlFlow.parallel}
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection of
   * [async functions]{@link AsyncFunction} to run.
   * Each async function can complete with any number of optional `result` values.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   */
  function parallelLimit$1(tasks, limit, callback) {
      _parallel(_eachOfLimit(limit), tasks, callback);
  }
  
  /**
   * A queue of tasks for the worker function to complete.
   * @typedef {Object} QueueObject
   * @memberOf module:ControlFlow
   * @property {Function} length - a function returning the number of items
   * waiting to be processed. Invoke with `queue.length()`.
   * @property {boolean} started - a boolean indicating whether or not any
   * items have been pushed and processed by the queue.
   * @property {Function} running - a function returning the number of items
   * currently being processed. Invoke with `queue.running()`.
   * @property {Function} workersList - a function returning the array of items
   * currently being processed. Invoke with `queue.workersList()`.
   * @property {Function} idle - a function returning false if there are items
   * waiting or being processed, or true if not. Invoke with `queue.idle()`.
   * @property {number} concurrency - an integer for determining how many `worker`
   * functions should be run in parallel. This property can be changed after a
   * `queue` is created to alter the concurrency on-the-fly.
   * @property {Function} push - add a new task to the `queue`. Calls `callback`
   * once the `worker` has finished processing the task. Instead of a single task,
   * a `tasks` array can be submitted. The respective callback is used for every
   * task in the list. Invoke with `queue.push(task, [callback])`,
   * @property {Function} unshift - add a new task to the front of the `queue`.
   * Invoke with `queue.unshift(task, [callback])`.
   * @property {Function} remove - remove items from the queue that match a test
   * function.  The test function will be passed an object with a `data` property,
   * and a `priority` property, if this is a
   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
   * `function ({data, priority}) {}` and returns a Boolean.
   * @property {Function} saturated - a callback that is called when the number of
   * running workers hits the `concurrency` limit, and further tasks will be
   * queued.
   * @property {Function} unsaturated - a callback that is called when the number
   * of running workers is less than the `concurrency` & `buffer` limits, and
   * further tasks will not be queued.
   * @property {number} buffer - A minimum threshold buffer in order to say that
   * the `queue` is `unsaturated`.
   * @property {Function} empty - a callback that is called when the last item
   * from the `queue` is given to a `worker`.
   * @property {Function} drain - a callback that is called when the last item
   * from the `queue` has returned from the `worker`.
   * @property {Function} error - a callback that is called when a task errors.
   * Has the signature `function(error, task)`.
   * @property {boolean} paused - a boolean for determining whether the queue is
   * in a paused state.
   * @property {Function} pause - a function that pauses the processing of tasks
   * until `resume()` is called. Invoke with `queue.pause()`.
   * @property {Function} resume - a function that resumes the processing of
   * queued tasks when the queue is paused. Invoke with `queue.resume()`.
   * @property {Function} kill - a function that removes the `drain` callback and
   * empties remaining tasks from the queue forcing it to go idle. No more tasks
   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
   */
  
  /**
   * Creates a `queue` object with the specified `concurrency`. Tasks added to the
   * `queue` are processed in parallel (up to the `concurrency` limit). If all
   * `worker`s are in progress, the task is queued until one becomes available.
   * Once a `worker` completes a `task`, that `task`'s callback is called.
   *
   * @name queue
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {AsyncFunction} worker - An async function for processing a queued task.
   * If you want to handle errors from an individual task, pass a callback to
   * `q.push()`. Invoked with (task, callback).
   * @param {number} [concurrency=1] - An `integer` for determining how many
   * `worker` functions should be run in parallel.  If omitted, the concurrency
   * defaults to `1`.  If the concurrency is `0`, an error is thrown.
   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
   * attached as certain properties to listen for specific events during the
   * lifecycle of the queue.
   * @example
   *
   * // create a queue object with concurrency 2
   * var q = async.queue(function(task, callback) {
   *     console.log('hello ' + task.name);
   *     callback();
   * }, 2);
   *
   * // assign a callback
   * q.drain = function() {
   *     console.log('all items have been processed');
   * };
   *
   * // add some items to the queue
   * q.push({name: 'foo'}, function(err) {
   *     console.log('finished processing foo');
   * });
   * q.push({name: 'bar'}, function (err) {
   *     console.log('finished processing bar');
   * });
   *
   * // add some items to the queue (batch-wise)
   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
   *     console.log('finished processing item');
   * });
   *
   * // add some items to the front of the queue
   * q.unshift({name: 'bar'}, function (err) {
   *     console.log('finished processing bar');
   * });
   */
  var queue$1 = function (worker, concurrency) {
      var _worker = wrapAsync(worker);
      return queue(function (items, cb) {
          _worker(items[0], cb);
      }, concurrency, 1);
  };
  
  /**
   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
   * completed in ascending priority order.
   *
   * @name priorityQueue
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.queue]{@link module:ControlFlow.queue}
   * @category Control Flow
   * @param {AsyncFunction} worker - An async function for processing a queued task.
   * If you want to handle errors from an individual task, pass a callback to
   * `q.push()`.
   * Invoked with (task, callback).
   * @param {number} concurrency - An `integer` for determining how many `worker`
   * functions should be run in parallel.  If omitted, the concurrency defaults to
   * `1`.  If the concurrency is `0`, an error is thrown.
   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
   * differences between `queue` and `priorityQueue` objects:
   * * `push(task, priority, [callback])` - `priority` should be a number. If an
   *   array of `tasks` is given, all tasks will be assigned the same priority.
   * * The `unshift` method was removed.
   */
  var priorityQueue = function(worker, concurrency) {
      // Start with a normal queue
      var q = queue$1(worker, concurrency);
  
      // Override push to accept second parameter representing priority
      q.push = function(data, priority, callback) {
          if (callback == null) callback = noop;
          if (typeof callback !== 'function') {
              throw new Error('task callback must be a function');
          }
          q.started = true;
          if (!isArray(data)) {
              data = [data];
          }
          if (data.length === 0) {
              // call drain immediately if there are no tasks
              return setImmediate$1(function() {
                  q.drain();
              });
          }
  
          priority = priority || 0;
          var nextNode = q._tasks.head;
          while (nextNode && priority >= nextNode.priority) {
              nextNode = nextNode.next;
          }
  
          for (var i = 0, l = data.length; i < l; i++) {
              var item = {
                  data: data[i],
                  priority: priority,
                  callback: callback
              };
  
              if (nextNode) {
                  q._tasks.insertBefore(nextNode, item);
              } else {
                  q._tasks.push(item);
              }
          }
          setImmediate$1(q.process);
      };
  
      // Remove unshift function
      delete q.unshift;
  
      return q;
  };
  
  /**
   * Runs the `tasks` array of functions in parallel, without waiting until the
   * previous function has completed. Once any of the `tasks` complete or pass an
   * error to its callback, the main `callback` is immediately called. It's
   * equivalent to `Promise.race()`.
   *
   * @name race
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
   * to run. Each function can complete with an optional `result` value.
   * @param {Function} callback - A callback to run once any of the functions have
   * completed. This function gets an error or result from the first function that
   * completed. Invoked with (err, result).
   * @returns undefined
   * @example
   *
   * async.race([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // main callback
   * function(err, result) {
   *     // the result will be equal to 'two' as it finishes earlier
   * });
   */
  function race(tasks, callback) {
      callback = once(callback || noop);
      if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
      if (!tasks.length) return callback();
      for (var i = 0, l = tasks.length; i < l; i++) {
          wrapAsync(tasks[i])(callback);
      }
  }
  
  /**
   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
   *
   * @name reduceRight
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reduce]{@link module:Collections.reduce}
   * @alias foldr
   * @category Collection
   * @param {Array} array - A collection to iterate over.
   * @param {*} memo - The initial state of the reduction.
   * @param {AsyncFunction} iteratee - A function applied to each item in the
   * array to produce the next step in the reduction.
   * The `iteratee` should complete with the next state of the reduction.
   * If the iteratee complete with an error, the reduction is stopped and the
   * main `callback` is immediately called with the error.
   * Invoked with (memo, item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the reduced value. Invoked with
   * (err, result).
   */
  function reduceRight (array, memo, iteratee, callback) {
      var reversed = slice(array).reverse();
      reduce(reversed, memo, iteratee, callback);
  }
  
  /**
   * Wraps the async function in another function that always completes with a
   * result object, even when it errors.
   *
   * The result object has either the property `error` or `value`.
   *
   * @name reflect
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} fn - The async function you want to wrap
   * @returns {Function} - A function that always passes null to it's callback as
   * the error. The second argument to the callback will be an `object` with
   * either an `error` or a `value` property.
   * @example
   *
   * async.parallel([
   *     async.reflect(function(callback) {
   *         // do some stuff ...
   *         callback(null, 'one');
   *     }),
   *     async.reflect(function(callback) {
   *         // do some more stuff but error ...
   *         callback('bad stuff happened');
   *     }),
   *     async.reflect(function(callback) {
   *         // do some more stuff ...
   *         callback(null, 'two');
   *     })
   * ],
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results[0].value = 'one'
   *     // results[1].error = 'bad stuff happened'
   *     // results[2].value = 'two'
   * });
   */
  function reflect(fn) {
      var _fn = wrapAsync(fn);
      return initialParams(function reflectOn(args, reflectCallback) {
          args.push(function callback(error, cbArg) {
              if (error) {
                  reflectCallback(null, { error: error });
              } else {
                  var value;
                  if (arguments.length <= 2) {
                      value = cbArg;
                  } else {
                      value = slice(arguments, 1);
                  }
                  reflectCallback(null, { value: value });
              }
          });
  
          return _fn.apply(this, args);
      });
  }
  
  function reject$1(eachfn, arr, iteratee, callback) {
      _filter(eachfn, arr, function(value, cb) {
          iteratee(value, function(err, v) {
              cb(err, !v);
          });
      }, callback);
  }
  
  /**
   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
   *
   * @name reject
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - An async truth test to apply to each item in
   * `coll`.
   * The should complete with a boolean value as its `result`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   * @example
   *
   * async.reject(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, results) {
   *     // results now equals an array of missing files
   *     createFiles(results);
   * });
   */
  var reject = doParallel(reject$1);
  
  /**
   * A helper function that wraps an array or an object of functions with `reflect`.
   *
   * @name reflectAll
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.reflect]{@link module:Utils.reflect}
   * @category Util
   * @param {Array|Object|Iterable} tasks - The collection of
   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
   * @returns {Array} Returns an array of async functions, each wrapped in
   * `async.reflect`
   * @example
   *
   * let tasks = [
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         // do some more stuff but error ...
   *         callback(new Error('bad stuff happened'));
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ];
   *
   * async.parallel(async.reflectAll(tasks),
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results[0].value = 'one'
   *     // results[1].error = Error('bad stuff happened')
   *     // results[2].value = 'two'
   * });
   *
   * // an example using an object instead of an array
   * let tasks = {
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         callback('two');
   *     },
   *     three: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'three');
   *         }, 100);
   *     }
   * };
   *
   * async.parallel(async.reflectAll(tasks),
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results.one.value = 'one'
   *     // results.two.error = 'two'
   *     // results.three.value = 'three'
   * });
   */
  function reflectAll(tasks) {
      var results;
      if (isArray(tasks)) {
          results = arrayMap(tasks, reflect);
      } else {
          results = {};
          baseForOwn(tasks, function(task, key) {
              results[key] = reflect.call(this, task);
          });
      }
      return results;
  }
  
  /**
   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name rejectLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reject]{@link module:Collections.reject}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - An async truth test to apply to each item in
   * `coll`.
   * The should complete with a boolean value as its `result`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */
  var rejectLimit = doParallelLimit(reject$1);
  
  /**
   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
   *
   * @name rejectSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reject]{@link module:Collections.reject}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - An async truth test to apply to each item in
   * `coll`.
   * The should complete with a boolean value as its `result`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */
  var rejectSeries = doLimit(rejectLimit, 1);
  
  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant$1(value) {
    return function() {
      return value;
    };
  }
  
  /**
   * Attempts to get a successful response from `task` no more than `times` times
   * before returning an error. If the task is successful, the `callback` will be
   * passed the result of the successful task. If all attempts fail, the callback
   * will be passed the error and result (if any) of the final attempt.
   *
   * @name retry
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @see [async.retryable]{@link module:ControlFlow.retryable}
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
   * object with `times` and `interval` or a number.
   * * `times` - The number of attempts to make before giving up.  The default
   *   is `5`.
   * * `interval` - The time to wait between retries, in milliseconds.  The
   *   default is `0`. The interval may also be specified as a function of the
   *   retry count (see example).
   * * `errorFilter` - An optional synchronous function that is invoked on
   *   erroneous result. If it returns `true` the retry attempts will continue;
   *   if the function returns `false` the retry flow is aborted with the current
   *   attempt's error and result being returned to the final callback.
   *   Invoked with (err).
   * * If `opts` is a number, the number specifies the number of times to retry,
   *   with the default interval of `0`.
   * @param {AsyncFunction} task - An async function to retry.
   * Invoked with (callback).
   * @param {Function} [callback] - An optional callback which is called when the
   * task has succeeded, or after the final failed attempt. It receives the `err`
   * and `result` arguments of the last attempt at completing the `task`. Invoked
   * with (err, results).
   *
   * @example
   *
   * // The `retry` function can be used as a stand-alone control flow by passing
   * // a callback, as shown below:
   *
   * // try calling apiMethod 3 times
   * async.retry(3, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 3 times, waiting 200 ms between each retry
   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 10 times with exponential backoff
   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
   * async.retry({
   *   times: 10,
   *   interval: function(retryCount) {
   *     return 50 * Math.pow(2, retryCount);
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod the default 5 times no delay between each retry
   * async.retry(apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod only when error condition satisfies, all other
   * // errors will abort the retry control flow and return to final callback
   * async.retry({
   *   errorFilter: function(err) {
   *     return err.message === 'Temporary error'; // only retry on a specific error
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // It can also be embedded within other control flow functions to retry
   * // individual methods that are not as reliable, like this:
   * async.auto({
   *     users: api.getUsers.bind(api),
   *     payments: async.retryable(3, api.getPayments.bind(api))
   * }, function(err, results) {
   *     // do something with the results
   * });
   *
   */
  function retry(opts, task, callback) {
      var DEFAULT_TIMES = 5;
      var DEFAULT_INTERVAL = 0;
  
      var options = {
          times: DEFAULT_TIMES,
          intervalFunc: constant$1(DEFAULT_INTERVAL)
      };
  
      function parseTimes(acc, t) {
          if (typeof t === 'object') {
              acc.times = +t.times || DEFAULT_TIMES;
  
              acc.intervalFunc = typeof t.interval === 'function' ?
                  t.interval :
                  constant$1(+t.interval || DEFAULT_INTERVAL);
  
              acc.errorFilter = t.errorFilter;
          } else if (typeof t === 'number' || typeof t === 'string') {
              acc.times = +t || DEFAULT_TIMES;
          } else {
              throw new Error("Invalid arguments for async.retry");
          }
      }
  
      if (arguments.length < 3 && typeof opts === 'function') {
          callback = task || noop;
          task = opts;
      } else {
          parseTimes(options, opts);
          callback = callback || noop;
      }
  
      if (typeof task !== 'function') {
          throw new Error("Invalid arguments for async.retry");
      }
  
      var _task = wrapAsync(task);
  
      var attempt = 1;
      function retryAttempt() {
          _task(function(err) {
              if (err && attempt++ < options.times &&
                  (typeof options.errorFilter != 'function' ||
                      options.errorFilter(err))) {
                  setTimeout(retryAttempt, options.intervalFunc(attempt));
              } else {
                  callback.apply(null, arguments);
              }
          });
      }
  
      retryAttempt();
  }
  
  /**
   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
   * wraps a task and makes it retryable, rather than immediately calling it
   * with retries.
   *
   * @name retryable
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.retry]{@link module:ControlFlow.retry}
   * @category Control Flow
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
   * options, exactly the same as from `retry`
   * @param {AsyncFunction} task - the asynchronous function to wrap.
   * This function will be passed any arguments passed to the returned wrapper.
   * Invoked with (...args, callback).
   * @returns {AsyncFunction} The wrapped function, which when invoked, will
   * retry on an error, based on the parameters specified in `opts`.
   * This function will accept the same parameters as `task`.
   * @example
   *
   * async.auto({
   *     dep1: async.retryable(3, getFromFlakyService),
   *     process: ["dep1", async.retryable(3, function (results, cb) {
   *         maybeProcessData(results.dep1, cb);
   *     })]
   * }, callback);
   */
  var retryable = function (opts, task) {
      if (!task) {
          task = opts;
          opts = null;
      }
      var _task = wrapAsync(task);
      return initialParams(function (args, callback) {
          function taskFn(cb) {
              _task.apply(null, args.concat(cb));
          }
  
          if (opts) retry(opts, taskFn, callback);
          else retry(taskFn, callback);
  
      });
  };
  
  /**
   * Run the functions in the `tasks` collection in series, each one running once
   * the previous function has completed. If any functions in the series pass an
   * error to its callback, no more functions are run, and `callback` is
   * immediately called with the value of the error. Otherwise, `callback`
   * receives an array of results when `tasks` have completed.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function, and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   *  results from {@link async.series}.
   *
   * **Note** that while many implementations preserve the order of object
   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
   * explicitly states that
   *
   * > The mechanics and order of enumerating the properties is not specified.
   *
   * So if you rely on the order in which your series of functions are executed,
   * and want this to work on all platforms, consider using an array.
   *
   * @name series
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection containing
   * [async functions]{@link AsyncFunction} to run in series.
   * Each function can complete with any number of optional `result` values.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This function gets a results array (or object)
   * containing all the result arguments passed to the `task` callbacks. Invoked
   * with (err, result).
   * @example
   * async.series([
   *     function(callback) {
   *         // do some stuff ...
   *         callback(null, 'one');
   *     },
   *     function(callback) {
   *         // do some more stuff ...
   *         callback(null, 'two');
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // results is now equal to ['one', 'two']
   * });
   *
   * async.series({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback){
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equal to: {one: 1, two: 2}
   * });
   */
  function series(tasks, callback) {
      _parallel(eachOfSeries, tasks, callback);
  }
  
  /**
   * Returns `true` if at least one element in the `coll` satisfies an async test.
   * If any iteratee call returns `true`, the main `callback` is immediately
   * called.
   *
   * @name some
   * @static
   * @memberOf module:Collections
   * @method
   * @alias any
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collections in parallel.
   * The iteratee should complete with a boolean `result` value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   * @example
   *
   * async.some(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // if result is true then at least one of the files exists
   * });
   */
  var some = doParallel(_createTester(Boolean, identity));
  
  /**
   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
   *
   * @name someLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.some]{@link module:Collections.some}
   * @alias anyLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collections in parallel.
   * The iteratee should complete with a boolean `result` value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   */
  var someLimit = doParallelLimit(_createTester(Boolean, identity));
  
  /**
   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
   *
   * @name someSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.some]{@link module:Collections.some}
   * @alias anySeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collections in series.
   * The iteratee should complete with a boolean `result` value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   */
  var someSeries = doLimit(someLimit, 1);
  
  /**
   * Sorts a list by the results of running each `coll` value through an async
   * `iteratee`.
   *
   * @name sortBy
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a value to use as the sort criteria as
   * its `result`.
   * Invoked with (item, callback).
   * @param {Function} callback - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is the items
   * from the original `coll` sorted by the values returned by the `iteratee`
   * calls. Invoked with (err, results).
   * @example
   *
   * async.sortBy(['file1','file2','file3'], function(file, callback) {
   *     fs.stat(file, function(err, stats) {
   *         callback(err, stats.mtime);
   *     });
   * }, function(err, results) {
   *     // results is now the original array of files sorted by
   *     // modified date
   * });
   *
   * // By modifying the callback parameter the
   * // sorting order can be influenced:
   *
   * // ascending order
   * async.sortBy([1,9,3,5], function(x, callback) {
   *     callback(null, x);
   * }, function(err,result) {
   *     // result callback
   * });
   *
   * // descending order
   * async.sortBy([1,9,3,5], function(x, callback) {
   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
   * }, function(err,result) {
   *     // result callback
   * });
   */
  function sortBy (coll, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      map(coll, function (x, callback) {
          _iteratee(x, function (err, criteria) {
              if (err) return callback(err);
              callback(null, {value: x, criteria: criteria});
          });
      }, function (err, results) {
          if (err) return callback(err);
          callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
      });
  
      function comparator(left, right) {
          var a = left.criteria, b = right.criteria;
          return a < b ? -1 : a > b ? 1 : 0;
      }
  }
  
  /**
   * Sets a time limit on an asynchronous function. If the function does not call
   * its callback within the specified milliseconds, it will be called with a
   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
   *
   * @name timeout
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} asyncFn - The async function to limit in time.
   * @param {number} milliseconds - The specified time limit.
   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
   * to timeout Error for more information..
   * @returns {AsyncFunction} Returns a wrapped function that can be used with any
   * of the control flow functions.
   * Invoke this function with the same parameters as you would `asyncFunc`.
   * @example
   *
   * function myFunction(foo, callback) {
   *     doAsyncTask(foo, function(err, data) {
   *         // handle errors
   *         if (err) return callback(err);
   *
   *         // do some stuff ...
   *
   *         // return processed data
   *         return callback(null, data);
   *     });
   * }
   *
   * var wrapped = async.timeout(myFunction, 1000);
   *
   * // call `wrapped` as you would `myFunction`
   * wrapped({ bar: 'bar' }, function(err, data) {
   *     // if `myFunction` takes < 1000 ms to execute, `err`
   *     // and `data` will have their expected values
   *
   *     // else `err` will be an Error with the code 'ETIMEDOUT'
   * });
   */
  function timeout(asyncFn, milliseconds, info) {
      var fn = wrapAsync(asyncFn);
  
      return initialParams(function (args, callback) {
          var timedOut = false;
          var timer;
  
          function timeoutCallback() {
              var name = asyncFn.name || 'anonymous';
              var error  = new Error('Callback function "' + name + '" timed out.');
              error.code = 'ETIMEDOUT';
              if (info) {
                  error.info = info;
              }
              timedOut = true;
              callback(error);
          }
  
          args.push(function () {
              if (!timedOut) {
                  callback.apply(null, arguments);
                  clearTimeout(timer);
              }
          });
  
          // setup timer and call original function
          timer = setTimeout(timeoutCallback, milliseconds);
          fn.apply(null, args);
      });
  }
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil;
  var nativeMax = Math.max;
  
  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
        result = Array(length);
  
    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }
    return result;
  }
  
  /**
   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name timesLimit
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.times]{@link module:ControlFlow.times}
   * @category Control Flow
   * @param {number} count - The number of times to run the function.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - The async function to call `n` times.
   * Invoked with the iteration index and a callback: (n, next).
   * @param {Function} callback - see [async.map]{@link module:Collections.map}.
   */
  function timeLimit(count, limit, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);
  }
  
  /**
   * Calls the `iteratee` function `n` times, and accumulates results in the same
   * manner you would use with [map]{@link module:Collections.map}.
   *
   * @name times
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Control Flow
   * @param {number} n - The number of times to run the function.
   * @param {AsyncFunction} iteratee - The async function to call `n` times.
   * Invoked with the iteration index and a callback: (n, next).
   * @param {Function} callback - see {@link module:Collections.map}.
   * @example
   *
   * // Pretend this is some complicated async factory
   * var createUser = function(id, callback) {
   *     callback(null, {
   *         id: 'user' + id
   *     });
   * };
   *
   * // generate 5 users
   * async.times(5, function(n, next) {
   *     createUser(n, function(err, user) {
   *         next(err, user);
   *     });
   * }, function(err, users) {
   *     // we should now have 5 users
   * });
   */
  var times = doLimit(timeLimit, Infinity);
  
  /**
   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
   *
   * @name timesSeries
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.times]{@link module:ControlFlow.times}
   * @category Control Flow
   * @param {number} n - The number of times to run the function.
   * @param {AsyncFunction} iteratee - The async function to call `n` times.
   * Invoked with the iteration index and a callback: (n, next).
   * @param {Function} callback - see {@link module:Collections.map}.
   */
  var timesSeries = doLimit(timeLimit, 1);
  
  /**
   * A relative of `reduce`.  Takes an Object or Array, and iterates over each
   * element in series, each step potentially mutating an `accumulator` value.
   * The type of the accumulator defaults to the type of collection passed in.
   *
   * @name transform
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {*} [accumulator] - The initial state of the transform.  If omitted,
   * it will default to an empty Object or Array, depending on the type of `coll`
   * @param {AsyncFunction} iteratee - A function applied to each item in the
   * collection that potentially modifies the accumulator.
   * Invoked with (accumulator, item, key, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the transformed accumulator.
   * Invoked with (err, result).
   * @example
   *
   * async.transform([1,2,3], function(acc, item, index, callback) {
   *     // pointless async:
   *     process.nextTick(function() {
   *         acc.push(item * 2)
   *         callback(null)
   *     });
   * }, function(err, result) {
   *     // result is now equal to [2, 4, 6]
   * });
   *
   * @example
   *
   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
   *     setImmediate(function () {
   *         obj[key] = val * 2;
   *         callback();
   *     })
   * }, function (err, result) {
   *     // result is equal to {a: 2, b: 4, c: 6}
   * })
   */
  function transform (coll, accumulator, iteratee, callback) {
      if (arguments.length <= 3) {
          callback = iteratee;
          iteratee = accumulator;
          accumulator = isArray(coll) ? [] : {};
      }
      callback = once(callback || noop);
      var _iteratee = wrapAsync(iteratee);
  
      eachOf(coll, function(v, k, cb) {
          _iteratee(accumulator, v, k, cb);
      }, function(err) {
          callback(err, accumulator);
      });
  }
  
  /**
   * It runs each task in series but stops whenever any of the functions were
   * successful. If one of the tasks were successful, the `callback` will be
   * passed the result of the successful task. If all tasks fail, the callback
   * will be passed the error and result (if any) of the final attempt.
   *
   * @name tryEach
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection containing functions to
   * run, each function is passed a `callback(err, result)` it must call on
   * completion with an error `err` (which can be `null`) and an optional `result`
   * value.
   * @param {Function} [callback] - An optional callback which is called when one
   * of the tasks has succeeded, or all have failed. It receives the `err` and
   * `result` arguments of the last attempt at completing the `task`. Invoked with
   * (err, results).
   * @example
   * async.try([
   *     function getDataFromFirstWebsite(callback) {
   *         // Try getting the data from the first website
   *         callback(err, data);
   *     },
   *     function getDataFromSecondWebsite(callback) {
   *         // First website failed,
   *         // Try getting the data from the backup website
   *         callback(err, data);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     Now do something with the data.
   * });
   *
   */
  function tryEach(tasks, callback) {
      var error = null;
      var result;
      callback = callback || noop;
      eachSeries(tasks, function(task, callback) {
          wrapAsync(task)(function (err, res/*, ...args*/) {
              if (arguments.length > 2) {
                  result = slice(arguments, 1);
              } else {
                  result = res;
              }
              error = err;
              callback(!err);
          });
      }, function () {
          callback(error, result);
      });
  }
  
  /**
   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
   * unmemoized form. Handy for testing.
   *
   * @name unmemoize
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.memoize]{@link module:Utils.memoize}
   * @category Util
   * @param {AsyncFunction} fn - the memoized function
   * @returns {AsyncFunction} a function that calls the original unmemoized function
   */
  function unmemoize(fn) {
      return function () {
          return (fn.unmemoized || fn).apply(null, arguments);
      };
  }
  
  /**
   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
   * stopped, or an error occurs.
   *
   * @name whilst
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Function} test - synchronous truth test to perform before each
   * execution of `iteratee`. Invoked with ().
   * @param {AsyncFunction} iteratee - An async function which is called each time
   * `test` passes. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   * @returns undefined
   * @example
   *
   * var count = 0;
   * async.whilst(
   *     function() { return count < 5; },
   *     function(callback) {
   *         count++;
   *         setTimeout(function() {
   *             callback(null, count);
   *         }, 1000);
   *     },
   *     function (err, n) {
   *         // 5 seconds have passed, n = 5
   *     }
   * );
   */
  function whilst(test, iteratee, callback) {
      callback = onlyOnce(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      if (!test()) return callback(null);
      var next = function(err/*, ...args*/) {
          if (err) return callback(err);
          if (test()) return _iteratee(next);
          var args = slice(arguments, 1);
          callback.apply(null, [null].concat(args));
      };
      _iteratee(next);
  }
  
  /**
   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
   * stopped, or an error occurs. `callback` will be passed an error and any
   * arguments passed to the final `iteratee`'s callback.
   *
   * The inverse of [whilst]{@link module:ControlFlow.whilst}.
   *
   * @name until
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {Function} test - synchronous truth test to perform before each
   * execution of `iteratee`. Invoked with ().
   * @param {AsyncFunction} iteratee - An async function which is called each time
   * `test` fails. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has passed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   */
  function until(test, iteratee, callback) {
      whilst(function() {
          return !test.apply(this, arguments);
      }, iteratee, callback);
  }
  
  /**
   * Runs the `tasks` array of functions in series, each passing their results to
   * the next in the array. However, if any of the `tasks` pass an error to their
   * own callback, the next function is not executed, and the main `callback` is
   * immediately called with the error.
   *
   * @name waterfall
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
   * to run.
   * Each function should complete with any number of `result` values.
   * The `result` values will be passed as arguments, in order, to the next task.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This will be passed the results of the last task's
   * callback. Invoked with (err, [results]).
   * @returns undefined
   * @example
   *
   * async.waterfall([
   *     function(callback) {
   *         callback(null, 'one', 'two');
   *     },
   *     function(arg1, arg2, callback) {
   *         // arg1 now equals 'one' and arg2 now equals 'two'
   *         callback(null, 'three');
   *     },
   *     function(arg1, callback) {
   *         // arg1 now equals 'three'
   *         callback(null, 'done');
   *     }
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   *
   * // Or, with named functions:
   * async.waterfall([
   *     myFirstFunction,
   *     mySecondFunction,
   *     myLastFunction,
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   * function myFirstFunction(callback) {
   *     callback(null, 'one', 'two');
   * }
   * function mySecondFunction(arg1, arg2, callback) {
   *     // arg1 now equals 'one' and arg2 now equals 'two'
   *     callback(null, 'three');
   * }
   * function myLastFunction(arg1, callback) {
   *     // arg1 now equals 'three'
   *     callback(null, 'done');
   * }
   */
  var waterfall = function(tasks, callback) {
      callback = once(callback || noop);
      if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
      if (!tasks.length) return callback();
      var taskIndex = 0;
  
      function nextTask(args) {
          var task = wrapAsync(tasks[taskIndex++]);
          args.push(onlyOnce(next));
          task.apply(null, args);
      }
  
      function next(err/*, ...args*/) {
          if (err || taskIndex === tasks.length) {
              return callback.apply(null, arguments);
          }
          nextTask(slice(arguments, 1));
      }
  
      nextTask([]);
  };
  
  /**
   * An "async function" in the context of Async is an asynchronous function with
   * a variable number of parameters, with the final parameter being a callback.
   * (`function (arg1, arg2, ..., callback) {}`)
   * The final callback is of the form `callback(err, results...)`, which must be
   * called once the function is completed.  The callback should be called with a
   * Error as its first argument to signal that an error occurred.
   * Otherwise, if no error occurred, it should be called with `null` as the first
   * argument, and any additional `result` arguments that may apply, to signal
   * successful completion.
   * The callback must be called exactly once, ideally on a later tick of the
   * JavaScript event loop.
   *
   * This type of function is also referred to as a "Node-style async function",
   * or a "continuation passing-style function" (CPS). Most of the methods of this
   * library are themselves CPS/Node-style async functions, or functions that
   * return CPS/Node-style async functions.
   *
   * Wherever we accept a Node-style async function, we also directly accept an
   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
   * In this case, the `async` function will not be passed a final callback
   * argument, and any thrown error will be used as the `err` argument of the
   * implicit callback, and the return value will be used as the `result` value.
   * (i.e. a `rejected` of the returned Promise becomes the `err` callback
   * argument, and a `resolved` value becomes the `result`.)
   *
   * Note, due to JavaScript limitations, we can only detect native `async`
   * functions and not transpilied implementations.
   * Your environment must have `async`/`await` support for this to work.
   * (e.g. Node > v7.6, or a recent version of a modern browser).
   * If you are using `async` functions through a transpiler (e.g. Babel), you
   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
   * because the `async function` will be compiled to an ordinary function that
   * returns a promise.
   *
   * @typedef {Function} AsyncFunction
   * @static
   */
  
  /**
   * Async is a utility module which provides straight-forward, powerful functions
   * for working with asynchronous JavaScript. Although originally designed for
   * use with [Node.js](http://nodejs.org) and installable via
   * `npm install --save async`, it can also be used directly in the browser.
   * @module async
   * @see AsyncFunction
   */
  
  
  /**
   * A collection of `async` functions for manipulating collections, such as
   * arrays and objects.
   * @module Collections
   */
  
  /**
   * A collection of `async` functions for controlling the flow through a script.
   * @module ControlFlow
   */
  
  /**
   * A collection of `async` utility functions.
   * @module Utils
   */
  
  var index = {
      applyEach: applyEach,
      applyEachSeries: applyEachSeries,
      apply: apply,
      asyncify: asyncify,
      auto: auto,
      autoInject: autoInject,
      cargo: cargo,
      compose: compose,
      concat: concat,
      concatLimit: concatLimit,
      concatSeries: concatSeries,
      constant: constant,
      detect: detect,
      detectLimit: detectLimit,
      detectSeries: detectSeries,
      dir: dir,
      doDuring: doDuring,
      doUntil: doUntil,
      doWhilst: doWhilst,
      during: during,
      each: eachLimit,
      eachLimit: eachLimit$1,
      eachOf: eachOf,
      eachOfLimit: eachOfLimit,
      eachOfSeries: eachOfSeries,
      eachSeries: eachSeries,
      ensureAsync: ensureAsync,
      every: every,
      everyLimit: everyLimit,
      everySeries: everySeries,
      filter: filter,
      filterLimit: filterLimit,
      filterSeries: filterSeries,
      forever: forever,
      groupBy: groupBy,
      groupByLimit: groupByLimit,
      groupBySeries: groupBySeries,
      log: log,
      map: map,
      mapLimit: mapLimit,
      mapSeries: mapSeries,
      mapValues: mapValues,
      mapValuesLimit: mapValuesLimit,
      mapValuesSeries: mapValuesSeries,
      memoize: memoize,
      nextTick: nextTick,
      parallel: parallelLimit,
      parallelLimit: parallelLimit$1,
      priorityQueue: priorityQueue,
      queue: queue$1,
      race: race,
      reduce: reduce,
      reduceRight: reduceRight,
      reflect: reflect,
      reflectAll: reflectAll,
      reject: reject,
      rejectLimit: rejectLimit,
      rejectSeries: rejectSeries,
      retry: retry,
      retryable: retryable,
      seq: seq,
      series: series,
      setImmediate: setImmediate$1,
      some: some,
      someLimit: someLimit,
      someSeries: someSeries,
      sortBy: sortBy,
      timeout: timeout,
      times: times,
      timesLimit: timeLimit,
      timesSeries: timesSeries,
      transform: transform,
      tryEach: tryEach,
      unmemoize: unmemoize,
      until: until,
      waterfall: waterfall,
      whilst: whilst,
  
      // aliases
      all: every,
      any: some,
      forEach: eachLimit,
      forEachSeries: eachSeries,
      forEachLimit: eachLimit$1,
      forEachOf: eachOf,
      forEachOfSeries: eachOfSeries,
      forEachOfLimit: eachOfLimit,
      inject: reduce,
      foldl: reduce,
      foldr: reduceRight,
      select: filter,
      selectLimit: filterLimit,
      selectSeries: filterSeries,
      wrapSync: asyncify
  };
  
  exports['default'] = index;
  exports.applyEach = applyEach;
  exports.applyEachSeries = applyEachSeries;
  exports.apply = apply;
  exports.asyncify = asyncify;
  exports.auto = auto;
  exports.autoInject = autoInject;
  exports.cargo = cargo;
  exports.compose = compose;
  exports.concat = concat;
  exports.concatLimit = concatLimit;
  exports.concatSeries = concatSeries;
  exports.constant = constant;
  exports.detect = detect;
  exports.detectLimit = detectLimit;
  exports.detectSeries = detectSeries;
  exports.dir = dir;
  exports.doDuring = doDuring;
  exports.doUntil = doUntil;
  exports.doWhilst = doWhilst;
  exports.during = during;
  exports.each = eachLimit;
  exports.eachLimit = eachLimit$1;
  exports.eachOf = eachOf;
  exports.eachOfLimit = eachOfLimit;
  exports.eachOfSeries = eachOfSeries;
  exports.eachSeries = eachSeries;
  exports.ensureAsync = ensureAsync;
  exports.every = every;
  exports.everyLimit = everyLimit;
  exports.everySeries = everySeries;
  exports.filter = filter;
  exports.filterLimit = filterLimit;
  exports.filterSeries = filterSeries;
  exports.forever = forever;
  exports.groupBy = groupBy;
  exports.groupByLimit = groupByLimit;
  exports.groupBySeries = groupBySeries;
  exports.log = log;
  exports.map = map;
  exports.mapLimit = mapLimit;
  exports.mapSeries = mapSeries;
  exports.mapValues = mapValues;
  exports.mapValuesLimit = mapValuesLimit;
  exports.mapValuesSeries = mapValuesSeries;
  exports.memoize = memoize;
  exports.nextTick = nextTick;
  exports.parallel = parallelLimit;
  exports.parallelLimit = parallelLimit$1;
  exports.priorityQueue = priorityQueue;
  exports.queue = queue$1;
  exports.race = race;
  exports.reduce = reduce;
  exports.reduceRight = reduceRight;
  exports.reflect = reflect;
  exports.reflectAll = reflectAll;
  exports.reject = reject;
  exports.rejectLimit = rejectLimit;
  exports.rejectSeries = rejectSeries;
  exports.retry = retry;
  exports.retryable = retryable;
  exports.seq = seq;
  exports.series = series;
  exports.setImmediate = setImmediate$1;
  exports.some = some;
  exports.someLimit = someLimit;
  exports.someSeries = someSeries;
  exports.sortBy = sortBy;
  exports.timeout = timeout;
  exports.times = times;
  exports.timesLimit = timeLimit;
  exports.timesSeries = timesSeries;
  exports.transform = transform;
  exports.tryEach = tryEach;
  exports.unmemoize = unmemoize;
  exports.until = until;
  exports.waterfall = waterfall;
  exports.whilst = whilst;
  exports.all = every;
  exports.allLimit = everyLimit;
  exports.allSeries = everySeries;
  exports.any = some;
  exports.anyLimit = someLimit;
  exports.anySeries = someSeries;
  exports.find = detect;
  exports.findLimit = detectLimit;
  exports.findSeries = detectSeries;
  exports.forEach = eachLimit;
  exports.forEachSeries = eachSeries;
  exports.forEachLimit = eachLimit$1;
  exports.forEachOf = eachOf;
  exports.forEachOfSeries = eachOfSeries;
  exports.forEachOfLimit = eachOfLimit;
  exports.inject = reduce;
  exports.foldl = reduce;
  exports.foldr = reduceRight;
  exports.select = filter;
  exports.selectLimit = filterLimit;
  exports.selectSeries = filterSeries;
  exports.wrapSync = asyncify;
  
  Object.defineProperty(exports, '__esModule', { value: true });
  
  })));
  

});

;/*!node_modules/mockjs/dist/mock.js*/
define('node_modules/mockjs/dist/mock', function(require, exports, module) {

  (function webpackUniversalModuleDefinition(root, factory) {
  	if(typeof exports === 'object' && typeof module === 'object')
  		module.exports = factory();
  	else if(typeof define === 'function' && define.amd)
  		define([], factory);
  	else if(typeof exports === 'object')
  		exports["Mock"] = factory();
  	else
  		root["Mock"] = factory();
  })(this, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId])
  /******/ 			return installedModules[moduleId].exports;
  
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			exports: {},
  /******/ 			id: moduleId,
  /******/ 			loaded: false
  /******/ 		};
  
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  
  /******/ 		// Flag the module as loaded
  /******/ 		module.loaded = true;
  
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  
  
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(0);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/* global require, module, window */
  	var Handler = __webpack_require__(1)
  	var Util = __webpack_require__(3)
  	var Random = __webpack_require__(5)
  	var RE = __webpack_require__(20)
  	var toJSONSchema = __webpack_require__(23)
  	var valid = __webpack_require__(25)
  
  	var XHR
  	if (typeof window !== 'undefined') XHR = __webpack_require__(27)
  
  	/*!
  	    Mock - 模拟请求 & 模拟数据
  	    https://github.com/nuysoft/Mock
  	    墨智 mozhi.gyy@taobao.com nuysoft@gmail.com
  	*/
  	var Mock = {
  	    Handler: Handler,
  	    Random: Random,
  	    Util: Util,
  	    XHR: XHR,
  	    RE: RE,
  	    toJSONSchema: toJSONSchema,
  	    valid: valid,
  	    heredoc: Util.heredoc,
  	    setup: function(settings) {
  	        return XHR.setup(settings)
  	    },
  	    _mocked: {}
  	}
  
  	Mock.version = '1.0.1-beta3'
  
  	// 避免循环依赖
  	if (XHR) XHR.Mock = Mock
  
  	/*
  	    * Mock.mock( template )
  	    * Mock.mock( function() )
  	    * Mock.mock( rurl, template )
  	    * Mock.mock( rurl, function(options) )
  	    * Mock.mock( rurl, rtype, template )
  	    * Mock.mock( rurl, rtype, function(options) )
  
  	    根据数据模板生成模拟数据。
  	*/
  	Mock.mock = function(rurl, rtype, template) {
  	    // Mock.mock(template)
  	    if (arguments.length === 1) {
  	        return Handler.gen(rurl)
  	    }
  	    // Mock.mock(rurl, template)
  	    if (arguments.length === 2) {
  	        template = rtype
  	        rtype = undefined
  	    }
  	    // 拦截 XHR
  	    if (XHR) window.XMLHttpRequest = XHR
  	    Mock._mocked[rurl + (rtype || '')] = {
  	        rurl: rurl,
  	        rtype: rtype,
  	        template: template
  	    }
  	    return Mock
  	}
  
  	module.exports = Mock
  
  /***/ },
  /* 1 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/* 
  	    ## Handler
  
  	    处理数据模板。
  	    
  	    * Handler.gen( template, name?, context? )
  
  	        入口方法。
  
  	    * Data Template Definition, DTD
  	        
  	        处理数据模板定义。
  
  	        * Handler.array( options )
  	        * Handler.object( options )
  	        * Handler.number( options )
  	        * Handler.boolean( options )
  	        * Handler.string( options )
  	        * Handler.function( options )
  	        * Handler.regexp( options )
  	        
  	        处理路径（相对和绝对）。
  
  	        * Handler.getValueByKeyPath( key, options )
  
  	    * Data Placeholder Definition, DPD
  
  	        处理数据占位符定义
  
  	        * Handler.placeholder( placeholder, context, templateContext, options )
  
  	*/
  
  	var Constant = __webpack_require__(2)
  	var Util = __webpack_require__(3)
  	var Parser = __webpack_require__(4)
  	var Random = __webpack_require__(5)
  	var RE = __webpack_require__(20)
  
  	var Handler = {
  	    extend: Util.extend
  	}
  
  	/*
  	    template        属性值（即数据模板）
  	    name            属性名
  	    context         数据上下文，生成后的数据
  	    templateContext 模板上下文，
  
  	    Handle.gen(template, name, options)
  	    context
  	        currentContext, templateCurrentContext, 
  	        path, templatePath
  	        root, templateRoot
  	*/
  	Handler.gen = function(template, name, context) {
  	    /* jshint -W041 */
  	    name = name == undefined ? '' : (name + '')
  
  	    context = context || {}
  	    context = {
  	            // 当前访问路径，只有属性名，不包括生成规则
  	            path: context.path || [Constant.GUID],
  	            templatePath: context.templatePath || [Constant.GUID++],
  	            // 最终属性值的上下文
  	            currentContext: context.currentContext,
  	            // 属性值模板的上下文
  	            templateCurrentContext: context.templateCurrentContext || template,
  	            // 最终值的根
  	            root: context.root || context.currentContext,
  	            // 模板的根
  	            templateRoot: context.templateRoot || context.templateCurrentContext || template
  	        }
  	        // console.log('path:', context.path.join('.'), template)
  
  	    var rule = Parser.parse(name)
  	    var type = Util.type(template)
  	    var data
  
  	    if (Handler[type]) {
  	        data = Handler[type]({
  	            // 属性值类型
  	            type: type,
  	            // 属性值模板
  	            template: template,
  	            // 属性名 + 生成规则
  	            name: name,
  	            // 属性名
  	            parsedName: name ? name.replace(Constant.RE_KEY, '$1') : name,
  
  	            // 解析后的生成规则
  	            rule: rule,
  	            // 相关上下文
  	            context: context
  	        })
  
  	        if (!context.root) context.root = data
  	        return data
  	    }
  
  	    return template
  	}
  
  	Handler.extend({
  	    array: function(options) {
  	        var result = [],
  	            i, ii;
  
  	        // 'name|1': []
  	        // 'name|count': []
  	        // 'name|min-max': []
  	        if (options.template.length === 0) return result
  
  	        // 'arr': [{ 'email': '@EMAIL' }, { 'email': '@EMAIL' }]
  	        if (!options.rule.parameters) {
  	            for (i = 0; i < options.template.length; i++) {
  	                options.context.path.push(i)
  	                options.context.templatePath.push(i)
  	                result.push(
  	                    Handler.gen(options.template[i], i, {
  	                        path: options.context.path,
  	                        templatePath: options.context.templatePath,
  	                        currentContext: result,
  	                        templateCurrentContext: options.template,
  	                        root: options.context.root || result,
  	                        templateRoot: options.context.templateRoot || options.template
  	                    })
  	                )
  	                options.context.path.pop()
  	                options.context.templatePath.pop()
  	            }
  	        } else {
  	            // 'method|1': ['GET', 'POST', 'HEAD', 'DELETE']
  	            if (options.rule.min === 1 && options.rule.max === undefined) {
  	                // fix #17
  	                options.context.path.push(options.name)
  	                options.context.templatePath.push(options.name)
  	                result = Random.pick(
  	                    Handler.gen(options.template, undefined, {
  	                        path: options.context.path,
  	                        templatePath: options.context.templatePath,
  	                        currentContext: result,
  	                        templateCurrentContext: options.template,
  	                        root: options.context.root || result,
  	                        templateRoot: options.context.templateRoot || options.template
  	                    })
  	                )
  	                options.context.path.pop()
  	                options.context.templatePath.pop()
  	            } else {
  	                // 'data|+1': [{}, {}]
  	                if (options.rule.parameters[2]) {
  	                    options.template.__order_index = options.template.__order_index || 0
  
  	                    options.context.path.push(options.name)
  	                    options.context.templatePath.push(options.name)
  	                    result = Handler.gen(options.template, undefined, {
  	                        path: options.context.path,
  	                        templatePath: options.context.templatePath,
  	                        currentContext: result,
  	                        templateCurrentContext: options.template,
  	                        root: options.context.root || result,
  	                        templateRoot: options.context.templateRoot || options.template
  	                    })[
  	                        options.template.__order_index % options.template.length
  	                    ]
  
  	                    options.template.__order_index += +options.rule.parameters[2]
  
  	                    options.context.path.pop()
  	                    options.context.templatePath.pop()
  
  	                } else {
  	                    // 'data|1-10': [{}]
  	                    for (i = 0; i < options.rule.count; i++) {
  	                        // 'data|1-10': [{}, {}]
  	                        for (ii = 0; ii < options.template.length; ii++) {
  	                            options.context.path.push(result.length)
  	                            options.context.templatePath.push(ii)
  	                            result.push(
  	                                Handler.gen(options.template[ii], result.length, {
  	                                    path: options.context.path,
  	                                    templatePath: options.context.templatePath,
  	                                    currentContext: result,
  	                                    templateCurrentContext: options.template,
  	                                    root: options.context.root || result,
  	                                    templateRoot: options.context.templateRoot || options.template
  	                                })
  	                            )
  	                            options.context.path.pop()
  	                            options.context.templatePath.pop()
  	                        }
  	                    }
  	                }
  	            }
  	        }
  	        return result
  	    },
  	    object: function(options) {
  	        var result = {},
  	            keys, fnKeys, key, parsedKey, inc, i;
  
  	        // 'obj|min-max': {}
  	        /* jshint -W041 */
  	        if (options.rule.min != undefined) {
  	            keys = Util.keys(options.template)
  	            keys = Random.shuffle(keys)
  	            keys = keys.slice(0, options.rule.count)
  	            for (i = 0; i < keys.length; i++) {
  	                key = keys[i]
  	                parsedKey = key.replace(Constant.RE_KEY, '$1')
  	                options.context.path.push(parsedKey)
  	                options.context.templatePath.push(key)
  	                result[parsedKey] = Handler.gen(options.template[key], key, {
  	                    path: options.context.path,
  	                    templatePath: options.context.templatePath,
  	                    currentContext: result,
  	                    templateCurrentContext: options.template,
  	                    root: options.context.root || result,
  	                    templateRoot: options.context.templateRoot || options.template
  	                })
  	                options.context.path.pop()
  	                options.context.templatePath.pop()
  	            }
  
  	        } else {
  	            // 'obj': {}
  	            keys = []
  	            fnKeys = [] // #25 改变了非函数属性的顺序，查找起来不方便
  	            for (key in options.template) {
  	                (typeof options.template[key] === 'function' ? fnKeys : keys).push(key)
  	            }
  	            keys = keys.concat(fnKeys)
  
  	            /*
  	                会改变非函数属性的顺序
  	                keys = Util.keys(options.template)
  	                keys.sort(function(a, b) {
  	                    var afn = typeof options.template[a] === 'function'
  	                    var bfn = typeof options.template[b] === 'function'
  	                    if (afn === bfn) return 0
  	                    if (afn && !bfn) return 1
  	                    if (!afn && bfn) return -1
  	                })
  	            */
  
  	            for (i = 0; i < keys.length; i++) {
  	                key = keys[i]
  	                parsedKey = key.replace(Constant.RE_KEY, '$1')
  	                options.context.path.push(parsedKey)
  	                options.context.templatePath.push(key)
  	                result[parsedKey] = Handler.gen(options.template[key], key, {
  	                    path: options.context.path,
  	                    templatePath: options.context.templatePath,
  	                    currentContext: result,
  	                    templateCurrentContext: options.template,
  	                    root: options.context.root || result,
  	                    templateRoot: options.context.templateRoot || options.template
  	                })
  	                options.context.path.pop()
  	                options.context.templatePath.pop()
  	                    // 'id|+1': 1
  	                inc = key.match(Constant.RE_KEY)
  	                if (inc && inc[2] && Util.type(options.template[key]) === 'number') {
  	                    options.template[key] += parseInt(inc[2], 10)
  	                }
  	            }
  	        }
  	        return result
  	    },
  	    number: function(options) {
  	        var result, parts;
  	        if (options.rule.decimal) { // float
  	            options.template += ''
  	            parts = options.template.split('.')
  	                // 'float1|.1-10': 10,
  	                // 'float2|1-100.1-10': 1,
  	                // 'float3|999.1-10': 1,
  	                // 'float4|.3-10': 123.123,
  	            parts[0] = options.rule.range ? options.rule.count : parts[0]
  	            parts[1] = (parts[1] || '').slice(0, options.rule.dcount)
  	            while (parts[1].length < options.rule.dcount) {
  	                parts[1] += (
  	                    // 最后一位不能为 0：如果最后一位为 0，会被 JS 引擎忽略掉。
  	                    (parts[1].length < options.rule.dcount - 1) ? Random.character('number') : Random.character('123456789')
  	                )
  	            }
  	            result = parseFloat(parts.join('.'), 10)
  	        } else { // integer
  	            // 'grade1|1-100': 1,
  	            result = options.rule.range && !options.rule.parameters[2] ? options.rule.count : options.template
  	        }
  	        return result
  	    },
  	    boolean: function(options) {
  	        var result;
  	        // 'prop|multiple': false, 当前值是相反值的概率倍数
  	        // 'prop|probability-probability': false, 当前值与相反值的概率
  	        result = options.rule.parameters ? Random.bool(options.rule.min, options.rule.max, options.template) : options.template
  	        return result
  	    },
  	    string: function(options) {
  	        var result = '',
  	            i, placeholders, ph, phed;
  	        if (options.template.length) {
  
  	            //  'foo': '★',
  	            /* jshint -W041 */
  	            if (options.rule.count == undefined) {
  	                result += options.template
  	            }
  
  	            // 'star|1-5': '★',
  	            for (i = 0; i < options.rule.count; i++) {
  	                result += options.template
  	            }
  	            // 'email|1-10': '@EMAIL, ',
  	            placeholders = result.match(Constant.RE_PLACEHOLDER) || [] // A-Z_0-9 > \w_
  	            for (i = 0; i < placeholders.length; i++) {
  	                ph = placeholders[i]
  
  	                // 遇到转义斜杠，不需要解析占位符
  	                if (/^\\/.test(ph)) {
  	                    placeholders.splice(i--, 1)
  	                    continue
  	                }
  
  	                phed = Handler.placeholder(ph, options.context.currentContext, options.context.templateCurrentContext, options)
  
  	                // 只有一个占位符，并且没有其他字符
  	                if (placeholders.length === 1 && ph === result && typeof phed !== typeof result) { // 
  	                    result = phed
  	                    break
  
  	                    if (Util.isNumeric(phed)) {
  	                        result = parseFloat(phed, 10)
  	                        break
  	                    }
  	                    if (/^(true|false)$/.test(phed)) {
  	                        result = phed === 'true' ? true :
  	                            phed === 'false' ? false :
  	                            phed // 已经是布尔值
  	                        break
  	                    }
  	                }
  	                result = result.replace(ph, phed)
  	            }
  
  	        } else {
  	            // 'ASCII|1-10': '',
  	            // 'ASCII': '',
  	            result = options.rule.range ? Random.string(options.rule.count) : options.template
  	        }
  	        return result
  	    },
  	    'function': function(options) {
  	        // ( context, options )
  	        return options.template.call(options.context.currentContext, options)
  	    },
  	    'regexp': function(options) {
  	        var source = ''
  
  	        // 'name': /regexp/,
  	        /* jshint -W041 */
  	        if (options.rule.count == undefined) {
  	            source += options.template.source // regexp.source
  	        }
  
  	        // 'name|1-5': /regexp/,
  	        for (var i = 0; i < options.rule.count; i++) {
  	            source += options.template.source
  	        }
  
  	        return RE.Handler.gen(
  	            RE.Parser.parse(
  	                source
  	            )
  	        )
  	    }
  	})
  
  	Handler.extend({
  	    _all: function() {
  	        var re = {};
  	        for (var key in Random) re[key.toLowerCase()] = key
  	        return re
  	    },
  	    // 处理占位符，转换为最终值
  	    placeholder: function(placeholder, obj, templateContext, options) {
  	        // console.log(options.context.path)
  	        // 1 key, 2 params
  	        Constant.RE_PLACEHOLDER.exec('')
  	        var parts = Constant.RE_PLACEHOLDER.exec(placeholder),
  	            key = parts && parts[1],
  	            lkey = key && key.toLowerCase(),
  	            okey = this._all()[lkey],
  	            params = parts && parts[2] || ''
  	        var pathParts = this.splitPathToArray(key)
  
  	        // 解析占位符的参数
  	        try {
  	            // 1. 尝试保持参数的类型
  	            /*
  	                #24 [Window Firefox 30.0 引用 占位符 抛错](https://github.com/nuysoft/Mock/issues/24)
  	                [BX9056: 各浏览器下 window.eval 方法的执行上下文存在差异](http://www.w3help.org/zh-cn/causes/BX9056)
  	                应该属于 Window Firefox 30.0 的 BUG
  	            */
  	            /* jshint -W061 */
  	            params = eval('(function(){ return [].splice.call(arguments, 0 ) })(' + params + ')')
  	        } catch (error) {
  	            // 2. 如果失败，只能解析为字符串
  	            // console.error(error)
  	            // if (error instanceof ReferenceError) params = parts[2].split(/,\s*/);
  	            // else throw error
  	            params = parts[2].split(/,\s*/)
  	        }
  
  	        // 占位符优先引用数据模板中的属性
  	        if (obj && (key in obj)) return obj[key]
  
  	        // @index @key
  	        // if (Constant.RE_INDEX.test(key)) return +options.name
  	        // if (Constant.RE_KEY.test(key)) return options.name
  
  	        // 绝对路径 or 相对路径
  	        if (
  	            key.charAt(0) === '/' ||
  	            pathParts.length > 1
  	        ) return this.getValueByKeyPath(key, options)
  
  	        // 递归引用数据模板中的属性
  	        if (templateContext &&
  	            (typeof templateContext === 'object') &&
  	            (key in templateContext) &&
  	            (placeholder !== templateContext[key]) // fix #15 避免自己依赖自己
  	        ) {
  	            // 先计算被引用的属性值
  	            templateContext[key] = Handler.gen(templateContext[key], key, {
  	                currentContext: obj,
  	                templateCurrentContext: templateContext
  	            })
  	            return templateContext[key]
  	        }
  
  	        // 如果未找到，则原样返回
  	        if (!(key in Random) && !(lkey in Random) && !(okey in Random)) return placeholder
  
  	        // 递归解析参数中的占位符
  	        for (var i = 0; i < params.length; i++) {
  	            Constant.RE_PLACEHOLDER.exec('')
  	            if (Constant.RE_PLACEHOLDER.test(params[i])) {
  	                params[i] = Handler.placeholder(params[i], obj, templateContext, options)
  	            }
  	        }
  
  	        var handle = Random[key] || Random[lkey] || Random[okey]
  	        switch (Util.type(handle)) {
  	            case 'array':
  	                // 自动从数组中取一个，例如 @areas
  	                return Random.pick(handle)
  	            case 'function':
  	                // 执行占位符方法（大多数情况）
  	                handle.options = options
  	                var re = handle.apply(Random, params)
  	                if (re === undefined) re = '' // 因为是在字符串中，所以默认为空字符串。
  	                delete handle.options
  	                return re
  	        }
  	    },
  	    getValueByKeyPath: function(key, options) {
  	        var originalKey = key
  	        var keyPathParts = this.splitPathToArray(key)
  	        var absolutePathParts = []
  
  	        // 绝对路径
  	        if (key.charAt(0) === '/') {
  	            absolutePathParts = [options.context.path[0]].concat(
  	                this.normalizePath(keyPathParts)
  	            )
  	        } else {
  	            // 相对路径
  	            if (keyPathParts.length > 1) {
  	                absolutePathParts = options.context.path.slice(0)
  	                absolutePathParts.pop()
  	                absolutePathParts = this.normalizePath(
  	                    absolutePathParts.concat(keyPathParts)
  	                )
  
  	            }
  	        }
  
  	        key = keyPathParts[keyPathParts.length - 1]
  	        var currentContext = options.context.root
  	        var templateCurrentContext = options.context.templateRoot
  	        for (var i = 1; i < absolutePathParts.length - 1; i++) {
  	            currentContext = currentContext[absolutePathParts[i]]
  	            templateCurrentContext = templateCurrentContext[absolutePathParts[i]]
  	        }
  	        // 引用的值已经计算好
  	        if (currentContext && (key in currentContext)) return currentContext[key]
  
  	        // 尚未计算，递归引用数据模板中的属性
  	        if (templateCurrentContext &&
  	            (typeof templateCurrentContext === 'object') &&
  	            (key in templateCurrentContext) &&
  	            (originalKey !== templateCurrentContext[key]) // fix #15 避免自己依赖自己
  	        ) {
  	            // 先计算被引用的属性值
  	            templateCurrentContext[key] = Handler.gen(templateCurrentContext[key], key, {
  	                currentContext: currentContext,
  	                templateCurrentContext: templateCurrentContext
  	            })
  	            return templateCurrentContext[key]
  	        }
  	    },
  	    // https://github.com/kissyteam/kissy/blob/master/src/path/src/path.js
  	    normalizePath: function(pathParts) {
  	        var newPathParts = []
  	        for (var i = 0; i < pathParts.length; i++) {
  	            switch (pathParts[i]) {
  	                case '..':
  	                    newPathParts.pop()
  	                    break
  	                case '.':
  	                    break
  	                default:
  	                    newPathParts.push(pathParts[i])
  	            }
  	        }
  	        return newPathParts
  	    },
  	    splitPathToArray: function(path) {
  	        var parts = path.split(/\/+/);
  	        if (!parts[parts.length - 1]) parts = parts.slice(0, -1)
  	        if (!parts[0]) parts = parts.slice(1)
  	        return parts;
  	    }
  	})
  
  	module.exports = Handler
  
  /***/ },
  /* 2 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Constant
  
  	    常量集合。
  	 */
  	/*
  	    RE_KEY
  	        'name|min-max': value
  	        'name|count': value
  	        'name|min-max.dmin-dmax': value
  	        'name|min-max.dcount': value
  	        'name|count.dmin-dmax': value
  	        'name|count.dcount': value
  	        'name|+step': value
  
  	        1 name, 2 step, 3 range [ min, max ], 4 drange [ dmin, dmax ]
  
  	    RE_PLACEHOLDER
  	        placeholder(*)
  
  	    [正则查看工具](http://www.regexper.com/)
  
  	    #26 生成规则 支持 负数，例如 number|-100-100
  	*/
  	module.exports = {
  	    GUID: 1,
  	    RE_KEY: /(.+)\|(?:\+(\d+)|([\+\-]?\d+-?[\+\-]?\d*)?(?:\.(\d+-?\d*))?)/,
  	    RE_RANGE: /([\+\-]?\d+)-?([\+\-]?\d+)?/,
  	    RE_PLACEHOLDER: /\\*@([^@#%&()\?\s]+)(?:\((.*?)\))?/g
  	    // /\\*@([^@#%&()\?\s\/\.]+)(?:\((.*?)\))?/g
  	    // RE_INDEX: /^index$/,
  	    // RE_KEY: /^key$/
  	}
  
  /***/ },
  /* 3 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Utilities
  	*/
  	var Util = {}
  
  	Util.extend = function extend() {
  	    var target = arguments[0] || {},
  	        i = 1,
  	        length = arguments.length,
  	        options, name, src, copy, clone
  
  	    if (length === 1) {
  	        target = this
  	        i = 0
  	    }
  
  	    for (; i < length; i++) {
  	        options = arguments[i]
  	        if (!options) continue
  
  	        for (name in options) {
  	            src = target[name]
  	            copy = options[name]
  
  	            if (target === copy) continue
  	            if (copy === undefined) continue
  
  	            if (Util.isArray(copy) || Util.isObject(copy)) {
  	                if (Util.isArray(copy)) clone = src && Util.isArray(src) ? src : []
  	                if (Util.isObject(copy)) clone = src && Util.isObject(src) ? src : {}
  
  	                target[name] = Util.extend(clone, copy)
  	            } else {
  	                target[name] = copy
  	            }
  	        }
  	    }
  
  	    return target
  	}
  
  	Util.each = function each(obj, iterator, context) {
  	    var i, key
  	    if (this.type(obj) === 'number') {
  	        for (i = 0; i < obj; i++) {
  	            iterator(i, i)
  	        }
  	    } else if (obj.length === +obj.length) {
  	        for (i = 0; i < obj.length; i++) {
  	            if (iterator.call(context, obj[i], i, obj) === false) break
  	        }
  	    } else {
  	        for (key in obj) {
  	            if (iterator.call(context, obj[key], key, obj) === false) break
  	        }
  	    }
  	}
  
  	Util.type = function type(obj) {
  	    return (obj === null || obj === undefined) ? String(obj) : Object.prototype.toString.call(obj).match(/\[object (\w+)\]/)[1].toLowerCase()
  	}
  
  	Util.each('String Object Array RegExp Function'.split(' '), function(value) {
  	    Util['is' + value] = function(obj) {
  	        return Util.type(obj) === value.toLowerCase()
  	    }
  	})
  
  	Util.isObjectOrArray = function(value) {
  	    return Util.isObject(value) || Util.isArray(value)
  	}
  
  	Util.isNumeric = function(value) {
  	    return !isNaN(parseFloat(value)) && isFinite(value)
  	}
  
  	Util.keys = function(obj) {
  	    var keys = [];
  	    for (var key in obj) {
  	        if (obj.hasOwnProperty(key)) keys.push(key)
  	    }
  	    return keys;
  	}
  	Util.values = function(obj) {
  	    var values = [];
  	    for (var key in obj) {
  	        if (obj.hasOwnProperty(key)) values.push(obj[key])
  	    }
  	    return values;
  	}
  
  	/*
  	    ### Mock.heredoc(fn)
  
  	    * Mock.heredoc(fn)
  
  	    以直观、安全的方式书写（多行）HTML 模板。
  
  	    **使用示例**如下所示：
  
  	        var tpl = Mock.heredoc(function() {
  	            /*!
  	        {{email}}{{age}}
  	        <!-- Mock { 
  	            email: '@EMAIL',
  	            age: '@INT(1,100)'
  	        } -->
  	            *\/
  	        })
  	    
  	    **相关阅读**
  	    * [Creating multiline strings in JavaScript](http://stackoverflow.com/questions/805107/creating-multiline-strings-in-javascript)、
  	*/
  	Util.heredoc = function heredoc(fn) {
  	    // 1. 移除起始的 function(){ /*!
  	    // 2. 移除末尾的 */ }
  	    // 3. 移除起始和末尾的空格
  	    return fn.toString()
  	        .replace(/^[^\/]+\/\*!?/, '')
  	        .replace(/\*\/[^\/]+$/, '')
  	        .replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '') // .trim()
  	}
  
  	Util.noop = function() {}
  
  	module.exports = Util
  
  /***/ },
  /* 4 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  		## Parser
  
  		解析数据模板（属性名部分）。
  
  		* Parser.parse( name )
  			
  			```json
  			{
  				parameters: [ name, inc, range, decimal ],
  				rnage: [ min , max ],
  
  				min: min,
  				max: max,
  				count : count,
  
  				decimal: decimal,
  				dmin: dmin,
  				dmax: dmax,
  				dcount: dcount
  			}
  			```
  	 */
  
  	var Constant = __webpack_require__(2)
  	var Random = __webpack_require__(5)
  
  	/* jshint -W041 */
  	module.exports = {
  		parse: function(name) {
  			name = name == undefined ? '' : (name + '')
  
  			var parameters = (name || '').match(Constant.RE_KEY)
  
  			var range = parameters && parameters[3] && parameters[3].match(Constant.RE_RANGE)
  			var min = range && range[1] && parseInt(range[1], 10) // || 1
  			var max = range && range[2] && parseInt(range[2], 10) // || 1
  				// repeat || min-max || 1
  				// var count = range ? !range[2] && parseInt(range[1], 10) || Random.integer(min, max) : 1
  			var count = range ? !range[2] ? parseInt(range[1], 10) : Random.integer(min, max) : undefined
  
  			var decimal = parameters && parameters[4] && parameters[4].match(Constant.RE_RANGE)
  			var dmin = decimal && decimal[1] && parseInt(decimal[1], 10) // || 0,
  			var dmax = decimal && decimal[2] && parseInt(decimal[2], 10) // || 0,
  				// int || dmin-dmax || 0
  			var dcount = decimal ? !decimal[2] && parseInt(decimal[1], 10) || Random.integer(dmin, dmax) : undefined
  
  			var result = {
  				// 1 name, 2 inc, 3 range, 4 decimal
  				parameters: parameters,
  				// 1 min, 2 max
  				range: range,
  				min: min,
  				max: max,
  				// min-max
  				count: count,
  				// 是否有 decimal
  				decimal: decimal,
  				dmin: dmin,
  				dmax: dmax,
  				// dmin-dimax
  				dcount: dcount
  			}
  
  			for (var r in result) {
  				if (result[r] != undefined) return result
  			}
  
  			return {}
  		}
  	}
  
  /***/ },
  /* 5 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## Mock.Random
  	    
  	    工具类，用于生成各种随机数据。
  	*/
  
  	var Util = __webpack_require__(3)
  
  	var Random = {
  	    extend: Util.extend
  	}
  
  	Random.extend(__webpack_require__(6))
  	Random.extend(__webpack_require__(7))
  	Random.extend(__webpack_require__(8))
  	Random.extend(__webpack_require__(10))
  	Random.extend(__webpack_require__(13))
  	Random.extend(__webpack_require__(15))
  	Random.extend(__webpack_require__(16))
  	Random.extend(__webpack_require__(17))
  	Random.extend(__webpack_require__(14))
  	Random.extend(__webpack_require__(19))
  
  	module.exports = Random
  
  /***/ },
  /* 6 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Basics
  	*/
  	module.exports = {
  	    // 返回一个随机的布尔值。
  	    boolean: function(min, max, cur) {
  	        if (cur !== undefined) {
  	            min = typeof min !== 'undefined' && !isNaN(min) ? parseInt(min, 10) : 1
  	            max = typeof max !== 'undefined' && !isNaN(max) ? parseInt(max, 10) : 1
  	            return Math.random() > 1.0 / (min + max) * min ? !cur : cur
  	        }
  
  	        return Math.random() >= 0.5
  	    },
  	    bool: function(min, max, cur) {
  	        return this.boolean(min, max, cur)
  	    },
  	    // 返回一个随机的自然数（大于等于 0 的整数）。
  	    natural: function(min, max) {
  	        min = typeof min !== 'undefined' ? parseInt(min, 10) : 0
  	        max = typeof max !== 'undefined' ? parseInt(max, 10) : 9007199254740992 // 2^53
  	        return Math.round(Math.random() * (max - min)) + min
  	    },
  	    // 返回一个随机的整数。
  	    integer: function(min, max) {
  	        min = typeof min !== 'undefined' ? parseInt(min, 10) : -9007199254740992
  	        max = typeof max !== 'undefined' ? parseInt(max, 10) : 9007199254740992 // 2^53
  	        return Math.round(Math.random() * (max - min)) + min
  	    },
  	    int: function(min, max) {
  	        return this.integer(min, max)
  	    },
  	    // 返回一个随机的浮点数。
  	    float: function(min, max, dmin, dmax) {
  	        dmin = dmin === undefined ? 0 : dmin
  	        dmin = Math.max(Math.min(dmin, 17), 0)
  	        dmax = dmax === undefined ? 17 : dmax
  	        dmax = Math.max(Math.min(dmax, 17), 0)
  	        var ret = this.integer(min, max) + '.';
  	        for (var i = 0, dcount = this.natural(dmin, dmax); i < dcount; i++) {
  	            ret += (
  	                // 最后一位不能为 0：如果最后一位为 0，会被 JS 引擎忽略掉。
  	                (i < dcount - 1) ? this.character('number') : this.character('123456789')
  	            )
  	        }
  	        return parseFloat(ret, 10)
  	    },
  	    // 返回一个随机字符。
  	    character: function(pool) {
  	        var pools = {
  	            lower: 'abcdefghijklmnopqrstuvwxyz',
  	            upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
  	            number: '0123456789',
  	            symbol: '!@#$%^&*()[]'
  	        }
  	        pools.alpha = pools.lower + pools.upper
  	        pools['undefined'] = pools.lower + pools.upper + pools.number + pools.symbol
  
  	        pool = pools[('' + pool).toLowerCase()] || pool
  	        return pool.charAt(this.natural(0, pool.length - 1))
  	    },
  	    char: function(pool) {
  	        return this.character(pool)
  	    },
  	    // 返回一个随机字符串。
  	    string: function(pool, min, max) {
  	        var len
  	        switch (arguments.length) {
  	            case 0: // ()
  	                len = this.natural(3, 7)
  	                break
  	            case 1: // ( length )
  	                len = pool
  	                pool = undefined
  	                break
  	            case 2:
  	                // ( pool, length )
  	                if (typeof arguments[0] === 'string') {
  	                    len = min
  	                } else {
  	                    // ( min, max )
  	                    len = this.natural(pool, min)
  	                    pool = undefined
  	                }
  	                break
  	            case 3:
  	                len = this.natural(min, max)
  	                break
  	        }
  
  	        var text = ''
  	        for (var i = 0; i < len; i++) {
  	            text += this.character(pool)
  	        }
  
  	        return text
  	    },
  	    str: function( /*pool, min, max*/ ) {
  	        return this.string.apply(this, arguments)
  	    },
  	    // 返回一个整型数组。
  	    range: function(start, stop, step) {
  	        // range( stop )
  	        if (arguments.length <= 1) {
  	            stop = start || 0;
  	            start = 0;
  	        }
  	        // range( start, stop )
  	        step = arguments[2] || 1;
  
  	        start = +start
  	        stop = +stop
  	        step = +step
  
  	        var len = Math.max(Math.ceil((stop - start) / step), 0);
  	        var idx = 0;
  	        var range = new Array(len);
  
  	        while (idx < len) {
  	            range[idx++] = start;
  	            start += step;
  	        }
  
  	        return range;
  	    }
  	}
  
  /***/ },
  /* 7 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Date
  	*/
  	var patternLetters = {
  	    yyyy: 'getFullYear',
  	    yy: function(date) {
  	        return ('' + date.getFullYear()).slice(2)
  	    },
  	    y: 'yy',
  
  	    MM: function(date) {
  	        var m = date.getMonth() + 1
  	        return m < 10 ? '0' + m : m
  	    },
  	    M: function(date) {
  	        return date.getMonth() + 1
  	    },
  
  	    dd: function(date) {
  	        var d = date.getDate()
  	        return d < 10 ? '0' + d : d
  	    },
  	    d: 'getDate',
  
  	    HH: function(date) {
  	        var h = date.getHours()
  	        return h < 10 ? '0' + h : h
  	    },
  	    H: 'getHours',
  	    hh: function(date) {
  	        var h = date.getHours() % 12
  	        return h < 10 ? '0' + h : h
  	    },
  	    h: function(date) {
  	        return date.getHours() % 12
  	    },
  
  	    mm: function(date) {
  	        var m = date.getMinutes()
  	        return m < 10 ? '0' + m : m
  	    },
  	    m: 'getMinutes',
  
  	    ss: function(date) {
  	        var s = date.getSeconds()
  	        return s < 10 ? '0' + s : s
  	    },
  	    s: 'getSeconds',
  
  	    SS: function(date) {
  	        var ms = date.getMilliseconds()
  	        return ms < 10 && '00' + ms || ms < 100 && '0' + ms || ms
  	    },
  	    S: 'getMilliseconds',
  
  	    A: function(date) {
  	        return date.getHours() < 12 ? 'AM' : 'PM'
  	    },
  	    a: function(date) {
  	        return date.getHours() < 12 ? 'am' : 'pm'
  	    },
  	    T: 'getTime'
  	}
  	module.exports = {
  	    // 日期占位符集合。
  	    _patternLetters: patternLetters,
  	    // 日期占位符正则。
  	    _rformat: new RegExp((function() {
  	        var re = []
  	        for (var i in patternLetters) re.push(i)
  	        return '(' + re.join('|') + ')'
  	    })(), 'g'),
  	    // 格式化日期。
  	    _formatDate: function(date, format) {
  	        return format.replace(this._rformat, function creatNewSubString($0, flag) {
  	            return typeof patternLetters[flag] === 'function' ? patternLetters[flag](date) :
  	                patternLetters[flag] in patternLetters ? creatNewSubString($0, patternLetters[flag]) :
  	                date[patternLetters[flag]]()
  	        })
  	    },
  	    // 生成一个随机的 Date 对象。
  	    _randomDate: function(min, max) { // min, max
  	        min = min === undefined ? new Date(0) : min
  	        max = max === undefined ? new Date() : max
  	        return new Date(Math.random() * (max.getTime() - min.getTime()))
  	    },
  	    // 返回一个随机的日期字符串。
  	    date: function(format) {
  	        format = format || 'yyyy-MM-dd'
  	        return this._formatDate(this._randomDate(), format)
  	    },
  	    // 返回一个随机的时间字符串。
  	    time: function(format) {
  	        format = format || 'HH:mm:ss'
  	        return this._formatDate(this._randomDate(), format)
  	    },
  	    // 返回一个随机的日期和时间字符串。
  	    datetime: function(format) {
  	        format = format || 'yyyy-MM-dd HH:mm:ss'
  	        return this._formatDate(this._randomDate(), format)
  	    },
  	    // 返回当前的日期和时间字符串。
  	    now: function(unit, format) {
  	        // now(unit) now(format)
  	        if (arguments.length === 1) {
  	            // now(format)
  	            if (!/year|month|day|hour|minute|second|week/.test(unit)) {
  	                format = unit
  	                unit = ''
  	            }
  	        }
  	        unit = (unit || '').toLowerCase()
  	        format = format || 'yyyy-MM-dd HH:mm:ss'
  
  	        var date = new Date()
  
  	        /* jshint -W086 */
  	        // 参考自 http://momentjs.cn/docs/#/manipulating/start-of/
  	        switch (unit) {
  	            case 'year':
  	                date.setMonth(0)
  	            case 'month':
  	                date.setDate(1)
  	            case 'week':
  	            case 'day':
  	                date.setHours(0)
  	            case 'hour':
  	                date.setMinutes(0)
  	            case 'minute':
  	                date.setSeconds(0)
  	            case 'second':
  	                date.setMilliseconds(0)
  	        }
  	        switch (unit) {
  	            case 'week':
  	                date.setDate(date.getDate() - date.getDay())
  	        }
  
  	        return this._formatDate(date, format)
  	    }
  	}
  
  /***/ },
  /* 8 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/* WEBPACK VAR INJECTION */(function(module) {/* global document  */
  	/*
  	    ## Image
  	*/
  	module.exports = {
  	    // 常见的广告宽高
  	    _adSize: [
  	        '300x250', '250x250', '240x400', '336x280', '180x150',
  	        '720x300', '468x60', '234x60', '88x31', '120x90',
  	        '120x60', '120x240', '125x125', '728x90', '160x600',
  	        '120x600', '300x600'
  	    ],
  	    // 常见的屏幕宽高
  	    _screenSize: [
  	        '320x200', '320x240', '640x480', '800x480', '800x480',
  	        '1024x600', '1024x768', '1280x800', '1440x900', '1920x1200',
  	        '2560x1600'
  	    ],
  	    // 常见的视频宽高
  	    _videoSize: ['720x480', '768x576', '1280x720', '1920x1080'],
  	    /*
  	        生成一个随机的图片地址。
  
  	        替代图片源
  	            http://fpoimg.com/
  	        参考自 
  	            http://rensanning.iteye.com/blog/1933310
  	            http://code.tutsplus.com/articles/the-top-8-placeholders-for-web-designers--net-19485
  	    */
  	    image: function(size, background, foreground, format, text) {
  	        // Random.image( size, background, foreground, text )
  	        if (arguments.length === 4) {
  	            text = format
  	            format = undefined
  	        }
  	        // Random.image( size, background, text )
  	        if (arguments.length === 3) {
  	            text = foreground
  	            foreground = undefined
  	        }
  	        // Random.image()
  	        if (!size) size = this.pick(this._adSize)
  
  	        if (background && ~background.indexOf('#')) background = background.slice(1)
  	        if (foreground && ~foreground.indexOf('#')) foreground = foreground.slice(1)
  
  	        // http://dummyimage.com/600x400/cc00cc/470047.png&text=hello
  	        return 'http://dummyimage.com/' + size +
  	            (background ? '/' + background : '') +
  	            (foreground ? '/' + foreground : '') +
  	            (format ? '.' + format : '') +
  	            (text ? '&text=' + text : '')
  	    },
  	    img: function() {
  	        return this.image.apply(this, arguments)
  	    },
  
  	    /*
  	        BrandColors
  	        http://brandcolors.net/
  	        A collection of major brand color codes curated by Galen Gidman.
  	        大牌公司的颜色集合
  
  	        // 获取品牌和颜色
  	        $('h2').each(function(index, item){
  	            item = $(item)
  	            console.log('\'' + item.text() + '\'', ':', '\'' + item.next().text() + '\'', ',')
  	        })
  	    */
  	    _brandColors: {
  	        '4ormat': '#fb0a2a',
  	        '500px': '#02adea',
  	        'About.me (blue)': '#00405d',
  	        'About.me (yellow)': '#ffcc33',
  	        'Addvocate': '#ff6138',
  	        'Adobe': '#ff0000',
  	        'Aim': '#fcd20b',
  	        'Amazon': '#e47911',
  	        'Android': '#a4c639',
  	        'Angie\'s List': '#7fbb00',
  	        'AOL': '#0060a3',
  	        'Atlassian': '#003366',
  	        'Behance': '#053eff',
  	        'Big Cartel': '#97b538',
  	        'bitly': '#ee6123',
  	        'Blogger': '#fc4f08',
  	        'Boeing': '#0039a6',
  	        'Booking.com': '#003580',
  	        'Carbonmade': '#613854',
  	        'Cheddar': '#ff7243',
  	        'Code School': '#3d4944',
  	        'Delicious': '#205cc0',
  	        'Dell': '#3287c1',
  	        'Designmoo': '#e54a4f',
  	        'Deviantart': '#4e6252',
  	        'Designer News': '#2d72da',
  	        'Devour': '#fd0001',
  	        'DEWALT': '#febd17',
  	        'Disqus (blue)': '#59a3fc',
  	        'Disqus (orange)': '#db7132',
  	        'Dribbble': '#ea4c89',
  	        'Dropbox': '#3d9ae8',
  	        'Drupal': '#0c76ab',
  	        'Dunked': '#2a323a',
  	        'eBay': '#89c507',
  	        'Ember': '#f05e1b',
  	        'Engadget': '#00bdf6',
  	        'Envato': '#528036',
  	        'Etsy': '#eb6d20',
  	        'Evernote': '#5ba525',
  	        'Fab.com': '#dd0017',
  	        'Facebook': '#3b5998',
  	        'Firefox': '#e66000',
  	        'Flickr (blue)': '#0063dc',
  	        'Flickr (pink)': '#ff0084',
  	        'Forrst': '#5b9a68',
  	        'Foursquare': '#25a0ca',
  	        'Garmin': '#007cc3',
  	        'GetGlue': '#2d75a2',
  	        'Gimmebar': '#f70078',
  	        'GitHub': '#171515',
  	        'Google Blue': '#0140ca',
  	        'Google Green': '#16a61e',
  	        'Google Red': '#dd1812',
  	        'Google Yellow': '#fcca03',
  	        'Google+': '#dd4b39',
  	        'Grooveshark': '#f77f00',
  	        'Groupon': '#82b548',
  	        'Hacker News': '#ff6600',
  	        'HelloWallet': '#0085ca',
  	        'Heroku (light)': '#c7c5e6',
  	        'Heroku (dark)': '#6567a5',
  	        'HootSuite': '#003366',
  	        'Houzz': '#73ba37',
  	        'HTML5': '#ec6231',
  	        'IKEA': '#ffcc33',
  	        'IMDb': '#f3ce13',
  	        'Instagram': '#3f729b',
  	        'Intel': '#0071c5',
  	        'Intuit': '#365ebf',
  	        'Kickstarter': '#76cc1e',
  	        'kippt': '#e03500',
  	        'Kodery': '#00af81',
  	        'LastFM': '#c3000d',
  	        'LinkedIn': '#0e76a8',
  	        'Livestream': '#cf0005',
  	        'Lumo': '#576396',
  	        'Mixpanel': '#a086d3',
  	        'Meetup': '#e51937',
  	        'Nokia': '#183693',
  	        'NVIDIA': '#76b900',
  	        'Opera': '#cc0f16',
  	        'Path': '#e41f11',
  	        'PayPal (dark)': '#1e477a',
  	        'PayPal (light)': '#3b7bbf',
  	        'Pinboard': '#0000e6',
  	        'Pinterest': '#c8232c',
  	        'PlayStation': '#665cbe',
  	        'Pocket': '#ee4056',
  	        'Prezi': '#318bff',
  	        'Pusha': '#0f71b4',
  	        'Quora': '#a82400',
  	        'QUOTE.fm': '#66ceff',
  	        'Rdio': '#008fd5',
  	        'Readability': '#9c0000',
  	        'Red Hat': '#cc0000',
  	        'Resource': '#7eb400',
  	        'Rockpack': '#0ba6ab',
  	        'Roon': '#62b0d9',
  	        'RSS': '#ee802f',
  	        'Salesforce': '#1798c1',
  	        'Samsung': '#0c4da2',
  	        'Shopify': '#96bf48',
  	        'Skype': '#00aff0',
  	        'Snagajob': '#f47a20',
  	        'Softonic': '#008ace',
  	        'SoundCloud': '#ff7700',
  	        'Space Box': '#f86960',
  	        'Spotify': '#81b71a',
  	        'Sprint': '#fee100',
  	        'Squarespace': '#121212',
  	        'StackOverflow': '#ef8236',
  	        'Staples': '#cc0000',
  	        'Status Chart': '#d7584f',
  	        'Stripe': '#008cdd',
  	        'StudyBlue': '#00afe1',
  	        'StumbleUpon': '#f74425',
  	        'T-Mobile': '#ea0a8e',
  	        'Technorati': '#40a800',
  	        'The Next Web': '#ef4423',
  	        'Treehouse': '#5cb868',
  	        'Trulia': '#5eab1f',
  	        'Tumblr': '#34526f',
  	        'Twitch.tv': '#6441a5',
  	        'Twitter': '#00acee',
  	        'TYPO3': '#ff8700',
  	        'Ubuntu': '#dd4814',
  	        'Ustream': '#3388ff',
  	        'Verizon': '#ef1d1d',
  	        'Vimeo': '#86c9ef',
  	        'Vine': '#00a478',
  	        'Virb': '#06afd8',
  	        'Virgin Media': '#cc0000',
  	        'Wooga': '#5b009c',
  	        'WordPress (blue)': '#21759b',
  	        'WordPress (orange)': '#d54e21',
  	        'WordPress (grey)': '#464646',
  	        'Wunderlist': '#2b88d9',
  	        'XBOX': '#9bc848',
  	        'XING': '#126567',
  	        'Yahoo!': '#720e9e',
  	        'Yandex': '#ffcc00',
  	        'Yelp': '#c41200',
  	        'YouTube': '#c4302b',
  	        'Zalongo': '#5498dc',
  	        'Zendesk': '#78a300',
  	        'Zerply': '#9dcc7a',
  	        'Zootool': '#5e8b1d'
  	    },
  	    _brandNames: function() {
  	        var brands = [];
  	        for (var b in this._brandColors) {
  	            brands.push(b)
  	        }
  	        return brands
  	    },
  	    /*
  	        生成一段随机的 Base64 图片编码。
  
  	        https://github.com/imsky/holder
  	        Holder renders image placeholders entirely on the client side.
  
  	        dataImageHolder: function(size) {
  	            return 'holder.js/' + size
  	        },
  	    */
  	    dataImage: function(size, text) {
  	        var canvas
  	        if (typeof document !== 'undefined') {
  	            canvas = document.createElement('canvas')
  	        } else {
  	            /*
  	                https://github.com/Automattic/node-canvas
  	                    npm install canvas --save
  	                安装问题：
  	                * http://stackoverflow.com/questions/22953206/gulp-issues-with-cario-install-command-not-found-when-trying-to-installing-canva
  	                * https://github.com/Automattic/node-canvas/issues/415
  	                * https://github.com/Automattic/node-canvas/wiki/_pages
  
  	                PS：node-canvas 的安装过程实在是太繁琐了，所以不放入 package.json 的 dependencies。
  	             */
  	            var Canvas = module.require('canvas')
  	            canvas = new Canvas()
  	        }
  
  	        var ctx = canvas && canvas.getContext && canvas.getContext("2d")
  	        if (!canvas || !ctx) return ''
  
  	        if (!size) size = this.pick(this._adSize)
  	        text = text !== undefined ? text : size
  
  	        size = size.split('x')
  
  	        var width = parseInt(size[0], 10),
  	            height = parseInt(size[1], 10),
  	            background = this._brandColors[this.pick(this._brandNames())],
  	            foreground = '#FFF',
  	            text_height = 14,
  	            font = 'sans-serif';
  
  	        canvas.width = width
  	        canvas.height = height
  	        ctx.textAlign = 'center'
  	        ctx.textBaseline = 'middle'
  	        ctx.fillStyle = background
  	        ctx.fillRect(0, 0, width, height)
  	        ctx.fillStyle = foreground
  	        ctx.font = 'bold ' + text_height + 'px ' + font
  	        ctx.fillText(text, (width / 2), (height / 2), width)
  	        return canvas.toDataURL('image/png')
  	    }
  	}
  	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)(module)))
  
  /***/ },
  /* 9 */
  /***/ function(module, exports) {
  
  	module.exports = function(module) {
  		if(!module.webpackPolyfill) {
  			module.deprecate = function() {};
  			module.paths = [];
  			// module.parent = undefined by default
  			module.children = [];
  			module.webpackPolyfill = 1;
  		}
  		return module;
  	}
  
  
  /***/ },
  /* 10 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## Color
  
  	    http://llllll.li/randomColor/
  	        A color generator for JavaScript.
  	        randomColor generates attractive colors by default. More specifically, randomColor produces bright colors with a reasonably high saturation. This makes randomColor particularly useful for data visualizations and generative art.
  
  	    http://randomcolour.com/
  	        var bg_colour = Math.floor(Math.random() * 16777215).toString(16);
  	        bg_colour = "#" + ("000000" + bg_colour).slice(-6);
  	        document.bgColor = bg_colour;
  	    
  	    http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
  	        Creating random colors is actually more difficult than it seems. The randomness itself is easy, but aesthetically pleasing randomness is more difficult.
  	        https://github.com/devongovett/color-generator
  
  	    http://www.paulirish.com/2009/random-hex-color-code-snippets/
  	        Random Hex Color Code Generator in JavaScript
  
  	    http://chancejs.com/#color
  	        chance.color()
  	        // => '#79c157'
  	        chance.color({format: 'hex'})
  	        // => '#d67118'
  	        chance.color({format: 'shorthex'})
  	        // => '#60f'
  	        chance.color({format: 'rgb'})
  	        // => 'rgb(110,52,164)'
  
  	    http://tool.c7sky.com/webcolor
  	        网页设计常用色彩搭配表
  	    
  	    https://github.com/One-com/one-color
  	        An OO-based JavaScript color parser/computation toolkit with support for RGB, HSV, HSL, CMYK, and alpha channels.
  	        API 很赞
  
  	    https://github.com/harthur/color
  	        JavaScript color conversion and manipulation library
  
  	    https://github.com/leaverou/css-colors
  	        Share & convert CSS colors
  	    http://leaverou.github.io/css-colors/#slategray
  	        Type a CSS color keyword, #hex, hsl(), rgba(), whatever:
  
  	    色调 hue
  	        http://baike.baidu.com/view/23368.htm
  	        色调指的是一幅画中画面色彩的总体倾向，是大的色彩效果。
  	    饱和度 saturation
  	        http://baike.baidu.com/view/189644.htm
  	        饱和度是指色彩的鲜艳程度，也称色彩的纯度。饱和度取决于该色中含色成分和消色成分（灰色）的比例。含色成分越大，饱和度越大；消色成分越大，饱和度越小。
  	    亮度 brightness
  	        http://baike.baidu.com/view/34773.htm
  	        亮度是指发光体（反光体）表面发光（反光）强弱的物理量。
  	    照度 luminosity
  	        物体被照亮的程度,采用单位面积所接受的光通量来表示,表示单位为勒[克斯](Lux,lx) ,即 1m / m2 。
  
  	    http://stackoverflow.com/questions/1484506/random-color-generator-in-javascript
  	        var letters = '0123456789ABCDEF'.split('')
  	        var color = '#'
  	        for (var i = 0; i < 6; i++) {
  	            color += letters[Math.floor(Math.random() * 16)]
  	        }
  	        return color
  	    
  	        // 随机生成一个无脑的颜色，格式为 '#RRGGBB'。
  	        // _brainlessColor()
  	        var color = Math.floor(
  	            Math.random() *
  	            (16 * 16 * 16 * 16 * 16 * 16 - 1)
  	        ).toString(16)
  	        color = "#" + ("000000" + color).slice(-6)
  	        return color.toUpperCase()
  	*/
  
  	var Convert = __webpack_require__(11)
  	var DICT = __webpack_require__(12)
  
  	module.exports = {
  	    // 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'。
  	    color: function(name) {
  	        if (name || DICT[name]) return DICT[name].nicer
  	        return this.hex()
  	    },
  	    // #DAC0DE
  	    hex: function() {
  	        var hsv = this._goldenRatioColor()
  	        var rgb = Convert.hsv2rgb(hsv)
  	        var hex = Convert.rgb2hex(rgb[0], rgb[1], rgb[2])
  	        return hex
  	    },
  	    // rgb(128,255,255)
  	    rgb: function() {
  	        var hsv = this._goldenRatioColor()
  	        var rgb = Convert.hsv2rgb(hsv)
  	        return 'rgb(' +
  	            parseInt(rgb[0], 10) + ', ' +
  	            parseInt(rgb[1], 10) + ', ' +
  	            parseInt(rgb[2], 10) + ')'
  	    },
  	    // rgba(128,255,255,0.3)
  	    rgba: function() {
  	        var hsv = this._goldenRatioColor()
  	        var rgb = Convert.hsv2rgb(hsv)
  	        return 'rgba(' +
  	            parseInt(rgb[0], 10) + ', ' +
  	            parseInt(rgb[1], 10) + ', ' +
  	            parseInt(rgb[2], 10) + ', ' +
  	            Math.random().toFixed(2) + ')'
  	    },
  	    // hsl(300,80%,90%)
  	    hsl: function() {
  	        var hsv = this._goldenRatioColor()
  	        var hsl = Convert.hsv2hsl(hsv)
  	        return 'hsl(' +
  	            parseInt(hsl[0], 10) + ', ' +
  	            parseInt(hsl[1], 10) + ', ' +
  	            parseInt(hsl[2], 10) + ')'
  	    },
  	    // http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
  	    // https://github.com/devongovett/color-generator/blob/master/index.js
  	    // 随机生成一个有吸引力的颜色。
  	    _goldenRatioColor: function(saturation, value) {
  	        this._goldenRatio = 0.618033988749895
  	        this._hue = this._hue || Math.random()
  	        this._hue += this._goldenRatio
  	        this._hue %= 1
  
  	        if (typeof saturation !== "number") saturation = 0.5;
  	        if (typeof value !== "number") value = 0.95;
  
  	        return [
  	            this._hue * 360,
  	            saturation * 100,
  	            value * 100
  	        ]
  	    }
  	}
  
  /***/ },
  /* 11 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Color Convert
  
  	    http://blog.csdn.net/idfaya/article/details/6770414
  	        颜色空间RGB与HSV(HSL)的转换
  	*/
  	// https://github.com/harthur/color-convert/blob/master/conversions.js
  	module.exports = {
  		rgb2hsl: function rgb2hsl(rgb) {
  			var r = rgb[0] / 255,
  				g = rgb[1] / 255,
  				b = rgb[2] / 255,
  				min = Math.min(r, g, b),
  				max = Math.max(r, g, b),
  				delta = max - min,
  				h, s, l;
  
  			if (max == min)
  				h = 0;
  			else if (r == max)
  				h = (g - b) / delta;
  			else if (g == max)
  				h = 2 + (b - r) / delta;
  			else if (b == max)
  				h = 4 + (r - g) / delta;
  
  			h = Math.min(h * 60, 360);
  
  			if (h < 0)
  				h += 360;
  
  			l = (min + max) / 2;
  
  			if (max == min)
  				s = 0;
  			else if (l <= 0.5)
  				s = delta / (max + min);
  			else
  				s = delta / (2 - max - min);
  
  			return [h, s * 100, l * 100];
  		},
  		rgb2hsv: function rgb2hsv(rgb) {
  			var r = rgb[0],
  				g = rgb[1],
  				b = rgb[2],
  				min = Math.min(r, g, b),
  				max = Math.max(r, g, b),
  				delta = max - min,
  				h, s, v;
  
  			if (max === 0)
  				s = 0;
  			else
  				s = (delta / max * 1000) / 10;
  
  			if (max == min)
  				h = 0;
  			else if (r == max)
  				h = (g - b) / delta;
  			else if (g == max)
  				h = 2 + (b - r) / delta;
  			else if (b == max)
  				h = 4 + (r - g) / delta;
  
  			h = Math.min(h * 60, 360);
  
  			if (h < 0)
  				h += 360;
  
  			v = ((max / 255) * 1000) / 10;
  
  			return [h, s, v];
  		},
  		hsl2rgb: function hsl2rgb(hsl) {
  			var h = hsl[0] / 360,
  				s = hsl[1] / 100,
  				l = hsl[2] / 100,
  				t1, t2, t3, rgb, val;
  
  			if (s === 0) {
  				val = l * 255;
  				return [val, val, val];
  			}
  
  			if (l < 0.5)
  				t2 = l * (1 + s);
  			else
  				t2 = l + s - l * s;
  			t1 = 2 * l - t2;
  
  			rgb = [0, 0, 0];
  			for (var i = 0; i < 3; i++) {
  				t3 = h + 1 / 3 * -(i - 1);
  				if (t3 < 0) t3++;
  				if (t3 > 1) t3--;
  
  				if (6 * t3 < 1)
  					val = t1 + (t2 - t1) * 6 * t3;
  				else if (2 * t3 < 1)
  					val = t2;
  				else if (3 * t3 < 2)
  					val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
  				else
  					val = t1;
  
  				rgb[i] = val * 255;
  			}
  
  			return rgb;
  		},
  		hsl2hsv: function hsl2hsv(hsl) {
  			var h = hsl[0],
  				s = hsl[1] / 100,
  				l = hsl[2] / 100,
  				sv, v;
  			l *= 2;
  			s *= (l <= 1) ? l : 2 - l;
  			v = (l + s) / 2;
  			sv = (2 * s) / (l + s);
  			return [h, sv * 100, v * 100];
  		},
  		hsv2rgb: function hsv2rgb(hsv) {
  			var h = hsv[0] / 60
  			var s = hsv[1] / 100
  			var v = hsv[2] / 100
  			var hi = Math.floor(h) % 6
  
  			var f = h - Math.floor(h)
  			var p = 255 * v * (1 - s)
  			var q = 255 * v * (1 - (s * f))
  			var t = 255 * v * (1 - (s * (1 - f)))
  
  			v = 255 * v
  
  			switch (hi) {
  				case 0:
  					return [v, t, p]
  				case 1:
  					return [q, v, p]
  				case 2:
  					return [p, v, t]
  				case 3:
  					return [p, q, v]
  				case 4:
  					return [t, p, v]
  				case 5:
  					return [v, p, q]
  			}
  		},
  		hsv2hsl: function hsv2hsl(hsv) {
  			var h = hsv[0],
  				s = hsv[1] / 100,
  				v = hsv[2] / 100,
  				sl, l;
  
  			l = (2 - s) * v;
  			sl = s * v;
  			sl /= (l <= 1) ? l : 2 - l;
  			l /= 2;
  			return [h, sl * 100, l * 100];
  		},
  		// http://www.140byt.es/keywords/color
  		rgb2hex: function(
  			a, // red, as a number from 0 to 255
  			b, // green, as a number from 0 to 255
  			c // blue, as a number from 0 to 255
  		) {
  			return "#" + ((256 + a << 8 | b) << 8 | c).toString(16).slice(1)
  		},
  		hex2rgb: function(
  			a // take a "#xxxxxx" hex string,
  		) {
  			a = '0x' + a.slice(1).replace(a.length > 4 ? a : /./g, '$&$&') | 0;
  			return [a >> 16, a >> 8 & 255, a & 255]
  		}
  	}
  
  /***/ },
  /* 12 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Color 字典数据
  
  	    字典数据来源 [A nicer color palette for the web](http://clrs.cc/)
  	*/
  	module.exports = {
  	    // name value nicer
  	    navy: {
  	        value: '#000080',
  	        nicer: '#001F3F'
  	    },
  	    blue: {
  	        value: '#0000ff',
  	        nicer: '#0074D9'
  	    },
  	    aqua: {
  	        value: '#00ffff',
  	        nicer: '#7FDBFF'
  	    },
  	    teal: {
  	        value: '#008080',
  	        nicer: '#39CCCC'
  	    },
  	    olive: {
  	        value: '#008000',
  	        nicer: '#3D9970'
  	    },
  	    green: {
  	        value: '#008000',
  	        nicer: '#2ECC40'
  	    },
  	    lime: {
  	        value: '#00ff00',
  	        nicer: '#01FF70'
  	    },
  	    yellow: {
  	        value: '#ffff00',
  	        nicer: '#FFDC00'
  	    },
  	    orange: {
  	        value: '#ffa500',
  	        nicer: '#FF851B'
  	    },
  	    red: {
  	        value: '#ff0000',
  	        nicer: '#FF4136'
  	    },
  	    maroon: {
  	        value: '#800000',
  	        nicer: '#85144B'
  	    },
  	    fuchsia: {
  	        value: '#ff00ff',
  	        nicer: '#F012BE'
  	    },
  	    purple: {
  	        value: '#800080',
  	        nicer: '#B10DC9'
  	    },
  	    silver: {
  	        value: '#c0c0c0',
  	        nicer: '#DDDDDD'
  	    },
  	    gray: {
  	        value: '#808080',
  	        nicer: '#AAAAAA'
  	    },
  	    black: {
  	        value: '#000000',
  	        nicer: '#111111'
  	    },
  	    white: {
  	        value: '#FFFFFF',
  	        nicer: '#FFFFFF'
  	    }
  	}
  
  /***/ },
  /* 13 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## Text
  
  	    http://www.lipsum.com/
  	*/
  	var Basic = __webpack_require__(6)
  	var Helper = __webpack_require__(14)
  
  	function range(defaultMin, defaultMax, min, max) {
  	    return min === undefined ? Basic.natural(defaultMin, defaultMax) : // ()
  	        max === undefined ? min : // ( len )
  	        Basic.natural(parseInt(min, 10), parseInt(max, 10)) // ( min, max )
  	}
  
  	module.exports = {
  	    // 随机生成一段文本。
  	    paragraph: function(min, max) {
  	        var len = range(3, 7, min, max)
  	        var result = []
  	        for (var i = 0; i < len; i++) {
  	            result.push(this.sentence())
  	        }
  	        return result.join(' ')
  	    },
  	    // 
  	    cparagraph: function(min, max) {
  	        var len = range(3, 7, min, max)
  	        var result = []
  	        for (var i = 0; i < len; i++) {
  	            result.push(this.csentence())
  	        }
  	        return result.join('')
  	    },
  	    // 随机生成一个句子，第一个单词的首字母大写。
  	    sentence: function(min, max) {
  	        var len = range(12, 18, min, max)
  	        var result = []
  	        for (var i = 0; i < len; i++) {
  	            result.push(this.word())
  	        }
  	        return Helper.capitalize(result.join(' ')) + '.'
  	    },
  	    // 随机生成一个中文句子。
  	    csentence: function(min, max) {
  	        var len = range(12, 18, min, max)
  	        var result = []
  	        for (var i = 0; i < len; i++) {
  	            result.push(this.cword())
  	        }
  
  	        return result.join('') + '。'
  	    },
  	    // 随机生成一个单词。
  	    word: function(min, max) {
  	        var len = range(3, 10, min, max)
  	        var result = '';
  	        for (var i = 0; i < len; i++) {
  	            result += Basic.character('lower')
  	        }
  	        return result
  	    },
  	    // 随机生成一个或多个汉字。
  	    cword: function(pool, min, max) {
  	        // 最常用的 500 个汉字 http://baike.baidu.com/view/568436.htm
  	        var DICT_KANZI = '的一是在不了有和人这中大为上个国我以要他时来用们生到作地于出就分对成会可主发年动同工也能下过子说产种面而方后多定行学法所民得经十三之进着等部度家电力里如水化高自二理起小物现实加量都两体制机当使点从业本去把性好应开它合还因由其些然前外天政四日那社义事平形相全表间样与关各重新线内数正心反你明看原又么利比或但质气第向道命此变条只没结解问意建月公无系军很情者最立代想已通并提直题党程展五果料象员革位入常文总次品式活设及管特件长求老头基资边流路级少图山统接知较将组见计别她手角期根论运农指几九区强放决西被干做必战先回则任取据处队南给色光门即保治北造百规热领七海口东导器压志世金增争济阶油思术极交受联什认六共权收证改清己美再采转更单风切打白教速花带安场身车例真务具万每目至达走积示议声报斗完类八离华名确才科张信马节话米整空元况今集温传土许步群广石记需段研界拉林律叫且究观越织装影算低持音众书布复容儿须际商非验连断深难近矿千周委素技备半办青省列习响约支般史感劳便团往酸历市克何除消构府称太准精值号率族维划选标写存候毛亲快效斯院查江型眼王按格养易置派层片始却专状育厂京识适属圆包火住调满县局照参红细引听该铁价严龙飞'
  
  	        var len
  	        switch (arguments.length) {
  	            case 0: // ()
  	                pool = DICT_KANZI
  	                len = 1
  	                break
  	            case 1: // ( pool )
  	                if (typeof arguments[0] === 'string') {
  	                    len = 1
  	                } else {
  	                    // ( length )
  	                    len = pool
  	                    pool = DICT_KANZI
  	                }
  	                break
  	            case 2:
  	                // ( pool, length )
  	                if (typeof arguments[0] === 'string') {
  	                    len = min
  	                } else {
  	                    // ( min, max )
  	                    len = this.natural(pool, min)
  	                    pool = DICT_KANZI
  	                }
  	                break
  	            case 3:
  	                len = this.natural(min, max)
  	                break
  	        }
  
  	        var result = ''
  	        for (var i = 0; i < len; i++) {
  	            result += pool.charAt(this.natural(0, pool.length - 1))
  	        }
  	        return result
  	    },
  	    // 随机生成一句标题，其中每个单词的首字母大写。
  	    title: function(min, max) {
  	        var len = range(3, 7, min, max)
  	        var result = []
  	        for (var i = 0; i < len; i++) {
  	            result.push(this.capitalize(this.word()))
  	        }
  	        return result.join(' ')
  	    },
  	    // 随机生成一句中文标题。
  	    ctitle: function(min, max) {
  	        var len = range(3, 7, min, max)
  	        var result = []
  	        for (var i = 0; i < len; i++) {
  	            result.push(this.cword())
  	        }
  	        return result.join('')
  	    }
  	}
  
  /***/ },
  /* 14 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## Helpers
  	*/
  
  	var Util = __webpack_require__(3)
  
  	module.exports = {
  		// 把字符串的第一个字母转换为大写。
  		capitalize: function(word) {
  			return (word + '').charAt(0).toUpperCase() + (word + '').substr(1)
  		},
  		// 把字符串转换为大写。
  		upper: function(str) {
  			return (str + '').toUpperCase()
  		},
  		// 把字符串转换为小写。
  		lower: function(str) {
  			return (str + '').toLowerCase()
  		},
  		// 从数组中随机选取一个元素，并返回。
  		pick: function pick(arr, min, max) {
  			// pick( item1, item2 ... )
  			if (!Util.isArray(arr)) {
  				arr = [].slice.call(arguments)
  				min = 1
  				max = 1
  			} else {
  				// pick( [ item1, item2 ... ] )
  				if (min === undefined) min = 1
  
  				// pick( [ item1, item2 ... ], count )
  				if (max === undefined) max = min
  			}
  
  			if (min === 1 && max === 1) return arr[this.natural(0, arr.length - 1)]
  
  			// pick( [ item1, item2 ... ], min, max )
  			return this.shuffle(arr, min, max)
  
  			// 通过参数个数判断方法签名，扩展性太差！#90
  			// switch (arguments.length) {
  			// 	case 1:
  			// 		// pick( [ item1, item2 ... ] )
  			// 		return arr[this.natural(0, arr.length - 1)]
  			// 	case 2:
  			// 		// pick( [ item1, item2 ... ], count )
  			// 		max = min
  			// 			/* falls through */
  			// 	case 3:
  			// 		// pick( [ item1, item2 ... ], min, max )
  			// 		return this.shuffle(arr, min, max)
  			// }
  		},
  		/*
  		    打乱数组中元素的顺序，并返回。
  		    Given an array, scramble the order and return it.
  
  		    其他的实现思路：
  		        // https://code.google.com/p/jslibs/wiki/JavascriptTips
  		        result = result.sort(function() {
  		            return Math.random() - 0.5
  		        })
  		*/
  		shuffle: function shuffle(arr, min, max) {
  			arr = arr || []
  			var old = arr.slice(0),
  				result = [],
  				index = 0,
  				length = old.length;
  			for (var i = 0; i < length; i++) {
  				index = this.natural(0, old.length - 1)
  				result.push(old[index])
  				old.splice(index, 1)
  			}
  			switch (arguments.length) {
  				case 0:
  				case 1:
  					return result
  				case 2:
  					max = min
  						/* falls through */
  				case 3:
  					min = parseInt(min, 10)
  					max = parseInt(max, 10)
  					return result.slice(0, this.natural(min, max))
  			}
  		},
  		/*
  		    * Random.order(item, item)
  		    * Random.order([item, item ...])
  
  		    顺序获取数组中的元素
  
  		    [JSON导入数组支持数组数据录入](https://github.com/thx/RAP/issues/22)
  
  		    不支持单独调用！
  		*/
  		order: function order(array) {
  			order.cache = order.cache || {}
  
  			if (arguments.length > 1) array = [].slice.call(arguments, 0)
  
  			// options.context.path/templatePath
  			var options = order.options
  			var templatePath = options.context.templatePath.join('.')
  
  			var cache = (
  				order.cache[templatePath] = order.cache[templatePath] || {
  					index: 0,
  					array: array
  				}
  			)
  
  			return cache.array[cache.index++ % cache.array.length]
  		}
  	}
  
  /***/ },
  /* 15 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Name
  
  	    [Beyond the Top 1000 Names](http://www.ssa.gov/oact/babynames/limits.html)
  	*/
  	module.exports = {
  		// 随机生成一个常见的英文名。
  		first: function() {
  			var names = [
  				// male
  				"James", "John", "Robert", "Michael", "William",
  				"David", "Richard", "Charles", "Joseph", "Thomas",
  				"Christopher", "Daniel", "Paul", "Mark", "Donald",
  				"George", "Kenneth", "Steven", "Edward", "Brian",
  				"Ronald", "Anthony", "Kevin", "Jason", "Matthew",
  				"Gary", "Timothy", "Jose", "Larry", "Jeffrey",
  				"Frank", "Scott", "Eric"
  			].concat([
  				// female
  				"Mary", "Patricia", "Linda", "Barbara", "Elizabeth",
  				"Jennifer", "Maria", "Susan", "Margaret", "Dorothy",
  				"Lisa", "Nancy", "Karen", "Betty", "Helen",
  				"Sandra", "Donna", "Carol", "Ruth", "Sharon",
  				"Michelle", "Laura", "Sarah", "Kimberly", "Deborah",
  				"Jessica", "Shirley", "Cynthia", "Angela", "Melissa",
  				"Brenda", "Amy", "Anna"
  			])
  			return this.pick(names)
  				// or this.capitalize(this.word())
  		},
  		// 随机生成一个常见的英文姓。
  		last: function() {
  			var names = [
  				"Smith", "Johnson", "Williams", "Brown", "Jones",
  				"Miller", "Davis", "Garcia", "Rodriguez", "Wilson",
  				"Martinez", "Anderson", "Taylor", "Thomas", "Hernandez",
  				"Moore", "Martin", "Jackson", "Thompson", "White",
  				"Lopez", "Lee", "Gonzalez", "Harris", "Clark",
  				"Lewis", "Robinson", "Walker", "Perez", "Hall",
  				"Young", "Allen"
  			]
  			return this.pick(names)
  				// or this.capitalize(this.word())
  		},
  		// 随机生成一个常见的英文姓名。
  		name: function(middle) {
  			return this.first() + ' ' +
  				(middle ? this.first() + ' ' : '') +
  				this.last()
  		},
  		/*
  		    随机生成一个常见的中文姓。
  		    [世界常用姓氏排行](http://baike.baidu.com/view/1719115.htm)
  		    [玄派网 - 网络小说创作辅助平台](http://xuanpai.sinaapp.com/)
  		 */
  		cfirst: function() {
  			var names = (
  				'王 李 张 刘 陈 杨 赵 黄 周 吴 ' +
  				'徐 孙 胡 朱 高 林 何 郭 马 罗 ' +
  				'梁 宋 郑 谢 韩 唐 冯 于 董 萧 ' +
  				'程 曹 袁 邓 许 傅 沈 曾 彭 吕 ' +
  				'苏 卢 蒋 蔡 贾 丁 魏 薛 叶 阎 ' +
  				'余 潘 杜 戴 夏 锺 汪 田 任 姜 ' +
  				'范 方 石 姚 谭 廖 邹 熊 金 陆 ' +
  				'郝 孔 白 崔 康 毛 邱 秦 江 史 ' +
  				'顾 侯 邵 孟 龙 万 段 雷 钱 汤 ' +
  				'尹 黎 易 常 武 乔 贺 赖 龚 文'
  			).split(' ')
  			return this.pick(names)
  		},
  		/*
  		    随机生成一个常见的中文名。
  		    [中国最常见名字前50名_三九算命网](http://www.name999.net/xingming/xingshi/20131004/48.html)
  		 */
  		clast: function() {
  			var names = (
  				'伟 芳 娜 秀英 敏 静 丽 强 磊 军 ' +
  				'洋 勇 艳 杰 娟 涛 明 超 秀兰 霞 ' +
  				'平 刚 桂英'
  			).split(' ')
  			return this.pick(names)
  		},
  		// 随机生成一个常见的中文姓名。
  		cname: function() {
  			return this.cfirst() + this.clast()
  		}
  	}
  
  /***/ },
  /* 16 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Web
  	*/
  	module.exports = {
  	    /*
  	        随机生成一个 URL。
  
  	        [URL 规范](http://www.w3.org/Addressing/URL/url-spec.txt)
  	            http                    Hypertext Transfer Protocol 
  	            ftp                     File Transfer protocol 
  	            gopher                  The Gopher protocol 
  	            mailto                  Electronic mail address 
  	            mid                     Message identifiers for electronic mail 
  	            cid                     Content identifiers for MIME body part 
  	            news                    Usenet news 
  	            nntp                    Usenet news for local NNTP access only 
  	            prospero                Access using the prospero protocols 
  	            telnet rlogin tn3270    Reference to interactive sessions
  	            wais                    Wide Area Information Servers 
  	    */
  	    url: function(protocol, host) {
  	        return (protocol || this.protocol()) + '://' + // protocol?
  	            (host || this.domain()) + // host?
  	            '/' + this.word()
  	    },
  	    // 随机生成一个 URL 协议。
  	    protocol: function() {
  	        return this.pick(
  	            // 协议簇
  	            'http ftp gopher mailto mid cid news nntp prospero telnet rlogin tn3270 wais'.split(' ')
  	        )
  	    },
  	    // 随机生成一个域名。
  	    domain: function(tld) {
  	        return this.word() + '.' + (tld || this.tld())
  	    },
  	    /*
  	        随机生成一个顶级域名。
  	        国际顶级域名 international top-level domain-names, iTLDs
  	        国家顶级域名 national top-level domainnames, nTLDs
  	        [域名后缀大全](http://www.163ns.com/zixun/post/4417.html)
  	    */
  	    tld: function() { // Top Level Domain
  	        return this.pick(
  	            (
  	                // 域名后缀
  	                'com net org edu gov int mil cn ' +
  	                // 国内域名
  	                'com.cn net.cn gov.cn org.cn ' +
  	                // 中文国内域名
  	                '中国 中国互联.公司 中国互联.网络 ' +
  	                // 新国际域名
  	                'tel biz cc tv info name hk mobi asia cd travel pro museum coop aero ' +
  	                // 世界各国域名后缀
  	                'ad ae af ag ai al am an ao aq ar as at au aw az ba bb bd be bf bg bh bi bj bm bn bo br bs bt bv bw by bz ca cc cf cg ch ci ck cl cm cn co cq cr cu cv cx cy cz de dj dk dm do dz ec ee eg eh es et ev fi fj fk fm fo fr ga gb gd ge gf gh gi gl gm gn gp gr gt gu gw gy hk hm hn hr ht hu id ie il in io iq ir is it jm jo jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv ly ma mc md mg mh ml mm mn mo mp mq mr ms mt mv mw mx my mz na nc ne nf ng ni nl no np nr nt nu nz om qa pa pe pf pg ph pk pl pm pn pr pt pw py re ro ru rw sa sb sc sd se sg sh si sj sk sl sm sn so sr st su sy sz tc td tf tg th tj tk tm tn to tp tr tt tv tw tz ua ug uk us uy va vc ve vg vn vu wf ws ye yu za zm zr zw'
  	            ).split(' ')
  	        )
  	    },
  	    // 随机生成一个邮件地址。
  	    email: function(domain) {
  	        return this.character('lower') + '.' + this.word() + '@' +
  	            (
  	                domain ||
  	                (this.word() + '.' + this.tld())
  	            )
  	            // return this.character('lower') + '.' + this.last().toLowerCase() + '@' + this.last().toLowerCase() + '.' + this.tld()
  	            // return this.word() + '@' + (domain || this.domain())
  	    },
  	    // 随机生成一个 IP 地址。
  	    ip: function() {
  	        return this.natural(0, 255) + '.' +
  	            this.natural(0, 255) + '.' +
  	            this.natural(0, 255) + '.' +
  	            this.natural(0, 255)
  	    }
  	}
  
  /***/ },
  /* 17 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## Address
  	*/
  
  	var DICT = __webpack_require__(18)
  	var REGION = ['东北', '华北', '华东', '华中', '华南', '西南', '西北']
  
  	module.exports = {
  	    // 随机生成一个大区。
  	    region: function() {
  	        return this.pick(REGION)
  	    },
  	    // 随机生成一个（中国）省（或直辖市、自治区、特别行政区）。
  	    province: function() {
  	        return this.pick(DICT).name
  	    },
  	    // 随机生成一个（中国）市。
  	    city: function(prefix) {
  	        var province = this.pick(DICT)
  	        var city = this.pick(province.children)
  	        return prefix ? [province.name, city.name].join(' ') : city.name
  	    },
  	    // 随机生成一个（中国）县。
  	    county: function(prefix) {
  	        var province = this.pick(DICT)
  	        var city = this.pick(province.children)
  	        var county = this.pick(city.children) || {
  	            name: '-'
  	        }
  	        return prefix ? [province.name, city.name, county.name].join(' ') : county.name
  	    },
  	    // 随机生成一个邮政编码（六位数字）。
  	    zip: function(len) {
  	        var zip = ''
  	        for (var i = 0; i < (len || 6); i++) zip += this.natural(0, 9)
  	        return zip
  	    }
  
  	    // address: function() {},
  	    // phone: function() {},
  	    // areacode: function() {},
  	    // street: function() {},
  	    // street_suffixes: function() {},
  	    // street_suffix: function() {},
  	    // states: function() {},
  	    // state: function() {},
  	}
  
  /***/ },
  /* 18 */
  /***/ function(module, exports) {
  
  	/*
  	    ## Address 字典数据
  
  	    字典数据来源 http://www.atatech.org/articles/30028?rnd=254259856
  
  	    国标 省（市）级行政区划码表
  
  	    华北   北京市 天津市 河北省 山西省 内蒙古自治区
  	    东北   辽宁省 吉林省 黑龙江省
  	    华东   上海市 江苏省 浙江省 安徽省 福建省 江西省 山东省
  	    华南   广东省 广西壮族自治区 海南省
  	    华中   河南省 湖北省 湖南省
  	    西南   重庆市 四川省 贵州省 云南省 西藏自治区
  	    西北   陕西省 甘肃省 青海省 宁夏回族自治区 新疆维吾尔自治区
  	    港澳台 香港特别行政区 澳门特别行政区 台湾省
  	    
  	    **排序**
  	    
  	    ```js
  	    var map = {}
  	    _.each(_.keys(REGIONS),function(id){
  	      map[id] = REGIONS[ID]
  	    })
  	    JSON.stringify(map)
  	    ```
  	*/
  	var DICT = {
  	    "110000": "北京",
  	    "110100": "北京市",
  	    "110101": "东城区",
  	    "110102": "西城区",
  	    "110105": "朝阳区",
  	    "110106": "丰台区",
  	    "110107": "石景山区",
  	    "110108": "海淀区",
  	    "110109": "门头沟区",
  	    "110111": "房山区",
  	    "110112": "通州区",
  	    "110113": "顺义区",
  	    "110114": "昌平区",
  	    "110115": "大兴区",
  	    "110116": "怀柔区",
  	    "110117": "平谷区",
  	    "110228": "密云县",
  	    "110229": "延庆县",
  	    "110230": "其它区",
  	    "120000": "天津",
  	    "120100": "天津市",
  	    "120101": "和平区",
  	    "120102": "河东区",
  	    "120103": "河西区",
  	    "120104": "南开区",
  	    "120105": "河北区",
  	    "120106": "红桥区",
  	    "120110": "东丽区",
  	    "120111": "西青区",
  	    "120112": "津南区",
  	    "120113": "北辰区",
  	    "120114": "武清区",
  	    "120115": "宝坻区",
  	    "120116": "滨海新区",
  	    "120221": "宁河县",
  	    "120223": "静海县",
  	    "120225": "蓟县",
  	    "120226": "其它区",
  	    "130000": "河北省",
  	    "130100": "石家庄市",
  	    "130102": "长安区",
  	    "130103": "桥东区",
  	    "130104": "桥西区",
  	    "130105": "新华区",
  	    "130107": "井陉矿区",
  	    "130108": "裕华区",
  	    "130121": "井陉县",
  	    "130123": "正定县",
  	    "130124": "栾城县",
  	    "130125": "行唐县",
  	    "130126": "灵寿县",
  	    "130127": "高邑县",
  	    "130128": "深泽县",
  	    "130129": "赞皇县",
  	    "130130": "无极县",
  	    "130131": "平山县",
  	    "130132": "元氏县",
  	    "130133": "赵县",
  	    "130181": "辛集市",
  	    "130182": "藁城市",
  	    "130183": "晋州市",
  	    "130184": "新乐市",
  	    "130185": "鹿泉市",
  	    "130186": "其它区",
  	    "130200": "唐山市",
  	    "130202": "路南区",
  	    "130203": "路北区",
  	    "130204": "古冶区",
  	    "130205": "开平区",
  	    "130207": "丰南区",
  	    "130208": "丰润区",
  	    "130223": "滦县",
  	    "130224": "滦南县",
  	    "130225": "乐亭县",
  	    "130227": "迁西县",
  	    "130229": "玉田县",
  	    "130230": "曹妃甸区",
  	    "130281": "遵化市",
  	    "130283": "迁安市",
  	    "130284": "其它区",
  	    "130300": "秦皇岛市",
  	    "130302": "海港区",
  	    "130303": "山海关区",
  	    "130304": "北戴河区",
  	    "130321": "青龙满族自治县",
  	    "130322": "昌黎县",
  	    "130323": "抚宁县",
  	    "130324": "卢龙县",
  	    "130398": "其它区",
  	    "130400": "邯郸市",
  	    "130402": "邯山区",
  	    "130403": "丛台区",
  	    "130404": "复兴区",
  	    "130406": "峰峰矿区",
  	    "130421": "邯郸县",
  	    "130423": "临漳县",
  	    "130424": "成安县",
  	    "130425": "大名县",
  	    "130426": "涉县",
  	    "130427": "磁县",
  	    "130428": "肥乡县",
  	    "130429": "永年县",
  	    "130430": "邱县",
  	    "130431": "鸡泽县",
  	    "130432": "广平县",
  	    "130433": "馆陶县",
  	    "130434": "魏县",
  	    "130435": "曲周县",
  	    "130481": "武安市",
  	    "130482": "其它区",
  	    "130500": "邢台市",
  	    "130502": "桥东区",
  	    "130503": "桥西区",
  	    "130521": "邢台县",
  	    "130522": "临城县",
  	    "130523": "内丘县",
  	    "130524": "柏乡县",
  	    "130525": "隆尧县",
  	    "130526": "任县",
  	    "130527": "南和县",
  	    "130528": "宁晋县",
  	    "130529": "巨鹿县",
  	    "130530": "新河县",
  	    "130531": "广宗县",
  	    "130532": "平乡县",
  	    "130533": "威县",
  	    "130534": "清河县",
  	    "130535": "临西县",
  	    "130581": "南宫市",
  	    "130582": "沙河市",
  	    "130583": "其它区",
  	    "130600": "保定市",
  	    "130602": "新市区",
  	    "130603": "北市区",
  	    "130604": "南市区",
  	    "130621": "满城县",
  	    "130622": "清苑县",
  	    "130623": "涞水县",
  	    "130624": "阜平县",
  	    "130625": "徐水县",
  	    "130626": "定兴县",
  	    "130627": "唐县",
  	    "130628": "高阳县",
  	    "130629": "容城县",
  	    "130630": "涞源县",
  	    "130631": "望都县",
  	    "130632": "安新县",
  	    "130633": "易县",
  	    "130634": "曲阳县",
  	    "130635": "蠡县",
  	    "130636": "顺平县",
  	    "130637": "博野县",
  	    "130638": "雄县",
  	    "130681": "涿州市",
  	    "130682": "定州市",
  	    "130683": "安国市",
  	    "130684": "高碑店市",
  	    "130699": "其它区",
  	    "130700": "张家口市",
  	    "130702": "桥东区",
  	    "130703": "桥西区",
  	    "130705": "宣化区",
  	    "130706": "下花园区",
  	    "130721": "宣化县",
  	    "130722": "张北县",
  	    "130723": "康保县",
  	    "130724": "沽源县",
  	    "130725": "尚义县",
  	    "130726": "蔚县",
  	    "130727": "阳原县",
  	    "130728": "怀安县",
  	    "130729": "万全县",
  	    "130730": "怀来县",
  	    "130731": "涿鹿县",
  	    "130732": "赤城县",
  	    "130733": "崇礼县",
  	    "130734": "其它区",
  	    "130800": "承德市",
  	    "130802": "双桥区",
  	    "130803": "双滦区",
  	    "130804": "鹰手营子矿区",
  	    "130821": "承德县",
  	    "130822": "兴隆县",
  	    "130823": "平泉县",
  	    "130824": "滦平县",
  	    "130825": "隆化县",
  	    "130826": "丰宁满族自治县",
  	    "130827": "宽城满族自治县",
  	    "130828": "围场满族蒙古族自治县",
  	    "130829": "其它区",
  	    "130900": "沧州市",
  	    "130902": "新华区",
  	    "130903": "运河区",
  	    "130921": "沧县",
  	    "130922": "青县",
  	    "130923": "东光县",
  	    "130924": "海兴县",
  	    "130925": "盐山县",
  	    "130926": "肃宁县",
  	    "130927": "南皮县",
  	    "130928": "吴桥县",
  	    "130929": "献县",
  	    "130930": "孟村回族自治县",
  	    "130981": "泊头市",
  	    "130982": "任丘市",
  	    "130983": "黄骅市",
  	    "130984": "河间市",
  	    "130985": "其它区",
  	    "131000": "廊坊市",
  	    "131002": "安次区",
  	    "131003": "广阳区",
  	    "131022": "固安县",
  	    "131023": "永清县",
  	    "131024": "香河县",
  	    "131025": "大城县",
  	    "131026": "文安县",
  	    "131028": "大厂回族自治县",
  	    "131081": "霸州市",
  	    "131082": "三河市",
  	    "131083": "其它区",
  	    "131100": "衡水市",
  	    "131102": "桃城区",
  	    "131121": "枣强县",
  	    "131122": "武邑县",
  	    "131123": "武强县",
  	    "131124": "饶阳县",
  	    "131125": "安平县",
  	    "131126": "故城县",
  	    "131127": "景县",
  	    "131128": "阜城县",
  	    "131181": "冀州市",
  	    "131182": "深州市",
  	    "131183": "其它区",
  	    "140000": "山西省",
  	    "140100": "太原市",
  	    "140105": "小店区",
  	    "140106": "迎泽区",
  	    "140107": "杏花岭区",
  	    "140108": "尖草坪区",
  	    "140109": "万柏林区",
  	    "140110": "晋源区",
  	    "140121": "清徐县",
  	    "140122": "阳曲县",
  	    "140123": "娄烦县",
  	    "140181": "古交市",
  	    "140182": "其它区",
  	    "140200": "大同市",
  	    "140202": "城区",
  	    "140203": "矿区",
  	    "140211": "南郊区",
  	    "140212": "新荣区",
  	    "140221": "阳高县",
  	    "140222": "天镇县",
  	    "140223": "广灵县",
  	    "140224": "灵丘县",
  	    "140225": "浑源县",
  	    "140226": "左云县",
  	    "140227": "大同县",
  	    "140228": "其它区",
  	    "140300": "阳泉市",
  	    "140302": "城区",
  	    "140303": "矿区",
  	    "140311": "郊区",
  	    "140321": "平定县",
  	    "140322": "盂县",
  	    "140323": "其它区",
  	    "140400": "长治市",
  	    "140421": "长治县",
  	    "140423": "襄垣县",
  	    "140424": "屯留县",
  	    "140425": "平顺县",
  	    "140426": "黎城县",
  	    "140427": "壶关县",
  	    "140428": "长子县",
  	    "140429": "武乡县",
  	    "140430": "沁县",
  	    "140431": "沁源县",
  	    "140481": "潞城市",
  	    "140482": "城区",
  	    "140483": "郊区",
  	    "140485": "其它区",
  	    "140500": "晋城市",
  	    "140502": "城区",
  	    "140521": "沁水县",
  	    "140522": "阳城县",
  	    "140524": "陵川县",
  	    "140525": "泽州县",
  	    "140581": "高平市",
  	    "140582": "其它区",
  	    "140600": "朔州市",
  	    "140602": "朔城区",
  	    "140603": "平鲁区",
  	    "140621": "山阴县",
  	    "140622": "应县",
  	    "140623": "右玉县",
  	    "140624": "怀仁县",
  	    "140625": "其它区",
  	    "140700": "晋中市",
  	    "140702": "榆次区",
  	    "140721": "榆社县",
  	    "140722": "左权县",
  	    "140723": "和顺县",
  	    "140724": "昔阳县",
  	    "140725": "寿阳县",
  	    "140726": "太谷县",
  	    "140727": "祁县",
  	    "140728": "平遥县",
  	    "140729": "灵石县",
  	    "140781": "介休市",
  	    "140782": "其它区",
  	    "140800": "运城市",
  	    "140802": "盐湖区",
  	    "140821": "临猗县",
  	    "140822": "万荣县",
  	    "140823": "闻喜县",
  	    "140824": "稷山县",
  	    "140825": "新绛县",
  	    "140826": "绛县",
  	    "140827": "垣曲县",
  	    "140828": "夏县",
  	    "140829": "平陆县",
  	    "140830": "芮城县",
  	    "140881": "永济市",
  	    "140882": "河津市",
  	    "140883": "其它区",
  	    "140900": "忻州市",
  	    "140902": "忻府区",
  	    "140921": "定襄县",
  	    "140922": "五台县",
  	    "140923": "代县",
  	    "140924": "繁峙县",
  	    "140925": "宁武县",
  	    "140926": "静乐县",
  	    "140927": "神池县",
  	    "140928": "五寨县",
  	    "140929": "岢岚县",
  	    "140930": "河曲县",
  	    "140931": "保德县",
  	    "140932": "偏关县",
  	    "140981": "原平市",
  	    "140982": "其它区",
  	    "141000": "临汾市",
  	    "141002": "尧都区",
  	    "141021": "曲沃县",
  	    "141022": "翼城县",
  	    "141023": "襄汾县",
  	    "141024": "洪洞县",
  	    "141025": "古县",
  	    "141026": "安泽县",
  	    "141027": "浮山县",
  	    "141028": "吉县",
  	    "141029": "乡宁县",
  	    "141030": "大宁县",
  	    "141031": "隰县",
  	    "141032": "永和县",
  	    "141033": "蒲县",
  	    "141034": "汾西县",
  	    "141081": "侯马市",
  	    "141082": "霍州市",
  	    "141083": "其它区",
  	    "141100": "吕梁市",
  	    "141102": "离石区",
  	    "141121": "文水县",
  	    "141122": "交城县",
  	    "141123": "兴县",
  	    "141124": "临县",
  	    "141125": "柳林县",
  	    "141126": "石楼县",
  	    "141127": "岚县",
  	    "141128": "方山县",
  	    "141129": "中阳县",
  	    "141130": "交口县",
  	    "141181": "孝义市",
  	    "141182": "汾阳市",
  	    "141183": "其它区",
  	    "150000": "内蒙古自治区",
  	    "150100": "呼和浩特市",
  	    "150102": "新城区",
  	    "150103": "回民区",
  	    "150104": "玉泉区",
  	    "150105": "赛罕区",
  	    "150121": "土默特左旗",
  	    "150122": "托克托县",
  	    "150123": "和林格尔县",
  	    "150124": "清水河县",
  	    "150125": "武川县",
  	    "150126": "其它区",
  	    "150200": "包头市",
  	    "150202": "东河区",
  	    "150203": "昆都仑区",
  	    "150204": "青山区",
  	    "150205": "石拐区",
  	    "150206": "白云鄂博矿区",
  	    "150207": "九原区",
  	    "150221": "土默特右旗",
  	    "150222": "固阳县",
  	    "150223": "达尔罕茂明安联合旗",
  	    "150224": "其它区",
  	    "150300": "乌海市",
  	    "150302": "海勃湾区",
  	    "150303": "海南区",
  	    "150304": "乌达区",
  	    "150305": "其它区",
  	    "150400": "赤峰市",
  	    "150402": "红山区",
  	    "150403": "元宝山区",
  	    "150404": "松山区",
  	    "150421": "阿鲁科尔沁旗",
  	    "150422": "巴林左旗",
  	    "150423": "巴林右旗",
  	    "150424": "林西县",
  	    "150425": "克什克腾旗",
  	    "150426": "翁牛特旗",
  	    "150428": "喀喇沁旗",
  	    "150429": "宁城县",
  	    "150430": "敖汉旗",
  	    "150431": "其它区",
  	    "150500": "通辽市",
  	    "150502": "科尔沁区",
  	    "150521": "科尔沁左翼中旗",
  	    "150522": "科尔沁左翼后旗",
  	    "150523": "开鲁县",
  	    "150524": "库伦旗",
  	    "150525": "奈曼旗",
  	    "150526": "扎鲁特旗",
  	    "150581": "霍林郭勒市",
  	    "150582": "其它区",
  	    "150600": "鄂尔多斯市",
  	    "150602": "东胜区",
  	    "150621": "达拉特旗",
  	    "150622": "准格尔旗",
  	    "150623": "鄂托克前旗",
  	    "150624": "鄂托克旗",
  	    "150625": "杭锦旗",
  	    "150626": "乌审旗",
  	    "150627": "伊金霍洛旗",
  	    "150628": "其它区",
  	    "150700": "呼伦贝尔市",
  	    "150702": "海拉尔区",
  	    "150703": "扎赉诺尔区",
  	    "150721": "阿荣旗",
  	    "150722": "莫力达瓦达斡尔族自治旗",
  	    "150723": "鄂伦春自治旗",
  	    "150724": "鄂温克族自治旗",
  	    "150725": "陈巴尔虎旗",
  	    "150726": "新巴尔虎左旗",
  	    "150727": "新巴尔虎右旗",
  	    "150781": "满洲里市",
  	    "150782": "牙克石市",
  	    "150783": "扎兰屯市",
  	    "150784": "额尔古纳市",
  	    "150785": "根河市",
  	    "150786": "其它区",
  	    "150800": "巴彦淖尔市",
  	    "150802": "临河区",
  	    "150821": "五原县",
  	    "150822": "磴口县",
  	    "150823": "乌拉特前旗",
  	    "150824": "乌拉特中旗",
  	    "150825": "乌拉特后旗",
  	    "150826": "杭锦后旗",
  	    "150827": "其它区",
  	    "150900": "乌兰察布市",
  	    "150902": "集宁区",
  	    "150921": "卓资县",
  	    "150922": "化德县",
  	    "150923": "商都县",
  	    "150924": "兴和县",
  	    "150925": "凉城县",
  	    "150926": "察哈尔右翼前旗",
  	    "150927": "察哈尔右翼中旗",
  	    "150928": "察哈尔右翼后旗",
  	    "150929": "四子王旗",
  	    "150981": "丰镇市",
  	    "150982": "其它区",
  	    "152200": "兴安盟",
  	    "152201": "乌兰浩特市",
  	    "152202": "阿尔山市",
  	    "152221": "科尔沁右翼前旗",
  	    "152222": "科尔沁右翼中旗",
  	    "152223": "扎赉特旗",
  	    "152224": "突泉县",
  	    "152225": "其它区",
  	    "152500": "锡林郭勒盟",
  	    "152501": "二连浩特市",
  	    "152502": "锡林浩特市",
  	    "152522": "阿巴嘎旗",
  	    "152523": "苏尼特左旗",
  	    "152524": "苏尼特右旗",
  	    "152525": "东乌珠穆沁旗",
  	    "152526": "西乌珠穆沁旗",
  	    "152527": "太仆寺旗",
  	    "152528": "镶黄旗",
  	    "152529": "正镶白旗",
  	    "152530": "正蓝旗",
  	    "152531": "多伦县",
  	    "152532": "其它区",
  	    "152900": "阿拉善盟",
  	    "152921": "阿拉善左旗",
  	    "152922": "阿拉善右旗",
  	    "152923": "额济纳旗",
  	    "152924": "其它区",
  	    "210000": "辽宁省",
  	    "210100": "沈阳市",
  	    "210102": "和平区",
  	    "210103": "沈河区",
  	    "210104": "大东区",
  	    "210105": "皇姑区",
  	    "210106": "铁西区",
  	    "210111": "苏家屯区",
  	    "210112": "东陵区",
  	    "210113": "新城子区",
  	    "210114": "于洪区",
  	    "210122": "辽中县",
  	    "210123": "康平县",
  	    "210124": "法库县",
  	    "210181": "新民市",
  	    "210184": "沈北新区",
  	    "210185": "其它区",
  	    "210200": "大连市",
  	    "210202": "中山区",
  	    "210203": "西岗区",
  	    "210204": "沙河口区",
  	    "210211": "甘井子区",
  	    "210212": "旅顺口区",
  	    "210213": "金州区",
  	    "210224": "长海县",
  	    "210281": "瓦房店市",
  	    "210282": "普兰店市",
  	    "210283": "庄河市",
  	    "210298": "其它区",
  	    "210300": "鞍山市",
  	    "210302": "铁东区",
  	    "210303": "铁西区",
  	    "210304": "立山区",
  	    "210311": "千山区",
  	    "210321": "台安县",
  	    "210323": "岫岩满族自治县",
  	    "210381": "海城市",
  	    "210382": "其它区",
  	    "210400": "抚顺市",
  	    "210402": "新抚区",
  	    "210403": "东洲区",
  	    "210404": "望花区",
  	    "210411": "顺城区",
  	    "210421": "抚顺县",
  	    "210422": "新宾满族自治县",
  	    "210423": "清原满族自治县",
  	    "210424": "其它区",
  	    "210500": "本溪市",
  	    "210502": "平山区",
  	    "210503": "溪湖区",
  	    "210504": "明山区",
  	    "210505": "南芬区",
  	    "210521": "本溪满族自治县",
  	    "210522": "桓仁满族自治县",
  	    "210523": "其它区",
  	    "210600": "丹东市",
  	    "210602": "元宝区",
  	    "210603": "振兴区",
  	    "210604": "振安区",
  	    "210624": "宽甸满族自治县",
  	    "210681": "东港市",
  	    "210682": "凤城市",
  	    "210683": "其它区",
  	    "210700": "锦州市",
  	    "210702": "古塔区",
  	    "210703": "凌河区",
  	    "210711": "太和区",
  	    "210726": "黑山县",
  	    "210727": "义县",
  	    "210781": "凌海市",
  	    "210782": "北镇市",
  	    "210783": "其它区",
  	    "210800": "营口市",
  	    "210802": "站前区",
  	    "210803": "西市区",
  	    "210804": "鲅鱼圈区",
  	    "210811": "老边区",
  	    "210881": "盖州市",
  	    "210882": "大石桥市",
  	    "210883": "其它区",
  	    "210900": "阜新市",
  	    "210902": "海州区",
  	    "210903": "新邱区",
  	    "210904": "太平区",
  	    "210905": "清河门区",
  	    "210911": "细河区",
  	    "210921": "阜新蒙古族自治县",
  	    "210922": "彰武县",
  	    "210923": "其它区",
  	    "211000": "辽阳市",
  	    "211002": "白塔区",
  	    "211003": "文圣区",
  	    "211004": "宏伟区",
  	    "211005": "弓长岭区",
  	    "211011": "太子河区",
  	    "211021": "辽阳县",
  	    "211081": "灯塔市",
  	    "211082": "其它区",
  	    "211100": "盘锦市",
  	    "211102": "双台子区",
  	    "211103": "兴隆台区",
  	    "211121": "大洼县",
  	    "211122": "盘山县",
  	    "211123": "其它区",
  	    "211200": "铁岭市",
  	    "211202": "银州区",
  	    "211204": "清河区",
  	    "211221": "铁岭县",
  	    "211223": "西丰县",
  	    "211224": "昌图县",
  	    "211281": "调兵山市",
  	    "211282": "开原市",
  	    "211283": "其它区",
  	    "211300": "朝阳市",
  	    "211302": "双塔区",
  	    "211303": "龙城区",
  	    "211321": "朝阳县",
  	    "211322": "建平县",
  	    "211324": "喀喇沁左翼蒙古族自治县",
  	    "211381": "北票市",
  	    "211382": "凌源市",
  	    "211383": "其它区",
  	    "211400": "葫芦岛市",
  	    "211402": "连山区",
  	    "211403": "龙港区",
  	    "211404": "南票区",
  	    "211421": "绥中县",
  	    "211422": "建昌县",
  	    "211481": "兴城市",
  	    "211482": "其它区",
  	    "220000": "吉林省",
  	    "220100": "长春市",
  	    "220102": "南关区",
  	    "220103": "宽城区",
  	    "220104": "朝阳区",
  	    "220105": "二道区",
  	    "220106": "绿园区",
  	    "220112": "双阳区",
  	    "220122": "农安县",
  	    "220181": "九台市",
  	    "220182": "榆树市",
  	    "220183": "德惠市",
  	    "220188": "其它区",
  	    "220200": "吉林市",
  	    "220202": "昌邑区",
  	    "220203": "龙潭区",
  	    "220204": "船营区",
  	    "220211": "丰满区",
  	    "220221": "永吉县",
  	    "220281": "蛟河市",
  	    "220282": "桦甸市",
  	    "220283": "舒兰市",
  	    "220284": "磐石市",
  	    "220285": "其它区",
  	    "220300": "四平市",
  	    "220302": "铁西区",
  	    "220303": "铁东区",
  	    "220322": "梨树县",
  	    "220323": "伊通满族自治县",
  	    "220381": "公主岭市",
  	    "220382": "双辽市",
  	    "220383": "其它区",
  	    "220400": "辽源市",
  	    "220402": "龙山区",
  	    "220403": "西安区",
  	    "220421": "东丰县",
  	    "220422": "东辽县",
  	    "220423": "其它区",
  	    "220500": "通化市",
  	    "220502": "东昌区",
  	    "220503": "二道江区",
  	    "220521": "通化县",
  	    "220523": "辉南县",
  	    "220524": "柳河县",
  	    "220581": "梅河口市",
  	    "220582": "集安市",
  	    "220583": "其它区",
  	    "220600": "白山市",
  	    "220602": "浑江区",
  	    "220621": "抚松县",
  	    "220622": "靖宇县",
  	    "220623": "长白朝鲜族自治县",
  	    "220625": "江源区",
  	    "220681": "临江市",
  	    "220682": "其它区",
  	    "220700": "松原市",
  	    "220702": "宁江区",
  	    "220721": "前郭尔罗斯蒙古族自治县",
  	    "220722": "长岭县",
  	    "220723": "乾安县",
  	    "220724": "扶余市",
  	    "220725": "其它区",
  	    "220800": "白城市",
  	    "220802": "洮北区",
  	    "220821": "镇赉县",
  	    "220822": "通榆县",
  	    "220881": "洮南市",
  	    "220882": "大安市",
  	    "220883": "其它区",
  	    "222400": "延边朝鲜族自治州",
  	    "222401": "延吉市",
  	    "222402": "图们市",
  	    "222403": "敦化市",
  	    "222404": "珲春市",
  	    "222405": "龙井市",
  	    "222406": "和龙市",
  	    "222424": "汪清县",
  	    "222426": "安图县",
  	    "222427": "其它区",
  	    "230000": "黑龙江省",
  	    "230100": "哈尔滨市",
  	    "230102": "道里区",
  	    "230103": "南岗区",
  	    "230104": "道外区",
  	    "230106": "香坊区",
  	    "230108": "平房区",
  	    "230109": "松北区",
  	    "230111": "呼兰区",
  	    "230123": "依兰县",
  	    "230124": "方正县",
  	    "230125": "宾县",
  	    "230126": "巴彦县",
  	    "230127": "木兰县",
  	    "230128": "通河县",
  	    "230129": "延寿县",
  	    "230181": "阿城区",
  	    "230182": "双城市",
  	    "230183": "尚志市",
  	    "230184": "五常市",
  	    "230186": "其它区",
  	    "230200": "齐齐哈尔市",
  	    "230202": "龙沙区",
  	    "230203": "建华区",
  	    "230204": "铁锋区",
  	    "230205": "昂昂溪区",
  	    "230206": "富拉尔基区",
  	    "230207": "碾子山区",
  	    "230208": "梅里斯达斡尔族区",
  	    "230221": "龙江县",
  	    "230223": "依安县",
  	    "230224": "泰来县",
  	    "230225": "甘南县",
  	    "230227": "富裕县",
  	    "230229": "克山县",
  	    "230230": "克东县",
  	    "230231": "拜泉县",
  	    "230281": "讷河市",
  	    "230282": "其它区",
  	    "230300": "鸡西市",
  	    "230302": "鸡冠区",
  	    "230303": "恒山区",
  	    "230304": "滴道区",
  	    "230305": "梨树区",
  	    "230306": "城子河区",
  	    "230307": "麻山区",
  	    "230321": "鸡东县",
  	    "230381": "虎林市",
  	    "230382": "密山市",
  	    "230383": "其它区",
  	    "230400": "鹤岗市",
  	    "230402": "向阳区",
  	    "230403": "工农区",
  	    "230404": "南山区",
  	    "230405": "兴安区",
  	    "230406": "东山区",
  	    "230407": "兴山区",
  	    "230421": "萝北县",
  	    "230422": "绥滨县",
  	    "230423": "其它区",
  	    "230500": "双鸭山市",
  	    "230502": "尖山区",
  	    "230503": "岭东区",
  	    "230505": "四方台区",
  	    "230506": "宝山区",
  	    "230521": "集贤县",
  	    "230522": "友谊县",
  	    "230523": "宝清县",
  	    "230524": "饶河县",
  	    "230525": "其它区",
  	    "230600": "大庆市",
  	    "230602": "萨尔图区",
  	    "230603": "龙凤区",
  	    "230604": "让胡路区",
  	    "230605": "红岗区",
  	    "230606": "大同区",
  	    "230621": "肇州县",
  	    "230622": "肇源县",
  	    "230623": "林甸县",
  	    "230624": "杜尔伯特蒙古族自治县",
  	    "230625": "其它区",
  	    "230700": "伊春市",
  	    "230702": "伊春区",
  	    "230703": "南岔区",
  	    "230704": "友好区",
  	    "230705": "西林区",
  	    "230706": "翠峦区",
  	    "230707": "新青区",
  	    "230708": "美溪区",
  	    "230709": "金山屯区",
  	    "230710": "五营区",
  	    "230711": "乌马河区",
  	    "230712": "汤旺河区",
  	    "230713": "带岭区",
  	    "230714": "乌伊岭区",
  	    "230715": "红星区",
  	    "230716": "上甘岭区",
  	    "230722": "嘉荫县",
  	    "230781": "铁力市",
  	    "230782": "其它区",
  	    "230800": "佳木斯市",
  	    "230803": "向阳区",
  	    "230804": "前进区",
  	    "230805": "东风区",
  	    "230811": "郊区",
  	    "230822": "桦南县",
  	    "230826": "桦川县",
  	    "230828": "汤原县",
  	    "230833": "抚远县",
  	    "230881": "同江市",
  	    "230882": "富锦市",
  	    "230883": "其它区",
  	    "230900": "七台河市",
  	    "230902": "新兴区",
  	    "230903": "桃山区",
  	    "230904": "茄子河区",
  	    "230921": "勃利县",
  	    "230922": "其它区",
  	    "231000": "牡丹江市",
  	    "231002": "东安区",
  	    "231003": "阳明区",
  	    "231004": "爱民区",
  	    "231005": "西安区",
  	    "231024": "东宁县",
  	    "231025": "林口县",
  	    "231081": "绥芬河市",
  	    "231083": "海林市",
  	    "231084": "宁安市",
  	    "231085": "穆棱市",
  	    "231086": "其它区",
  	    "231100": "黑河市",
  	    "231102": "爱辉区",
  	    "231121": "嫩江县",
  	    "231123": "逊克县",
  	    "231124": "孙吴县",
  	    "231181": "北安市",
  	    "231182": "五大连池市",
  	    "231183": "其它区",
  	    "231200": "绥化市",
  	    "231202": "北林区",
  	    "231221": "望奎县",
  	    "231222": "兰西县",
  	    "231223": "青冈县",
  	    "231224": "庆安县",
  	    "231225": "明水县",
  	    "231226": "绥棱县",
  	    "231281": "安达市",
  	    "231282": "肇东市",
  	    "231283": "海伦市",
  	    "231284": "其它区",
  	    "232700": "大兴安岭地区",
  	    "232702": "松岭区",
  	    "232703": "新林区",
  	    "232704": "呼中区",
  	    "232721": "呼玛县",
  	    "232722": "塔河县",
  	    "232723": "漠河县",
  	    "232724": "加格达奇区",
  	    "232725": "其它区",
  	    "310000": "上海",
  	    "310100": "上海市",
  	    "310101": "黄浦区",
  	    "310104": "徐汇区",
  	    "310105": "长宁区",
  	    "310106": "静安区",
  	    "310107": "普陀区",
  	    "310108": "闸北区",
  	    "310109": "虹口区",
  	    "310110": "杨浦区",
  	    "310112": "闵行区",
  	    "310113": "宝山区",
  	    "310114": "嘉定区",
  	    "310115": "浦东新区",
  	    "310116": "金山区",
  	    "310117": "松江区",
  	    "310118": "青浦区",
  	    "310120": "奉贤区",
  	    "310230": "崇明县",
  	    "310231": "其它区",
  	    "320000": "江苏省",
  	    "320100": "南京市",
  	    "320102": "玄武区",
  	    "320104": "秦淮区",
  	    "320105": "建邺区",
  	    "320106": "鼓楼区",
  	    "320111": "浦口区",
  	    "320113": "栖霞区",
  	    "320114": "雨花台区",
  	    "320115": "江宁区",
  	    "320116": "六合区",
  	    "320124": "溧水区",
  	    "320125": "高淳区",
  	    "320126": "其它区",
  	    "320200": "无锡市",
  	    "320202": "崇安区",
  	    "320203": "南长区",
  	    "320204": "北塘区",
  	    "320205": "锡山区",
  	    "320206": "惠山区",
  	    "320211": "滨湖区",
  	    "320281": "江阴市",
  	    "320282": "宜兴市",
  	    "320297": "其它区",
  	    "320300": "徐州市",
  	    "320302": "鼓楼区",
  	    "320303": "云龙区",
  	    "320305": "贾汪区",
  	    "320311": "泉山区",
  	    "320321": "丰县",
  	    "320322": "沛县",
  	    "320323": "铜山区",
  	    "320324": "睢宁县",
  	    "320381": "新沂市",
  	    "320382": "邳州市",
  	    "320383": "其它区",
  	    "320400": "常州市",
  	    "320402": "天宁区",
  	    "320404": "钟楼区",
  	    "320405": "戚墅堰区",
  	    "320411": "新北区",
  	    "320412": "武进区",
  	    "320481": "溧阳市",
  	    "320482": "金坛市",
  	    "320483": "其它区",
  	    "320500": "苏州市",
  	    "320505": "虎丘区",
  	    "320506": "吴中区",
  	    "320507": "相城区",
  	    "320508": "姑苏区",
  	    "320581": "常熟市",
  	    "320582": "张家港市",
  	    "320583": "昆山市",
  	    "320584": "吴江区",
  	    "320585": "太仓市",
  	    "320596": "其它区",
  	    "320600": "南通市",
  	    "320602": "崇川区",
  	    "320611": "港闸区",
  	    "320612": "通州区",
  	    "320621": "海安县",
  	    "320623": "如东县",
  	    "320681": "启东市",
  	    "320682": "如皋市",
  	    "320684": "海门市",
  	    "320694": "其它区",
  	    "320700": "连云港市",
  	    "320703": "连云区",
  	    "320705": "新浦区",
  	    "320706": "海州区",
  	    "320721": "赣榆县",
  	    "320722": "东海县",
  	    "320723": "灌云县",
  	    "320724": "灌南县",
  	    "320725": "其它区",
  	    "320800": "淮安市",
  	    "320802": "清河区",
  	    "320803": "淮安区",
  	    "320804": "淮阴区",
  	    "320811": "清浦区",
  	    "320826": "涟水县",
  	    "320829": "洪泽县",
  	    "320830": "盱眙县",
  	    "320831": "金湖县",
  	    "320832": "其它区",
  	    "320900": "盐城市",
  	    "320902": "亭湖区",
  	    "320903": "盐都区",
  	    "320921": "响水县",
  	    "320922": "滨海县",
  	    "320923": "阜宁县",
  	    "320924": "射阳县",
  	    "320925": "建湖县",
  	    "320981": "东台市",
  	    "320982": "大丰市",
  	    "320983": "其它区",
  	    "321000": "扬州市",
  	    "321002": "广陵区",
  	    "321003": "邗江区",
  	    "321023": "宝应县",
  	    "321081": "仪征市",
  	    "321084": "高邮市",
  	    "321088": "江都区",
  	    "321093": "其它区",
  	    "321100": "镇江市",
  	    "321102": "京口区",
  	    "321111": "润州区",
  	    "321112": "丹徒区",
  	    "321181": "丹阳市",
  	    "321182": "扬中市",
  	    "321183": "句容市",
  	    "321184": "其它区",
  	    "321200": "泰州市",
  	    "321202": "海陵区",
  	    "321203": "高港区",
  	    "321281": "兴化市",
  	    "321282": "靖江市",
  	    "321283": "泰兴市",
  	    "321284": "姜堰区",
  	    "321285": "其它区",
  	    "321300": "宿迁市",
  	    "321302": "宿城区",
  	    "321311": "宿豫区",
  	    "321322": "沭阳县",
  	    "321323": "泗阳县",
  	    "321324": "泗洪县",
  	    "321325": "其它区",
  	    "330000": "浙江省",
  	    "330100": "杭州市",
  	    "330102": "上城区",
  	    "330103": "下城区",
  	    "330104": "江干区",
  	    "330105": "拱墅区",
  	    "330106": "西湖区",
  	    "330108": "滨江区",
  	    "330109": "萧山区",
  	    "330110": "余杭区",
  	    "330122": "桐庐县",
  	    "330127": "淳安县",
  	    "330182": "建德市",
  	    "330183": "富阳市",
  	    "330185": "临安市",
  	    "330186": "其它区",
  	    "330200": "宁波市",
  	    "330203": "海曙区",
  	    "330204": "江东区",
  	    "330205": "江北区",
  	    "330206": "北仑区",
  	    "330211": "镇海区",
  	    "330212": "鄞州区",
  	    "330225": "象山县",
  	    "330226": "宁海县",
  	    "330281": "余姚市",
  	    "330282": "慈溪市",
  	    "330283": "奉化市",
  	    "330284": "其它区",
  	    "330300": "温州市",
  	    "330302": "鹿城区",
  	    "330303": "龙湾区",
  	    "330304": "瓯海区",
  	    "330322": "洞头县",
  	    "330324": "永嘉县",
  	    "330326": "平阳县",
  	    "330327": "苍南县",
  	    "330328": "文成县",
  	    "330329": "泰顺县",
  	    "330381": "瑞安市",
  	    "330382": "乐清市",
  	    "330383": "其它区",
  	    "330400": "嘉兴市",
  	    "330402": "南湖区",
  	    "330411": "秀洲区",
  	    "330421": "嘉善县",
  	    "330424": "海盐县",
  	    "330481": "海宁市",
  	    "330482": "平湖市",
  	    "330483": "桐乡市",
  	    "330484": "其它区",
  	    "330500": "湖州市",
  	    "330502": "吴兴区",
  	    "330503": "南浔区",
  	    "330521": "德清县",
  	    "330522": "长兴县",
  	    "330523": "安吉县",
  	    "330524": "其它区",
  	    "330600": "绍兴市",
  	    "330602": "越城区",
  	    "330621": "绍兴县",
  	    "330624": "新昌县",
  	    "330681": "诸暨市",
  	    "330682": "上虞市",
  	    "330683": "嵊州市",
  	    "330684": "其它区",
  	    "330700": "金华市",
  	    "330702": "婺城区",
  	    "330703": "金东区",
  	    "330723": "武义县",
  	    "330726": "浦江县",
  	    "330727": "磐安县",
  	    "330781": "兰溪市",
  	    "330782": "义乌市",
  	    "330783": "东阳市",
  	    "330784": "永康市",
  	    "330785": "其它区",
  	    "330800": "衢州市",
  	    "330802": "柯城区",
  	    "330803": "衢江区",
  	    "330822": "常山县",
  	    "330824": "开化县",
  	    "330825": "龙游县",
  	    "330881": "江山市",
  	    "330882": "其它区",
  	    "330900": "舟山市",
  	    "330902": "定海区",
  	    "330903": "普陀区",
  	    "330921": "岱山县",
  	    "330922": "嵊泗县",
  	    "330923": "其它区",
  	    "331000": "台州市",
  	    "331002": "椒江区",
  	    "331003": "黄岩区",
  	    "331004": "路桥区",
  	    "331021": "玉环县",
  	    "331022": "三门县",
  	    "331023": "天台县",
  	    "331024": "仙居县",
  	    "331081": "温岭市",
  	    "331082": "临海市",
  	    "331083": "其它区",
  	    "331100": "丽水市",
  	    "331102": "莲都区",
  	    "331121": "青田县",
  	    "331122": "缙云县",
  	    "331123": "遂昌县",
  	    "331124": "松阳县",
  	    "331125": "云和县",
  	    "331126": "庆元县",
  	    "331127": "景宁畲族自治县",
  	    "331181": "龙泉市",
  	    "331182": "其它区",
  	    "340000": "安徽省",
  	    "340100": "合肥市",
  	    "340102": "瑶海区",
  	    "340103": "庐阳区",
  	    "340104": "蜀山区",
  	    "340111": "包河区",
  	    "340121": "长丰县",
  	    "340122": "肥东县",
  	    "340123": "肥西县",
  	    "340192": "其它区",
  	    "340200": "芜湖市",
  	    "340202": "镜湖区",
  	    "340203": "弋江区",
  	    "340207": "鸠江区",
  	    "340208": "三山区",
  	    "340221": "芜湖县",
  	    "340222": "繁昌县",
  	    "340223": "南陵县",
  	    "340224": "其它区",
  	    "340300": "蚌埠市",
  	    "340302": "龙子湖区",
  	    "340303": "蚌山区",
  	    "340304": "禹会区",
  	    "340311": "淮上区",
  	    "340321": "怀远县",
  	    "340322": "五河县",
  	    "340323": "固镇县",
  	    "340324": "其它区",
  	    "340400": "淮南市",
  	    "340402": "大通区",
  	    "340403": "田家庵区",
  	    "340404": "谢家集区",
  	    "340405": "八公山区",
  	    "340406": "潘集区",
  	    "340421": "凤台县",
  	    "340422": "其它区",
  	    "340500": "马鞍山市",
  	    "340503": "花山区",
  	    "340504": "雨山区",
  	    "340506": "博望区",
  	    "340521": "当涂县",
  	    "340522": "其它区",
  	    "340600": "淮北市",
  	    "340602": "杜集区",
  	    "340603": "相山区",
  	    "340604": "烈山区",
  	    "340621": "濉溪县",
  	    "340622": "其它区",
  	    "340700": "铜陵市",
  	    "340702": "铜官山区",
  	    "340703": "狮子山区",
  	    "340711": "郊区",
  	    "340721": "铜陵县",
  	    "340722": "其它区",
  	    "340800": "安庆市",
  	    "340802": "迎江区",
  	    "340803": "大观区",
  	    "340811": "宜秀区",
  	    "340822": "怀宁县",
  	    "340823": "枞阳县",
  	    "340824": "潜山县",
  	    "340825": "太湖县",
  	    "340826": "宿松县",
  	    "340827": "望江县",
  	    "340828": "岳西县",
  	    "340881": "桐城市",
  	    "340882": "其它区",
  	    "341000": "黄山市",
  	    "341002": "屯溪区",
  	    "341003": "黄山区",
  	    "341004": "徽州区",
  	    "341021": "歙县",
  	    "341022": "休宁县",
  	    "341023": "黟县",
  	    "341024": "祁门县",
  	    "341025": "其它区",
  	    "341100": "滁州市",
  	    "341102": "琅琊区",
  	    "341103": "南谯区",
  	    "341122": "来安县",
  	    "341124": "全椒县",
  	    "341125": "定远县",
  	    "341126": "凤阳县",
  	    "341181": "天长市",
  	    "341182": "明光市",
  	    "341183": "其它区",
  	    "341200": "阜阳市",
  	    "341202": "颍州区",
  	    "341203": "颍东区",
  	    "341204": "颍泉区",
  	    "341221": "临泉县",
  	    "341222": "太和县",
  	    "341225": "阜南县",
  	    "341226": "颍上县",
  	    "341282": "界首市",
  	    "341283": "其它区",
  	    "341300": "宿州市",
  	    "341302": "埇桥区",
  	    "341321": "砀山县",
  	    "341322": "萧县",
  	    "341323": "灵璧县",
  	    "341324": "泗县",
  	    "341325": "其它区",
  	    "341400": "巢湖市",
  	    "341421": "庐江县",
  	    "341422": "无为县",
  	    "341423": "含山县",
  	    "341424": "和县",
  	    "341500": "六安市",
  	    "341502": "金安区",
  	    "341503": "裕安区",
  	    "341521": "寿县",
  	    "341522": "霍邱县",
  	    "341523": "舒城县",
  	    "341524": "金寨县",
  	    "341525": "霍山县",
  	    "341526": "其它区",
  	    "341600": "亳州市",
  	    "341602": "谯城区",
  	    "341621": "涡阳县",
  	    "341622": "蒙城县",
  	    "341623": "利辛县",
  	    "341624": "其它区",
  	    "341700": "池州市",
  	    "341702": "贵池区",
  	    "341721": "东至县",
  	    "341722": "石台县",
  	    "341723": "青阳县",
  	    "341724": "其它区",
  	    "341800": "宣城市",
  	    "341802": "宣州区",
  	    "341821": "郎溪县",
  	    "341822": "广德县",
  	    "341823": "泾县",
  	    "341824": "绩溪县",
  	    "341825": "旌德县",
  	    "341881": "宁国市",
  	    "341882": "其它区",
  	    "350000": "福建省",
  	    "350100": "福州市",
  	    "350102": "鼓楼区",
  	    "350103": "台江区",
  	    "350104": "仓山区",
  	    "350105": "马尾区",
  	    "350111": "晋安区",
  	    "350121": "闽侯县",
  	    "350122": "连江县",
  	    "350123": "罗源县",
  	    "350124": "闽清县",
  	    "350125": "永泰县",
  	    "350128": "平潭县",
  	    "350181": "福清市",
  	    "350182": "长乐市",
  	    "350183": "其它区",
  	    "350200": "厦门市",
  	    "350203": "思明区",
  	    "350205": "海沧区",
  	    "350206": "湖里区",
  	    "350211": "集美区",
  	    "350212": "同安区",
  	    "350213": "翔安区",
  	    "350214": "其它区",
  	    "350300": "莆田市",
  	    "350302": "城厢区",
  	    "350303": "涵江区",
  	    "350304": "荔城区",
  	    "350305": "秀屿区",
  	    "350322": "仙游县",
  	    "350323": "其它区",
  	    "350400": "三明市",
  	    "350402": "梅列区",
  	    "350403": "三元区",
  	    "350421": "明溪县",
  	    "350423": "清流县",
  	    "350424": "宁化县",
  	    "350425": "大田县",
  	    "350426": "尤溪县",
  	    "350427": "沙县",
  	    "350428": "将乐县",
  	    "350429": "泰宁县",
  	    "350430": "建宁县",
  	    "350481": "永安市",
  	    "350482": "其它区",
  	    "350500": "泉州市",
  	    "350502": "鲤城区",
  	    "350503": "丰泽区",
  	    "350504": "洛江区",
  	    "350505": "泉港区",
  	    "350521": "惠安县",
  	    "350524": "安溪县",
  	    "350525": "永春县",
  	    "350526": "德化县",
  	    "350527": "金门县",
  	    "350581": "石狮市",
  	    "350582": "晋江市",
  	    "350583": "南安市",
  	    "350584": "其它区",
  	    "350600": "漳州市",
  	    "350602": "芗城区",
  	    "350603": "龙文区",
  	    "350622": "云霄县",
  	    "350623": "漳浦县",
  	    "350624": "诏安县",
  	    "350625": "长泰县",
  	    "350626": "东山县",
  	    "350627": "南靖县",
  	    "350628": "平和县",
  	    "350629": "华安县",
  	    "350681": "龙海市",
  	    "350682": "其它区",
  	    "350700": "南平市",
  	    "350702": "延平区",
  	    "350721": "顺昌县",
  	    "350722": "浦城县",
  	    "350723": "光泽县",
  	    "350724": "松溪县",
  	    "350725": "政和县",
  	    "350781": "邵武市",
  	    "350782": "武夷山市",
  	    "350783": "建瓯市",
  	    "350784": "建阳市",
  	    "350785": "其它区",
  	    "350800": "龙岩市",
  	    "350802": "新罗区",
  	    "350821": "长汀县",
  	    "350822": "永定县",
  	    "350823": "上杭县",
  	    "350824": "武平县",
  	    "350825": "连城县",
  	    "350881": "漳平市",
  	    "350882": "其它区",
  	    "350900": "宁德市",
  	    "350902": "蕉城区",
  	    "350921": "霞浦县",
  	    "350922": "古田县",
  	    "350923": "屏南县",
  	    "350924": "寿宁县",
  	    "350925": "周宁县",
  	    "350926": "柘荣县",
  	    "350981": "福安市",
  	    "350982": "福鼎市",
  	    "350983": "其它区",
  	    "360000": "江西省",
  	    "360100": "南昌市",
  	    "360102": "东湖区",
  	    "360103": "西湖区",
  	    "360104": "青云谱区",
  	    "360105": "湾里区",
  	    "360111": "青山湖区",
  	    "360121": "南昌县",
  	    "360122": "新建县",
  	    "360123": "安义县",
  	    "360124": "进贤县",
  	    "360128": "其它区",
  	    "360200": "景德镇市",
  	    "360202": "昌江区",
  	    "360203": "珠山区",
  	    "360222": "浮梁县",
  	    "360281": "乐平市",
  	    "360282": "其它区",
  	    "360300": "萍乡市",
  	    "360302": "安源区",
  	    "360313": "湘东区",
  	    "360321": "莲花县",
  	    "360322": "上栗县",
  	    "360323": "芦溪县",
  	    "360324": "其它区",
  	    "360400": "九江市",
  	    "360402": "庐山区",
  	    "360403": "浔阳区",
  	    "360421": "九江县",
  	    "360423": "武宁县",
  	    "360424": "修水县",
  	    "360425": "永修县",
  	    "360426": "德安县",
  	    "360427": "星子县",
  	    "360428": "都昌县",
  	    "360429": "湖口县",
  	    "360430": "彭泽县",
  	    "360481": "瑞昌市",
  	    "360482": "其它区",
  	    "360483": "共青城市",
  	    "360500": "新余市",
  	    "360502": "渝水区",
  	    "360521": "分宜县",
  	    "360522": "其它区",
  	    "360600": "鹰潭市",
  	    "360602": "月湖区",
  	    "360622": "余江县",
  	    "360681": "贵溪市",
  	    "360682": "其它区",
  	    "360700": "赣州市",
  	    "360702": "章贡区",
  	    "360721": "赣县",
  	    "360722": "信丰县",
  	    "360723": "大余县",
  	    "360724": "上犹县",
  	    "360725": "崇义县",
  	    "360726": "安远县",
  	    "360727": "龙南县",
  	    "360728": "定南县",
  	    "360729": "全南县",
  	    "360730": "宁都县",
  	    "360731": "于都县",
  	    "360732": "兴国县",
  	    "360733": "会昌县",
  	    "360734": "寻乌县",
  	    "360735": "石城县",
  	    "360781": "瑞金市",
  	    "360782": "南康市",
  	    "360783": "其它区",
  	    "360800": "吉安市",
  	    "360802": "吉州区",
  	    "360803": "青原区",
  	    "360821": "吉安县",
  	    "360822": "吉水县",
  	    "360823": "峡江县",
  	    "360824": "新干县",
  	    "360825": "永丰县",
  	    "360826": "泰和县",
  	    "360827": "遂川县",
  	    "360828": "万安县",
  	    "360829": "安福县",
  	    "360830": "永新县",
  	    "360881": "井冈山市",
  	    "360882": "其它区",
  	    "360900": "宜春市",
  	    "360902": "袁州区",
  	    "360921": "奉新县",
  	    "360922": "万载县",
  	    "360923": "上高县",
  	    "360924": "宜丰县",
  	    "360925": "靖安县",
  	    "360926": "铜鼓县",
  	    "360981": "丰城市",
  	    "360982": "樟树市",
  	    "360983": "高安市",
  	    "360984": "其它区",
  	    "361000": "抚州市",
  	    "361002": "临川区",
  	    "361021": "南城县",
  	    "361022": "黎川县",
  	    "361023": "南丰县",
  	    "361024": "崇仁县",
  	    "361025": "乐安县",
  	    "361026": "宜黄县",
  	    "361027": "金溪县",
  	    "361028": "资溪县",
  	    "361029": "东乡县",
  	    "361030": "广昌县",
  	    "361031": "其它区",
  	    "361100": "上饶市",
  	    "361102": "信州区",
  	    "361121": "上饶县",
  	    "361122": "广丰县",
  	    "361123": "玉山县",
  	    "361124": "铅山县",
  	    "361125": "横峰县",
  	    "361126": "弋阳县",
  	    "361127": "余干县",
  	    "361128": "鄱阳县",
  	    "361129": "万年县",
  	    "361130": "婺源县",
  	    "361181": "德兴市",
  	    "361182": "其它区",
  	    "370000": "山东省",
  	    "370100": "济南市",
  	    "370102": "历下区",
  	    "370103": "市中区",
  	    "370104": "槐荫区",
  	    "370105": "天桥区",
  	    "370112": "历城区",
  	    "370113": "长清区",
  	    "370124": "平阴县",
  	    "370125": "济阳县",
  	    "370126": "商河县",
  	    "370181": "章丘市",
  	    "370182": "其它区",
  	    "370200": "青岛市",
  	    "370202": "市南区",
  	    "370203": "市北区",
  	    "370211": "黄岛区",
  	    "370212": "崂山区",
  	    "370213": "李沧区",
  	    "370214": "城阳区",
  	    "370281": "胶州市",
  	    "370282": "即墨市",
  	    "370283": "平度市",
  	    "370285": "莱西市",
  	    "370286": "其它区",
  	    "370300": "淄博市",
  	    "370302": "淄川区",
  	    "370303": "张店区",
  	    "370304": "博山区",
  	    "370305": "临淄区",
  	    "370306": "周村区",
  	    "370321": "桓台县",
  	    "370322": "高青县",
  	    "370323": "沂源县",
  	    "370324": "其它区",
  	    "370400": "枣庄市",
  	    "370402": "市中区",
  	    "370403": "薛城区",
  	    "370404": "峄城区",
  	    "370405": "台儿庄区",
  	    "370406": "山亭区",
  	    "370481": "滕州市",
  	    "370482": "其它区",
  	    "370500": "东营市",
  	    "370502": "东营区",
  	    "370503": "河口区",
  	    "370521": "垦利县",
  	    "370522": "利津县",
  	    "370523": "广饶县",
  	    "370591": "其它区",
  	    "370600": "烟台市",
  	    "370602": "芝罘区",
  	    "370611": "福山区",
  	    "370612": "牟平区",
  	    "370613": "莱山区",
  	    "370634": "长岛县",
  	    "370681": "龙口市",
  	    "370682": "莱阳市",
  	    "370683": "莱州市",
  	    "370684": "蓬莱市",
  	    "370685": "招远市",
  	    "370686": "栖霞市",
  	    "370687": "海阳市",
  	    "370688": "其它区",
  	    "370700": "潍坊市",
  	    "370702": "潍城区",
  	    "370703": "寒亭区",
  	    "370704": "坊子区",
  	    "370705": "奎文区",
  	    "370724": "临朐县",
  	    "370725": "昌乐县",
  	    "370781": "青州市",
  	    "370782": "诸城市",
  	    "370783": "寿光市",
  	    "370784": "安丘市",
  	    "370785": "高密市",
  	    "370786": "昌邑市",
  	    "370787": "其它区",
  	    "370800": "济宁市",
  	    "370802": "市中区",
  	    "370811": "任城区",
  	    "370826": "微山县",
  	    "370827": "鱼台县",
  	    "370828": "金乡县",
  	    "370829": "嘉祥县",
  	    "370830": "汶上县",
  	    "370831": "泗水县",
  	    "370832": "梁山县",
  	    "370881": "曲阜市",
  	    "370882": "兖州市",
  	    "370883": "邹城市",
  	    "370884": "其它区",
  	    "370900": "泰安市",
  	    "370902": "泰山区",
  	    "370903": "岱岳区",
  	    "370921": "宁阳县",
  	    "370923": "东平县",
  	    "370982": "新泰市",
  	    "370983": "肥城市",
  	    "370984": "其它区",
  	    "371000": "威海市",
  	    "371002": "环翠区",
  	    "371081": "文登市",
  	    "371082": "荣成市",
  	    "371083": "乳山市",
  	    "371084": "其它区",
  	    "371100": "日照市",
  	    "371102": "东港区",
  	    "371103": "岚山区",
  	    "371121": "五莲县",
  	    "371122": "莒县",
  	    "371123": "其它区",
  	    "371200": "莱芜市",
  	    "371202": "莱城区",
  	    "371203": "钢城区",
  	    "371204": "其它区",
  	    "371300": "临沂市",
  	    "371302": "兰山区",
  	    "371311": "罗庄区",
  	    "371312": "河东区",
  	    "371321": "沂南县",
  	    "371322": "郯城县",
  	    "371323": "沂水县",
  	    "371324": "苍山县",
  	    "371325": "费县",
  	    "371326": "平邑县",
  	    "371327": "莒南县",
  	    "371328": "蒙阴县",
  	    "371329": "临沭县",
  	    "371330": "其它区",
  	    "371400": "德州市",
  	    "371402": "德城区",
  	    "371421": "陵县",
  	    "371422": "宁津县",
  	    "371423": "庆云县",
  	    "371424": "临邑县",
  	    "371425": "齐河县",
  	    "371426": "平原县",
  	    "371427": "夏津县",
  	    "371428": "武城县",
  	    "371481": "乐陵市",
  	    "371482": "禹城市",
  	    "371483": "其它区",
  	    "371500": "聊城市",
  	    "371502": "东昌府区",
  	    "371521": "阳谷县",
  	    "371522": "莘县",
  	    "371523": "茌平县",
  	    "371524": "东阿县",
  	    "371525": "冠县",
  	    "371526": "高唐县",
  	    "371581": "临清市",
  	    "371582": "其它区",
  	    "371600": "滨州市",
  	    "371602": "滨城区",
  	    "371621": "惠民县",
  	    "371622": "阳信县",
  	    "371623": "无棣县",
  	    "371624": "沾化县",
  	    "371625": "博兴县",
  	    "371626": "邹平县",
  	    "371627": "其它区",
  	    "371700": "菏泽市",
  	    "371702": "牡丹区",
  	    "371721": "曹县",
  	    "371722": "单县",
  	    "371723": "成武县",
  	    "371724": "巨野县",
  	    "371725": "郓城县",
  	    "371726": "鄄城县",
  	    "371727": "定陶县",
  	    "371728": "东明县",
  	    "371729": "其它区",
  	    "410000": "河南省",
  	    "410100": "郑州市",
  	    "410102": "中原区",
  	    "410103": "二七区",
  	    "410104": "管城回族区",
  	    "410105": "金水区",
  	    "410106": "上街区",
  	    "410108": "惠济区",
  	    "410122": "中牟县",
  	    "410181": "巩义市",
  	    "410182": "荥阳市",
  	    "410183": "新密市",
  	    "410184": "新郑市",
  	    "410185": "登封市",
  	    "410188": "其它区",
  	    "410200": "开封市",
  	    "410202": "龙亭区",
  	    "410203": "顺河回族区",
  	    "410204": "鼓楼区",
  	    "410205": "禹王台区",
  	    "410211": "金明区",
  	    "410221": "杞县",
  	    "410222": "通许县",
  	    "410223": "尉氏县",
  	    "410224": "开封县",
  	    "410225": "兰考县",
  	    "410226": "其它区",
  	    "410300": "洛阳市",
  	    "410302": "老城区",
  	    "410303": "西工区",
  	    "410304": "瀍河回族区",
  	    "410305": "涧西区",
  	    "410306": "吉利区",
  	    "410307": "洛龙区",
  	    "410322": "孟津县",
  	    "410323": "新安县",
  	    "410324": "栾川县",
  	    "410325": "嵩县",
  	    "410326": "汝阳县",
  	    "410327": "宜阳县",
  	    "410328": "洛宁县",
  	    "410329": "伊川县",
  	    "410381": "偃师市",
  	    "410400": "平顶山市",
  	    "410402": "新华区",
  	    "410403": "卫东区",
  	    "410404": "石龙区",
  	    "410411": "湛河区",
  	    "410421": "宝丰县",
  	    "410422": "叶县",
  	    "410423": "鲁山县",
  	    "410425": "郏县",
  	    "410481": "舞钢市",
  	    "410482": "汝州市",
  	    "410483": "其它区",
  	    "410500": "安阳市",
  	    "410502": "文峰区",
  	    "410503": "北关区",
  	    "410505": "殷都区",
  	    "410506": "龙安区",
  	    "410522": "安阳县",
  	    "410523": "汤阴县",
  	    "410526": "滑县",
  	    "410527": "内黄县",
  	    "410581": "林州市",
  	    "410582": "其它区",
  	    "410600": "鹤壁市",
  	    "410602": "鹤山区",
  	    "410603": "山城区",
  	    "410611": "淇滨区",
  	    "410621": "浚县",
  	    "410622": "淇县",
  	    "410623": "其它区",
  	    "410700": "新乡市",
  	    "410702": "红旗区",
  	    "410703": "卫滨区",
  	    "410704": "凤泉区",
  	    "410711": "牧野区",
  	    "410721": "新乡县",
  	    "410724": "获嘉县",
  	    "410725": "原阳县",
  	    "410726": "延津县",
  	    "410727": "封丘县",
  	    "410728": "长垣县",
  	    "410781": "卫辉市",
  	    "410782": "辉县市",
  	    "410783": "其它区",
  	    "410800": "焦作市",
  	    "410802": "解放区",
  	    "410803": "中站区",
  	    "410804": "马村区",
  	    "410811": "山阳区",
  	    "410821": "修武县",
  	    "410822": "博爱县",
  	    "410823": "武陟县",
  	    "410825": "温县",
  	    "410881": "济源市",
  	    "410882": "沁阳市",
  	    "410883": "孟州市",
  	    "410884": "其它区",
  	    "410900": "濮阳市",
  	    "410902": "华龙区",
  	    "410922": "清丰县",
  	    "410923": "南乐县",
  	    "410926": "范县",
  	    "410927": "台前县",
  	    "410928": "濮阳县",
  	    "410929": "其它区",
  	    "411000": "许昌市",
  	    "411002": "魏都区",
  	    "411023": "许昌县",
  	    "411024": "鄢陵县",
  	    "411025": "襄城县",
  	    "411081": "禹州市",
  	    "411082": "长葛市",
  	    "411083": "其它区",
  	    "411100": "漯河市",
  	    "411102": "源汇区",
  	    "411103": "郾城区",
  	    "411104": "召陵区",
  	    "411121": "舞阳县",
  	    "411122": "临颍县",
  	    "411123": "其它区",
  	    "411200": "三门峡市",
  	    "411202": "湖滨区",
  	    "411221": "渑池县",
  	    "411222": "陕县",
  	    "411224": "卢氏县",
  	    "411281": "义马市",
  	    "411282": "灵宝市",
  	    "411283": "其它区",
  	    "411300": "南阳市",
  	    "411302": "宛城区",
  	    "411303": "卧龙区",
  	    "411321": "南召县",
  	    "411322": "方城县",
  	    "411323": "西峡县",
  	    "411324": "镇平县",
  	    "411325": "内乡县",
  	    "411326": "淅川县",
  	    "411327": "社旗县",
  	    "411328": "唐河县",
  	    "411329": "新野县",
  	    "411330": "桐柏县",
  	    "411381": "邓州市",
  	    "411382": "其它区",
  	    "411400": "商丘市",
  	    "411402": "梁园区",
  	    "411403": "睢阳区",
  	    "411421": "民权县",
  	    "411422": "睢县",
  	    "411423": "宁陵县",
  	    "411424": "柘城县",
  	    "411425": "虞城县",
  	    "411426": "夏邑县",
  	    "411481": "永城市",
  	    "411482": "其它区",
  	    "411500": "信阳市",
  	    "411502": "浉河区",
  	    "411503": "平桥区",
  	    "411521": "罗山县",
  	    "411522": "光山县",
  	    "411523": "新县",
  	    "411524": "商城县",
  	    "411525": "固始县",
  	    "411526": "潢川县",
  	    "411527": "淮滨县",
  	    "411528": "息县",
  	    "411529": "其它区",
  	    "411600": "周口市",
  	    "411602": "川汇区",
  	    "411621": "扶沟县",
  	    "411622": "西华县",
  	    "411623": "商水县",
  	    "411624": "沈丘县",
  	    "411625": "郸城县",
  	    "411626": "淮阳县",
  	    "411627": "太康县",
  	    "411628": "鹿邑县",
  	    "411681": "项城市",
  	    "411682": "其它区",
  	    "411700": "驻马店市",
  	    "411702": "驿城区",
  	    "411721": "西平县",
  	    "411722": "上蔡县",
  	    "411723": "平舆县",
  	    "411724": "正阳县",
  	    "411725": "确山县",
  	    "411726": "泌阳县",
  	    "411727": "汝南县",
  	    "411728": "遂平县",
  	    "411729": "新蔡县",
  	    "411730": "其它区",
  	    "420000": "湖北省",
  	    "420100": "武汉市",
  	    "420102": "江岸区",
  	    "420103": "江汉区",
  	    "420104": "硚口区",
  	    "420105": "汉阳区",
  	    "420106": "武昌区",
  	    "420107": "青山区",
  	    "420111": "洪山区",
  	    "420112": "东西湖区",
  	    "420113": "汉南区",
  	    "420114": "蔡甸区",
  	    "420115": "江夏区",
  	    "420116": "黄陂区",
  	    "420117": "新洲区",
  	    "420118": "其它区",
  	    "420200": "黄石市",
  	    "420202": "黄石港区",
  	    "420203": "西塞山区",
  	    "420204": "下陆区",
  	    "420205": "铁山区",
  	    "420222": "阳新县",
  	    "420281": "大冶市",
  	    "420282": "其它区",
  	    "420300": "十堰市",
  	    "420302": "茅箭区",
  	    "420303": "张湾区",
  	    "420321": "郧县",
  	    "420322": "郧西县",
  	    "420323": "竹山县",
  	    "420324": "竹溪县",
  	    "420325": "房县",
  	    "420381": "丹江口市",
  	    "420383": "其它区",
  	    "420500": "宜昌市",
  	    "420502": "西陵区",
  	    "420503": "伍家岗区",
  	    "420504": "点军区",
  	    "420505": "猇亭区",
  	    "420506": "夷陵区",
  	    "420525": "远安县",
  	    "420526": "兴山县",
  	    "420527": "秭归县",
  	    "420528": "长阳土家族自治县",
  	    "420529": "五峰土家族自治县",
  	    "420581": "宜都市",
  	    "420582": "当阳市",
  	    "420583": "枝江市",
  	    "420584": "其它区",
  	    "420600": "襄阳市",
  	    "420602": "襄城区",
  	    "420606": "樊城区",
  	    "420607": "襄州区",
  	    "420624": "南漳县",
  	    "420625": "谷城县",
  	    "420626": "保康县",
  	    "420682": "老河口市",
  	    "420683": "枣阳市",
  	    "420684": "宜城市",
  	    "420685": "其它区",
  	    "420700": "鄂州市",
  	    "420702": "梁子湖区",
  	    "420703": "华容区",
  	    "420704": "鄂城区",
  	    "420705": "其它区",
  	    "420800": "荆门市",
  	    "420802": "东宝区",
  	    "420804": "掇刀区",
  	    "420821": "京山县",
  	    "420822": "沙洋县",
  	    "420881": "钟祥市",
  	    "420882": "其它区",
  	    "420900": "孝感市",
  	    "420902": "孝南区",
  	    "420921": "孝昌县",
  	    "420922": "大悟县",
  	    "420923": "云梦县",
  	    "420981": "应城市",
  	    "420982": "安陆市",
  	    "420984": "汉川市",
  	    "420985": "其它区",
  	    "421000": "荆州市",
  	    "421002": "沙市区",
  	    "421003": "荆州区",
  	    "421022": "公安县",
  	    "421023": "监利县",
  	    "421024": "江陵县",
  	    "421081": "石首市",
  	    "421083": "洪湖市",
  	    "421087": "松滋市",
  	    "421088": "其它区",
  	    "421100": "黄冈市",
  	    "421102": "黄州区",
  	    "421121": "团风县",
  	    "421122": "红安县",
  	    "421123": "罗田县",
  	    "421124": "英山县",
  	    "421125": "浠水县",
  	    "421126": "蕲春县",
  	    "421127": "黄梅县",
  	    "421181": "麻城市",
  	    "421182": "武穴市",
  	    "421183": "其它区",
  	    "421200": "咸宁市",
  	    "421202": "咸安区",
  	    "421221": "嘉鱼县",
  	    "421222": "通城县",
  	    "421223": "崇阳县",
  	    "421224": "通山县",
  	    "421281": "赤壁市",
  	    "421283": "其它区",
  	    "421300": "随州市",
  	    "421302": "曾都区",
  	    "421321": "随县",
  	    "421381": "广水市",
  	    "421382": "其它区",
  	    "422800": "恩施土家族苗族自治州",
  	    "422801": "恩施市",
  	    "422802": "利川市",
  	    "422822": "建始县",
  	    "422823": "巴东县",
  	    "422825": "宣恩县",
  	    "422826": "咸丰县",
  	    "422827": "来凤县",
  	    "422828": "鹤峰县",
  	    "422829": "其它区",
  	    "429004": "仙桃市",
  	    "429005": "潜江市",
  	    "429006": "天门市",
  	    "429021": "神农架林区",
  	    "430000": "湖南省",
  	    "430100": "长沙市",
  	    "430102": "芙蓉区",
  	    "430103": "天心区",
  	    "430104": "岳麓区",
  	    "430105": "开福区",
  	    "430111": "雨花区",
  	    "430121": "长沙县",
  	    "430122": "望城区",
  	    "430124": "宁乡县",
  	    "430181": "浏阳市",
  	    "430182": "其它区",
  	    "430200": "株洲市",
  	    "430202": "荷塘区",
  	    "430203": "芦淞区",
  	    "430204": "石峰区",
  	    "430211": "天元区",
  	    "430221": "株洲县",
  	    "430223": "攸县",
  	    "430224": "茶陵县",
  	    "430225": "炎陵县",
  	    "430281": "醴陵市",
  	    "430282": "其它区",
  	    "430300": "湘潭市",
  	    "430302": "雨湖区",
  	    "430304": "岳塘区",
  	    "430321": "湘潭县",
  	    "430381": "湘乡市",
  	    "430382": "韶山市",
  	    "430383": "其它区",
  	    "430400": "衡阳市",
  	    "430405": "珠晖区",
  	    "430406": "雁峰区",
  	    "430407": "石鼓区",
  	    "430408": "蒸湘区",
  	    "430412": "南岳区",
  	    "430421": "衡阳县",
  	    "430422": "衡南县",
  	    "430423": "衡山县",
  	    "430424": "衡东县",
  	    "430426": "祁东县",
  	    "430481": "耒阳市",
  	    "430482": "常宁市",
  	    "430483": "其它区",
  	    "430500": "邵阳市",
  	    "430502": "双清区",
  	    "430503": "大祥区",
  	    "430511": "北塔区",
  	    "430521": "邵东县",
  	    "430522": "新邵县",
  	    "430523": "邵阳县",
  	    "430524": "隆回县",
  	    "430525": "洞口县",
  	    "430527": "绥宁县",
  	    "430528": "新宁县",
  	    "430529": "城步苗族自治县",
  	    "430581": "武冈市",
  	    "430582": "其它区",
  	    "430600": "岳阳市",
  	    "430602": "岳阳楼区",
  	    "430603": "云溪区",
  	    "430611": "君山区",
  	    "430621": "岳阳县",
  	    "430623": "华容县",
  	    "430624": "湘阴县",
  	    "430626": "平江县",
  	    "430681": "汨罗市",
  	    "430682": "临湘市",
  	    "430683": "其它区",
  	    "430700": "常德市",
  	    "430702": "武陵区",
  	    "430703": "鼎城区",
  	    "430721": "安乡县",
  	    "430722": "汉寿县",
  	    "430723": "澧县",
  	    "430724": "临澧县",
  	    "430725": "桃源县",
  	    "430726": "石门县",
  	    "430781": "津市市",
  	    "430782": "其它区",
  	    "430800": "张家界市",
  	    "430802": "永定区",
  	    "430811": "武陵源区",
  	    "430821": "慈利县",
  	    "430822": "桑植县",
  	    "430823": "其它区",
  	    "430900": "益阳市",
  	    "430902": "资阳区",
  	    "430903": "赫山区",
  	    "430921": "南县",
  	    "430922": "桃江县",
  	    "430923": "安化县",
  	    "430981": "沅江市",
  	    "430982": "其它区",
  	    "431000": "郴州市",
  	    "431002": "北湖区",
  	    "431003": "苏仙区",
  	    "431021": "桂阳县",
  	    "431022": "宜章县",
  	    "431023": "永兴县",
  	    "431024": "嘉禾县",
  	    "431025": "临武县",
  	    "431026": "汝城县",
  	    "431027": "桂东县",
  	    "431028": "安仁县",
  	    "431081": "资兴市",
  	    "431082": "其它区",
  	    "431100": "永州市",
  	    "431102": "零陵区",
  	    "431103": "冷水滩区",
  	    "431121": "祁阳县",
  	    "431122": "东安县",
  	    "431123": "双牌县",
  	    "431124": "道县",
  	    "431125": "江永县",
  	    "431126": "宁远县",
  	    "431127": "蓝山县",
  	    "431128": "新田县",
  	    "431129": "江华瑶族自治县",
  	    "431130": "其它区",
  	    "431200": "怀化市",
  	    "431202": "鹤城区",
  	    "431221": "中方县",
  	    "431222": "沅陵县",
  	    "431223": "辰溪县",
  	    "431224": "溆浦县",
  	    "431225": "会同县",
  	    "431226": "麻阳苗族自治县",
  	    "431227": "新晃侗族自治县",
  	    "431228": "芷江侗族自治县",
  	    "431229": "靖州苗族侗族自治县",
  	    "431230": "通道侗族自治县",
  	    "431281": "洪江市",
  	    "431282": "其它区",
  	    "431300": "娄底市",
  	    "431302": "娄星区",
  	    "431321": "双峰县",
  	    "431322": "新化县",
  	    "431381": "冷水江市",
  	    "431382": "涟源市",
  	    "431383": "其它区",
  	    "433100": "湘西土家族苗族自治州",
  	    "433101": "吉首市",
  	    "433122": "泸溪县",
  	    "433123": "凤凰县",
  	    "433124": "花垣县",
  	    "433125": "保靖县",
  	    "433126": "古丈县",
  	    "433127": "永顺县",
  	    "433130": "龙山县",
  	    "433131": "其它区",
  	    "440000": "广东省",
  	    "440100": "广州市",
  	    "440103": "荔湾区",
  	    "440104": "越秀区",
  	    "440105": "海珠区",
  	    "440106": "天河区",
  	    "440111": "白云区",
  	    "440112": "黄埔区",
  	    "440113": "番禺区",
  	    "440114": "花都区",
  	    "440115": "南沙区",
  	    "440116": "萝岗区",
  	    "440183": "增城市",
  	    "440184": "从化市",
  	    "440189": "其它区",
  	    "440200": "韶关市",
  	    "440203": "武江区",
  	    "440204": "浈江区",
  	    "440205": "曲江区",
  	    "440222": "始兴县",
  	    "440224": "仁化县",
  	    "440229": "翁源县",
  	    "440232": "乳源瑶族自治县",
  	    "440233": "新丰县",
  	    "440281": "乐昌市",
  	    "440282": "南雄市",
  	    "440283": "其它区",
  	    "440300": "深圳市",
  	    "440303": "罗湖区",
  	    "440304": "福田区",
  	    "440305": "南山区",
  	    "440306": "宝安区",
  	    "440307": "龙岗区",
  	    "440308": "盐田区",
  	    "440309": "其它区",
  	    "440320": "光明新区",
  	    "440321": "坪山新区",
  	    "440322": "大鹏新区",
  	    "440323": "龙华新区",
  	    "440400": "珠海市",
  	    "440402": "香洲区",
  	    "440403": "斗门区",
  	    "440404": "金湾区",
  	    "440488": "其它区",
  	    "440500": "汕头市",
  	    "440507": "龙湖区",
  	    "440511": "金平区",
  	    "440512": "濠江区",
  	    "440513": "潮阳区",
  	    "440514": "潮南区",
  	    "440515": "澄海区",
  	    "440523": "南澳县",
  	    "440524": "其它区",
  	    "440600": "佛山市",
  	    "440604": "禅城区",
  	    "440605": "南海区",
  	    "440606": "顺德区",
  	    "440607": "三水区",
  	    "440608": "高明区",
  	    "440609": "其它区",
  	    "440700": "江门市",
  	    "440703": "蓬江区",
  	    "440704": "江海区",
  	    "440705": "新会区",
  	    "440781": "台山市",
  	    "440783": "开平市",
  	    "440784": "鹤山市",
  	    "440785": "恩平市",
  	    "440786": "其它区",
  	    "440800": "湛江市",
  	    "440802": "赤坎区",
  	    "440803": "霞山区",
  	    "440804": "坡头区",
  	    "440811": "麻章区",
  	    "440823": "遂溪县",
  	    "440825": "徐闻县",
  	    "440881": "廉江市",
  	    "440882": "雷州市",
  	    "440883": "吴川市",
  	    "440884": "其它区",
  	    "440900": "茂名市",
  	    "440902": "茂南区",
  	    "440903": "茂港区",
  	    "440923": "电白县",
  	    "440981": "高州市",
  	    "440982": "化州市",
  	    "440983": "信宜市",
  	    "440984": "其它区",
  	    "441200": "肇庆市",
  	    "441202": "端州区",
  	    "441203": "鼎湖区",
  	    "441223": "广宁县",
  	    "441224": "怀集县",
  	    "441225": "封开县",
  	    "441226": "德庆县",
  	    "441283": "高要市",
  	    "441284": "四会市",
  	    "441285": "其它区",
  	    "441300": "惠州市",
  	    "441302": "惠城区",
  	    "441303": "惠阳区",
  	    "441322": "博罗县",
  	    "441323": "惠东县",
  	    "441324": "龙门县",
  	    "441325": "其它区",
  	    "441400": "梅州市",
  	    "441402": "梅江区",
  	    "441421": "梅县",
  	    "441422": "大埔县",
  	    "441423": "丰顺县",
  	    "441424": "五华县",
  	    "441426": "平远县",
  	    "441427": "蕉岭县",
  	    "441481": "兴宁市",
  	    "441482": "其它区",
  	    "441500": "汕尾市",
  	    "441502": "城区",
  	    "441521": "海丰县",
  	    "441523": "陆河县",
  	    "441581": "陆丰市",
  	    "441582": "其它区",
  	    "441600": "河源市",
  	    "441602": "源城区",
  	    "441621": "紫金县",
  	    "441622": "龙川县",
  	    "441623": "连平县",
  	    "441624": "和平县",
  	    "441625": "东源县",
  	    "441626": "其它区",
  	    "441700": "阳江市",
  	    "441702": "江城区",
  	    "441721": "阳西县",
  	    "441723": "阳东县",
  	    "441781": "阳春市",
  	    "441782": "其它区",
  	    "441800": "清远市",
  	    "441802": "清城区",
  	    "441821": "佛冈县",
  	    "441823": "阳山县",
  	    "441825": "连山壮族瑶族自治县",
  	    "441826": "连南瑶族自治县",
  	    "441827": "清新区",
  	    "441881": "英德市",
  	    "441882": "连州市",
  	    "441883": "其它区",
  	    "441900": "东莞市",
  	    "442000": "中山市",
  	    "442101": "东沙群岛",
  	    "445100": "潮州市",
  	    "445102": "湘桥区",
  	    "445121": "潮安区",
  	    "445122": "饶平县",
  	    "445186": "其它区",
  	    "445200": "揭阳市",
  	    "445202": "榕城区",
  	    "445221": "揭东区",
  	    "445222": "揭西县",
  	    "445224": "惠来县",
  	    "445281": "普宁市",
  	    "445285": "其它区",
  	    "445300": "云浮市",
  	    "445302": "云城区",
  	    "445321": "新兴县",
  	    "445322": "郁南县",
  	    "445323": "云安县",
  	    "445381": "罗定市",
  	    "445382": "其它区",
  	    "450000": "广西壮族自治区",
  	    "450100": "南宁市",
  	    "450102": "兴宁区",
  	    "450103": "青秀区",
  	    "450105": "江南区",
  	    "450107": "西乡塘区",
  	    "450108": "良庆区",
  	    "450109": "邕宁区",
  	    "450122": "武鸣县",
  	    "450123": "隆安县",
  	    "450124": "马山县",
  	    "450125": "上林县",
  	    "450126": "宾阳县",
  	    "450127": "横县",
  	    "450128": "其它区",
  	    "450200": "柳州市",
  	    "450202": "城中区",
  	    "450203": "鱼峰区",
  	    "450204": "柳南区",
  	    "450205": "柳北区",
  	    "450221": "柳江县",
  	    "450222": "柳城县",
  	    "450223": "鹿寨县",
  	    "450224": "融安县",
  	    "450225": "融水苗族自治县",
  	    "450226": "三江侗族自治县",
  	    "450227": "其它区",
  	    "450300": "桂林市",
  	    "450302": "秀峰区",
  	    "450303": "叠彩区",
  	    "450304": "象山区",
  	    "450305": "七星区",
  	    "450311": "雁山区",
  	    "450321": "阳朔县",
  	    "450322": "临桂区",
  	    "450323": "灵川县",
  	    "450324": "全州县",
  	    "450325": "兴安县",
  	    "450326": "永福县",
  	    "450327": "灌阳县",
  	    "450328": "龙胜各族自治县",
  	    "450329": "资源县",
  	    "450330": "平乐县",
  	    "450331": "荔浦县",
  	    "450332": "恭城瑶族自治县",
  	    "450333": "其它区",
  	    "450400": "梧州市",
  	    "450403": "万秀区",
  	    "450405": "长洲区",
  	    "450406": "龙圩区",
  	    "450421": "苍梧县",
  	    "450422": "藤县",
  	    "450423": "蒙山县",
  	    "450481": "岑溪市",
  	    "450482": "其它区",
  	    "450500": "北海市",
  	    "450502": "海城区",
  	    "450503": "银海区",
  	    "450512": "铁山港区",
  	    "450521": "合浦县",
  	    "450522": "其它区",
  	    "450600": "防城港市",
  	    "450602": "港口区",
  	    "450603": "防城区",
  	    "450621": "上思县",
  	    "450681": "东兴市",
  	    "450682": "其它区",
  	    "450700": "钦州市",
  	    "450702": "钦南区",
  	    "450703": "钦北区",
  	    "450721": "灵山县",
  	    "450722": "浦北县",
  	    "450723": "其它区",
  	    "450800": "贵港市",
  	    "450802": "港北区",
  	    "450803": "港南区",
  	    "450804": "覃塘区",
  	    "450821": "平南县",
  	    "450881": "桂平市",
  	    "450882": "其它区",
  	    "450900": "玉林市",
  	    "450902": "玉州区",
  	    "450903": "福绵区",
  	    "450921": "容县",
  	    "450922": "陆川县",
  	    "450923": "博白县",
  	    "450924": "兴业县",
  	    "450981": "北流市",
  	    "450982": "其它区",
  	    "451000": "百色市",
  	    "451002": "右江区",
  	    "451021": "田阳县",
  	    "451022": "田东县",
  	    "451023": "平果县",
  	    "451024": "德保县",
  	    "451025": "靖西县",
  	    "451026": "那坡县",
  	    "451027": "凌云县",
  	    "451028": "乐业县",
  	    "451029": "田林县",
  	    "451030": "西林县",
  	    "451031": "隆林各族自治县",
  	    "451032": "其它区",
  	    "451100": "贺州市",
  	    "451102": "八步区",
  	    "451119": "平桂管理区",
  	    "451121": "昭平县",
  	    "451122": "钟山县",
  	    "451123": "富川瑶族自治县",
  	    "451124": "其它区",
  	    "451200": "河池市",
  	    "451202": "金城江区",
  	    "451221": "南丹县",
  	    "451222": "天峨县",
  	    "451223": "凤山县",
  	    "451224": "东兰县",
  	    "451225": "罗城仫佬族自治县",
  	    "451226": "环江毛南族自治县",
  	    "451227": "巴马瑶族自治县",
  	    "451228": "都安瑶族自治县",
  	    "451229": "大化瑶族自治县",
  	    "451281": "宜州市",
  	    "451282": "其它区",
  	    "451300": "来宾市",
  	    "451302": "兴宾区",
  	    "451321": "忻城县",
  	    "451322": "象州县",
  	    "451323": "武宣县",
  	    "451324": "金秀瑶族自治县",
  	    "451381": "合山市",
  	    "451382": "其它区",
  	    "451400": "崇左市",
  	    "451402": "江州区",
  	    "451421": "扶绥县",
  	    "451422": "宁明县",
  	    "451423": "龙州县",
  	    "451424": "大新县",
  	    "451425": "天等县",
  	    "451481": "凭祥市",
  	    "451482": "其它区",
  	    "460000": "海南省",
  	    "460100": "海口市",
  	    "460105": "秀英区",
  	    "460106": "龙华区",
  	    "460107": "琼山区",
  	    "460108": "美兰区",
  	    "460109": "其它区",
  	    "460200": "三亚市",
  	    "460300": "三沙市",
  	    "460321": "西沙群岛",
  	    "460322": "南沙群岛",
  	    "460323": "中沙群岛的岛礁及其海域",
  	    "469001": "五指山市",
  	    "469002": "琼海市",
  	    "469003": "儋州市",
  	    "469005": "文昌市",
  	    "469006": "万宁市",
  	    "469007": "东方市",
  	    "469025": "定安县",
  	    "469026": "屯昌县",
  	    "469027": "澄迈县",
  	    "469028": "临高县",
  	    "469030": "白沙黎族自治县",
  	    "469031": "昌江黎族自治县",
  	    "469033": "乐东黎族自治县",
  	    "469034": "陵水黎族自治县",
  	    "469035": "保亭黎族苗族自治县",
  	    "469036": "琼中黎族苗族自治县",
  	    "471005": "其它区",
  	    "500000": "重庆",
  	    "500100": "重庆市",
  	    "500101": "万州区",
  	    "500102": "涪陵区",
  	    "500103": "渝中区",
  	    "500104": "大渡口区",
  	    "500105": "江北区",
  	    "500106": "沙坪坝区",
  	    "500107": "九龙坡区",
  	    "500108": "南岸区",
  	    "500109": "北碚区",
  	    "500110": "万盛区",
  	    "500111": "双桥区",
  	    "500112": "渝北区",
  	    "500113": "巴南区",
  	    "500114": "黔江区",
  	    "500115": "长寿区",
  	    "500222": "綦江区",
  	    "500223": "潼南县",
  	    "500224": "铜梁县",
  	    "500225": "大足区",
  	    "500226": "荣昌县",
  	    "500227": "璧山县",
  	    "500228": "梁平县",
  	    "500229": "城口县",
  	    "500230": "丰都县",
  	    "500231": "垫江县",
  	    "500232": "武隆县",
  	    "500233": "忠县",
  	    "500234": "开县",
  	    "500235": "云阳县",
  	    "500236": "奉节县",
  	    "500237": "巫山县",
  	    "500238": "巫溪县",
  	    "500240": "石柱土家族自治县",
  	    "500241": "秀山土家族苗族自治县",
  	    "500242": "酉阳土家族苗族自治县",
  	    "500243": "彭水苗族土家族自治县",
  	    "500381": "江津区",
  	    "500382": "合川区",
  	    "500383": "永川区",
  	    "500384": "南川区",
  	    "500385": "其它区",
  	    "510000": "四川省",
  	    "510100": "成都市",
  	    "510104": "锦江区",
  	    "510105": "青羊区",
  	    "510106": "金牛区",
  	    "510107": "武侯区",
  	    "510108": "成华区",
  	    "510112": "龙泉驿区",
  	    "510113": "青白江区",
  	    "510114": "新都区",
  	    "510115": "温江区",
  	    "510121": "金堂县",
  	    "510122": "双流县",
  	    "510124": "郫县",
  	    "510129": "大邑县",
  	    "510131": "蒲江县",
  	    "510132": "新津县",
  	    "510181": "都江堰市",
  	    "510182": "彭州市",
  	    "510183": "邛崃市",
  	    "510184": "崇州市",
  	    "510185": "其它区",
  	    "510300": "自贡市",
  	    "510302": "自流井区",
  	    "510303": "贡井区",
  	    "510304": "大安区",
  	    "510311": "沿滩区",
  	    "510321": "荣县",
  	    "510322": "富顺县",
  	    "510323": "其它区",
  	    "510400": "攀枝花市",
  	    "510402": "东区",
  	    "510403": "西区",
  	    "510411": "仁和区",
  	    "510421": "米易县",
  	    "510422": "盐边县",
  	    "510423": "其它区",
  	    "510500": "泸州市",
  	    "510502": "江阳区",
  	    "510503": "纳溪区",
  	    "510504": "龙马潭区",
  	    "510521": "泸县",
  	    "510522": "合江县",
  	    "510524": "叙永县",
  	    "510525": "古蔺县",
  	    "510526": "其它区",
  	    "510600": "德阳市",
  	    "510603": "旌阳区",
  	    "510623": "中江县",
  	    "510626": "罗江县",
  	    "510681": "广汉市",
  	    "510682": "什邡市",
  	    "510683": "绵竹市",
  	    "510684": "其它区",
  	    "510700": "绵阳市",
  	    "510703": "涪城区",
  	    "510704": "游仙区",
  	    "510722": "三台县",
  	    "510723": "盐亭县",
  	    "510724": "安县",
  	    "510725": "梓潼县",
  	    "510726": "北川羌族自治县",
  	    "510727": "平武县",
  	    "510781": "江油市",
  	    "510782": "其它区",
  	    "510800": "广元市",
  	    "510802": "利州区",
  	    "510811": "昭化区",
  	    "510812": "朝天区",
  	    "510821": "旺苍县",
  	    "510822": "青川县",
  	    "510823": "剑阁县",
  	    "510824": "苍溪县",
  	    "510825": "其它区",
  	    "510900": "遂宁市",
  	    "510903": "船山区",
  	    "510904": "安居区",
  	    "510921": "蓬溪县",
  	    "510922": "射洪县",
  	    "510923": "大英县",
  	    "510924": "其它区",
  	    "511000": "内江市",
  	    "511002": "市中区",
  	    "511011": "东兴区",
  	    "511024": "威远县",
  	    "511025": "资中县",
  	    "511028": "隆昌县",
  	    "511029": "其它区",
  	    "511100": "乐山市",
  	    "511102": "市中区",
  	    "511111": "沙湾区",
  	    "511112": "五通桥区",
  	    "511113": "金口河区",
  	    "511123": "犍为县",
  	    "511124": "井研县",
  	    "511126": "夹江县",
  	    "511129": "沐川县",
  	    "511132": "峨边彝族自治县",
  	    "511133": "马边彝族自治县",
  	    "511181": "峨眉山市",
  	    "511182": "其它区",
  	    "511300": "南充市",
  	    "511302": "顺庆区",
  	    "511303": "高坪区",
  	    "511304": "嘉陵区",
  	    "511321": "南部县",
  	    "511322": "营山县",
  	    "511323": "蓬安县",
  	    "511324": "仪陇县",
  	    "511325": "西充县",
  	    "511381": "阆中市",
  	    "511382": "其它区",
  	    "511400": "眉山市",
  	    "511402": "东坡区",
  	    "511421": "仁寿县",
  	    "511422": "彭山县",
  	    "511423": "洪雅县",
  	    "511424": "丹棱县",
  	    "511425": "青神县",
  	    "511426": "其它区",
  	    "511500": "宜宾市",
  	    "511502": "翠屏区",
  	    "511521": "宜宾县",
  	    "511522": "南溪区",
  	    "511523": "江安县",
  	    "511524": "长宁县",
  	    "511525": "高县",
  	    "511526": "珙县",
  	    "511527": "筠连县",
  	    "511528": "兴文县",
  	    "511529": "屏山县",
  	    "511530": "其它区",
  	    "511600": "广安市",
  	    "511602": "广安区",
  	    "511603": "前锋区",
  	    "511621": "岳池县",
  	    "511622": "武胜县",
  	    "511623": "邻水县",
  	    "511681": "华蓥市",
  	    "511683": "其它区",
  	    "511700": "达州市",
  	    "511702": "通川区",
  	    "511721": "达川区",
  	    "511722": "宣汉县",
  	    "511723": "开江县",
  	    "511724": "大竹县",
  	    "511725": "渠县",
  	    "511781": "万源市",
  	    "511782": "其它区",
  	    "511800": "雅安市",
  	    "511802": "雨城区",
  	    "511821": "名山区",
  	    "511822": "荥经县",
  	    "511823": "汉源县",
  	    "511824": "石棉县",
  	    "511825": "天全县",
  	    "511826": "芦山县",
  	    "511827": "宝兴县",
  	    "511828": "其它区",
  	    "511900": "巴中市",
  	    "511902": "巴州区",
  	    "511903": "恩阳区",
  	    "511921": "通江县",
  	    "511922": "南江县",
  	    "511923": "平昌县",
  	    "511924": "其它区",
  	    "512000": "资阳市",
  	    "512002": "雁江区",
  	    "512021": "安岳县",
  	    "512022": "乐至县",
  	    "512081": "简阳市",
  	    "512082": "其它区",
  	    "513200": "阿坝藏族羌族自治州",
  	    "513221": "汶川县",
  	    "513222": "理县",
  	    "513223": "茂县",
  	    "513224": "松潘县",
  	    "513225": "九寨沟县",
  	    "513226": "金川县",
  	    "513227": "小金县",
  	    "513228": "黑水县",
  	    "513229": "马尔康县",
  	    "513230": "壤塘县",
  	    "513231": "阿坝县",
  	    "513232": "若尔盖县",
  	    "513233": "红原县",
  	    "513234": "其它区",
  	    "513300": "甘孜藏族自治州",
  	    "513321": "康定县",
  	    "513322": "泸定县",
  	    "513323": "丹巴县",
  	    "513324": "九龙县",
  	    "513325": "雅江县",
  	    "513326": "道孚县",
  	    "513327": "炉霍县",
  	    "513328": "甘孜县",
  	    "513329": "新龙县",
  	    "513330": "德格县",
  	    "513331": "白玉县",
  	    "513332": "石渠县",
  	    "513333": "色达县",
  	    "513334": "理塘县",
  	    "513335": "巴塘县",
  	    "513336": "乡城县",
  	    "513337": "稻城县",
  	    "513338": "得荣县",
  	    "513339": "其它区",
  	    "513400": "凉山彝族自治州",
  	    "513401": "西昌市",
  	    "513422": "木里藏族自治县",
  	    "513423": "盐源县",
  	    "513424": "德昌县",
  	    "513425": "会理县",
  	    "513426": "会东县",
  	    "513427": "宁南县",
  	    "513428": "普格县",
  	    "513429": "布拖县",
  	    "513430": "金阳县",
  	    "513431": "昭觉县",
  	    "513432": "喜德县",
  	    "513433": "冕宁县",
  	    "513434": "越西县",
  	    "513435": "甘洛县",
  	    "513436": "美姑县",
  	    "513437": "雷波县",
  	    "513438": "其它区",
  	    "520000": "贵州省",
  	    "520100": "贵阳市",
  	    "520102": "南明区",
  	    "520103": "云岩区",
  	    "520111": "花溪区",
  	    "520112": "乌当区",
  	    "520113": "白云区",
  	    "520121": "开阳县",
  	    "520122": "息烽县",
  	    "520123": "修文县",
  	    "520151": "观山湖区",
  	    "520181": "清镇市",
  	    "520182": "其它区",
  	    "520200": "六盘水市",
  	    "520201": "钟山区",
  	    "520203": "六枝特区",
  	    "520221": "水城县",
  	    "520222": "盘县",
  	    "520223": "其它区",
  	    "520300": "遵义市",
  	    "520302": "红花岗区",
  	    "520303": "汇川区",
  	    "520321": "遵义县",
  	    "520322": "桐梓县",
  	    "520323": "绥阳县",
  	    "520324": "正安县",
  	    "520325": "道真仡佬族苗族自治县",
  	    "520326": "务川仡佬族苗族自治县",
  	    "520327": "凤冈县",
  	    "520328": "湄潭县",
  	    "520329": "余庆县",
  	    "520330": "习水县",
  	    "520381": "赤水市",
  	    "520382": "仁怀市",
  	    "520383": "其它区",
  	    "520400": "安顺市",
  	    "520402": "西秀区",
  	    "520421": "平坝县",
  	    "520422": "普定县",
  	    "520423": "镇宁布依族苗族自治县",
  	    "520424": "关岭布依族苗族自治县",
  	    "520425": "紫云苗族布依族自治县",
  	    "520426": "其它区",
  	    "522200": "铜仁市",
  	    "522201": "碧江区",
  	    "522222": "江口县",
  	    "522223": "玉屏侗族自治县",
  	    "522224": "石阡县",
  	    "522225": "思南县",
  	    "522226": "印江土家族苗族自治县",
  	    "522227": "德江县",
  	    "522228": "沿河土家族自治县",
  	    "522229": "松桃苗族自治县",
  	    "522230": "万山区",
  	    "522231": "其它区",
  	    "522300": "黔西南布依族苗族自治州",
  	    "522301": "兴义市",
  	    "522322": "兴仁县",
  	    "522323": "普安县",
  	    "522324": "晴隆县",
  	    "522325": "贞丰县",
  	    "522326": "望谟县",
  	    "522327": "册亨县",
  	    "522328": "安龙县",
  	    "522329": "其它区",
  	    "522400": "毕节市",
  	    "522401": "七星关区",
  	    "522422": "大方县",
  	    "522423": "黔西县",
  	    "522424": "金沙县",
  	    "522425": "织金县",
  	    "522426": "纳雍县",
  	    "522427": "威宁彝族回族苗族自治县",
  	    "522428": "赫章县",
  	    "522429": "其它区",
  	    "522600": "黔东南苗族侗族自治州",
  	    "522601": "凯里市",
  	    "522622": "黄平县",
  	    "522623": "施秉县",
  	    "522624": "三穗县",
  	    "522625": "镇远县",
  	    "522626": "岑巩县",
  	    "522627": "天柱县",
  	    "522628": "锦屏县",
  	    "522629": "剑河县",
  	    "522630": "台江县",
  	    "522631": "黎平县",
  	    "522632": "榕江县",
  	    "522633": "从江县",
  	    "522634": "雷山县",
  	    "522635": "麻江县",
  	    "522636": "丹寨县",
  	    "522637": "其它区",
  	    "522700": "黔南布依族苗族自治州",
  	    "522701": "都匀市",
  	    "522702": "福泉市",
  	    "522722": "荔波县",
  	    "522723": "贵定县",
  	    "522725": "瓮安县",
  	    "522726": "独山县",
  	    "522727": "平塘县",
  	    "522728": "罗甸县",
  	    "522729": "长顺县",
  	    "522730": "龙里县",
  	    "522731": "惠水县",
  	    "522732": "三都水族自治县",
  	    "522733": "其它区",
  	    "530000": "云南省",
  	    "530100": "昆明市",
  	    "530102": "五华区",
  	    "530103": "盘龙区",
  	    "530111": "官渡区",
  	    "530112": "西山区",
  	    "530113": "东川区",
  	    "530121": "呈贡区",
  	    "530122": "晋宁县",
  	    "530124": "富民县",
  	    "530125": "宜良县",
  	    "530126": "石林彝族自治县",
  	    "530127": "嵩明县",
  	    "530128": "禄劝彝族苗族自治县",
  	    "530129": "寻甸回族彝族自治县",
  	    "530181": "安宁市",
  	    "530182": "其它区",
  	    "530300": "曲靖市",
  	    "530302": "麒麟区",
  	    "530321": "马龙县",
  	    "530322": "陆良县",
  	    "530323": "师宗县",
  	    "530324": "罗平县",
  	    "530325": "富源县",
  	    "530326": "会泽县",
  	    "530328": "沾益县",
  	    "530381": "宣威市",
  	    "530382": "其它区",
  	    "530400": "玉溪市",
  	    "530402": "红塔区",
  	    "530421": "江川县",
  	    "530422": "澄江县",
  	    "530423": "通海县",
  	    "530424": "华宁县",
  	    "530425": "易门县",
  	    "530426": "峨山彝族自治县",
  	    "530427": "新平彝族傣族自治县",
  	    "530428": "元江哈尼族彝族傣族自治县",
  	    "530429": "其它区",
  	    "530500": "保山市",
  	    "530502": "隆阳区",
  	    "530521": "施甸县",
  	    "530522": "腾冲县",
  	    "530523": "龙陵县",
  	    "530524": "昌宁县",
  	    "530525": "其它区",
  	    "530600": "昭通市",
  	    "530602": "昭阳区",
  	    "530621": "鲁甸县",
  	    "530622": "巧家县",
  	    "530623": "盐津县",
  	    "530624": "大关县",
  	    "530625": "永善县",
  	    "530626": "绥江县",
  	    "530627": "镇雄县",
  	    "530628": "彝良县",
  	    "530629": "威信县",
  	    "530630": "水富县",
  	    "530631": "其它区",
  	    "530700": "丽江市",
  	    "530702": "古城区",
  	    "530721": "玉龙纳西族自治县",
  	    "530722": "永胜县",
  	    "530723": "华坪县",
  	    "530724": "宁蒗彝族自治县",
  	    "530725": "其它区",
  	    "530800": "普洱市",
  	    "530802": "思茅区",
  	    "530821": "宁洱哈尼族彝族自治县",
  	    "530822": "墨江哈尼族自治县",
  	    "530823": "景东彝族自治县",
  	    "530824": "景谷傣族彝族自治县",
  	    "530825": "镇沅彝族哈尼族拉祜族自治县",
  	    "530826": "江城哈尼族彝族自治县",
  	    "530827": "孟连傣族拉祜族佤族自治县",
  	    "530828": "澜沧拉祜族自治县",
  	    "530829": "西盟佤族自治县",
  	    "530830": "其它区",
  	    "530900": "临沧市",
  	    "530902": "临翔区",
  	    "530921": "凤庆县",
  	    "530922": "云县",
  	    "530923": "永德县",
  	    "530924": "镇康县",
  	    "530925": "双江拉祜族佤族布朗族傣族自治县",
  	    "530926": "耿马傣族佤族自治县",
  	    "530927": "沧源佤族自治县",
  	    "530928": "其它区",
  	    "532300": "楚雄彝族自治州",
  	    "532301": "楚雄市",
  	    "532322": "双柏县",
  	    "532323": "牟定县",
  	    "532324": "南华县",
  	    "532325": "姚安县",
  	    "532326": "大姚县",
  	    "532327": "永仁县",
  	    "532328": "元谋县",
  	    "532329": "武定县",
  	    "532331": "禄丰县",
  	    "532332": "其它区",
  	    "532500": "红河哈尼族彝族自治州",
  	    "532501": "个旧市",
  	    "532502": "开远市",
  	    "532522": "蒙自市",
  	    "532523": "屏边苗族自治县",
  	    "532524": "建水县",
  	    "532525": "石屏县",
  	    "532526": "弥勒市",
  	    "532527": "泸西县",
  	    "532528": "元阳县",
  	    "532529": "红河县",
  	    "532530": "金平苗族瑶族傣族自治县",
  	    "532531": "绿春县",
  	    "532532": "河口瑶族自治县",
  	    "532533": "其它区",
  	    "532600": "文山壮族苗族自治州",
  	    "532621": "文山市",
  	    "532622": "砚山县",
  	    "532623": "西畴县",
  	    "532624": "麻栗坡县",
  	    "532625": "马关县",
  	    "532626": "丘北县",
  	    "532627": "广南县",
  	    "532628": "富宁县",
  	    "532629": "其它区",
  	    "532800": "西双版纳傣族自治州",
  	    "532801": "景洪市",
  	    "532822": "勐海县",
  	    "532823": "勐腊县",
  	    "532824": "其它区",
  	    "532900": "大理白族自治州",
  	    "532901": "大理市",
  	    "532922": "漾濞彝族自治县",
  	    "532923": "祥云县",
  	    "532924": "宾川县",
  	    "532925": "弥渡县",
  	    "532926": "南涧彝族自治县",
  	    "532927": "巍山彝族回族自治县",
  	    "532928": "永平县",
  	    "532929": "云龙县",
  	    "532930": "洱源县",
  	    "532931": "剑川县",
  	    "532932": "鹤庆县",
  	    "532933": "其它区",
  	    "533100": "德宏傣族景颇族自治州",
  	    "533102": "瑞丽市",
  	    "533103": "芒市",
  	    "533122": "梁河县",
  	    "533123": "盈江县",
  	    "533124": "陇川县",
  	    "533125": "其它区",
  	    "533300": "怒江傈僳族自治州",
  	    "533321": "泸水县",
  	    "533323": "福贡县",
  	    "533324": "贡山独龙族怒族自治县",
  	    "533325": "兰坪白族普米族自治县",
  	    "533326": "其它区",
  	    "533400": "迪庆藏族自治州",
  	    "533421": "香格里拉县",
  	    "533422": "德钦县",
  	    "533423": "维西傈僳族自治县",
  	    "533424": "其它区",
  	    "540000": "西藏自治区",
  	    "540100": "拉萨市",
  	    "540102": "城关区",
  	    "540121": "林周县",
  	    "540122": "当雄县",
  	    "540123": "尼木县",
  	    "540124": "曲水县",
  	    "540125": "堆龙德庆县",
  	    "540126": "达孜县",
  	    "540127": "墨竹工卡县",
  	    "540128": "其它区",
  	    "542100": "昌都地区",
  	    "542121": "昌都县",
  	    "542122": "江达县",
  	    "542123": "贡觉县",
  	    "542124": "类乌齐县",
  	    "542125": "丁青县",
  	    "542126": "察雅县",
  	    "542127": "八宿县",
  	    "542128": "左贡县",
  	    "542129": "芒康县",
  	    "542132": "洛隆县",
  	    "542133": "边坝县",
  	    "542134": "其它区",
  	    "542200": "山南地区",
  	    "542221": "乃东县",
  	    "542222": "扎囊县",
  	    "542223": "贡嘎县",
  	    "542224": "桑日县",
  	    "542225": "琼结县",
  	    "542226": "曲松县",
  	    "542227": "措美县",
  	    "542228": "洛扎县",
  	    "542229": "加查县",
  	    "542231": "隆子县",
  	    "542232": "错那县",
  	    "542233": "浪卡子县",
  	    "542234": "其它区",
  	    "542300": "日喀则地区",
  	    "542301": "日喀则市",
  	    "542322": "南木林县",
  	    "542323": "江孜县",
  	    "542324": "定日县",
  	    "542325": "萨迦县",
  	    "542326": "拉孜县",
  	    "542327": "昂仁县",
  	    "542328": "谢通门县",
  	    "542329": "白朗县",
  	    "542330": "仁布县",
  	    "542331": "康马县",
  	    "542332": "定结县",
  	    "542333": "仲巴县",
  	    "542334": "亚东县",
  	    "542335": "吉隆县",
  	    "542336": "聂拉木县",
  	    "542337": "萨嘎县",
  	    "542338": "岗巴县",
  	    "542339": "其它区",
  	    "542400": "那曲地区",
  	    "542421": "那曲县",
  	    "542422": "嘉黎县",
  	    "542423": "比如县",
  	    "542424": "聂荣县",
  	    "542425": "安多县",
  	    "542426": "申扎县",
  	    "542427": "索县",
  	    "542428": "班戈县",
  	    "542429": "巴青县",
  	    "542430": "尼玛县",
  	    "542431": "其它区",
  	    "542432": "双湖县",
  	    "542500": "阿里地区",
  	    "542521": "普兰县",
  	    "542522": "札达县",
  	    "542523": "噶尔县",
  	    "542524": "日土县",
  	    "542525": "革吉县",
  	    "542526": "改则县",
  	    "542527": "措勤县",
  	    "542528": "其它区",
  	    "542600": "林芝地区",
  	    "542621": "林芝县",
  	    "542622": "工布江达县",
  	    "542623": "米林县",
  	    "542624": "墨脱县",
  	    "542625": "波密县",
  	    "542626": "察隅县",
  	    "542627": "朗县",
  	    "542628": "其它区",
  	    "610000": "陕西省",
  	    "610100": "西安市",
  	    "610102": "新城区",
  	    "610103": "碑林区",
  	    "610104": "莲湖区",
  	    "610111": "灞桥区",
  	    "610112": "未央区",
  	    "610113": "雁塔区",
  	    "610114": "阎良区",
  	    "610115": "临潼区",
  	    "610116": "长安区",
  	    "610122": "蓝田县",
  	    "610124": "周至县",
  	    "610125": "户县",
  	    "610126": "高陵县",
  	    "610127": "其它区",
  	    "610200": "铜川市",
  	    "610202": "王益区",
  	    "610203": "印台区",
  	    "610204": "耀州区",
  	    "610222": "宜君县",
  	    "610223": "其它区",
  	    "610300": "宝鸡市",
  	    "610302": "渭滨区",
  	    "610303": "金台区",
  	    "610304": "陈仓区",
  	    "610322": "凤翔县",
  	    "610323": "岐山县",
  	    "610324": "扶风县",
  	    "610326": "眉县",
  	    "610327": "陇县",
  	    "610328": "千阳县",
  	    "610329": "麟游县",
  	    "610330": "凤县",
  	    "610331": "太白县",
  	    "610332": "其它区",
  	    "610400": "咸阳市",
  	    "610402": "秦都区",
  	    "610403": "杨陵区",
  	    "610404": "渭城区",
  	    "610422": "三原县",
  	    "610423": "泾阳县",
  	    "610424": "乾县",
  	    "610425": "礼泉县",
  	    "610426": "永寿县",
  	    "610427": "彬县",
  	    "610428": "长武县",
  	    "610429": "旬邑县",
  	    "610430": "淳化县",
  	    "610431": "武功县",
  	    "610481": "兴平市",
  	    "610482": "其它区",
  	    "610500": "渭南市",
  	    "610502": "临渭区",
  	    "610521": "华县",
  	    "610522": "潼关县",
  	    "610523": "大荔县",
  	    "610524": "合阳县",
  	    "610525": "澄城县",
  	    "610526": "蒲城县",
  	    "610527": "白水县",
  	    "610528": "富平县",
  	    "610581": "韩城市",
  	    "610582": "华阴市",
  	    "610583": "其它区",
  	    "610600": "延安市",
  	    "610602": "宝塔区",
  	    "610621": "延长县",
  	    "610622": "延川县",
  	    "610623": "子长县",
  	    "610624": "安塞县",
  	    "610625": "志丹县",
  	    "610626": "吴起县",
  	    "610627": "甘泉县",
  	    "610628": "富县",
  	    "610629": "洛川县",
  	    "610630": "宜川县",
  	    "610631": "黄龙县",
  	    "610632": "黄陵县",
  	    "610633": "其它区",
  	    "610700": "汉中市",
  	    "610702": "汉台区",
  	    "610721": "南郑县",
  	    "610722": "城固县",
  	    "610723": "洋县",
  	    "610724": "西乡县",
  	    "610725": "勉县",
  	    "610726": "宁强县",
  	    "610727": "略阳县",
  	    "610728": "镇巴县",
  	    "610729": "留坝县",
  	    "610730": "佛坪县",
  	    "610731": "其它区",
  	    "610800": "榆林市",
  	    "610802": "榆阳区",
  	    "610821": "神木县",
  	    "610822": "府谷县",
  	    "610823": "横山县",
  	    "610824": "靖边县",
  	    "610825": "定边县",
  	    "610826": "绥德县",
  	    "610827": "米脂县",
  	    "610828": "佳县",
  	    "610829": "吴堡县",
  	    "610830": "清涧县",
  	    "610831": "子洲县",
  	    "610832": "其它区",
  	    "610900": "安康市",
  	    "610902": "汉滨区",
  	    "610921": "汉阴县",
  	    "610922": "石泉县",
  	    "610923": "宁陕县",
  	    "610924": "紫阳县",
  	    "610925": "岚皋县",
  	    "610926": "平利县",
  	    "610927": "镇坪县",
  	    "610928": "旬阳县",
  	    "610929": "白河县",
  	    "610930": "其它区",
  	    "611000": "商洛市",
  	    "611002": "商州区",
  	    "611021": "洛南县",
  	    "611022": "丹凤县",
  	    "611023": "商南县",
  	    "611024": "山阳县",
  	    "611025": "镇安县",
  	    "611026": "柞水县",
  	    "611027": "其它区",
  	    "620000": "甘肃省",
  	    "620100": "兰州市",
  	    "620102": "城关区",
  	    "620103": "七里河区",
  	    "620104": "西固区",
  	    "620105": "安宁区",
  	    "620111": "红古区",
  	    "620121": "永登县",
  	    "620122": "皋兰县",
  	    "620123": "榆中县",
  	    "620124": "其它区",
  	    "620200": "嘉峪关市",
  	    "620300": "金昌市",
  	    "620302": "金川区",
  	    "620321": "永昌县",
  	    "620322": "其它区",
  	    "620400": "白银市",
  	    "620402": "白银区",
  	    "620403": "平川区",
  	    "620421": "靖远县",
  	    "620422": "会宁县",
  	    "620423": "景泰县",
  	    "620424": "其它区",
  	    "620500": "天水市",
  	    "620502": "秦州区",
  	    "620503": "麦积区",
  	    "620521": "清水县",
  	    "620522": "秦安县",
  	    "620523": "甘谷县",
  	    "620524": "武山县",
  	    "620525": "张家川回族自治县",
  	    "620526": "其它区",
  	    "620600": "武威市",
  	    "620602": "凉州区",
  	    "620621": "民勤县",
  	    "620622": "古浪县",
  	    "620623": "天祝藏族自治县",
  	    "620624": "其它区",
  	    "620700": "张掖市",
  	    "620702": "甘州区",
  	    "620721": "肃南裕固族自治县",
  	    "620722": "民乐县",
  	    "620723": "临泽县",
  	    "620724": "高台县",
  	    "620725": "山丹县",
  	    "620726": "其它区",
  	    "620800": "平凉市",
  	    "620802": "崆峒区",
  	    "620821": "泾川县",
  	    "620822": "灵台县",
  	    "620823": "崇信县",
  	    "620824": "华亭县",
  	    "620825": "庄浪县",
  	    "620826": "静宁县",
  	    "620827": "其它区",
  	    "620900": "酒泉市",
  	    "620902": "肃州区",
  	    "620921": "金塔县",
  	    "620922": "瓜州县",
  	    "620923": "肃北蒙古族自治县",
  	    "620924": "阿克塞哈萨克族自治县",
  	    "620981": "玉门市",
  	    "620982": "敦煌市",
  	    "620983": "其它区",
  	    "621000": "庆阳市",
  	    "621002": "西峰区",
  	    "621021": "庆城县",
  	    "621022": "环县",
  	    "621023": "华池县",
  	    "621024": "合水县",
  	    "621025": "正宁县",
  	    "621026": "宁县",
  	    "621027": "镇原县",
  	    "621028": "其它区",
  	    "621100": "定西市",
  	    "621102": "安定区",
  	    "621121": "通渭县",
  	    "621122": "陇西县",
  	    "621123": "渭源县",
  	    "621124": "临洮县",
  	    "621125": "漳县",
  	    "621126": "岷县",
  	    "621127": "其它区",
  	    "621200": "陇南市",
  	    "621202": "武都区",
  	    "621221": "成县",
  	    "621222": "文县",
  	    "621223": "宕昌县",
  	    "621224": "康县",
  	    "621225": "西和县",
  	    "621226": "礼县",
  	    "621227": "徽县",
  	    "621228": "两当县",
  	    "621229": "其它区",
  	    "622900": "临夏回族自治州",
  	    "622901": "临夏市",
  	    "622921": "临夏县",
  	    "622922": "康乐县",
  	    "622923": "永靖县",
  	    "622924": "广河县",
  	    "622925": "和政县",
  	    "622926": "东乡族自治县",
  	    "622927": "积石山保安族东乡族撒拉族自治县",
  	    "622928": "其它区",
  	    "623000": "甘南藏族自治州",
  	    "623001": "合作市",
  	    "623021": "临潭县",
  	    "623022": "卓尼县",
  	    "623023": "舟曲县",
  	    "623024": "迭部县",
  	    "623025": "玛曲县",
  	    "623026": "碌曲县",
  	    "623027": "夏河县",
  	    "623028": "其它区",
  	    "630000": "青海省",
  	    "630100": "西宁市",
  	    "630102": "城东区",
  	    "630103": "城中区",
  	    "630104": "城西区",
  	    "630105": "城北区",
  	    "630121": "大通回族土族自治县",
  	    "630122": "湟中县",
  	    "630123": "湟源县",
  	    "630124": "其它区",
  	    "632100": "海东市",
  	    "632121": "平安县",
  	    "632122": "民和回族土族自治县",
  	    "632123": "乐都区",
  	    "632126": "互助土族自治县",
  	    "632127": "化隆回族自治县",
  	    "632128": "循化撒拉族自治县",
  	    "632129": "其它区",
  	    "632200": "海北藏族自治州",
  	    "632221": "门源回族自治县",
  	    "632222": "祁连县",
  	    "632223": "海晏县",
  	    "632224": "刚察县",
  	    "632225": "其它区",
  	    "632300": "黄南藏族自治州",
  	    "632321": "同仁县",
  	    "632322": "尖扎县",
  	    "632323": "泽库县",
  	    "632324": "河南蒙古族自治县",
  	    "632325": "其它区",
  	    "632500": "海南藏族自治州",
  	    "632521": "共和县",
  	    "632522": "同德县",
  	    "632523": "贵德县",
  	    "632524": "兴海县",
  	    "632525": "贵南县",
  	    "632526": "其它区",
  	    "632600": "果洛藏族自治州",
  	    "632621": "玛沁县",
  	    "632622": "班玛县",
  	    "632623": "甘德县",
  	    "632624": "达日县",
  	    "632625": "久治县",
  	    "632626": "玛多县",
  	    "632627": "其它区",
  	    "632700": "玉树藏族自治州",
  	    "632721": "玉树市",
  	    "632722": "杂多县",
  	    "632723": "称多县",
  	    "632724": "治多县",
  	    "632725": "囊谦县",
  	    "632726": "曲麻莱县",
  	    "632727": "其它区",
  	    "632800": "海西蒙古族藏族自治州",
  	    "632801": "格尔木市",
  	    "632802": "德令哈市",
  	    "632821": "乌兰县",
  	    "632822": "都兰县",
  	    "632823": "天峻县",
  	    "632824": "其它区",
  	    "640000": "宁夏回族自治区",
  	    "640100": "银川市",
  	    "640104": "兴庆区",
  	    "640105": "西夏区",
  	    "640106": "金凤区",
  	    "640121": "永宁县",
  	    "640122": "贺兰县",
  	    "640181": "灵武市",
  	    "640182": "其它区",
  	    "640200": "石嘴山市",
  	    "640202": "大武口区",
  	    "640205": "惠农区",
  	    "640221": "平罗县",
  	    "640222": "其它区",
  	    "640300": "吴忠市",
  	    "640302": "利通区",
  	    "640303": "红寺堡区",
  	    "640323": "盐池县",
  	    "640324": "同心县",
  	    "640381": "青铜峡市",
  	    "640382": "其它区",
  	    "640400": "固原市",
  	    "640402": "原州区",
  	    "640422": "西吉县",
  	    "640423": "隆德县",
  	    "640424": "泾源县",
  	    "640425": "彭阳县",
  	    "640426": "其它区",
  	    "640500": "中卫市",
  	    "640502": "沙坡头区",
  	    "640521": "中宁县",
  	    "640522": "海原县",
  	    "640523": "其它区",
  	    "650000": "新疆维吾尔自治区",
  	    "650100": "乌鲁木齐市",
  	    "650102": "天山区",
  	    "650103": "沙依巴克区",
  	    "650104": "新市区",
  	    "650105": "水磨沟区",
  	    "650106": "头屯河区",
  	    "650107": "达坂城区",
  	    "650109": "米东区",
  	    "650121": "乌鲁木齐县",
  	    "650122": "其它区",
  	    "650200": "克拉玛依市",
  	    "650202": "独山子区",
  	    "650203": "克拉玛依区",
  	    "650204": "白碱滩区",
  	    "650205": "乌尔禾区",
  	    "650206": "其它区",
  	    "652100": "吐鲁番地区",
  	    "652101": "吐鲁番市",
  	    "652122": "鄯善县",
  	    "652123": "托克逊县",
  	    "652124": "其它区",
  	    "652200": "哈密地区",
  	    "652201": "哈密市",
  	    "652222": "巴里坤哈萨克自治县",
  	    "652223": "伊吾县",
  	    "652224": "其它区",
  	    "652300": "昌吉回族自治州",
  	    "652301": "昌吉市",
  	    "652302": "阜康市",
  	    "652323": "呼图壁县",
  	    "652324": "玛纳斯县",
  	    "652325": "奇台县",
  	    "652327": "吉木萨尔县",
  	    "652328": "木垒哈萨克自治县",
  	    "652329": "其它区",
  	    "652700": "博尔塔拉蒙古自治州",
  	    "652701": "博乐市",
  	    "652702": "阿拉山口市",
  	    "652722": "精河县",
  	    "652723": "温泉县",
  	    "652724": "其它区",
  	    "652800": "巴音郭楞蒙古自治州",
  	    "652801": "库尔勒市",
  	    "652822": "轮台县",
  	    "652823": "尉犁县",
  	    "652824": "若羌县",
  	    "652825": "且末县",
  	    "652826": "焉耆回族自治县",
  	    "652827": "和静县",
  	    "652828": "和硕县",
  	    "652829": "博湖县",
  	    "652830": "其它区",
  	    "652900": "阿克苏地区",
  	    "652901": "阿克苏市",
  	    "652922": "温宿县",
  	    "652923": "库车县",
  	    "652924": "沙雅县",
  	    "652925": "新和县",
  	    "652926": "拜城县",
  	    "652927": "乌什县",
  	    "652928": "阿瓦提县",
  	    "652929": "柯坪县",
  	    "652930": "其它区",
  	    "653000": "克孜勒苏柯尔克孜自治州",
  	    "653001": "阿图什市",
  	    "653022": "阿克陶县",
  	    "653023": "阿合奇县",
  	    "653024": "乌恰县",
  	    "653025": "其它区",
  	    "653100": "喀什地区",
  	    "653101": "喀什市",
  	    "653121": "疏附县",
  	    "653122": "疏勒县",
  	    "653123": "英吉沙县",
  	    "653124": "泽普县",
  	    "653125": "莎车县",
  	    "653126": "叶城县",
  	    "653127": "麦盖提县",
  	    "653128": "岳普湖县",
  	    "653129": "伽师县",
  	    "653130": "巴楚县",
  	    "653131": "塔什库尔干塔吉克自治县",
  	    "653132": "其它区",
  	    "653200": "和田地区",
  	    "653201": "和田市",
  	    "653221": "和田县",
  	    "653222": "墨玉县",
  	    "653223": "皮山县",
  	    "653224": "洛浦县",
  	    "653225": "策勒县",
  	    "653226": "于田县",
  	    "653227": "民丰县",
  	    "653228": "其它区",
  	    "654000": "伊犁哈萨克自治州",
  	    "654002": "伊宁市",
  	    "654003": "奎屯市",
  	    "654021": "伊宁县",
  	    "654022": "察布查尔锡伯自治县",
  	    "654023": "霍城县",
  	    "654024": "巩留县",
  	    "654025": "新源县",
  	    "654026": "昭苏县",
  	    "654027": "特克斯县",
  	    "654028": "尼勒克县",
  	    "654029": "其它区",
  	    "654200": "塔城地区",
  	    "654201": "塔城市",
  	    "654202": "乌苏市",
  	    "654221": "额敏县",
  	    "654223": "沙湾县",
  	    "654224": "托里县",
  	    "654225": "裕民县",
  	    "654226": "和布克赛尔蒙古自治县",
  	    "654227": "其它区",
  	    "654300": "阿勒泰地区",
  	    "654301": "阿勒泰市",
  	    "654321": "布尔津县",
  	    "654322": "富蕴县",
  	    "654323": "福海县",
  	    "654324": "哈巴河县",
  	    "654325": "青河县",
  	    "654326": "吉木乃县",
  	    "654327": "其它区",
  	    "659001": "石河子市",
  	    "659002": "阿拉尔市",
  	    "659003": "图木舒克市",
  	    "659004": "五家渠市",
  	    "710000": "台湾",
  	    "710100": "台北市",
  	    "710101": "中正区",
  	    "710102": "大同区",
  	    "710103": "中山区",
  	    "710104": "松山区",
  	    "710105": "大安区",
  	    "710106": "万华区",
  	    "710107": "信义区",
  	    "710108": "士林区",
  	    "710109": "北投区",
  	    "710110": "内湖区",
  	    "710111": "南港区",
  	    "710112": "文山区",
  	    "710113": "其它区",
  	    "710200": "高雄市",
  	    "710201": "新兴区",
  	    "710202": "前金区",
  	    "710203": "芩雅区",
  	    "710204": "盐埕区",
  	    "710205": "鼓山区",
  	    "710206": "旗津区",
  	    "710207": "前镇区",
  	    "710208": "三民区",
  	    "710209": "左营区",
  	    "710210": "楠梓区",
  	    "710211": "小港区",
  	    "710212": "其它区",
  	    "710241": "苓雅区",
  	    "710242": "仁武区",
  	    "710243": "大社区",
  	    "710244": "冈山区",
  	    "710245": "路竹区",
  	    "710246": "阿莲区",
  	    "710247": "田寮区",
  	    "710248": "燕巢区",
  	    "710249": "桥头区",
  	    "710250": "梓官区",
  	    "710251": "弥陀区",
  	    "710252": "永安区",
  	    "710253": "湖内区",
  	    "710254": "凤山区",
  	    "710255": "大寮区",
  	    "710256": "林园区",
  	    "710257": "鸟松区",
  	    "710258": "大树区",
  	    "710259": "旗山区",
  	    "710260": "美浓区",
  	    "710261": "六龟区",
  	    "710262": "内门区",
  	    "710263": "杉林区",
  	    "710264": "甲仙区",
  	    "710265": "桃源区",
  	    "710266": "那玛夏区",
  	    "710267": "茂林区",
  	    "710268": "茄萣区",
  	    "710300": "台南市",
  	    "710301": "中西区",
  	    "710302": "东区",
  	    "710303": "南区",
  	    "710304": "北区",
  	    "710305": "安平区",
  	    "710306": "安南区",
  	    "710307": "其它区",
  	    "710339": "永康区",
  	    "710340": "归仁区",
  	    "710341": "新化区",
  	    "710342": "左镇区",
  	    "710343": "玉井区",
  	    "710344": "楠西区",
  	    "710345": "南化区",
  	    "710346": "仁德区",
  	    "710347": "关庙区",
  	    "710348": "龙崎区",
  	    "710349": "官田区",
  	    "710350": "麻豆区",
  	    "710351": "佳里区",
  	    "710352": "西港区",
  	    "710353": "七股区",
  	    "710354": "将军区",
  	    "710355": "学甲区",
  	    "710356": "北门区",
  	    "710357": "新营区",
  	    "710358": "后壁区",
  	    "710359": "白河区",
  	    "710360": "东山区",
  	    "710361": "六甲区",
  	    "710362": "下营区",
  	    "710363": "柳营区",
  	    "710364": "盐水区",
  	    "710365": "善化区",
  	    "710366": "大内区",
  	    "710367": "山上区",
  	    "710368": "新市区",
  	    "710369": "安定区",
  	    "710400": "台中市",
  	    "710401": "中区",
  	    "710402": "东区",
  	    "710403": "南区",
  	    "710404": "西区",
  	    "710405": "北区",
  	    "710406": "北屯区",
  	    "710407": "西屯区",
  	    "710408": "南屯区",
  	    "710409": "其它区",
  	    "710431": "太平区",
  	    "710432": "大里区",
  	    "710433": "雾峰区",
  	    "710434": "乌日区",
  	    "710435": "丰原区",
  	    "710436": "后里区",
  	    "710437": "石冈区",
  	    "710438": "东势区",
  	    "710439": "和平区",
  	    "710440": "新社区",
  	    "710441": "潭子区",
  	    "710442": "大雅区",
  	    "710443": "神冈区",
  	    "710444": "大肚区",
  	    "710445": "沙鹿区",
  	    "710446": "龙井区",
  	    "710447": "梧栖区",
  	    "710448": "清水区",
  	    "710449": "大甲区",
  	    "710450": "外埔区",
  	    "710451": "大安区",
  	    "710500": "金门县",
  	    "710507": "金沙镇",
  	    "710508": "金湖镇",
  	    "710509": "金宁乡",
  	    "710510": "金城镇",
  	    "710511": "烈屿乡",
  	    "710512": "乌坵乡",
  	    "710600": "南投县",
  	    "710614": "南投市",
  	    "710615": "中寮乡",
  	    "710616": "草屯镇",
  	    "710617": "国姓乡",
  	    "710618": "埔里镇",
  	    "710619": "仁爱乡",
  	    "710620": "名间乡",
  	    "710621": "集集镇",
  	    "710622": "水里乡",
  	    "710623": "鱼池乡",
  	    "710624": "信义乡",
  	    "710625": "竹山镇",
  	    "710626": "鹿谷乡",
  	    "710700": "基隆市",
  	    "710701": "仁爱区",
  	    "710702": "信义区",
  	    "710703": "中正区",
  	    "710704": "中山区",
  	    "710705": "安乐区",
  	    "710706": "暖暖区",
  	    "710707": "七堵区",
  	    "710708": "其它区",
  	    "710800": "新竹市",
  	    "710801": "东区",
  	    "710802": "北区",
  	    "710803": "香山区",
  	    "710804": "其它区",
  	    "710900": "嘉义市",
  	    "710901": "东区",
  	    "710902": "西区",
  	    "710903": "其它区",
  	    "711100": "新北市",
  	    "711130": "万里区",
  	    "711131": "金山区",
  	    "711132": "板桥区",
  	    "711133": "汐止区",
  	    "711134": "深坑区",
  	    "711135": "石碇区",
  	    "711136": "瑞芳区",
  	    "711137": "平溪区",
  	    "711138": "双溪区",
  	    "711139": "贡寮区",
  	    "711140": "新店区",
  	    "711141": "坪林区",
  	    "711142": "乌来区",
  	    "711143": "永和区",
  	    "711144": "中和区",
  	    "711145": "土城区",
  	    "711146": "三峡区",
  	    "711147": "树林区",
  	    "711148": "莺歌区",
  	    "711149": "三重区",
  	    "711150": "新庄区",
  	    "711151": "泰山区",
  	    "711152": "林口区",
  	    "711153": "芦洲区",
  	    "711154": "五股区",
  	    "711155": "八里区",
  	    "711156": "淡水区",
  	    "711157": "三芝区",
  	    "711158": "石门区",
  	    "711200": "宜兰县",
  	    "711214": "宜兰市",
  	    "711215": "头城镇",
  	    "711216": "礁溪乡",
  	    "711217": "壮围乡",
  	    "711218": "员山乡",
  	    "711219": "罗东镇",
  	    "711220": "三星乡",
  	    "711221": "大同乡",
  	    "711222": "五结乡",
  	    "711223": "冬山乡",
  	    "711224": "苏澳镇",
  	    "711225": "南澳乡",
  	    "711226": "钓鱼台",
  	    "711300": "新竹县",
  	    "711314": "竹北市",
  	    "711315": "湖口乡",
  	    "711316": "新丰乡",
  	    "711317": "新埔镇",
  	    "711318": "关西镇",
  	    "711319": "芎林乡",
  	    "711320": "宝山乡",
  	    "711321": "竹东镇",
  	    "711322": "五峰乡",
  	    "711323": "横山乡",
  	    "711324": "尖石乡",
  	    "711325": "北埔乡",
  	    "711326": "峨眉乡",
  	    "711400": "桃园县",
  	    "711414": "中坜市",
  	    "711415": "平镇市",
  	    "711416": "龙潭乡",
  	    "711417": "杨梅市",
  	    "711418": "新屋乡",
  	    "711419": "观音乡",
  	    "711420": "桃园市",
  	    "711421": "龟山乡",
  	    "711422": "八德市",
  	    "711423": "大溪镇",
  	    "711424": "复兴乡",
  	    "711425": "大园乡",
  	    "711426": "芦竹乡",
  	    "711500": "苗栗县",
  	    "711519": "竹南镇",
  	    "711520": "头份镇",
  	    "711521": "三湾乡",
  	    "711522": "南庄乡",
  	    "711523": "狮潭乡",
  	    "711524": "后龙镇",
  	    "711525": "通霄镇",
  	    "711526": "苑里镇",
  	    "711527": "苗栗市",
  	    "711528": "造桥乡",
  	    "711529": "头屋乡",
  	    "711530": "公馆乡",
  	    "711531": "大湖乡",
  	    "711532": "泰安乡",
  	    "711533": "铜锣乡",
  	    "711534": "三义乡",
  	    "711535": "西湖乡",
  	    "711536": "卓兰镇",
  	    "711700": "彰化县",
  	    "711727": "彰化市",
  	    "711728": "芬园乡",
  	    "711729": "花坛乡",
  	    "711730": "秀水乡",
  	    "711731": "鹿港镇",
  	    "711732": "福兴乡",
  	    "711733": "线西乡",
  	    "711734": "和美镇",
  	    "711735": "伸港乡",
  	    "711736": "员林镇",
  	    "711737": "社头乡",
  	    "711738": "永靖乡",
  	    "711739": "埔心乡",
  	    "711740": "溪湖镇",
  	    "711741": "大村乡",
  	    "711742": "埔盐乡",
  	    "711743": "田中镇",
  	    "711744": "北斗镇",
  	    "711745": "田尾乡",
  	    "711746": "埤头乡",
  	    "711747": "溪州乡",
  	    "711748": "竹塘乡",
  	    "711749": "二林镇",
  	    "711750": "大城乡",
  	    "711751": "芳苑乡",
  	    "711752": "二水乡",
  	    "711900": "嘉义县",
  	    "711919": "番路乡",
  	    "711920": "梅山乡",
  	    "711921": "竹崎乡",
  	    "711922": "阿里山乡",
  	    "711923": "中埔乡",
  	    "711924": "大埔乡",
  	    "711925": "水上乡",
  	    "711926": "鹿草乡",
  	    "711927": "太保市",
  	    "711928": "朴子市",
  	    "711929": "东石乡",
  	    "711930": "六脚乡",
  	    "711931": "新港乡",
  	    "711932": "民雄乡",
  	    "711933": "大林镇",
  	    "711934": "溪口乡",
  	    "711935": "义竹乡",
  	    "711936": "布袋镇",
  	    "712100": "云林县",
  	    "712121": "斗南镇",
  	    "712122": "大埤乡",
  	    "712123": "虎尾镇",
  	    "712124": "土库镇",
  	    "712125": "褒忠乡",
  	    "712126": "东势乡",
  	    "712127": "台西乡",
  	    "712128": "仑背乡",
  	    "712129": "麦寮乡",
  	    "712130": "斗六市",
  	    "712131": "林内乡",
  	    "712132": "古坑乡",
  	    "712133": "莿桐乡",
  	    "712134": "西螺镇",
  	    "712135": "二仑乡",
  	    "712136": "北港镇",
  	    "712137": "水林乡",
  	    "712138": "口湖乡",
  	    "712139": "四湖乡",
  	    "712140": "元长乡",
  	    "712400": "屏东县",
  	    "712434": "屏东市",
  	    "712435": "三地门乡",
  	    "712436": "雾台乡",
  	    "712437": "玛家乡",
  	    "712438": "九如乡",
  	    "712439": "里港乡",
  	    "712440": "高树乡",
  	    "712441": "盐埔乡",
  	    "712442": "长治乡",
  	    "712443": "麟洛乡",
  	    "712444": "竹田乡",
  	    "712445": "内埔乡",
  	    "712446": "万丹乡",
  	    "712447": "潮州镇",
  	    "712448": "泰武乡",
  	    "712449": "来义乡",
  	    "712450": "万峦乡",
  	    "712451": "崁顶乡",
  	    "712452": "新埤乡",
  	    "712453": "南州乡",
  	    "712454": "林边乡",
  	    "712455": "东港镇",
  	    "712456": "琉球乡",
  	    "712457": "佳冬乡",
  	    "712458": "新园乡",
  	    "712459": "枋寮乡",
  	    "712460": "枋山乡",
  	    "712461": "春日乡",
  	    "712462": "狮子乡",
  	    "712463": "车城乡",
  	    "712464": "牡丹乡",
  	    "712465": "恒春镇",
  	    "712466": "满州乡",
  	    "712500": "台东县",
  	    "712517": "台东市",
  	    "712518": "绿岛乡",
  	    "712519": "兰屿乡",
  	    "712520": "延平乡",
  	    "712521": "卑南乡",
  	    "712522": "鹿野乡",
  	    "712523": "关山镇",
  	    "712524": "海端乡",
  	    "712525": "池上乡",
  	    "712526": "东河乡",
  	    "712527": "成功镇",
  	    "712528": "长滨乡",
  	    "712529": "金峰乡",
  	    "712530": "大武乡",
  	    "712531": "达仁乡",
  	    "712532": "太麻里乡",
  	    "712600": "花莲县",
  	    "712615": "花莲市",
  	    "712616": "新城乡",
  	    "712617": "太鲁阁",
  	    "712618": "秀林乡",
  	    "712619": "吉安乡",
  	    "712620": "寿丰乡",
  	    "712621": "凤林镇",
  	    "712622": "光复乡",
  	    "712623": "丰滨乡",
  	    "712624": "瑞穗乡",
  	    "712625": "万荣乡",
  	    "712626": "玉里镇",
  	    "712627": "卓溪乡",
  	    "712628": "富里乡",
  	    "712700": "澎湖县",
  	    "712707": "马公市",
  	    "712708": "西屿乡",
  	    "712709": "望安乡",
  	    "712710": "七美乡",
  	    "712711": "白沙乡",
  	    "712712": "湖西乡",
  	    "712800": "连江县",
  	    "712805": "南竿乡",
  	    "712806": "北竿乡",
  	    "712807": "莒光乡",
  	    "712808": "东引乡",
  	    "810000": "香港特别行政区",
  	    "810100": "香港岛",
  	    "810101": "中西区",
  	    "810102": "湾仔",
  	    "810103": "东区",
  	    "810104": "南区",
  	    "810200": "九龙",
  	    "810201": "九龙城区",
  	    "810202": "油尖旺区",
  	    "810203": "深水埗区",
  	    "810204": "黄大仙区",
  	    "810205": "观塘区",
  	    "810300": "新界",
  	    "810301": "北区",
  	    "810302": "大埔区",
  	    "810303": "沙田区",
  	    "810304": "西贡区",
  	    "810305": "元朗区",
  	    "810306": "屯门区",
  	    "810307": "荃湾区",
  	    "810308": "葵青区",
  	    "810309": "离岛区",
  	    "820000": "澳门特别行政区",
  	    "820100": "澳门半岛",
  	    "820200": "离岛",
  	    "990000": "海外",
  	    "990100": "海外"
  	}
  
  	// id pid/parentId name children
  	function tree(list) {
  	    var mapped = {}
  	    for (var i = 0, item; i < list.length; i++) {
  	        item = list[i]
  	        if (!item || !item.id) continue
  	        mapped[item.id] = item
  	    }
  
  	    var result = []
  	    for (var ii = 0; ii < list.length; ii++) {
  	        item = list[ii]
  
  	        if (!item) continue
  	            /* jshint -W041 */
  	        if (item.pid == undefined && item.parentId == undefined) {
  	            result.push(item)
  	            continue
  	        }
  	        var parent = mapped[item.pid] || mapped[item.parentId]
  	        if (!parent) continue
  	        if (!parent.children) parent.children = []
  	        parent.children.push(item)
  	    }
  	    return result
  	}
  
  	var DICT_FIXED = function() {
  	    var fixed = []
  	    for (var id in DICT) {
  	        var pid = id.slice(2, 6) === '0000' ? undefined :
  	            id.slice(4, 6) == '00' ? (id.slice(0, 2) + '0000') :
  	            id.slice(0, 4) + '00'
  	        fixed.push({
  	            id: id,
  	            pid: pid,
  	            name: DICT[id]
  	        })
  	    }
  	    return tree(fixed)
  	}()
  
  	module.exports = DICT_FIXED
  
  /***/ },
  /* 19 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## Miscellaneous
  	*/
  	var DICT = __webpack_require__(18)
  	module.exports = {
  		// Dice
  		d4: function() {
  			return this.natural(1, 4)
  		},
  		d6: function() {
  			return this.natural(1, 6)
  		},
  		d8: function() {
  			return this.natural(1, 8)
  		},
  		d12: function() {
  			return this.natural(1, 12)
  		},
  		d20: function() {
  			return this.natural(1, 20)
  		},
  		d100: function() {
  			return this.natural(1, 100)
  		},
  		/*
  		    随机生成一个 GUID。
  
  		    http://www.broofa.com/2008/09/javascript-uuid-function/
  		    [UUID 规范](http://www.ietf.org/rfc/rfc4122.txt)
  		        UUIDs (Universally Unique IDentifier)
  		        GUIDs (Globally Unique IDentifier)
  		        The formal definition of the UUID string representation is provided by the following ABNF [7]:
  		            UUID                   = time-low "-" time-mid "-"
  		                                   time-high-and-version "-"
  		                                   clock-seq-and-reserved
  		                                   clock-seq-low "-" node
  		            time-low               = 4hexOctet
  		            time-mid               = 2hexOctet
  		            time-high-and-version  = 2hexOctet
  		            clock-seq-and-reserved = hexOctet
  		            clock-seq-low          = hexOctet
  		            node                   = 6hexOctet
  		            hexOctet               = hexDigit hexDigit
  		            hexDigit =
  		                "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" /
  		                "a" / "b" / "c" / "d" / "e" / "f" /
  		                "A" / "B" / "C" / "D" / "E" / "F"
  		    
  		    https://github.com/victorquinn/chancejs/blob/develop/chance.js#L1349
  		*/
  		guid: function() {
  			var pool = "abcdefABCDEF1234567890",
  				guid = this.string(pool, 8) + '-' +
  				this.string(pool, 4) + '-' +
  				this.string(pool, 4) + '-' +
  				this.string(pool, 4) + '-' +
  				this.string(pool, 12);
  			return guid
  		},
  		uuid: function() {
  			return this.guid()
  		},
  		/*
  		    随机生成一个 18 位身份证。
  
  		    [身份证](http://baike.baidu.com/view/1697.htm#4)
  		        地址码 6 + 出生日期码 8 + 顺序码 3 + 校验码 1
  		    [《中华人民共和国行政区划代码》国家标准(GB/T2260)](http://zhidao.baidu.com/question/1954561.html)
  		*/
  		id: function() {
  			var id,
  				sum = 0,
  				rank = [
  					"7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7", "9", "10", "5", "8", "4", "2"
  				],
  				last = [
  					"1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"
  				]
  
  			id = this.pick(DICT).id +
  				this.date('yyyyMMdd') +
  				this.string('number', 3)
  
  			for (var i = 0; i < id.length; i++) {
  				sum += id[i] * rank[i];
  			}
  			id += last[sum % 11];
  
  			return id
  		},
  
  		/*
  		    生成一个全局的自增整数。
  		    类似自增主键（auto increment primary key）。
  		*/
  		increment: function() {
  			var key = 0
  			return function(step) {
  				return key += (+step || 1) // step?
  			}
  		}(),
  		inc: function(step) {
  			return this.increment(step)
  		}
  	}
  
  /***/ },
  /* 20 */
  /***/ function(module, exports, __webpack_require__) {
  
  	var Parser = __webpack_require__(21)
  	var Handler = __webpack_require__(22)
  	module.exports = {
  		Parser: Parser,
  		Handler: Handler
  	}
  
  /***/ },
  /* 21 */
  /***/ function(module, exports) {
  
  	// https://github.com/nuysoft/regexp
  	// forked from https://github.com/ForbesLindesay/regexp
  
  	function parse(n) {
  	    if ("string" != typeof n) {
  	        var l = new TypeError("The regexp to parse must be represented as a string.");
  	        throw l;
  	    }
  	    return index = 1, cgs = {}, parser.parse(n);
  	}
  
  	function Token(n) {
  	    this.type = n, this.offset = Token.offset(), this.text = Token.text();
  	}
  
  	function Alternate(n, l) {
  	    Token.call(this, "alternate"), this.left = n, this.right = l;
  	}
  
  	function Match(n) {
  	    Token.call(this, "match"), this.body = n.filter(Boolean);
  	}
  
  	function Group(n, l) {
  	    Token.call(this, n), this.body = l;
  	}
  
  	function CaptureGroup(n) {
  	    Group.call(this, "capture-group"), this.index = cgs[this.offset] || (cgs[this.offset] = index++), 
  	    this.body = n;
  	}
  
  	function Quantified(n, l) {
  	    Token.call(this, "quantified"), this.body = n, this.quantifier = l;
  	}
  
  	function Quantifier(n, l) {
  	    Token.call(this, "quantifier"), this.min = n, this.max = l, this.greedy = !0;
  	}
  
  	function CharSet(n, l) {
  	    Token.call(this, "charset"), this.invert = n, this.body = l;
  	}
  
  	function CharacterRange(n, l) {
  	    Token.call(this, "range"), this.start = n, this.end = l;
  	}
  
  	function Literal(n) {
  	    Token.call(this, "literal"), this.body = n, this.escaped = this.body != this.text;
  	}
  
  	function Unicode(n) {
  	    Token.call(this, "unicode"), this.code = n.toUpperCase();
  	}
  
  	function Hex(n) {
  	    Token.call(this, "hex"), this.code = n.toUpperCase();
  	}
  
  	function Octal(n) {
  	    Token.call(this, "octal"), this.code = n.toUpperCase();
  	}
  
  	function BackReference(n) {
  	    Token.call(this, "back-reference"), this.code = n.toUpperCase();
  	}
  
  	function ControlCharacter(n) {
  	    Token.call(this, "control-character"), this.code = n.toUpperCase();
  	}
  
  	var parser = function() {
  	    function n(n, l) {
  	        function u() {
  	            this.constructor = n;
  	        }
  	        u.prototype = l.prototype, n.prototype = new u();
  	    }
  	    function l(n, l, u, t, r) {
  	        function e(n, l) {
  	            function u(n) {
  	                function l(n) {
  	                    return n.charCodeAt(0).toString(16).toUpperCase();
  	                }
  	                return n.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(n) {
  	                    return "\\x0" + l(n);
  	                }).replace(/[\x10-\x1F\x80-\xFF]/g, function(n) {
  	                    return "\\x" + l(n);
  	                }).replace(/[\u0180-\u0FFF]/g, function(n) {
  	                    return "\\u0" + l(n);
  	                }).replace(/[\u1080-\uFFFF]/g, function(n) {
  	                    return "\\u" + l(n);
  	                });
  	            }
  	            var t, r;
  	            switch (n.length) {
  	              case 0:
  	                t = "end of input";
  	                break;
  
  	              case 1:
  	                t = n[0];
  	                break;
  
  	              default:
  	                t = n.slice(0, -1).join(", ") + " or " + n[n.length - 1];
  	            }
  	            return r = l ? '"' + u(l) + '"' : "end of input", "Expected " + t + " but " + r + " found.";
  	        }
  	        this.expected = n, this.found = l, this.offset = u, this.line = t, this.column = r, 
  	        this.name = "SyntaxError", this.message = e(n, l);
  	    }
  	    function u(n) {
  	        function u() {
  	            return n.substring(Lt, qt);
  	        }
  	        function t() {
  	            return Lt;
  	        }
  	        function r(l) {
  	            function u(l, u, t) {
  	                var r, e;
  	                for (r = u; t > r; r++) e = n.charAt(r), "\n" === e ? (l.seenCR || l.line++, l.column = 1, 
  	                l.seenCR = !1) : "\r" === e || "\u2028" === e || "\u2029" === e ? (l.line++, l.column = 1, 
  	                l.seenCR = !0) : (l.column++, l.seenCR = !1);
  	            }
  	            return Mt !== l && (Mt > l && (Mt = 0, Dt = {
  	                line: 1,
  	                column: 1,
  	                seenCR: !1
  	            }), u(Dt, Mt, l), Mt = l), Dt;
  	        }
  	        function e(n) {
  	            Ht > qt || (qt > Ht && (Ht = qt, Ot = []), Ot.push(n));
  	        }
  	        function o(n) {
  	            var l = 0;
  	            for (n.sort(); l < n.length; ) n[l - 1] === n[l] ? n.splice(l, 1) : l++;
  	        }
  	        function c() {
  	            var l, u, t, r, o;
  	            return l = qt, u = i(), null !== u ? (t = qt, 124 === n.charCodeAt(qt) ? (r = fl, 
  	            qt++) : (r = null, 0 === Wt && e(sl)), null !== r ? (o = c(), null !== o ? (r = [ r, o ], 
  	            t = r) : (qt = t, t = il)) : (qt = t, t = il), null === t && (t = al), null !== t ? (Lt = l, 
  	            u = hl(u, t), null === u ? (qt = l, l = u) : l = u) : (qt = l, l = il)) : (qt = l, 
  	            l = il), l;
  	        }
  	        function i() {
  	            var n, l, u, t, r;
  	            if (n = qt, l = f(), null === l && (l = al), null !== l) if (u = qt, Wt++, t = d(), 
  	            Wt--, null === t ? u = al : (qt = u, u = il), null !== u) {
  	                for (t = [], r = h(), null === r && (r = a()); null !== r; ) t.push(r), r = h(), 
  	                null === r && (r = a());
  	                null !== t ? (r = s(), null === r && (r = al), null !== r ? (Lt = n, l = dl(l, t, r), 
  	                null === l ? (qt = n, n = l) : n = l) : (qt = n, n = il)) : (qt = n, n = il);
  	            } else qt = n, n = il; else qt = n, n = il;
  	            return n;
  	        }
  	        function a() {
  	            var n;
  	            return n = x(), null === n && (n = Q(), null === n && (n = B())), n;
  	        }
  	        function f() {
  	            var l, u;
  	            return l = qt, 94 === n.charCodeAt(qt) ? (u = pl, qt++) : (u = null, 0 === Wt && e(vl)), 
  	            null !== u && (Lt = l, u = wl()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function s() {
  	            var l, u;
  	            return l = qt, 36 === n.charCodeAt(qt) ? (u = Al, qt++) : (u = null, 0 === Wt && e(Cl)), 
  	            null !== u && (Lt = l, u = gl()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function h() {
  	            var n, l, u;
  	            return n = qt, l = a(), null !== l ? (u = d(), null !== u ? (Lt = n, l = bl(l, u), 
  	            null === l ? (qt = n, n = l) : n = l) : (qt = n, n = il)) : (qt = n, n = il), n;
  	        }
  	        function d() {
  	            var n, l, u;
  	            return Wt++, n = qt, l = p(), null !== l ? (u = k(), null === u && (u = al), null !== u ? (Lt = n, 
  	            l = Tl(l, u), null === l ? (qt = n, n = l) : n = l) : (qt = n, n = il)) : (qt = n, 
  	            n = il), Wt--, null === n && (l = null, 0 === Wt && e(kl)), n;
  	        }
  	        function p() {
  	            var n;
  	            return n = v(), null === n && (n = w(), null === n && (n = A(), null === n && (n = C(), 
  	            null === n && (n = g(), null === n && (n = b()))))), n;
  	        }
  	        function v() {
  	            var l, u, t, r, o, c;
  	            return l = qt, 123 === n.charCodeAt(qt) ? (u = xl, qt++) : (u = null, 0 === Wt && e(yl)), 
  	            null !== u ? (t = T(), null !== t ? (44 === n.charCodeAt(qt) ? (r = ml, qt++) : (r = null, 
  	            0 === Wt && e(Rl)), null !== r ? (o = T(), null !== o ? (125 === n.charCodeAt(qt) ? (c = Fl, 
  	            qt++) : (c = null, 0 === Wt && e(Ql)), null !== c ? (Lt = l, u = Sl(t, o), null === u ? (qt = l, 
  	            l = u) : l = u) : (qt = l, l = il)) : (qt = l, l = il)) : (qt = l, l = il)) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        function w() {
  	            var l, u, t, r;
  	            return l = qt, 123 === n.charCodeAt(qt) ? (u = xl, qt++) : (u = null, 0 === Wt && e(yl)), 
  	            null !== u ? (t = T(), null !== t ? (n.substr(qt, 2) === Ul ? (r = Ul, qt += 2) : (r = null, 
  	            0 === Wt && e(El)), null !== r ? (Lt = l, u = Gl(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il)) : (qt = l, l = il), l;
  	        }
  	        function A() {
  	            var l, u, t, r;
  	            return l = qt, 123 === n.charCodeAt(qt) ? (u = xl, qt++) : (u = null, 0 === Wt && e(yl)), 
  	            null !== u ? (t = T(), null !== t ? (125 === n.charCodeAt(qt) ? (r = Fl, qt++) : (r = null, 
  	            0 === Wt && e(Ql)), null !== r ? (Lt = l, u = Bl(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il)) : (qt = l, l = il), l;
  	        }
  	        function C() {
  	            var l, u;
  	            return l = qt, 43 === n.charCodeAt(qt) ? (u = jl, qt++) : (u = null, 0 === Wt && e($l)), 
  	            null !== u && (Lt = l, u = ql()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function g() {
  	            var l, u;
  	            return l = qt, 42 === n.charCodeAt(qt) ? (u = Ll, qt++) : (u = null, 0 === Wt && e(Ml)), 
  	            null !== u && (Lt = l, u = Dl()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function b() {
  	            var l, u;
  	            return l = qt, 63 === n.charCodeAt(qt) ? (u = Hl, qt++) : (u = null, 0 === Wt && e(Ol)), 
  	            null !== u && (Lt = l, u = Wl()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function k() {
  	            var l;
  	            return 63 === n.charCodeAt(qt) ? (l = Hl, qt++) : (l = null, 0 === Wt && e(Ol)), 
  	            l;
  	        }
  	        function T() {
  	            var l, u, t;
  	            if (l = qt, u = [], zl.test(n.charAt(qt)) ? (t = n.charAt(qt), qt++) : (t = null, 
  	            0 === Wt && e(Il)), null !== t) for (;null !== t; ) u.push(t), zl.test(n.charAt(qt)) ? (t = n.charAt(qt), 
  	            qt++) : (t = null, 0 === Wt && e(Il)); else u = il;
  	            return null !== u && (Lt = l, u = Jl(u)), null === u ? (qt = l, l = u) : l = u, 
  	            l;
  	        }
  	        function x() {
  	            var l, u, t, r;
  	            return l = qt, 40 === n.charCodeAt(qt) ? (u = Kl, qt++) : (u = null, 0 === Wt && e(Nl)), 
  	            null !== u ? (t = R(), null === t && (t = F(), null === t && (t = m(), null === t && (t = y()))), 
  	            null !== t ? (41 === n.charCodeAt(qt) ? (r = Pl, qt++) : (r = null, 0 === Wt && e(Vl)), 
  	            null !== r ? (Lt = l, u = Xl(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il)) : (qt = l, l = il), l;
  	        }
  	        function y() {
  	            var n, l;
  	            return n = qt, l = c(), null !== l && (Lt = n, l = Yl(l)), null === l ? (qt = n, 
  	            n = l) : n = l, n;
  	        }
  	        function m() {
  	            var l, u, t;
  	            return l = qt, n.substr(qt, 2) === Zl ? (u = Zl, qt += 2) : (u = null, 0 === Wt && e(_l)), 
  	            null !== u ? (t = c(), null !== t ? (Lt = l, u = nu(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        function R() {
  	            var l, u, t;
  	            return l = qt, n.substr(qt, 2) === lu ? (u = lu, qt += 2) : (u = null, 0 === Wt && e(uu)), 
  	            null !== u ? (t = c(), null !== t ? (Lt = l, u = tu(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        function F() {
  	            var l, u, t;
  	            return l = qt, n.substr(qt, 2) === ru ? (u = ru, qt += 2) : (u = null, 0 === Wt && e(eu)), 
  	            null !== u ? (t = c(), null !== t ? (Lt = l, u = ou(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        function Q() {
  	            var l, u, t, r, o;
  	            if (Wt++, l = qt, 91 === n.charCodeAt(qt) ? (u = iu, qt++) : (u = null, 0 === Wt && e(au)), 
  	            null !== u) if (94 === n.charCodeAt(qt) ? (t = pl, qt++) : (t = null, 0 === Wt && e(vl)), 
  	            null === t && (t = al), null !== t) {
  	                for (r = [], o = S(), null === o && (o = U()); null !== o; ) r.push(o), o = S(), 
  	                null === o && (o = U());
  	                null !== r ? (93 === n.charCodeAt(qt) ? (o = fu, qt++) : (o = null, 0 === Wt && e(su)), 
  	                null !== o ? (Lt = l, u = hu(t, r), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	                l = il)) : (qt = l, l = il);
  	            } else qt = l, l = il; else qt = l, l = il;
  	            return Wt--, null === l && (u = null, 0 === Wt && e(cu)), l;
  	        }
  	        function S() {
  	            var l, u, t, r;
  	            return Wt++, l = qt, u = U(), null !== u ? (45 === n.charCodeAt(qt) ? (t = pu, qt++) : (t = null, 
  	            0 === Wt && e(vu)), null !== t ? (r = U(), null !== r ? (Lt = l, u = wu(u, r), null === u ? (qt = l, 
  	            l = u) : l = u) : (qt = l, l = il)) : (qt = l, l = il)) : (qt = l, l = il), Wt--, 
  	            null === l && (u = null, 0 === Wt && e(du)), l;
  	        }
  	        function U() {
  	            var n, l;
  	            return Wt++, n = G(), null === n && (n = E()), Wt--, null === n && (l = null, 0 === Wt && e(Au)), 
  	            n;
  	        }
  	        function E() {
  	            var l, u;
  	            return l = qt, Cu.test(n.charAt(qt)) ? (u = n.charAt(qt), qt++) : (u = null, 0 === Wt && e(gu)), 
  	            null !== u && (Lt = l, u = bu(u)), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function G() {
  	            var n;
  	            return n = L(), null === n && (n = Y(), null === n && (n = H(), null === n && (n = O(), 
  	            null === n && (n = W(), null === n && (n = z(), null === n && (n = I(), null === n && (n = J(), 
  	            null === n && (n = K(), null === n && (n = N(), null === n && (n = P(), null === n && (n = V(), 
  	            null === n && (n = X(), null === n && (n = _(), null === n && (n = nl(), null === n && (n = ll(), 
  	            null === n && (n = ul(), null === n && (n = tl()))))))))))))))))), n;
  	        }
  	        function B() {
  	            var n;
  	            return n = j(), null === n && (n = q(), null === n && (n = $())), n;
  	        }
  	        function j() {
  	            var l, u;
  	            return l = qt, 46 === n.charCodeAt(qt) ? (u = ku, qt++) : (u = null, 0 === Wt && e(Tu)), 
  	            null !== u && (Lt = l, u = xu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function $() {
  	            var l, u;
  	            return Wt++, l = qt, mu.test(n.charAt(qt)) ? (u = n.charAt(qt), qt++) : (u = null, 
  	            0 === Wt && e(Ru)), null !== u && (Lt = l, u = bu(u)), null === u ? (qt = l, l = u) : l = u, 
  	            Wt--, null === l && (u = null, 0 === Wt && e(yu)), l;
  	        }
  	        function q() {
  	            var n;
  	            return n = M(), null === n && (n = D(), null === n && (n = Y(), null === n && (n = H(), 
  	            null === n && (n = O(), null === n && (n = W(), null === n && (n = z(), null === n && (n = I(), 
  	            null === n && (n = J(), null === n && (n = K(), null === n && (n = N(), null === n && (n = P(), 
  	            null === n && (n = V(), null === n && (n = X(), null === n && (n = Z(), null === n && (n = _(), 
  	            null === n && (n = nl(), null === n && (n = ll(), null === n && (n = ul(), null === n && (n = tl()))))))))))))))))))), 
  	            n;
  	        }
  	        function L() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Fu ? (u = Fu, qt += 2) : (u = null, 0 === Wt && e(Qu)), 
  	            null !== u && (Lt = l, u = Su()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function M() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Fu ? (u = Fu, qt += 2) : (u = null, 0 === Wt && e(Qu)), 
  	            null !== u && (Lt = l, u = Uu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function D() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Eu ? (u = Eu, qt += 2) : (u = null, 0 === Wt && e(Gu)), 
  	            null !== u && (Lt = l, u = Bu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function H() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === ju ? (u = ju, qt += 2) : (u = null, 0 === Wt && e($u)), 
  	            null !== u && (Lt = l, u = qu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function O() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Lu ? (u = Lu, qt += 2) : (u = null, 0 === Wt && e(Mu)), 
  	            null !== u && (Lt = l, u = Du()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function W() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Hu ? (u = Hu, qt += 2) : (u = null, 0 === Wt && e(Ou)), 
  	            null !== u && (Lt = l, u = Wu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function z() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === zu ? (u = zu, qt += 2) : (u = null, 0 === Wt && e(Iu)), 
  	            null !== u && (Lt = l, u = Ju()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function I() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Ku ? (u = Ku, qt += 2) : (u = null, 0 === Wt && e(Nu)), 
  	            null !== u && (Lt = l, u = Pu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function J() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Vu ? (u = Vu, qt += 2) : (u = null, 0 === Wt && e(Xu)), 
  	            null !== u && (Lt = l, u = Yu()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function K() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Zu ? (u = Zu, qt += 2) : (u = null, 0 === Wt && e(_u)), 
  	            null !== u && (Lt = l, u = nt()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function N() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === lt ? (u = lt, qt += 2) : (u = null, 0 === Wt && e(ut)), 
  	            null !== u && (Lt = l, u = tt()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function P() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === rt ? (u = rt, qt += 2) : (u = null, 0 === Wt && e(et)), 
  	            null !== u && (Lt = l, u = ot()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function V() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === ct ? (u = ct, qt += 2) : (u = null, 0 === Wt && e(it)), 
  	            null !== u && (Lt = l, u = at()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function X() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === ft ? (u = ft, qt += 2) : (u = null, 0 === Wt && e(st)), 
  	            null !== u && (Lt = l, u = ht()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function Y() {
  	            var l, u, t;
  	            return l = qt, n.substr(qt, 2) === dt ? (u = dt, qt += 2) : (u = null, 0 === Wt && e(pt)), 
  	            null !== u ? (n.length > qt ? (t = n.charAt(qt), qt++) : (t = null, 0 === Wt && e(vt)), 
  	            null !== t ? (Lt = l, u = wt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        function Z() {
  	            var l, u, t;
  	            return l = qt, 92 === n.charCodeAt(qt) ? (u = At, qt++) : (u = null, 0 === Wt && e(Ct)), 
  	            null !== u ? (gt.test(n.charAt(qt)) ? (t = n.charAt(qt), qt++) : (t = null, 0 === Wt && e(bt)), 
  	            null !== t ? (Lt = l, u = kt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        function _() {
  	            var l, u, t, r;
  	            if (l = qt, n.substr(qt, 2) === Tt ? (u = Tt, qt += 2) : (u = null, 0 === Wt && e(xt)), 
  	            null !== u) {
  	                if (t = [], yt.test(n.charAt(qt)) ? (r = n.charAt(qt), qt++) : (r = null, 0 === Wt && e(mt)), 
  	                null !== r) for (;null !== r; ) t.push(r), yt.test(n.charAt(qt)) ? (r = n.charAt(qt), 
  	                qt++) : (r = null, 0 === Wt && e(mt)); else t = il;
  	                null !== t ? (Lt = l, u = Rt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	                l = il);
  	            } else qt = l, l = il;
  	            return l;
  	        }
  	        function nl() {
  	            var l, u, t, r;
  	            if (l = qt, n.substr(qt, 2) === Ft ? (u = Ft, qt += 2) : (u = null, 0 === Wt && e(Qt)), 
  	            null !== u) {
  	                if (t = [], St.test(n.charAt(qt)) ? (r = n.charAt(qt), qt++) : (r = null, 0 === Wt && e(Ut)), 
  	                null !== r) for (;null !== r; ) t.push(r), St.test(n.charAt(qt)) ? (r = n.charAt(qt), 
  	                qt++) : (r = null, 0 === Wt && e(Ut)); else t = il;
  	                null !== t ? (Lt = l, u = Et(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	                l = il);
  	            } else qt = l, l = il;
  	            return l;
  	        }
  	        function ll() {
  	            var l, u, t, r;
  	            if (l = qt, n.substr(qt, 2) === Gt ? (u = Gt, qt += 2) : (u = null, 0 === Wt && e(Bt)), 
  	            null !== u) {
  	                if (t = [], St.test(n.charAt(qt)) ? (r = n.charAt(qt), qt++) : (r = null, 0 === Wt && e(Ut)), 
  	                null !== r) for (;null !== r; ) t.push(r), St.test(n.charAt(qt)) ? (r = n.charAt(qt), 
  	                qt++) : (r = null, 0 === Wt && e(Ut)); else t = il;
  	                null !== t ? (Lt = l, u = jt(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	                l = il);
  	            } else qt = l, l = il;
  	            return l;
  	        }
  	        function ul() {
  	            var l, u;
  	            return l = qt, n.substr(qt, 2) === Tt ? (u = Tt, qt += 2) : (u = null, 0 === Wt && e(xt)), 
  	            null !== u && (Lt = l, u = $t()), null === u ? (qt = l, l = u) : l = u, l;
  	        }
  	        function tl() {
  	            var l, u, t;
  	            return l = qt, 92 === n.charCodeAt(qt) ? (u = At, qt++) : (u = null, 0 === Wt && e(Ct)), 
  	            null !== u ? (n.length > qt ? (t = n.charAt(qt), qt++) : (t = null, 0 === Wt && e(vt)), 
  	            null !== t ? (Lt = l, u = bu(t), null === u ? (qt = l, l = u) : l = u) : (qt = l, 
  	            l = il)) : (qt = l, l = il), l;
  	        }
  	        var rl, el = arguments.length > 1 ? arguments[1] : {}, ol = {
  	            regexp: c
  	        }, cl = c, il = null, al = "", fl = "|", sl = '"|"', hl = function(n, l) {
  	            return l ? new Alternate(n, l[1]) : n;
  	        }, dl = function(n, l, u) {
  	            return new Match([ n ].concat(l).concat([ u ]));
  	        }, pl = "^", vl = '"^"', wl = function() {
  	            return new Token("start");
  	        }, Al = "$", Cl = '"$"', gl = function() {
  	            return new Token("end");
  	        }, bl = function(n, l) {
  	            return new Quantified(n, l);
  	        }, kl = "Quantifier", Tl = function(n, l) {
  	            return l && (n.greedy = !1), n;
  	        }, xl = "{", yl = '"{"', ml = ",", Rl = '","', Fl = "}", Ql = '"}"', Sl = function(n, l) {
  	            return new Quantifier(n, l);
  	        }, Ul = ",}", El = '",}"', Gl = function(n) {
  	            return new Quantifier(n, 1/0);
  	        }, Bl = function(n) {
  	            return new Quantifier(n, n);
  	        }, jl = "+", $l = '"+"', ql = function() {
  	            return new Quantifier(1, 1/0);
  	        }, Ll = "*", Ml = '"*"', Dl = function() {
  	            return new Quantifier(0, 1/0);
  	        }, Hl = "?", Ol = '"?"', Wl = function() {
  	            return new Quantifier(0, 1);
  	        }, zl = /^[0-9]/, Il = "[0-9]", Jl = function(n) {
  	            return +n.join("");
  	        }, Kl = "(", Nl = '"("', Pl = ")", Vl = '")"', Xl = function(n) {
  	            return n;
  	        }, Yl = function(n) {
  	            return new CaptureGroup(n);
  	        }, Zl = "?:", _l = '"?:"', nu = function(n) {
  	            return new Group("non-capture-group", n);
  	        }, lu = "?=", uu = '"?="', tu = function(n) {
  	            return new Group("positive-lookahead", n);
  	        }, ru = "?!", eu = '"?!"', ou = function(n) {
  	            return new Group("negative-lookahead", n);
  	        }, cu = "CharacterSet", iu = "[", au = '"["', fu = "]", su = '"]"', hu = function(n, l) {
  	            return new CharSet(!!n, l);
  	        }, du = "CharacterRange", pu = "-", vu = '"-"', wu = function(n, l) {
  	            return new CharacterRange(n, l);
  	        }, Au = "Character", Cu = /^[^\\\]]/, gu = "[^\\\\\\]]", bu = function(n) {
  	            return new Literal(n);
  	        }, ku = ".", Tu = '"."', xu = function() {
  	            return new Token("any-character");
  	        }, yu = "Literal", mu = /^[^|\\\/.[()?+*$\^]/, Ru = "[^|\\\\\\/.[()?+*$\\^]", Fu = "\\b", Qu = '"\\\\b"', Su = function() {
  	            return new Token("backspace");
  	        }, Uu = function() {
  	            return new Token("word-boundary");
  	        }, Eu = "\\B", Gu = '"\\\\B"', Bu = function() {
  	            return new Token("non-word-boundary");
  	        }, ju = "\\d", $u = '"\\\\d"', qu = function() {
  	            return new Token("digit");
  	        }, Lu = "\\D", Mu = '"\\\\D"', Du = function() {
  	            return new Token("non-digit");
  	        }, Hu = "\\f", Ou = '"\\\\f"', Wu = function() {
  	            return new Token("form-feed");
  	        }, zu = "\\n", Iu = '"\\\\n"', Ju = function() {
  	            return new Token("line-feed");
  	        }, Ku = "\\r", Nu = '"\\\\r"', Pu = function() {
  	            return new Token("carriage-return");
  	        }, Vu = "\\s", Xu = '"\\\\s"', Yu = function() {
  	            return new Token("white-space");
  	        }, Zu = "\\S", _u = '"\\\\S"', nt = function() {
  	            return new Token("non-white-space");
  	        }, lt = "\\t", ut = '"\\\\t"', tt = function() {
  	            return new Token("tab");
  	        }, rt = "\\v", et = '"\\\\v"', ot = function() {
  	            return new Token("vertical-tab");
  	        }, ct = "\\w", it = '"\\\\w"', at = function() {
  	            return new Token("word");
  	        }, ft = "\\W", st = '"\\\\W"', ht = function() {
  	            return new Token("non-word");
  	        }, dt = "\\c", pt = '"\\\\c"', vt = "any character", wt = function(n) {
  	            return new ControlCharacter(n);
  	        }, At = "\\", Ct = '"\\\\"', gt = /^[1-9]/, bt = "[1-9]", kt = function(n) {
  	            return new BackReference(n);
  	        }, Tt = "\\0", xt = '"\\\\0"', yt = /^[0-7]/, mt = "[0-7]", Rt = function(n) {
  	            return new Octal(n.join(""));
  	        }, Ft = "\\x", Qt = '"\\\\x"', St = /^[0-9a-fA-F]/, Ut = "[0-9a-fA-F]", Et = function(n) {
  	            return new Hex(n.join(""));
  	        }, Gt = "\\u", Bt = '"\\\\u"', jt = function(n) {
  	            return new Unicode(n.join(""));
  	        }, $t = function() {
  	            return new Token("null-character");
  	        }, qt = 0, Lt = 0, Mt = 0, Dt = {
  	            line: 1,
  	            column: 1,
  	            seenCR: !1
  	        }, Ht = 0, Ot = [], Wt = 0;
  	        if ("startRule" in el) {
  	            if (!(el.startRule in ol)) throw new Error("Can't start parsing from rule \"" + el.startRule + '".');
  	            cl = ol[el.startRule];
  	        }
  	        if (Token.offset = t, Token.text = u, rl = cl(), null !== rl && qt === n.length) return rl;
  	        throw o(Ot), Lt = Math.max(qt, Ht), new l(Ot, Lt < n.length ? n.charAt(Lt) : null, Lt, r(Lt).line, r(Lt).column);
  	    }
  	    return n(l, Error), {
  	        SyntaxError: l,
  	        parse: u
  	    };
  	}(), index = 1, cgs = {};
  
  	module.exports = parser
  
  /***/ },
  /* 22 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## RegExp Handler
  
  	    https://github.com/ForbesLindesay/regexp
  	    https://github.com/dmajda/pegjs
  	    http://www.regexper.com/
  
  	    每个节点的结构
  	        {
  	            type: '',
  	            offset: number,
  	            text: '',
  	            body: {},
  	            escaped: true/false
  	        }
  
  	    type 可选值
  	        alternate             |         选择
  	        match                 匹配
  	        capture-group         ()        捕获组
  	        non-capture-group     (?:...)   非捕获组
  	        positive-lookahead    (?=p)     零宽正向先行断言
  	        negative-lookahead    (?!p)     零宽负向先行断言
  	        quantified            a*        重复节点
  	        quantifier            *         量词
  	        charset               []        字符集
  	        range                 {m, n}    范围
  	        literal               a         直接量字符
  	        unicode               \uxxxx    Unicode
  	        hex                   \x        十六进制
  	        octal                 八进制
  	        back-reference        \n        反向引用
  	        control-character     \cX       控制字符
  
  	        // Token
  	        start               ^       开头
  	        end                 $       结尾
  	        any-character       .       任意字符
  	        backspace           [\b]    退格直接量
  	        word-boundary       \b      单词边界
  	        non-word-boundary   \B      非单词边界
  	        digit               \d      ASCII 数字，[0-9]
  	        non-digit           \D      非 ASCII 数字，[^0-9]
  	        form-feed           \f      换页符
  	        line-feed           \n      换行符
  	        carriage-return     \r      回车符
  	        white-space         \s      空白符
  	        non-white-space     \S      非空白符
  	        tab                 \t      制表符
  	        vertical-tab        \v      垂直制表符
  	        word                \w      ASCII 字符，[a-zA-Z0-9]
  	        non-word            \W      非 ASCII 字符，[^a-zA-Z0-9]
  	        null-character      \o      NUL 字符
  	 */
  
  	var Util = __webpack_require__(3)
  	var Random = __webpack_require__(5)
  	    /*
  	        
  	    */
  	var Handler = {
  	    extend: Util.extend
  	}
  
  	// http://en.wikipedia.org/wiki/ASCII#ASCII_printable_code_chart
  	/*var ASCII_CONTROL_CODE_CHART = {
  	    '@': ['\u0000'],
  	    A: ['\u0001'],
  	    B: ['\u0002'],
  	    C: ['\u0003'],
  	    D: ['\u0004'],
  	    E: ['\u0005'],
  	    F: ['\u0006'],
  	    G: ['\u0007', '\a'],
  	    H: ['\u0008', '\b'],
  	    I: ['\u0009', '\t'],
  	    J: ['\u000A', '\n'],
  	    K: ['\u000B', '\v'],
  	    L: ['\u000C', '\f'],
  	    M: ['\u000D', '\r'],
  	    N: ['\u000E'],
  	    O: ['\u000F'],
  	    P: ['\u0010'],
  	    Q: ['\u0011'],
  	    R: ['\u0012'],
  	    S: ['\u0013'],
  	    T: ['\u0014'],
  	    U: ['\u0015'],
  	    V: ['\u0016'],
  	    W: ['\u0017'],
  	    X: ['\u0018'],
  	    Y: ['\u0019'],
  	    Z: ['\u001A'],
  	    '[': ['\u001B', '\e'],
  	    '\\': ['\u001C'],
  	    ']': ['\u001D'],
  	    '^': ['\u001E'],
  	    '_': ['\u001F']
  	}*/
  
  	// ASCII printable code chart
  	// var LOWER = 'abcdefghijklmnopqrstuvwxyz'
  	// var UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  	// var NUMBER = '0123456789'
  	// var SYMBOL = ' !"#$%&\'()*+,-./' + ':;<=>?@' + '[\\]^_`' + '{|}~'
  	var LOWER = ascii(97, 122)
  	var UPPER = ascii(65, 90)
  	var NUMBER = ascii(48, 57)
  	var OTHER = ascii(32, 47) + ascii(58, 64) + ascii(91, 96) + ascii(123, 126) // 排除 95 _ ascii(91, 94) + ascii(96, 96)
  	var PRINTABLE = ascii(32, 126)
  	var SPACE = ' \f\n\r\t\v\u00A0\u2028\u2029'
  	var CHARACTER_CLASSES = {
  	    '\\w': LOWER + UPPER + NUMBER + '_', // ascii(95, 95)
  	    '\\W': OTHER.replace('_', ''),
  	    '\\s': SPACE,
  	    '\\S': function() {
  	        var result = PRINTABLE
  	        for (var i = 0; i < SPACE.length; i++) {
  	            result = result.replace(SPACE[i], '')
  	        }
  	        return result
  	    }(),
  	    '\\d': NUMBER,
  	    '\\D': LOWER + UPPER + OTHER
  	}
  
  	function ascii(from, to) {
  	    var result = ''
  	    for (var i = from; i <= to; i++) {
  	        result += String.fromCharCode(i)
  	    }
  	    return result
  	}
  
  	// var ast = RegExpParser.parse(regexp.source)
  	Handler.gen = function(node, result, cache) {
  	    cache = cache || {
  	        guid: 1
  	    }
  	    return Handler[node.type] ? Handler[node.type](node, result, cache) :
  	        Handler.token(node, result, cache)
  	}
  
  	Handler.extend({
  	    /* jshint unused:false */
  	    token: function(node, result, cache) {
  	        switch (node.type) {
  	            case 'start':
  	            case 'end':
  	                return ''
  	            case 'any-character':
  	                return Random.character()
  	            case 'backspace':
  	                return ''
  	            case 'word-boundary': // TODO
  	                return ''
  	            case 'non-word-boundary': // TODO
  	                break
  	            case 'digit':
  	                return Random.pick(
  	                    NUMBER.split('')
  	                )
  	            case 'non-digit':
  	                return Random.pick(
  	                    (LOWER + UPPER + OTHER).split('')
  	                )
  	            case 'form-feed':
  	                break
  	            case 'line-feed':
  	                return node.body || node.text
  	            case 'carriage-return':
  	                break
  	            case 'white-space':
  	                return Random.pick(
  	                    SPACE.split('')
  	                )
  	            case 'non-white-space':
  	                return Random.pick(
  	                    (LOWER + UPPER + NUMBER).split('')
  	                )
  	            case 'tab':
  	                break
  	            case 'vertical-tab':
  	                break
  	            case 'word': // \w [a-zA-Z0-9]
  	                return Random.pick(
  	                    (LOWER + UPPER + NUMBER).split('')
  	                )
  	            case 'non-word': // \W [^a-zA-Z0-9]
  	                return Random.pick(
  	                    OTHER.replace('_', '').split('')
  	                )
  	            case 'null-character':
  	                break
  	        }
  	        return node.body || node.text
  	    },
  	    /*
  	        {
  	            type: 'alternate',
  	            offset: 0,
  	            text: '',
  	            left: {
  	                boyd: []
  	            },
  	            right: {
  	                boyd: []
  	            }
  	        }
  	    */
  	    alternate: function(node, result, cache) {
  	        // node.left/right {}
  	        return this.gen(
  	            Random.boolean() ? node.left : node.right,
  	            result,
  	            cache
  	        )
  	    },
  	    /*
  	        {
  	            type: 'match',
  	            offset: 0,
  	            text: '',
  	            body: []
  	        }
  	    */
  	    match: function(node, result, cache) {
  	        result = ''
  	            // node.body []
  	        for (var i = 0; i < node.body.length; i++) {
  	            result += this.gen(node.body[i], result, cache)
  	        }
  	        return result
  	    },
  	    // ()
  	    'capture-group': function(node, result, cache) {
  	        // node.body {}
  	        result = this.gen(node.body, result, cache)
  	        cache[cache.guid++] = result
  	        return result
  	    },
  	    // (?:...)
  	    'non-capture-group': function(node, result, cache) {
  	        // node.body {}
  	        return this.gen(node.body, result, cache)
  	    },
  	    // (?=p)
  	    'positive-lookahead': function(node, result, cache) {
  	        // node.body
  	        return this.gen(node.body, result, cache)
  	    },
  	    // (?!p)
  	    'negative-lookahead': function(node, result, cache) {
  	        // node.body
  	        return ''
  	    },
  	    /*
  	        {
  	            type: 'quantified',
  	            offset: 3,
  	            text: 'c*',
  	            body: {
  	                type: 'literal',
  	                offset: 3,
  	                text: 'c',
  	                body: 'c',
  	                escaped: false
  	            },
  	            quantifier: {
  	                type: 'quantifier',
  	                offset: 4,
  	                text: '*',
  	                min: 0,
  	                max: Infinity,
  	                greedy: true
  	            }
  	        }
  	    */
  	    quantified: function(node, result, cache) {
  	        result = ''
  	            // node.quantifier {}
  	        var count = this.quantifier(node.quantifier);
  	        // node.body {}
  	        for (var i = 0; i < count; i++) {
  	            result += this.gen(node.body, result, cache)
  	        }
  	        return result
  	    },
  	    /*
  	        quantifier: {
  	            type: 'quantifier',
  	            offset: 4,
  	            text: '*',
  	            min: 0,
  	            max: Infinity,
  	            greedy: true
  	        }
  	    */
  	    quantifier: function(node, result, cache) {
  	        var min = Math.max(node.min, 0)
  	        var max = isFinite(node.max) ? node.max :
  	            min + Random.integer(3, 7)
  	        return Random.integer(min, max)
  	    },
  	    /*
  	        
  	    */
  	    charset: function(node, result, cache) {
  	        // node.invert
  	        if (node.invert) return this['invert-charset'](node, result, cache)
  
  	        // node.body []
  	        var literal = Random.pick(node.body)
  	        return this.gen(literal, result, cache)
  	    },
  	    'invert-charset': function(node, result, cache) {
  	        var pool = PRINTABLE
  	        for (var i = 0, item; i < node.body.length; i++) {
  	            item = node.body[i]
  	            switch (item.type) {
  	                case 'literal':
  	                    pool = pool.replace(item.body, '')
  	                    break
  	                case 'range':
  	                    var min = this.gen(item.start, result, cache).charCodeAt()
  	                    var max = this.gen(item.end, result, cache).charCodeAt()
  	                    for (var ii = min; ii <= max; ii++) {
  	                        pool = pool.replace(String.fromCharCode(ii), '')
  	                    }
  	                    /* falls through */
  	                default:
  	                    var characters = CHARACTER_CLASSES[item.text]
  	                    if (characters) {
  	                        for (var iii = 0; iii <= characters.length; iii++) {
  	                            pool = pool.replace(characters[iii], '')
  	                        }
  	                    }
  	            }
  	        }
  	        return Random.pick(pool.split(''))
  	    },
  	    range: function(node, result, cache) {
  	        // node.start, node.end
  	        var min = this.gen(node.start, result, cache).charCodeAt()
  	        var max = this.gen(node.end, result, cache).charCodeAt()
  	        return String.fromCharCode(
  	            Random.integer(min, max)
  	        )
  	    },
  	    literal: function(node, result, cache) {
  	        return node.escaped ? node.body : node.text
  	    },
  	    // Unicode \u
  	    unicode: function(node, result, cache) {
  	        return String.fromCharCode(
  	            parseInt(node.code, 16)
  	        )
  	    },
  	    // 十六进制 \xFF
  	    hex: function(node, result, cache) {
  	        return String.fromCharCode(
  	            parseInt(node.code, 16)
  	        )
  	    },
  	    // 八进制 \0
  	    octal: function(node, result, cache) {
  	        return String.fromCharCode(
  	            parseInt(node.code, 8)
  	        )
  	    },
  	    // 反向引用
  	    'back-reference': function(node, result, cache) {
  	        return cache[node.code] || ''
  	    },
  	    /*
  	        http://en.wikipedia.org/wiki/C0_and_C1_control_codes
  	    */
  	    CONTROL_CHARACTER_MAP: function() {
  	        var CONTROL_CHARACTER = '@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _'.split(' ')
  	        var CONTROL_CHARACTER_UNICODE = '\u0000 \u0001 \u0002 \u0003 \u0004 \u0005 \u0006 \u0007 \u0008 \u0009 \u000A \u000B \u000C \u000D \u000E \u000F \u0010 \u0011 \u0012 \u0013 \u0014 \u0015 \u0016 \u0017 \u0018 \u0019 \u001A \u001B \u001C \u001D \u001E \u001F'.split(' ')
  	        var map = {}
  	        for (var i = 0; i < CONTROL_CHARACTER.length; i++) {
  	            map[CONTROL_CHARACTER[i]] = CONTROL_CHARACTER_UNICODE[i]
  	        }
  	        return map
  	    }(),
  	    'control-character': function(node, result, cache) {
  	        return this.CONTROL_CHARACTER_MAP[node.code]
  	    }
  	})
  
  	module.exports = Handler
  
  /***/ },
  /* 23 */
  /***/ function(module, exports, __webpack_require__) {
  
  	module.exports = __webpack_require__(24)
  
  /***/ },
  /* 24 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## toJSONSchema
  
  	    把 Mock.js 风格的数据模板转换成 JSON Schema。
  
  	    > [JSON Schema](http://json-schema.org/)
  	 */
  	var Constant = __webpack_require__(2)
  	var Util = __webpack_require__(3)
  	var Parser = __webpack_require__(4)
  
  	function toJSONSchema(template, name, path /* Internal Use Only */ ) {
  	    // type rule properties items
  	    path = path || []
  	    var result = {
  	        name: typeof name === 'string' ? name.replace(Constant.RE_KEY, '$1') : name,
  	        template: template,
  	        type: Util.type(template), // 可能不准确，例如 { 'name|1': [{}, {} ...] }
  	        rule: Parser.parse(name)
  	    }
  	    result.path = path.slice(0)
  	    result.path.push(name === undefined ? 'ROOT' : result.name)
  
  	    switch (result.type) {
  	        case 'array':
  	            result.items = []
  	            Util.each(template, function(value, index) {
  	                result.items.push(
  	                    toJSONSchema(value, index, result.path)
  	                )
  	            })
  	            break
  	        case 'object':
  	            result.properties = []
  	            Util.each(template, function(value, name) {
  	                result.properties.push(
  	                    toJSONSchema(value, name, result.path)
  	                )
  	            })
  	            break
  	    }
  
  	    return result
  
  	}
  
  	module.exports = toJSONSchema
  
  
  /***/ },
  /* 25 */
  /***/ function(module, exports, __webpack_require__) {
  
  	module.exports = __webpack_require__(26)
  
  /***/ },
  /* 26 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/*
  	    ## valid(template, data)
  
  	    校验真实数据 data 是否与数据模板 template 匹配。
  	    
  	    实现思路：
  	    1. 解析规则。
  	        先把数据模板 template 解析为更方便机器解析的 JSON-Schame
  	        name               属性名 
  	        type               属性值类型
  	        template           属性值模板
  	        properties         对象属性数组
  	        items              数组元素数组
  	        rule               属性值生成规则
  	    2. 递归验证规则。
  	        然后用 JSON-Schema 校验真实数据，校验项包括属性名、值类型、值、值生成规则。
  
  	    提示信息 
  	    https://github.com/fge/json-schema-validator/blob/master/src/main/resources/com/github/fge/jsonschema/validator/validation.properties
  	    [JSON-Schama validator](http://json-schema-validator.herokuapp.com/)
  	    [Regexp Demo](http://demos.forbeslindesay.co.uk/regexp/)
  	*/
  	var Constant = __webpack_require__(2)
  	var Util = __webpack_require__(3)
  	var toJSONSchema = __webpack_require__(23)
  
  	function valid(template, data) {
  	    var schema = toJSONSchema(template)
  	    var result = Diff.diff(schema, data)
  	    for (var i = 0; i < result.length; i++) {
  	        // console.log(template, data)
  	        // console.warn(Assert.message(result[i]))
  	    }
  	    return result
  	}
  
  	/*
  	    ## name
  	        有生成规则：比较解析后的 name
  	        无生成规则：直接比较
  	    ## type
  	        无类型转换：直接比较
  	        有类型转换：先试着解析 template，然后再检查？
  	    ## value vs. template
  	        基本类型
  	            无生成规则：直接比较
  	            有生成规则：
  	                number
  	                    min-max.dmin-dmax
  	                    min-max.dcount
  	                    count.dmin-dmax
  	                    count.dcount
  	                    +step
  	                    整数部分
  	                    小数部分
  	                boolean 
  	                string  
  	                    min-max
  	                    count
  	    ## properties
  	        对象
  	            有生成规则：检测期望的属性个数，继续递归
  	            无生成规则：检测全部的属性个数，继续递归
  	    ## items
  	        数组
  	            有生成规则：
  	                `'name|1': [{}, {} ...]`            其中之一，继续递归
  	                `'name|+1': [{}, {} ...]`           顺序检测，继续递归
  	                `'name|min-max': [{}, {} ...]`      检测个数，继续递归
  	                `'name|count': [{}, {} ...]`        检测个数，继续递归
  	            无生成规则：检测全部的元素个数，继续递归
  	*/
  	var Diff = {
  	    diff: function diff(schema, data, name /* Internal Use Only */ ) {
  	        var result = []
  
  	        // 先检测名称 name 和类型 type，如果匹配，才有必要继续检测
  	        if (
  	            this.name(schema, data, name, result) &&
  	            this.type(schema, data, name, result)
  	        ) {
  	            this.value(schema, data, name, result)
  	            this.properties(schema, data, name, result)
  	            this.items(schema, data, name, result)
  	        }
  
  	        return result
  	    },
  	    /* jshint unused:false */
  	    name: function(schema, data, name, result) {
  	        var length = result.length
  
  	        Assert.equal('name', schema.path, name + '', schema.name + '', result)
  
  	        return result.length === length
  	    },
  	    type: function(schema, data, name, result) {
  	        var length = result.length
  
  	        switch (schema.type) {
  	            case 'string':
  	                // 跳过含有『占位符』的属性值，因为『占位符』返回值的类型可能和模板不一致，例如 '@int' 会返回一个整形值
  	                if (schema.template.match(Constant.RE_PLACEHOLDER)) return true
  	                break
  	            case 'array':
  	                if (schema.rule.parameters) {
  	                    // name|count: array
  	                    if (schema.rule.min !== undefined && schema.rule.max === undefined) {
  	                        // 跳过 name|1: array，因为最终值的类型（很可能）不是数组，也不一定与 `array` 中的类型一致
  	                        if (schema.rule.count === 1) return true
  	                    }
  	                    // 跳过 name|+inc: array
  	                    if (schema.rule.parameters[2]) return true
  	                }
  	                break
  	            case 'function':
  	                // 跳过 `'name': function`，因为函数可以返回任何类型的值。
  	                return true
  	        }
  
  	        Assert.equal('type', schema.path, Util.type(data), schema.type, result)
  
  	        return result.length === length
  	    },
  	    value: function(schema, data, name, result) {
  	        var length = result.length
  
  	        var rule = schema.rule
  	        var templateType = schema.type
  	        if (templateType === 'object' || templateType === 'array' || templateType === 'function') return true
  
  	        // 无生成规则
  	        if (!rule.parameters) {
  	            switch (templateType) {
  	                case 'regexp':
  	                    Assert.match('value', schema.path, data, schema.template, result)
  	                    return result.length === length
  	                case 'string':
  	                    // 同样跳过含有『占位符』的属性值，因为『占位符』的返回值会通常会与模板不一致
  	                    if (schema.template.match(Constant.RE_PLACEHOLDER)) return result.length === length
  	                    break
  	            }
  	            Assert.equal('value', schema.path, data, schema.template, result)
  	            return result.length === length
  	        }
  
  	        // 有生成规则
  	        var actualRepeatCount
  	        switch (templateType) {
  	            case 'number':
  	                var parts = (data + '').split('.')
  	                parts[0] = +parts[0]
  
  	                // 整数部分
  	                // |min-max
  	                if (rule.min !== undefined && rule.max !== undefined) {
  	                    Assert.greaterThanOrEqualTo('value', schema.path, parts[0], Math.min(rule.min, rule.max), result)
  	                        // , 'numeric instance is lower than the required minimum (minimum: {expected}, found: {actual})')
  	                    Assert.lessThanOrEqualTo('value', schema.path, parts[0], Math.max(rule.min, rule.max), result)
  	                }
  	                // |count
  	                if (rule.min !== undefined && rule.max === undefined) {
  	                    Assert.equal('value', schema.path, parts[0], rule.min, result, '[value] ' + name)
  	                }
  
  	                // 小数部分
  	                if (rule.decimal) {
  	                    // |dmin-dmax
  	                    if (rule.dmin !== undefined && rule.dmax !== undefined) {
  	                        Assert.greaterThanOrEqualTo('value', schema.path, parts[1].length, rule.dmin, result)
  	                        Assert.lessThanOrEqualTo('value', schema.path, parts[1].length, rule.dmax, result)
  	                    }
  	                    // |dcount
  	                    if (rule.dmin !== undefined && rule.dmax === undefined) {
  	                        Assert.equal('value', schema.path, parts[1].length, rule.dmin, result)
  	                    }
  	                }
  
  	                break
  
  	            case 'boolean':
  	                break
  
  	            case 'string':
  	                // 'aaa'.match(/a/g)
  	                actualRepeatCount = data.match(new RegExp(schema.template, 'g'))
  	                actualRepeatCount = actualRepeatCount ? actualRepeatCount.length : 0
  
  	                // |min-max
  	                if (rule.min !== undefined && rule.max !== undefined) {
  	                    Assert.greaterThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.min, result)
  	                    Assert.lessThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.max, result)
  	                }
  	                // |count
  	                if (rule.min !== undefined && rule.max === undefined) {
  	                    Assert.equal('repeat count', schema.path, actualRepeatCount, rule.min, result)
  	                }
  
  	                break
  
  	            case 'regexp':
  	                actualRepeatCount = data.match(new RegExp(schema.template.source.replace(/^\^|\$$/g, ''), 'g'))
  	                actualRepeatCount = actualRepeatCount ? actualRepeatCount.length : 0
  
  	                // |min-max
  	                if (rule.min !== undefined && rule.max !== undefined) {
  	                    Assert.greaterThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.min, result)
  	                    Assert.lessThanOrEqualTo('repeat count', schema.path, actualRepeatCount, rule.max, result)
  	                }
  	                // |count
  	                if (rule.min !== undefined && rule.max === undefined) {
  	                    Assert.equal('repeat count', schema.path, actualRepeatCount, rule.min, result)
  	                }
  	                break
  	        }
  
  	        return result.length === length
  	    },
  	    properties: function(schema, data, name, result) {
  	        var length = result.length
  
  	        var rule = schema.rule
  	        var keys = Util.keys(data)
  	        if (!schema.properties) return
  
  	        // 无生成规则
  	        if (!schema.rule.parameters) {
  	            Assert.equal('properties length', schema.path, keys.length, schema.properties.length, result)
  	        } else {
  	            // 有生成规则
  	            // |min-max
  	            if (rule.min !== undefined && rule.max !== undefined) {
  	                Assert.greaterThanOrEqualTo('properties length', schema.path, keys.length, Math.min(rule.min, rule.max), result)
  	                Assert.lessThanOrEqualTo('properties length', schema.path, keys.length, Math.max(rule.min, rule.max), result)
  	            }
  	            // |count
  	            if (rule.min !== undefined && rule.max === undefined) {
  	                // |1, |>1
  	                if (rule.count !== 1) Assert.equal('properties length', schema.path, keys.length, rule.min, result)
  	            }
  	        }
  
  	        if (result.length !== length) return false
  
  	        for (var i = 0; i < keys.length; i++) {
  	            result.push.apply(
  	                result,
  	                this.diff(
  	                    function() {
  	                        var property
  	                        Util.each(schema.properties, function(item /*, index*/ ) {
  	                            if (item.name === keys[i]) property = item
  	                        })
  	                        return property || schema.properties[i]
  	                    }(),
  	                    data[keys[i]],
  	                    keys[i]
  	                )
  	            )
  	        }
  
  	        return result.length === length
  	    },
  	    items: function(schema, data, name, result) {
  	        var length = result.length
  
  	        if (!schema.items) return
  
  	        var rule = schema.rule
  
  	        // 无生成规则
  	        if (!schema.rule.parameters) {
  	            Assert.equal('items length', schema.path, data.length, schema.items.length, result)
  	        } else {
  	            // 有生成规则
  	            // |min-max
  	            if (rule.min !== undefined && rule.max !== undefined) {
  	                Assert.greaterThanOrEqualTo('items', schema.path, data.length, (Math.min(rule.min, rule.max) * schema.items.length), result,
  	                    '[{utype}] array is too short: {path} must have at least {expected} elements but instance has {actual} elements')
  	                Assert.lessThanOrEqualTo('items', schema.path, data.length, (Math.max(rule.min, rule.max) * schema.items.length), result,
  	                    '[{utype}] array is too long: {path} must have at most {expected} elements but instance has {actual} elements')
  	            }
  	            // |count
  	            if (rule.min !== undefined && rule.max === undefined) {
  	                // |1, |>1
  	                if (rule.count === 1) return result.length === length
  	                else Assert.equal('items length', schema.path, data.length, (rule.min * schema.items.length), result)
  	            }
  	            // |+inc
  	            if (rule.parameters[2]) return result.length === length
  	        }
  
  	        if (result.length !== length) return false
  
  	        for (var i = 0; i < data.length; i++) {
  	            result.push.apply(
  	                result,
  	                this.diff(
  	                    schema.items[i % schema.items.length],
  	                    data[i],
  	                    i % schema.items.length
  	                )
  	            )
  	        }
  
  	        return result.length === length
  	    }
  	}
  
  	/*
  	    完善、友好的提示信息
  	    
  	    Equal, not equal to, greater than, less than, greater than or equal to, less than or equal to
  	    路径 验证类型 描述 
  
  	    Expect path.name is less than or equal to expected, but path.name is actual.
  
  	    Expect path.name is less than or equal to expected, but path.name is actual.
  	    Expect path.name is greater than or equal to expected, but path.name is actual.
  
  	*/
  	var Assert = {
  	    message: function(item) {
  	        return (item.message ||
  	                '[{utype}] Expect {path}\'{ltype} {action} {expected}, but is {actual}')
  	            .replace('{utype}', item.type.toUpperCase())
  	            .replace('{ltype}', item.type.toLowerCase())
  	            .replace('{path}', Util.isArray(item.path) && item.path.join('.') || item.path)
  	            .replace('{action}', item.action)
  	            .replace('{expected}', item.expected)
  	            .replace('{actual}', item.actual)
  	    },
  	    equal: function(type, path, actual, expected, result, message) {
  	        if (actual === expected) return true
  	        switch (type) {
  	            case 'type':
  	                // 正则模板 === 字符串最终值
  	                if (expected === 'regexp' && actual === 'string') return true
  	                break
  	        }
  
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'is equal to',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    },
  	    // actual matches expected
  	    match: function(type, path, actual, expected, result, message) {
  	        if (expected.test(actual)) return true
  
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'matches',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    },
  	    notEqual: function(type, path, actual, expected, result, message) {
  	        if (actual !== expected) return true
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'is not equal to',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    },
  	    greaterThan: function(type, path, actual, expected, result, message) {
  	        if (actual > expected) return true
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'is greater than',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    },
  	    lessThan: function(type, path, actual, expected, result, message) {
  	        if (actual < expected) return true
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'is less to',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    },
  	    greaterThanOrEqualTo: function(type, path, actual, expected, result, message) {
  	        if (actual >= expected) return true
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'is greater than or equal to',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    },
  	    lessThanOrEqualTo: function(type, path, actual, expected, result, message) {
  	        if (actual <= expected) return true
  	        var item = {
  	            path: path,
  	            type: type,
  	            actual: actual,
  	            expected: expected,
  	            action: 'is less than or equal to',
  	            message: message
  	        }
  	        item.message = Assert.message(item)
  	        result.push(item)
  	        return false
  	    }
  	}
  
  	valid.Diff = Diff
  	valid.Assert = Assert
  
  	module.exports = valid
  
  /***/ },
  /* 27 */
  /***/ function(module, exports, __webpack_require__) {
  
  	module.exports = __webpack_require__(28)
  
  /***/ },
  /* 28 */
  /***/ function(module, exports, __webpack_require__) {
  
  	/* global window, document, location, Event, setTimeout */
  	/*
  	    ## MockXMLHttpRequest
  
  	    期望的功能：
  	    1. 完整地覆盖原生 XHR 的行为
  	    2. 完整地模拟原生 XHR 的行为
  	    3. 在发起请求时，自动检测是否需要拦截
  	    4. 如果不必拦截，则执行原生 XHR 的行为
  	    5. 如果需要拦截，则执行虚拟 XHR 的行为
  	    6. 兼容 XMLHttpRequest 和 ActiveXObject
  	        new window.XMLHttpRequest()
  	        new window.ActiveXObject("Microsoft.XMLHTTP")
  
  	    关键方法的逻辑：
  	    * new   此时尚无法确定是否需要拦截，所以创建原生 XHR 对象是必须的。
  	    * open  此时可以取到 URL，可以决定是否进行拦截。
  	    * send  此时已经确定了请求方式。
  
  	    规范：
  	    http://xhr.spec.whatwg.org/
  	    http://www.w3.org/TR/XMLHttpRequest2/
  
  	    参考实现：
  	    https://github.com/philikon/MockHttpRequest/blob/master/lib/mock.js
  	    https://github.com/trek/FakeXMLHttpRequest/blob/master/fake_xml_http_request.js
  	    https://github.com/ilinsky/xmlhttprequest/blob/master/XMLHttpRequest.js
  	    https://github.com/firebug/firebug-lite/blob/master/content/lite/xhr.js
  	    https://github.com/thx/RAP/blob/master/lab/rap.plugin.xinglie.js
  
  	    **需不需要全面重写 XMLHttpRequest？**
  	        http://xhr.spec.whatwg.org/#interface-xmlhttprequest
  	        关键属性 readyState、status、statusText、response、responseText、responseXML 是 readonly，所以，试图通过修改这些状态，来模拟响应是不可行的。
  	        因此，唯一的办法是模拟整个 XMLHttpRequest，就像 jQuery 对事件模型的封装。
  
  	    // Event handlers
  	    onloadstart         loadstart
  	    onprogress          progress
  	    onabort             abort
  	    onerror             error
  	    onload              load
  	    ontimeout           timeout
  	    onloadend           loadend
  	    onreadystatechange  readystatechange
  	 */
  
  	var Util = __webpack_require__(3)
  
  	// 备份原生 XMLHttpRequest
  	window._XMLHttpRequest = window.XMLHttpRequest
  	window._ActiveXObject = window.ActiveXObject
  
  	/*
  	    PhantomJS
  	    TypeError: '[object EventConstructor]' is not a constructor (evaluating 'new Event("readystatechange")')
  
  	    https://github.com/bluerail/twitter-bootstrap-rails-confirm/issues/18
  	    https://github.com/ariya/phantomjs/issues/11289
  	*/
  	try {
  	    new window.Event('custom')
  	} catch (exception) {
  	    window.Event = function(type, bubbles, cancelable, detail) {
  	        var event = document.createEvent('CustomEvent') // MUST be 'CustomEvent'
  	        event.initCustomEvent(type, bubbles, cancelable, detail)
  	        return event
  	    }
  	}
  
  	var XHR_STATES = {
  	    // The object has been constructed.
  	    UNSENT: 0,
  	    // The open() method has been successfully invoked.
  	    OPENED: 1,
  	    // All redirects (if any) have been followed and all HTTP headers of the response have been received.
  	    HEADERS_RECEIVED: 2,
  	    // The response's body is being received.
  	    LOADING: 3,
  	    // The data transfer has been completed or something went wrong during the transfer (e.g. infinite redirects).
  	    DONE: 4
  	}
  
  	var XHR_EVENTS = 'readystatechange loadstart progress abort error load timeout loadend'.split(' ')
  	var XHR_REQUEST_PROPERTIES = 'timeout withCredentials'.split(' ')
  	var XHR_RESPONSE_PROPERTIES = 'readyState responseURL status statusText responseType response responseText responseXML'.split(' ')
  
  	// https://github.com/trek/FakeXMLHttpRequest/blob/master/fake_xml_http_request.js#L32
  	var HTTP_STATUS_CODES = {
  	    100: "Continue",
  	    101: "Switching Protocols",
  	    200: "OK",
  	    201: "Created",
  	    202: "Accepted",
  	    203: "Non-Authoritative Information",
  	    204: "No Content",
  	    205: "Reset Content",
  	    206: "Partial Content",
  	    300: "Multiple Choice",
  	    301: "Moved Permanently",
  	    302: "Found",
  	    303: "See Other",
  	    304: "Not Modified",
  	    305: "Use Proxy",
  	    307: "Temporary Redirect",
  	    400: "Bad Request",
  	    401: "Unauthorized",
  	    402: "Payment Required",
  	    403: "Forbidden",
  	    404: "Not Found",
  	    405: "Method Not Allowed",
  	    406: "Not Acceptable",
  	    407: "Proxy Authentication Required",
  	    408: "Request Timeout",
  	    409: "Conflict",
  	    410: "Gone",
  	    411: "Length Required",
  	    412: "Precondition Failed",
  	    413: "Request Entity Too Large",
  	    414: "Request-URI Too Long",
  	    415: "Unsupported Media Type",
  	    416: "Requested Range Not Satisfiable",
  	    417: "Expectation Failed",
  	    422: "Unprocessable Entity",
  	    500: "Internal Server Error",
  	    501: "Not Implemented",
  	    502: "Bad Gateway",
  	    503: "Service Unavailable",
  	    504: "Gateway Timeout",
  	    505: "HTTP Version Not Supported"
  	}
  
  	/*
  	    MockXMLHttpRequest
  	*/
  
  	function MockXMLHttpRequest() {
  	    // 初始化 custom 对象，用于存储自定义属性
  	    this.custom = {
  	        events: {},
  	        requestHeaders: {},
  	        responseHeaders: {}
  	    }
  	}
  
  	MockXMLHttpRequest._settings = {
  	    timeout: '10-100',
  	    /*
  	        timeout: 50,
  	        timeout: '10-100',
  	     */
  	}
  
  	MockXMLHttpRequest.setup = function(settings) {
  	    Util.extend(MockXMLHttpRequest._settings, settings)
  	    return MockXMLHttpRequest._settings
  	}
  
  	Util.extend(MockXMLHttpRequest, XHR_STATES)
  	Util.extend(MockXMLHttpRequest.prototype, XHR_STATES)
  
  	// 标记当前对象为 MockXMLHttpRequest
  	MockXMLHttpRequest.prototype.mock = true
  
  	// 是否拦截 Ajax 请求
  	MockXMLHttpRequest.prototype.match = false
  
  	// 初始化 Request 相关的属性和方法
  	Util.extend(MockXMLHttpRequest.prototype, {
  	    // https://xhr.spec.whatwg.org/#the-open()-method
  	    // Sets the request method, request URL, and synchronous flag.
  	    open: function(method, url, async, username, password) {
  	        var that = this
  
  	        Util.extend(this.custom, {
  	            method: method,
  	            url: url,
  	            async: typeof async === 'boolean' ? async : true,
  	            username: username,
  	            password: password,
  	            options: {
  	                url: url,
  	                type: method
  	            }
  	        })
  
  	        this.custom.timeout = function(timeout) {
  	            if (typeof timeout === 'number') return timeout
  	            if (typeof timeout === 'string' && !~timeout.indexOf('-')) return parseInt(timeout, 10)
  	            if (typeof timeout === 'string' && ~timeout.indexOf('-')) {
  	                var tmp = timeout.split('-')
  	                var min = parseInt(tmp[0], 10)
  	                var max = parseInt(tmp[1], 10)
  	                return Math.round(Math.random() * (max - min)) + min
  	            }
  	        }(MockXMLHttpRequest._settings.timeout)
  
  	        // 查找与请求参数匹配的数据模板
  	        var item = find(this.custom.options)
  
  	        function handle(event) {
  	            // 同步属性 NativeXMLHttpRequest => MockXMLHttpRequest
  	            for (var i = 0; i < XHR_RESPONSE_PROPERTIES.length; i++) {
  	                try {
  	                    that[XHR_RESPONSE_PROPERTIES[i]] = xhr[XHR_RESPONSE_PROPERTIES[i]]
  	                } catch (e) {}
  	            }
  	            // 触发 MockXMLHttpRequest 上的同名事件
  	            that.dispatchEvent(new Event(event.type /*, false, false, that*/ ))
  	        }
  
  	        // 如果未找到匹配的数据模板，则采用原生 XHR 发送请求。
  	        if (!item) {
  	            // 创建原生 XHR 对象，调用原生 open()，监听所有原生事件
  	            var xhr = createNativeXMLHttpRequest()
  	            this.custom.xhr = xhr
  
  	            // 初始化所有事件，用于监听原生 XHR 对象的事件
  	            for (var i = 0; i < XHR_EVENTS.length; i++) {
  	                xhr.addEventListener(XHR_EVENTS[i], handle)
  	            }
  
  	            // xhr.open()
  	            if (username) xhr.open(method, url, async, username, password)
  	            else xhr.open(method, url, async)
  
  	            // 同步属性 MockXMLHttpRequest => NativeXMLHttpRequest
  	            for (var j = 0; j < XHR_REQUEST_PROPERTIES.length; j++) {
  	                try {
  	                    xhr[XHR_REQUEST_PROPERTIES[j]] = that[XHR_REQUEST_PROPERTIES[j]]
  	                } catch (e) {}
  	            }
  
  	            return
  	        }
  
  	        // 找到了匹配的数据模板，开始拦截 XHR 请求
  	        this.match = true
  	        this.custom.template = item
  	        this.readyState = MockXMLHttpRequest.OPENED
  	        this.dispatchEvent(new Event('readystatechange' /*, false, false, this*/ ))
  	    },
  	    // https://xhr.spec.whatwg.org/#the-setrequestheader()-method
  	    // Combines a header in author request headers.
  	    setRequestHeader: function(name, value) {
  	        // 原生 XHR
  	        if (!this.match) {
  	            this.custom.xhr.setRequestHeader(name, value)
  	            return
  	        }
  
  	        // 拦截 XHR
  	        var requestHeaders = this.custom.requestHeaders
  	        if (requestHeaders[name]) requestHeaders[name] += ',' + value
  	        else requestHeaders[name] = value
  	    },
  	    timeout: 0,
  	    withCredentials: false,
  	    upload: {},
  	    // https://xhr.spec.whatwg.org/#the-send()-method
  	    // Initiates the request.
  	    send: function send(data) {
  	        var that = this
  	        this.custom.options.body = data
  
  	        // 原生 XHR
  	        if (!this.match) {
  	            this.custom.xhr.send(data)
  	            return
  	        }
  
  	        // 拦截 XHR
  
  	        // X-Requested-With header
  	        this.setRequestHeader('X-Requested-With', 'MockXMLHttpRequest')
  
  	        // loadstart The fetch initiates.
  	        this.dispatchEvent(new Event('loadstart' /*, false, false, this*/ ))
  
  	        if (this.custom.async) setTimeout(done, this.custom.timeout) // 异步
  	        else done() // 同步
  
  	        function done() {
  	            that.readyState = MockXMLHttpRequest.HEADERS_RECEIVED
  	            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))
  	            that.readyState = MockXMLHttpRequest.LOADING
  	            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))
  
  	            that.status = 200
  	            that.statusText = HTTP_STATUS_CODES[200]
  
  	            // fix #92 #93 by @qddegtya
  	            that.response = that.responseText = JSON.stringify(
  	                convert(that.custom.template, that.custom.options),
  	                null, 4
  	            )
  
  	            that.readyState = MockXMLHttpRequest.DONE
  	            that.dispatchEvent(new Event('readystatechange' /*, false, false, that*/ ))
  	            that.dispatchEvent(new Event('load' /*, false, false, that*/ ));
  	            that.dispatchEvent(new Event('loadend' /*, false, false, that*/ ));
  	        }
  	    },
  	    // https://xhr.spec.whatwg.org/#the-abort()-method
  	    // Cancels any network activity.
  	    abort: function abort() {
  	        // 原生 XHR
  	        if (!this.match) {
  	            this.custom.xhr.abort()
  	            return
  	        }
  
  	        // 拦截 XHR
  	        this.readyState = MockXMLHttpRequest.UNSENT
  	        this.dispatchEvent(new Event('abort', false, false, this))
  	        this.dispatchEvent(new Event('error', false, false, this))
  	    }
  	})
  
  	// 初始化 Response 相关的属性和方法
  	Util.extend(MockXMLHttpRequest.prototype, {
  	    responseURL: '',
  	    status: MockXMLHttpRequest.UNSENT,
  	    statusText: '',
  	    // https://xhr.spec.whatwg.org/#the-getresponseheader()-method
  	    getResponseHeader: function(name) {
  	        // 原生 XHR
  	        if (!this.match) {
  	            return this.custom.xhr.getResponseHeader(name)
  	        }
  
  	        // 拦截 XHR
  	        return this.custom.responseHeaders[name.toLowerCase()]
  	    },
  	    // https://xhr.spec.whatwg.org/#the-getallresponseheaders()-method
  	    // http://www.utf8-chartable.de/
  	    getAllResponseHeaders: function() {
  	        // 原生 XHR
  	        if (!this.match) {
  	            return this.custom.xhr.getAllResponseHeaders()
  	        }
  
  	        // 拦截 XHR
  	        var responseHeaders = this.custom.responseHeaders
  	        var headers = ''
  	        for (var h in responseHeaders) {
  	            if (!responseHeaders.hasOwnProperty(h)) continue
  	            headers += h + ': ' + responseHeaders[h] + '\r\n'
  	        }
  	        return headers
  	    },
  	    overrideMimeType: function( /*mime*/ ) {},
  	    responseType: '', // '', 'text', 'arraybuffer', 'blob', 'document', 'json'
  	    response: null,
  	    responseText: '',
  	    responseXML: null
  	})
  
  	// EventTarget
  	Util.extend(MockXMLHttpRequest.prototype, {
  	    addEventListener: function addEventListener(type, handle) {
  	        var events = this.custom.events
  	        if (!events[type]) events[type] = []
  	        events[type].push(handle)
  	    },
  	    removeEventListener: function removeEventListener(type, handle) {
  	        var handles = this.custom.events[type] || []
  	        for (var i = 0; i < handles.length; i++) {
  	            if (handles[i] === handle) {
  	                handles.splice(i--, 1)
  	            }
  	        }
  	    },
  	    dispatchEvent: function dispatchEvent(event) {
  	        var handles = this.custom.events[event.type] || []
  	        for (var i = 0; i < handles.length; i++) {
  	            handles[i].call(this, event)
  	        }
  
  	        var ontype = 'on' + event.type
  	        if (this[ontype]) this[ontype](event)
  	    }
  	})
  
  	// Inspired by jQuery
  	function createNativeXMLHttpRequest() {
  	    var isLocal = function() {
  	        var rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/
  	        var rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/
  	        var ajaxLocation = location.href
  	        var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
  	        return rlocalProtocol.test(ajaxLocParts[1])
  	    }()
  
  	    return window.ActiveXObject ?
  	        (!isLocal && createStandardXHR() || createActiveXHR()) : createStandardXHR()
  
  	    function createStandardXHR() {
  	        try {
  	            return new window._XMLHttpRequest();
  	        } catch (e) {}
  	    }
  
  	    function createActiveXHR() {
  	        try {
  	            return new window._ActiveXObject("Microsoft.XMLHTTP");
  	        } catch (e) {}
  	    }
  	}
  
  
  	// 查找与请求参数匹配的数据模板：URL，Type
  	function find(options) {
  
  	    for (var sUrlType in MockXMLHttpRequest.Mock._mocked) {
  	        var item = MockXMLHttpRequest.Mock._mocked[sUrlType]
  	        if (
  	            (!item.rurl || match(item.rurl, options.url)) &&
  	            (!item.rtype || match(item.rtype, options.type.toLowerCase()))
  	        ) {
  	            // console.log('[mock]', options.url, '>', item.rurl)
  	            return item
  	        }
  	    }
  
  	    function match(expected, actual) {
  	        if (Util.type(expected) === 'string') {
  	            return expected === actual
  	        }
  	        if (Util.type(expected) === 'regexp') {
  	            return expected.test(actual)
  	        }
  	    }
  
  	}
  
  	// 数据模板 ＝> 响应数据
  	function convert(item, options) {
  	    return Util.isFunction(item.template) ?
  	        item.template(options) : MockXMLHttpRequest.Mock.mock(item.template)
  	}
  
  	module.exports = MockXMLHttpRequest
  
  /***/ }
  /******/ ])
  });
  ;

});

;/*!node_modules/urijs/src/punycode.js*/
define('node_modules/urijs/src/punycode', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /*! https://mths.be/punycode v1.4.0 by @mathias */
  ;(function(root) {
  
  	/** Detect free variables */
  	var freeExports = typeof exports == 'object' && exports &&
  		!exports.nodeType && exports;
  	var freeModule = typeof module == 'object' && module &&
  		!module.nodeType && module;
  	var freeGlobal = typeof global == 'object' && global;
  	if (
  		freeGlobal.global === freeGlobal ||
  		freeGlobal.window === freeGlobal ||
  		freeGlobal.self === freeGlobal
  	) {
  		root = freeGlobal;
  	}
  
  	/**
  	 * The `punycode` object.
  	 * @name punycode
  	 * @type Object
  	 */
  	var punycode,
  
  	/** Highest positive signed 32-bit float value */
  	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
  
  	/** Bootstring parameters */
  	base = 36,
  	tMin = 1,
  	tMax = 26,
  	skew = 38,
  	damp = 700,
  	initialBias = 72,
  	initialN = 128, // 0x80
  	delimiter = '-', // '\x2D'
  
  	/** Regular expressions */
  	regexPunycode = /^xn--/,
  	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
  	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
  
  	/** Error messages */
  	errors = {
  		'overflow': 'Overflow: input needs wider integers to process',
  		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  		'invalid-input': 'Invalid input'
  	},
  
  	/** Convenience shortcuts */
  	baseMinusTMin = base - tMin,
  	floor = Math.floor,
  	stringFromCharCode = String.fromCharCode,
  
  	/** Temporary variable */
  	key;
  
  	/*--------------------------------------------------------------------------*/
  
  	/**
  	 * A generic error utility function.
  	 * @private
  	 * @param {String} type The error type.
  	 * @returns {Error} Throws a `RangeError` with the applicable error message.
  	 */
  	function error(type) {
  		throw new RangeError(errors[type]);
  	}
  
  	/**
  	 * A generic `Array#map` utility function.
  	 * @private
  	 * @param {Array} array The array to iterate over.
  	 * @param {Function} callback The function that gets called for every array
  	 * item.
  	 * @returns {Array} A new array of values returned by the callback function.
  	 */
  	function map(array, fn) {
  		var length = array.length;
  		var result = [];
  		while (length--) {
  			result[length] = fn(array[length]);
  		}
  		return result;
  	}
  
  	/**
  	 * A simple `Array#map`-like wrapper to work with domain name strings or email
  	 * addresses.
  	 * @private
  	 * @param {String} domain The domain name or email address.
  	 * @param {Function} callback The function that gets called for every
  	 * character.
  	 * @returns {Array} A new string of characters returned by the callback
  	 * function.
  	 */
  	function mapDomain(string, fn) {
  		var parts = string.split('@');
  		var result = '';
  		if (parts.length > 1) {
  			// In email addresses, only the domain name should be punycoded. Leave
  			// the local part (i.e. everything up to `@`) intact.
  			result = parts[0] + '@';
  			string = parts[1];
  		}
  		// Avoid `split(regex)` for IE8 compatibility. See #17.
  		string = string.replace(regexSeparators, '\x2E');
  		var labels = string.split('.');
  		var encoded = map(labels, fn).join('.');
  		return result + encoded;
  	}
  
  	/**
  	 * Creates an array containing the numeric code points of each Unicode
  	 * character in the string. While JavaScript uses UCS-2 internally,
  	 * this function will convert a pair of surrogate halves (each of which
  	 * UCS-2 exposes as separate characters) into a single code point,
  	 * matching UTF-16.
  	 * @see `punycode.ucs2.encode`
  	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  	 * @memberOf punycode.ucs2
  	 * @name decode
  	 * @param {String} string The Unicode input string (UCS-2).
  	 * @returns {Array} The new array of code points.
  	 */
  	function ucs2decode(string) {
  		var output = [],
  		    counter = 0,
  		    length = string.length,
  		    value,
  		    extra;
  		while (counter < length) {
  			value = string.charCodeAt(counter++);
  			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  				// high surrogate, and there is a next character
  				extra = string.charCodeAt(counter++);
  				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  				} else {
  					// unmatched surrogate; only append this code unit, in case the next
  					// code unit is the high surrogate of a surrogate pair
  					output.push(value);
  					counter--;
  				}
  			} else {
  				output.push(value);
  			}
  		}
  		return output;
  	}
  
  	/**
  	 * Creates a string based on an array of numeric code points.
  	 * @see `punycode.ucs2.decode`
  	 * @memberOf punycode.ucs2
  	 * @name encode
  	 * @param {Array} codePoints The array of numeric code points.
  	 * @returns {String} The new Unicode string (UCS-2).
  	 */
  	function ucs2encode(array) {
  		return map(array, function(value) {
  			var output = '';
  			if (value > 0xFFFF) {
  				value -= 0x10000;
  				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  				value = 0xDC00 | value & 0x3FF;
  			}
  			output += stringFromCharCode(value);
  			return output;
  		}).join('');
  	}
  
  	/**
  	 * Converts a basic code point into a digit/integer.
  	 * @see `digitToBasic()`
  	 * @private
  	 * @param {Number} codePoint The basic numeric code point value.
  	 * @returns {Number} The numeric value of a basic code point (for use in
  	 * representing integers) in the range `0` to `base - 1`, or `base` if
  	 * the code point does not represent a value.
  	 */
  	function basicToDigit(codePoint) {
  		if (codePoint - 48 < 10) {
  			return codePoint - 22;
  		}
  		if (codePoint - 65 < 26) {
  			return codePoint - 65;
  		}
  		if (codePoint - 97 < 26) {
  			return codePoint - 97;
  		}
  		return base;
  	}
  
  	/**
  	 * Converts a digit/integer into a basic code point.
  	 * @see `basicToDigit()`
  	 * @private
  	 * @param {Number} digit The numeric value of a basic code point.
  	 * @returns {Number} The basic code point whose value (when used for
  	 * representing integers) is `digit`, which needs to be in the range
  	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  	 * used; else, the lowercase form is used. The behavior is undefined
  	 * if `flag` is non-zero and `digit` has no uppercase form.
  	 */
  	function digitToBasic(digit, flag) {
  		//  0..25 map to ASCII a..z or A..Z
  		// 26..35 map to ASCII 0..9
  		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  	}
  
  	/**
  	 * Bias adaptation function as per section 3.4 of RFC 3492.
  	 * https://tools.ietf.org/html/rfc3492#section-3.4
  	 * @private
  	 */
  	function adapt(delta, numPoints, firstTime) {
  		var k = 0;
  		delta = firstTime ? floor(delta / damp) : delta >> 1;
  		delta += floor(delta / numPoints);
  		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
  			delta = floor(delta / baseMinusTMin);
  		}
  		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  	}
  
  	/**
  	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  	 * symbols.
  	 * @memberOf punycode
  	 * @param {String} input The Punycode string of ASCII-only symbols.
  	 * @returns {String} The resulting string of Unicode symbols.
  	 */
  	function decode(input) {
  		// Don't use UCS-2
  		var output = [],
  		    inputLength = input.length,
  		    out,
  		    i = 0,
  		    n = initialN,
  		    bias = initialBias,
  		    basic,
  		    j,
  		    index,
  		    oldi,
  		    w,
  		    k,
  		    digit,
  		    t,
  		    /** Cached calculation results */
  		    baseMinusT;
  
  		// Handle the basic code points: let `basic` be the number of input code
  		// points before the last delimiter, or `0` if there is none, then copy
  		// the first basic code points to the output.
  
  		basic = input.lastIndexOf(delimiter);
  		if (basic < 0) {
  			basic = 0;
  		}
  
  		for (j = 0; j < basic; ++j) {
  			// if it's not a basic code point
  			if (input.charCodeAt(j) >= 0x80) {
  				error('not-basic');
  			}
  			output.push(input.charCodeAt(j));
  		}
  
  		// Main decoding loop: start just after the last delimiter if any basic code
  		// points were copied; start at the beginning otherwise.
  
  		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
  
  			// `index` is the index of the next character to be consumed.
  			// Decode a generalized variable-length integer into `delta`,
  			// which gets added to `i`. The overflow checking is easier
  			// if we increase `i` as we go, then subtract off its starting
  			// value at the end to obtain `delta`.
  			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
  
  				if (index >= inputLength) {
  					error('invalid-input');
  				}
  
  				digit = basicToDigit(input.charCodeAt(index++));
  
  				if (digit >= base || digit > floor((maxInt - i) / w)) {
  					error('overflow');
  				}
  
  				i += digit * w;
  				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  
  				if (digit < t) {
  					break;
  				}
  
  				baseMinusT = base - t;
  				if (w > floor(maxInt / baseMinusT)) {
  					error('overflow');
  				}
  
  				w *= baseMinusT;
  
  			}
  
  			out = output.length + 1;
  			bias = adapt(i - oldi, out, oldi == 0);
  
  			// `i` was supposed to wrap around from `out` to `0`,
  			// incrementing `n` each time, so we'll fix that now:
  			if (floor(i / out) > maxInt - n) {
  				error('overflow');
  			}
  
  			n += floor(i / out);
  			i %= out;
  
  			// Insert `n` at position `i` of the output
  			output.splice(i++, 0, n);
  
  		}
  
  		return ucs2encode(output);
  	}
  
  	/**
  	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
  	 * Punycode string of ASCII-only symbols.
  	 * @memberOf punycode
  	 * @param {String} input The string of Unicode symbols.
  	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
  	 */
  	function encode(input) {
  		var n,
  		    delta,
  		    handledCPCount,
  		    basicLength,
  		    bias,
  		    j,
  		    m,
  		    q,
  		    k,
  		    t,
  		    currentValue,
  		    output = [],
  		    /** `inputLength` will hold the number of code points in `input`. */
  		    inputLength,
  		    /** Cached calculation results */
  		    handledCPCountPlusOne,
  		    baseMinusT,
  		    qMinusT;
  
  		// Convert the input in UCS-2 to Unicode
  		input = ucs2decode(input);
  
  		// Cache the length
  		inputLength = input.length;
  
  		// Initialize the state
  		n = initialN;
  		delta = 0;
  		bias = initialBias;
  
  		// Handle the basic code points
  		for (j = 0; j < inputLength; ++j) {
  			currentValue = input[j];
  			if (currentValue < 0x80) {
  				output.push(stringFromCharCode(currentValue));
  			}
  		}
  
  		handledCPCount = basicLength = output.length;
  
  		// `handledCPCount` is the number of code points that have been handled;
  		// `basicLength` is the number of basic code points.
  
  		// Finish the basic string - if it is not empty - with a delimiter
  		if (basicLength) {
  			output.push(delimiter);
  		}
  
  		// Main encoding loop:
  		while (handledCPCount < inputLength) {
  
  			// All non-basic code points < n have been handled already. Find the next
  			// larger one:
  			for (m = maxInt, j = 0; j < inputLength; ++j) {
  				currentValue = input[j];
  				if (currentValue >= n && currentValue < m) {
  					m = currentValue;
  				}
  			}
  
  			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  			// but guard against overflow
  			handledCPCountPlusOne = handledCPCount + 1;
  			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  				error('overflow');
  			}
  
  			delta += (m - n) * handledCPCountPlusOne;
  			n = m;
  
  			for (j = 0; j < inputLength; ++j) {
  				currentValue = input[j];
  
  				if (currentValue < n && ++delta > maxInt) {
  					error('overflow');
  				}
  
  				if (currentValue == n) {
  					// Represent delta as a generalized variable-length integer
  					for (q = delta, k = base; /* no condition */; k += base) {
  						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  						if (q < t) {
  							break;
  						}
  						qMinusT = q - t;
  						baseMinusT = base - t;
  						output.push(
  							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
  						);
  						q = floor(qMinusT / baseMinusT);
  					}
  
  					output.push(stringFromCharCode(digitToBasic(q, 0)));
  					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
  					delta = 0;
  					++handledCPCount;
  				}
  			}
  
  			++delta;
  			++n;
  
  		}
  		return output.join('');
  	}
  
  	/**
  	 * Converts a Punycode string representing a domain name or an email address
  	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  	 * it doesn't matter if you call it on a string that has already been
  	 * converted to Unicode.
  	 * @memberOf punycode
  	 * @param {String} input The Punycoded domain name or email address to
  	 * convert to Unicode.
  	 * @returns {String} The Unicode representation of the given Punycode
  	 * string.
  	 */
  	function toUnicode(input) {
  		return mapDomain(input, function(string) {
  			return regexPunycode.test(string)
  				? decode(string.slice(4).toLowerCase())
  				: string;
  		});
  	}
  
  	/**
  	 * Converts a Unicode string representing a domain name or an email address to
  	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
  	 * i.e. it doesn't matter if you call it with a domain that's already in
  	 * ASCII.
  	 * @memberOf punycode
  	 * @param {String} input The domain name or email address to convert, as a
  	 * Unicode string.
  	 * @returns {String} The Punycode representation of the given domain name or
  	 * email address.
  	 */
  	function toASCII(input) {
  		return mapDomain(input, function(string) {
  			return regexNonASCII.test(string)
  				? 'xn--' + encode(string)
  				: string;
  		});
  	}
  
  	/*--------------------------------------------------------------------------*/
  
  	/** Define the public API */
  	punycode = {
  		/**
  		 * A string representing the current Punycode.js version number.
  		 * @memberOf punycode
  		 * @type String
  		 */
  		'version': '1.3.2',
  		/**
  		 * An object of methods to convert from JavaScript's internal character
  		 * representation (UCS-2) to Unicode code points, and back.
  		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  		 * @memberOf punycode
  		 * @type Object
  		 */
  		'ucs2': {
  			'decode': ucs2decode,
  			'encode': ucs2encode
  		},
  		'decode': decode,
  		'encode': encode,
  		'toASCII': toASCII,
  		'toUnicode': toUnicode
  	};
  
  	/** Expose `punycode` */
  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (
  		typeof define == 'function' &&
  		typeof define.amd == 'object' &&
  		define.amd
  	) {
  		define('punycode', function() {
  			return punycode;
  		});
  	} else if (freeExports && freeModule) {
  		if (module.exports == freeExports) {
  			// in Node.js, io.js, or RingoJS v0.8.0+
  			freeModule.exports = punycode;
  		} else {
  			// in Narwhal or RingoJS v0.7.0-
  			for (key in punycode) {
  				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
  			}
  		}
  	} else {
  		// in Rhino or a web browser
  		root.punycode = punycode;
  	}
  
  }(this));
  

});

;/*!node_modules/urijs/src/IPv6.js*/
define('node_modules/urijs/src/IPv6', function(require, exports, module) {

  /*!
   * URI.js - Mutating URLs
   * IPv6 Support
   *
   * Version: 1.18.12
   *
   * Author: Rodney Rehm
   * Web: http://medialize.github.io/URI.js/
   *
   * Licensed under
   *   MIT License http://www.opensource.org/licenses/mit-license
   *
   */
  
  (function (root, factory) {
    'use strict';
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (typeof module === 'object' && module.exports) {
      // Node
      module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(factory);
    } else {
      // Browser globals (root is window)
      root.IPv6 = factory(root);
    }
  }(this, function (root) {
    'use strict';
  
    /*
    var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
    var _out = IPv6.best(_in);
    var _expected = "fe80::204:61ff:fe9d:f156";
  
    console.log(_in, _out, _expected, _out === _expected);
    */
  
    // save current IPv6 variable, if any
    var _IPv6 = root && root.IPv6;
  
    function bestPresentation(address) {
      // based on:
      // Javascript to test an IPv6 address for proper format, and to
      // present the "best text representation" according to IETF Draft RFC at
      // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
      // 8 Feb 2010 Rich Brown, Dartware, LLC
      // Please feel free to use this code as long as you provide a link to
      // http://www.intermapper.com
      // http://intermapper.com/support/tools/IPV6-Validator.aspx
      // http://download.dartware.com/thirdparty/ipv6validator.js
  
      var _address = address.toLowerCase();
      var segments = _address.split(':');
      var length = segments.length;
      var total = 8;
  
      // trim colons (:: or ::a:b:c… or …a:b:c::)
      if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
        // must have been ::
        // remove first two items
        segments.shift();
        segments.shift();
      } else if (segments[0] === '' && segments[1] === '') {
        // must have been ::xxxx
        // remove the first item
        segments.shift();
      } else if (segments[length - 1] === '' && segments[length - 2] === '') {
        // must have been xxxx::
        segments.pop();
      }
  
      length = segments.length;
  
      // adjust total segments for IPv4 trailer
      if (segments[length - 1].indexOf('.') !== -1) {
        // found a "." which means IPv4
        total = 7;
      }
  
      // fill empty segments them with "0000"
      var pos;
      for (pos = 0; pos < length; pos++) {
        if (segments[pos] === '') {
          break;
        }
      }
  
      if (pos < total) {
        segments.splice(pos, 1, '0000');
        while (segments.length < total) {
          segments.splice(pos, 0, '0000');
        }
      }
  
      // strip leading zeros
      var _segments;
      for (var i = 0; i < total; i++) {
        _segments = segments[i].split('');
        for (var j = 0; j < 3 ; j++) {
          if (_segments[0] === '0' && _segments.length > 1) {
            _segments.splice(0,1);
          } else {
            break;
          }
        }
  
        segments[i] = _segments.join('');
      }
  
      // find longest sequence of zeroes and coalesce them into one segment
      var best = -1;
      var _best = 0;
      var _current = 0;
      var current = -1;
      var inzeroes = false;
      // i; already declared
  
      for (i = 0; i < total; i++) {
        if (inzeroes) {
          if (segments[i] === '0') {
            _current += 1;
          } else {
            inzeroes = false;
            if (_current > _best) {
              best = current;
              _best = _current;
            }
          }
        } else {
          if (segments[i] === '0') {
            inzeroes = true;
            current = i;
            _current = 1;
          }
        }
      }
  
      if (_current > _best) {
        best = current;
        _best = _current;
      }
  
      if (_best > 1) {
        segments.splice(best, _best, '');
      }
  
      length = segments.length;
  
      // assemble remaining segments
      var result = '';
      if (segments[0] === '')  {
        result = ':';
      }
  
      for (i = 0; i < length; i++) {
        result += segments[i];
        if (i === length - 1) {
          break;
        }
  
        result += ':';
      }
  
      if (segments[length - 1] === '') {
        result += ':';
      }
  
      return result;
    }
  
    function noConflict() {
      /*jshint validthis: true */
      if (root.IPv6 === this) {
        root.IPv6 = _IPv6;
      }
  
      return this;
    }
  
    return {
      best: bestPresentation,
      noConflict: noConflict
    };
  }));
  

});

;/*!node_modules/urijs/src/SecondLevelDomains.js*/
define('node_modules/urijs/src/SecondLevelDomains', function(require, exports, module) {

  /*!
   * URI.js - Mutating URLs
   * Second Level Domain (SLD) Support
   *
   * Version: 1.18.12
   *
   * Author: Rodney Rehm
   * Web: http://medialize.github.io/URI.js/
   *
   * Licensed under
   *   MIT License http://www.opensource.org/licenses/mit-license
   *
   */
  
  (function (root, factory) {
    'use strict';
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (typeof module === 'object' && module.exports) {
      // Node
      module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(factory);
    } else {
      // Browser globals (root is window)
      root.SecondLevelDomains = factory(root);
    }
  }(this, function (root) {
    'use strict';
  
    // save current SecondLevelDomains variable, if any
    var _SecondLevelDomains = root && root.SecondLevelDomains;
  
    var SLD = {
      // list of known Second Level Domains
      // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
      // ----
      // publicsuffix.org is more current and actually used by a couple of browsers internally.
      // downside is it also contains domains like "dyndns.org" - which is fine for the security
      // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
      // ----
      list: {
        'ac':' com gov mil net org ',
        'ae':' ac co gov mil name net org pro sch ',
        'af':' com edu gov net org ',
        'al':' com edu gov mil net org ',
        'ao':' co ed gv it og pb ',
        'ar':' com edu gob gov int mil net org tur ',
        'at':' ac co gv or ',
        'au':' asn com csiro edu gov id net org ',
        'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
        'bb':' biz co com edu gov info net org store tv ',
        'bh':' biz cc com edu gov info net org ',
        'bn':' com edu gov net org ',
        'bo':' com edu gob gov int mil net org tv ',
        'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
        'bs':' com edu gov net org ',
        'bz':' du et om ov rg ',
        'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
        'ck':' biz co edu gen gov info net org ',
        'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
        'co':' com edu gov mil net nom org ',
        'cr':' ac c co ed fi go or sa ',
        'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
        'do':' art com edu gob gov mil net org sld web ',
        'dz':' art asso com edu gov net org pol ',
        'ec':' com edu fin gov info med mil net org pro ',
        'eg':' com edu eun gov mil name net org sci ',
        'er':' com edu gov ind mil net org rochest w ',
        'es':' com edu gob nom org ',
        'et':' biz com edu gov info name net org ',
        'fj':' ac biz com info mil name net org pro ',
        'fk':' ac co gov net nom org ',
        'fr':' asso com f gouv nom prd presse tm ',
        'gg':' co net org ',
        'gh':' com edu gov mil org ',
        'gn':' ac com gov net org ',
        'gr':' com edu gov mil net org ',
        'gt':' com edu gob ind mil net org ',
        'gu':' com edu gov net org ',
        'hk':' com edu gov idv net org ',
        'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
        'id':' ac co go mil net or sch web ',
        'il':' ac co gov idf k12 muni net org ',
        'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
        'iq':' com edu gov i mil net org ',
        'ir':' ac co dnssec gov i id net org sch ',
        'it':' edu gov ',
        'je':' co net org ',
        'jo':' com edu gov mil name net org sch ',
        'jp':' ac ad co ed go gr lg ne or ',
        'ke':' ac co go info me mobi ne or sc ',
        'kh':' com edu gov mil net org per ',
        'ki':' biz com de edu gov info mob net org tel ',
        'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
        'kn':' edu gov net org ',
        'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
        'kw':' com edu gov net org ',
        'ky':' com edu gov net org ',
        'kz':' com edu gov mil net org ',
        'lb':' com edu gov net org ',
        'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
        'lr':' com edu gov net org ',
        'lv':' asn com conf edu gov id mil net org ',
        'ly':' com edu gov id med net org plc sch ',
        'ma':' ac co gov m net org press ',
        'mc':' asso tm ',
        'me':' ac co edu gov its net org priv ',
        'mg':' com edu gov mil nom org prd tm ',
        'mk':' com edu gov inf name net org pro ',
        'ml':' com edu gov net org presse ',
        'mn':' edu gov org ',
        'mo':' com edu gov net org ',
        'mt':' com edu gov net org ',
        'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
        'mw':' ac co com coop edu gov int museum net org ',
        'mx':' com edu gob net org ',
        'my':' com edu gov mil name net org sch ',
        'nf':' arts com firm info net other per rec store web ',
        'ng':' biz com edu gov mil mobi name net org sch ',
        'ni':' ac co com edu gob mil net nom org ',
        'np':' com edu gov mil net org ',
        'nr':' biz com edu gov info net org ',
        'om':' ac biz co com edu gov med mil museum net org pro sch ',
        'pe':' com edu gob mil net nom org sld ',
        'ph':' com edu gov i mil net ngo org ',
        'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
        'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
        'pr':' ac biz com edu est gov info isla name net org pro prof ',
        'ps':' com edu gov net org plo sec ',
        'pw':' belau co ed go ne or ',
        'ro':' arts com firm info nom nt org rec store tm www ',
        'rs':' ac co edu gov in org ',
        'sb':' com edu gov net org ',
        'sc':' com edu gov net org ',
        'sh':' co com edu gov net nom org ',
        'sl':' com edu gov net org ',
        'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
        'sv':' com edu gob org red ',
        'sz':' ac co org ',
        'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
        'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
        'tw':' club com ebiz edu game gov idv mil net org ',
        'mu':' ac co com gov net or org ',
        'mz':' ac co edu gov org ',
        'na':' co com ',
        'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
        'pa':' abo ac com edu gob ing med net nom org sld ',
        'pt':' com edu gov int net nome org publ ',
        'py':' com edu gov mil net org ',
        'qa':' com edu gov mil net org ',
        're':' asso com nom ',
        'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
        'rw':' ac co com edu gouv gov int mil net ',
        'sa':' com edu gov med net org pub sch ',
        'sd':' com edu gov info med net org tv ',
        'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
        'sg':' com edu gov idn net org per ',
        'sn':' art com edu gouv org perso univ ',
        'sy':' com edu gov mil net news org ',
        'th':' ac co go in mi net or ',
        'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
        'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
        'tz':' ac co go ne or ',
        'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
        'ug':' ac co go ne or org sc ',
        'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
        'us':' dni fed isa kids nsn ',
        'uy':' com edu gub mil net org ',
        've':' co com edu gob info mil net org web ',
        'vi':' co com k12 net org ',
        'vn':' ac biz com edu gov health info int name net org pro ',
        'ye':' co com gov ltd me net org plc ',
        'yu':' ac co edu gov org ',
        'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
        'zm':' ac co com edu gov net org sch ',
        // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
        'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
        'net': 'gb jp se uk ',
        'org': 'ae',
        'de': 'com '
      },
      // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
      // in both performance and memory footprint. No initialization required.
      // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
      // Following methods use lastIndexOf() rather than array.split() in order
      // to avoid any memory allocations.
      has: function(domain) {
        var tldOffset = domain.lastIndexOf('.');
        if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
          return false;
        }
        var sldOffset = domain.lastIndexOf('.', tldOffset-1);
        if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
          return false;
        }
        var sldList = SLD.list[domain.slice(tldOffset+1)];
        if (!sldList) {
          return false;
        }
        return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
      },
      is: function(domain) {
        var tldOffset = domain.lastIndexOf('.');
        if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
          return false;
        }
        var sldOffset = domain.lastIndexOf('.', tldOffset-1);
        if (sldOffset >= 0) {
          return false;
        }
        var sldList = SLD.list[domain.slice(tldOffset+1)];
        if (!sldList) {
          return false;
        }
        return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
      },
      get: function(domain) {
        var tldOffset = domain.lastIndexOf('.');
        if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
          return null;
        }
        var sldOffset = domain.lastIndexOf('.', tldOffset-1);
        if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
          return null;
        }
        var sldList = SLD.list[domain.slice(tldOffset+1)];
        if (!sldList) {
          return null;
        }
        if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
          return null;
        }
        return domain.slice(sldOffset+1);
      },
      noConflict: function(){
        if (root.SecondLevelDomains === this) {
          root.SecondLevelDomains = _SecondLevelDomains;
        }
        return this;
      }
    };
  
    return SLD;
  }));
  

});

;/*!node_modules/urijs/src/URI.js*/
define('node_modules/urijs/src/URI', function(require, exports, module) {

  /*!
   * URI.js - Mutating URLs
   *
   * Version: 1.18.12
   *
   * Author: Rodney Rehm
   * Web: http://medialize.github.io/URI.js/
   *
   * Licensed under
   *   MIT License http://www.opensource.org/licenses/mit-license
   *
   */
  (function (root, factory) {
    'use strict';
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (typeof module === 'object' && module.exports) {
      // Node
      module.exports = factory(require('node_modules/urijs/src/punycode'), require('node_modules/urijs/src/IPv6'), require('node_modules/urijs/src/SecondLevelDomains'));
    } else if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
    } else {
      // Browser globals (root is window)
      root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
    }
  }(this, function (punycode, IPv6, SLD, root) {
    'use strict';
    /*global location, escape, unescape */
    // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
    /*jshint camelcase: false */
  
    // save current URI variable, if any
    var _URI = root && root.URI;
  
    function URI(url, base) {
      var _urlSupplied = arguments.length >= 1;
      var _baseSupplied = arguments.length >= 2;
  
      // Allow instantiation without the 'new' keyword
      if (!(this instanceof URI)) {
        if (_urlSupplied) {
          if (_baseSupplied) {
            return new URI(url, base);
          }
  
          return new URI(url);
        }
  
        return new URI();
      }
  
      if (url === undefined) {
        if (_urlSupplied) {
          throw new TypeError('undefined is not a valid argument for URI');
        }
  
        if (typeof location !== 'undefined') {
          url = location.href + '';
        } else {
          url = '';
        }
      }
  
      if (url === null) {
        if (_urlSupplied) {
          throw new TypeError('null is not a valid argument for URI');
        }
      }
  
      this.href(url);
  
      // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
      if (base !== undefined) {
        return this.absoluteTo(base);
      }
  
      return this;
    }
  
    function isInteger(value) {
      return /^[0-9]+$/.test(value);
    }
  
    URI.version = '1.18.12';
  
    var p = URI.prototype;
    var hasOwn = Object.prototype.hasOwnProperty;
  
    function escapeRegEx(string) {
      // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
      return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
  
    function getType(value) {
      // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
      if (value === undefined) {
        return 'Undefined';
      }
  
      return String(Object.prototype.toString.call(value)).slice(8, -1);
    }
  
    function isArray(obj) {
      return getType(obj) === 'Array';
    }
  
    function filterArrayValues(data, value) {
      var lookup = {};
      var i, length;
  
      if (getType(value) === 'RegExp') {
        lookup = null;
      } else if (isArray(value)) {
        for (i = 0, length = value.length; i < length; i++) {
          lookup[value[i]] = true;
        }
      } else {
        lookup[value] = true;
      }
  
      for (i = 0, length = data.length; i < length; i++) {
        /*jshint laxbreak: true */
        var _match = lookup && lookup[data[i]] !== undefined
          || !lookup && value.test(data[i]);
        /*jshint laxbreak: false */
        if (_match) {
          data.splice(i, 1);
          length--;
          i--;
        }
      }
  
      return data;
    }
  
    function arrayContains(list, value) {
      var i, length;
  
      // value may be string, number, array, regexp
      if (isArray(value)) {
        // Note: this can be optimized to O(n) (instead of current O(m * n))
        for (i = 0, length = value.length; i < length; i++) {
          if (!arrayContains(list, value[i])) {
            return false;
          }
        }
  
        return true;
      }
  
      var _type = getType(value);
      for (i = 0, length = list.length; i < length; i++) {
        if (_type === 'RegExp') {
          if (typeof list[i] === 'string' && list[i].match(value)) {
            return true;
          }
        } else if (list[i] === value) {
          return true;
        }
      }
  
      return false;
    }
  
    function arraysEqual(one, two) {
      if (!isArray(one) || !isArray(two)) {
        return false;
      }
  
      // arrays can't be equal if they have different amount of content
      if (one.length !== two.length) {
        return false;
      }
  
      one.sort();
      two.sort();
  
      for (var i = 0, l = one.length; i < l; i++) {
        if (one[i] !== two[i]) {
          return false;
        }
      }
  
      return true;
    }
  
    function trimSlashes(text) {
      var trim_expression = /^\/+|\/+$/g;
      return text.replace(trim_expression, '');
    }
  
    URI._parts = function() {
      return {
        protocol: null,
        username: null,
        password: null,
        hostname: null,
        urn: null,
        port: null,
        path: null,
        query: null,
        fragment: null,
        // state
        duplicateQueryParameters: URI.duplicateQueryParameters,
        escapeQuerySpace: URI.escapeQuerySpace
      };
    };
    // state: allow duplicate query parameters (a=1&a=1)
    URI.duplicateQueryParameters = false;
    // state: replaces + with %20 (space in query strings)
    URI.escapeQuerySpace = true;
    // static properties
    URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
    URI.idn_expression = /[^a-z0-9\._-]/i;
    URI.punycode_expression = /(xn--)/i;
    // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
    URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    // credits to Rich Brown
    // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
    // specification: http://www.ietf.org/rfc/rfc4291.txt
    URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    // expression used is "gruber revised" (@gruber v2) determined to be the
    // best solution in a regex-golf we did a couple of ages ago at
    // * http://mathiasbynens.be/demo/url-regex
    // * http://rodneyrehm.de/t/url-regex.html
    URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
    URI.findUri = {
      // valid "scheme://" or "www."
      start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
      // everything up to the next whitespace
      end: /[\s\r\n]|$/,
      // trim trailing punctuation captured by end RegExp
      trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
      // balanced parens inclusion (), [], {}, <>
      parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g,
    };
    // http://www.iana.org/assignments/uri-schemes.html
    // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
    URI.defaultPorts = {
      http: '80',
      https: '443',
      ftp: '21',
      gopher: '70',
      ws: '80',
      wss: '443'
    };
    // list of protocols which always require a hostname
    URI.hostProtocols = [
      'http',
      'https'
    ];
  
    // allowed hostname characters according to RFC 3986
    // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
    // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _
    URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
    // map DOM Elements to their URI attribute
    URI.domAttributes = {
      'a': 'href',
      'blockquote': 'cite',
      'link': 'href',
      'base': 'href',
      'script': 'src',
      'form': 'action',
      'img': 'src',
      'area': 'href',
      'iframe': 'src',
      'embed': 'src',
      'source': 'src',
      'track': 'src',
      'input': 'src', // but only if type="image"
      'audio': 'src',
      'video': 'src'
    };
    URI.getDomAttribute = function(node) {
      if (!node || !node.nodeName) {
        return undefined;
      }
  
      var nodeName = node.nodeName.toLowerCase();
      // <input> should only expose src for type="image"
      if (nodeName === 'input' && node.type !== 'image') {
        return undefined;
      }
  
      return URI.domAttributes[nodeName];
    };
  
    function escapeForDumbFirefox36(value) {
      // https://github.com/medialize/URI.js/issues/91
      return escape(value);
    }
  
    // encoding / decoding according to RFC3986
    function strictEncodeURIComponent(string) {
      // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
      return encodeURIComponent(string)
        .replace(/[!'()*]/g, escapeForDumbFirefox36)
        .replace(/\*/g, '%2A');
    }
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
    URI.iso8859 = function() {
      URI.encode = escape;
      URI.decode = unescape;
    };
    URI.unicode = function() {
      URI.encode = strictEncodeURIComponent;
      URI.decode = decodeURIComponent;
    };
    URI.characters = {
      pathname: {
        encode: {
          // RFC3986 2.1: For consistency, URI producers and normalizers should
          // use uppercase hexadecimal digits for all percent-encodings.
          expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
          map: {
            // -._~!'()*
            '%24': '$',
            '%26': '&',
            '%2B': '+',
            '%2C': ',',
            '%3B': ';',
            '%3D': '=',
            '%3A': ':',
            '%40': '@'
          }
        },
        decode: {
          expression: /[\/\?#]/g,
          map: {
            '/': '%2F',
            '?': '%3F',
            '#': '%23'
          }
        }
      },
      reserved: {
        encode: {
          // RFC3986 2.1: For consistency, URI producers and normalizers should
          // use uppercase hexadecimal digits for all percent-encodings.
          expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
          map: {
            // gen-delims
            '%3A': ':',
            '%2F': '/',
            '%3F': '?',
            '%23': '#',
            '%5B': '[',
            '%5D': ']',
            '%40': '@',
            // sub-delims
            '%21': '!',
            '%24': '$',
            '%26': '&',
            '%27': '\'',
            '%28': '(',
            '%29': ')',
            '%2A': '*',
            '%2B': '+',
            '%2C': ',',
            '%3B': ';',
            '%3D': '='
          }
        }
      },
      urnpath: {
        // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
        // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
        // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
        // note that the colon character is not featured in the encoding map; this is because URI.js
        // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
        // should not appear unencoded in a segment itself.
        // See also the note above about RFC3986 and capitalalized hex digits.
        encode: {
          expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
          map: {
            '%21': '!',
            '%24': '$',
            '%27': '\'',
            '%28': '(',
            '%29': ')',
            '%2A': '*',
            '%2B': '+',
            '%2C': ',',
            '%3B': ';',
            '%3D': '=',
            '%40': '@'
          }
        },
        // These characters are the characters called out by RFC2141 as "reserved" characters that
        // should never appear in a URN, plus the colon character (see note above).
        decode: {
          expression: /[\/\?#:]/g,
          map: {
            '/': '%2F',
            '?': '%3F',
            '#': '%23',
            ':': '%3A'
          }
        }
      }
    };
    URI.encodeQuery = function(string, escapeQuerySpace) {
      var escaped = URI.encode(string + '');
      if (escapeQuerySpace === undefined) {
        escapeQuerySpace = URI.escapeQuerySpace;
      }
  
      return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
    };
    URI.decodeQuery = function(string, escapeQuerySpace) {
      string += '';
      if (escapeQuerySpace === undefined) {
        escapeQuerySpace = URI.escapeQuerySpace;
      }
  
      try {
        return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
      } catch(e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
    // generate encode/decode path functions
    var _parts = {'encode':'encode', 'decode':'decode'};
    var _part;
    var generateAccessor = function(_group, _part) {
      return function(string) {
        try {
          return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
            return URI.characters[_group][_part].map[c];
          });
        } catch (e) {
          // we're not going to mess with weird encodings,
          // give up and return the undecoded original string
          // see https://github.com/medialize/URI.js/issues/87
          // see https://github.com/medialize/URI.js/issues/92
          return string;
        }
      };
    };
  
    for (_part in _parts) {
      URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
      URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
    }
  
    var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
      return function(string) {
        // Why pass in names of functions, rather than the function objects themselves? The
        // definitions of some functions (but in particular, URI.decode) will occasionally change due
        // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
        // that the functions we use here are "fresh".
        var actualCodingFunc;
        if (!_innerCodingFuncName) {
          actualCodingFunc = URI[_codingFuncName];
        } else {
          actualCodingFunc = function(string) {
            return URI[_codingFuncName](URI[_innerCodingFuncName](string));
          };
        }
  
        var segments = (string + '').split(_sep);
  
        for (var i = 0, length = segments.length; i < length; i++) {
          segments[i] = actualCodingFunc(segments[i]);
        }
  
        return segments.join(_sep);
      };
    };
  
    // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
    URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
    URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
    URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
    URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
  
    URI.encodeReserved = generateAccessor('reserved', 'encode');
  
    URI.parse = function(string, parts) {
      var pos;
      if (!parts) {
        parts = {};
      }
      // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
  
      // extract fragment
      pos = string.indexOf('#');
      if (pos > -1) {
        // escaping?
        parts.fragment = string.substring(pos + 1) || null;
        string = string.substring(0, pos);
      }
  
      // extract query
      pos = string.indexOf('?');
      if (pos > -1) {
        // escaping?
        parts.query = string.substring(pos + 1) || null;
        string = string.substring(0, pos);
      }
  
      // extract protocol
      if (string.substring(0, 2) === '//') {
        // relative-scheme
        parts.protocol = null;
        string = string.substring(2);
        // extract "user:pass@host:port"
        string = URI.parseAuthority(string, parts);
      } else {
        pos = string.indexOf(':');
        if (pos > -1) {
          parts.protocol = string.substring(0, pos) || null;
          if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
            // : may be within the path
            parts.protocol = undefined;
          } else if (string.substring(pos + 1, pos + 3) === '//') {
            string = string.substring(pos + 3);
  
            // extract "user:pass@host:port"
            string = URI.parseAuthority(string, parts);
          } else {
            string = string.substring(pos + 1);
            parts.urn = true;
          }
        }
      }
  
      // what's left must be the path
      parts.path = string;
  
      // and we're done
      return parts;
    };
    URI.parseHost = function(string, parts) {
      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      // https://github.com/medialize/URI.js/pull/233
      string = string.replace(/\\/g, '/');
  
      // extract host:port
      var pos = string.indexOf('/');
      var bracketPos;
      var t;
  
      if (pos === -1) {
        pos = string.length;
      }
  
      if (string.charAt(0) === '[') {
        // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
        // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
        // IPv6+port in the format [2001:db8::1]:80 (for the time being)
        bracketPos = string.indexOf(']');
        parts.hostname = string.substring(1, bracketPos) || null;
        parts.port = string.substring(bracketPos + 2, pos) || null;
        if (parts.port === '/') {
          parts.port = null;
        }
      } else {
        var firstColon = string.indexOf(':');
        var firstSlash = string.indexOf('/');
        var nextColon = string.indexOf(':', firstColon + 1);
        if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
          // IPv6 host contains multiple colons - but no port
          // this notation is actually not allowed by RFC 3986, but we're a liberal parser
          parts.hostname = string.substring(0, pos) || null;
          parts.port = null;
        } else {
          t = string.substring(0, pos).split(':');
          parts.hostname = t[0] || null;
          parts.port = t[1] || null;
        }
      }
  
      if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
        pos++;
        string = '/' + string;
      }
  
      URI.ensureValidHostname(parts.hostname, parts.protocol);
  
      if (parts.port) {
        URI.ensureValidPort(parts.port);
      }
  
      return string.substring(pos) || '/';
    };
    URI.parseAuthority = function(string, parts) {
      string = URI.parseUserinfo(string, parts);
      return URI.parseHost(string, parts);
    };
    URI.parseUserinfo = function(string, parts) {
      // extract username:password
      var firstSlash = string.indexOf('/');
      var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
      var t;
  
      // authority@ must come before /path
      if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
        t = string.substring(0, pos).split(':');
        parts.username = t[0] ? URI.decode(t[0]) : null;
        t.shift();
        parts.password = t[0] ? URI.decode(t.join(':')) : null;
        string = string.substring(pos + 1);
      } else {
        parts.username = null;
        parts.password = null;
      }
  
      return string;
    };
    URI.parseQuery = function(string, escapeQuerySpace) {
      if (!string) {
        return {};
      }
  
      // throw out the funky business - "?"[name"="value"&"]+
      string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');
  
      if (!string) {
        return {};
      }
  
      var items = {};
      var splits = string.split('&');
      var length = splits.length;
      var v, name, value;
  
      for (var i = 0; i < length; i++) {
        v = splits[i].split('=');
        name = URI.decodeQuery(v.shift(), escapeQuerySpace);
        // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
        value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;
  
        if (hasOwn.call(items, name)) {
          if (typeof items[name] === 'string' || items[name] === null) {
            items[name] = [items[name]];
          }
  
          items[name].push(value);
        } else {
          items[name] = value;
        }
      }
  
      return items;
    };
  
    URI.build = function(parts) {
      var t = '';
  
      if (parts.protocol) {
        t += parts.protocol + ':';
      }
  
      if (!parts.urn && (t || parts.hostname)) {
        t += '//';
      }
  
      t += (URI.buildAuthority(parts) || '');
  
      if (typeof parts.path === 'string') {
        if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
          t += '/';
        }
  
        t += parts.path;
      }
  
      if (typeof parts.query === 'string' && parts.query) {
        t += '?' + parts.query;
      }
  
      if (typeof parts.fragment === 'string' && parts.fragment) {
        t += '#' + parts.fragment;
      }
      return t;
    };
    URI.buildHost = function(parts) {
      var t = '';
  
      if (!parts.hostname) {
        return '';
      } else if (URI.ip6_expression.test(parts.hostname)) {
        t += '[' + parts.hostname + ']';
      } else {
        t += parts.hostname;
      }
  
      if (parts.port) {
        t += ':' + parts.port;
      }
  
      return t;
    };
    URI.buildAuthority = function(parts) {
      return URI.buildUserinfo(parts) + URI.buildHost(parts);
    };
    URI.buildUserinfo = function(parts) {
      var t = '';
  
      if (parts.username) {
        t += URI.encode(parts.username);
      }
  
      if (parts.password) {
        t += ':' + URI.encode(parts.password);
      }
  
      if (t) {
        t += '@';
      }
  
      return t;
    };
    URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
      // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
      // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
      // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
      // URI.js treats the query string as being application/x-www-form-urlencoded
      // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
  
      var t = '';
      var unique, key, i, length;
      for (key in data) {
        if (hasOwn.call(data, key) && key) {
          if (isArray(data[key])) {
            unique = {};
            for (i = 0, length = data[key].length; i < length; i++) {
              if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
                t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                if (duplicateQueryParameters !== true) {
                  unique[data[key][i] + ''] = true;
                }
              }
            }
          } else if (data[key] !== undefined) {
            t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
          }
        }
      }
  
      return t.substring(1);
    };
    URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
      // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
      // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
      return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
    };
  
    URI.addQuery = function(data, name, value) {
      if (typeof name === 'object') {
        for (var key in name) {
          if (hasOwn.call(name, key)) {
            URI.addQuery(data, key, name[key]);
          }
        }
      } else if (typeof name === 'string') {
        if (data[name] === undefined) {
          data[name] = value;
          return;
        } else if (typeof data[name] === 'string') {
          data[name] = [data[name]];
        }
  
        if (!isArray(value)) {
          value = [value];
        }
  
        data[name] = (data[name] || []).concat(value);
      } else {
        throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
      }
    };
    URI.removeQuery = function(data, name, value) {
      var i, length, key;
  
      if (isArray(name)) {
        for (i = 0, length = name.length; i < length; i++) {
          data[name[i]] = undefined;
        }
      } else if (getType(name) === 'RegExp') {
        for (key in data) {
          if (name.test(key)) {
            data[key] = undefined;
          }
        }
      } else if (typeof name === 'object') {
        for (key in name) {
          if (hasOwn.call(name, key)) {
            URI.removeQuery(data, key, name[key]);
          }
        }
      } else if (typeof name === 'string') {
        if (value !== undefined) {
          if (getType(value) === 'RegExp') {
            if (!isArray(data[name]) && value.test(data[name])) {
              data[name] = undefined;
            } else {
              data[name] = filterArrayValues(data[name], value);
            }
          } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
            data[name] = undefined;
          } else if (isArray(data[name])) {
            data[name] = filterArrayValues(data[name], value);
          }
        } else {
          data[name] = undefined;
        }
      } else {
        throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
      }
    };
    URI.hasQuery = function(data, name, value, withinArray) {
      switch (getType(name)) {
        case 'String':
          // Nothing to do here
          break;
  
        case 'RegExp':
          for (var key in data) {
            if (hasOwn.call(data, key)) {
              if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
                return true;
              }
            }
          }
  
          return false;
  
        case 'Object':
          for (var _key in name) {
            if (hasOwn.call(name, _key)) {
              if (!URI.hasQuery(data, _key, name[_key])) {
                return false;
              }
            }
          }
  
          return true;
  
        default:
          throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
      }
  
      switch (getType(value)) {
        case 'Undefined':
          // true if exists (but may be empty)
          return name in data; // data[name] !== undefined;
  
        case 'Boolean':
          // true if exists and non-empty
          var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
          return value === _booly;
  
        case 'Function':
          // allow complex comparison
          return !!value(data[name], name, data);
  
        case 'Array':
          if (!isArray(data[name])) {
            return false;
          }
  
          var op = withinArray ? arrayContains : arraysEqual;
          return op(data[name], value);
  
        case 'RegExp':
          if (!isArray(data[name])) {
            return Boolean(data[name] && data[name].match(value));
          }
  
          if (!withinArray) {
            return false;
          }
  
          return arrayContains(data[name], value);
  
        case 'Number':
          value = String(value);
          /* falls through */
        case 'String':
          if (!isArray(data[name])) {
            return data[name] === value;
          }
  
          if (!withinArray) {
            return false;
          }
  
          return arrayContains(data[name], value);
  
        default:
          throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
      }
    };
  
  
    URI.joinPaths = function() {
      var input = [];
      var segments = [];
      var nonEmptySegments = 0;
  
      for (var i = 0; i < arguments.length; i++) {
        var url = new URI(arguments[i]);
        input.push(url);
        var _segments = url.segment();
        for (var s = 0; s < _segments.length; s++) {
          if (typeof _segments[s] === 'string') {
            segments.push(_segments[s]);
          }
  
          if (_segments[s]) {
            nonEmptySegments++;
          }
        }
      }
  
      if (!segments.length || !nonEmptySegments) {
        return new URI('');
      }
  
      var uri = new URI('').segment(segments);
  
      if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
        uri.path('/' + uri.path());
      }
  
      return uri.normalize();
    };
  
    URI.commonPath = function(one, two) {
      var length = Math.min(one.length, two.length);
      var pos;
  
      // find first non-matching character
      for (pos = 0; pos < length; pos++) {
        if (one.charAt(pos) !== two.charAt(pos)) {
          pos--;
          break;
        }
      }
  
      if (pos < 1) {
        return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
      }
  
      // revert to last /
      if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
        pos = one.substring(0, pos).lastIndexOf('/');
      }
  
      return one.substring(0, pos + 1);
    };
  
    URI.withinString = function(string, callback, options) {
      options || (options = {});
      var _start = options.start || URI.findUri.start;
      var _end = options.end || URI.findUri.end;
      var _trim = options.trim || URI.findUri.trim;
      var _parens = options.parens || URI.findUri.parens;
      var _attributeOpen = /[a-z0-9-]=["']?$/i;
  
      _start.lastIndex = 0;
      while (true) {
        var match = _start.exec(string);
        if (!match) {
          break;
        }
  
        var start = match.index;
        if (options.ignoreHtml) {
          // attribut(e=["']?$)
          var attributeOpen = string.slice(Math.max(start - 3, 0), start);
          if (attributeOpen && _attributeOpen.test(attributeOpen)) {
            continue;
          }
        }
  
        var end = start + string.slice(start).search(_end);
        var slice = string.slice(start, end);
        // make sure we include well balanced parens
        var parensEnd = -1;
        while (true) {
          var parensMatch = _parens.exec(slice);
          if (!parensMatch) {
            break;
          }
  
          var parensMatchEnd = parensMatch.index + parensMatch[0].length;
          parensEnd = Math.max(parensEnd, parensMatchEnd);
        }
  
        if (parensEnd > -1) {
          slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
        } else {
          slice = slice.replace(_trim, '');
        }
  
        if (slice.length <= match[0].length) {
          // the extract only contains the starting marker of a URI,
          // e.g. "www" or "http://"
          continue;
        }
  
        if (options.ignore && options.ignore.test(slice)) {
          continue;
        }
  
        end = start + slice.length;
        var result = callback(slice, start, end, string);
        if (result === undefined) {
          _start.lastIndex = end;
          continue;
        }
  
        result = String(result);
        string = string.slice(0, start) + result + string.slice(end);
        _start.lastIndex = start + result.length;
      }
  
      _start.lastIndex = 0;
      return string;
    };
  
    URI.ensureValidHostname = function(v, protocol) {
      // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
      // they are not part of DNS and therefore ignored by URI.js
  
      var hasHostname = !!v; // not null and not an empty string
      var hasProtocol = !!protocol;
      var rejectEmptyHostname = false;
  
      if (hasProtocol) {
        rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
      }
  
      if (rejectEmptyHostname && !hasHostname) {
        throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
      } else if (v && v.match(URI.invalid_hostname_characters)) {
        // test punycode
        if (!punycode) {
          throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
        }
        if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
          throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
        }
      }
    };
  
    URI.ensureValidPort = function (v) {
      if (!v) {
        return;
      }
  
      var port = Number(v);
      if (isInteger(port) && (port > 0) && (port < 65536)) {
        return;
      }
  
      throw new TypeError('Port "' + v + '" is not a valid port');
    };
  
    // noConflict
    URI.noConflict = function(removeAll) {
      if (removeAll) {
        var unconflicted = {
          URI: this.noConflict()
        };
  
        if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
          unconflicted.URITemplate = root.URITemplate.noConflict();
        }
  
        if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
          unconflicted.IPv6 = root.IPv6.noConflict();
        }
  
        if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
          unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
        }
  
        return unconflicted;
      } else if (root.URI === this) {
        root.URI = _URI;
      }
  
      return this;
    };
  
    p.build = function(deferBuild) {
      if (deferBuild === true) {
        this._deferred_build = true;
      } else if (deferBuild === undefined || this._deferred_build) {
        this._string = URI.build(this._parts);
        this._deferred_build = false;
      }
  
      return this;
    };
  
    p.clone = function() {
      return new URI(this);
    };
  
    p.valueOf = p.toString = function() {
      return this.build(false)._string;
    };
  
  
    function generateSimpleAccessor(_part){
      return function(v, build) {
        if (v === undefined) {
          return this._parts[_part] || '';
        } else {
          this._parts[_part] = v || null;
          this.build(!build);
          return this;
        }
      };
    }
  
    function generatePrefixAccessor(_part, _key){
      return function(v, build) {
        if (v === undefined) {
          return this._parts[_part] || '';
        } else {
          if (v !== null) {
            v = v + '';
            if (v.charAt(0) === _key) {
              v = v.substring(1);
            }
          }
  
          this._parts[_part] = v;
          this.build(!build);
          return this;
        }
      };
    }
  
    p.protocol = generateSimpleAccessor('protocol');
    p.username = generateSimpleAccessor('username');
    p.password = generateSimpleAccessor('password');
    p.hostname = generateSimpleAccessor('hostname');
    p.port = generateSimpleAccessor('port');
    p.query = generatePrefixAccessor('query', '?');
    p.fragment = generatePrefixAccessor('fragment', '#');
  
    p.search = function(v, build) {
      var t = this.query(v, build);
      return typeof t === 'string' && t.length ? ('?' + t) : t;
    };
    p.hash = function(v, build) {
      var t = this.fragment(v, build);
      return typeof t === 'string' && t.length ? ('#' + t) : t;
    };
  
    p.pathname = function(v, build) {
      if (v === undefined || v === true) {
        var res = this._parts.path || (this._parts.hostname ? '/' : '');
        return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
      } else {
        if (this._parts.urn) {
          this._parts.path = v ? URI.recodeUrnPath(v) : '';
        } else {
          this._parts.path = v ? URI.recodePath(v) : '/';
        }
        this.build(!build);
        return this;
      }
    };
    p.path = p.pathname;
    p.href = function(href, build) {
      var key;
  
      if (href === undefined) {
        return this.toString();
      }
  
      this._string = '';
      this._parts = URI._parts();
  
      var _URI = href instanceof URI;
      var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
      if (href.nodeName) {
        var attribute = URI.getDomAttribute(href);
        href = href[attribute] || '';
        _object = false;
      }
  
      // window.location is reported to be an object, but it's not the sort
      // of object we're looking for:
      // * location.protocol ends with a colon
      // * location.query != object.search
      // * location.hash != object.fragment
      // simply serializing the unknown object should do the trick
      // (for location, not for everything...)
      if (!_URI && _object && href.pathname !== undefined) {
        href = href.toString();
      }
  
      if (typeof href === 'string' || href instanceof String) {
        this._parts = URI.parse(String(href), this._parts);
      } else if (_URI || _object) {
        var src = _URI ? href._parts : href;
        for (key in src) {
          if (hasOwn.call(this._parts, key)) {
            this._parts[key] = src[key];
          }
        }
      } else {
        throw new TypeError('invalid input');
      }
  
      this.build(!build);
      return this;
    };
  
    // identification accessors
    p.is = function(what) {
      var ip = false;
      var ip4 = false;
      var ip6 = false;
      var name = false;
      var sld = false;
      var idn = false;
      var punycode = false;
      var relative = !this._parts.urn;
  
      if (this._parts.hostname) {
        relative = false;
        ip4 = URI.ip4_expression.test(this._parts.hostname);
        ip6 = URI.ip6_expression.test(this._parts.hostname);
        ip = ip4 || ip6;
        name = !ip;
        sld = name && SLD && SLD.has(this._parts.hostname);
        idn = name && URI.idn_expression.test(this._parts.hostname);
        punycode = name && URI.punycode_expression.test(this._parts.hostname);
      }
  
      switch (what.toLowerCase()) {
        case 'relative':
          return relative;
  
        case 'absolute':
          return !relative;
  
        // hostname identification
        case 'domain':
        case 'name':
          return name;
  
        case 'sld':
          return sld;
  
        case 'ip':
          return ip;
  
        case 'ip4':
        case 'ipv4':
        case 'inet4':
          return ip4;
  
        case 'ip6':
        case 'ipv6':
        case 'inet6':
          return ip6;
  
        case 'idn':
          return idn;
  
        case 'url':
          return !this._parts.urn;
  
        case 'urn':
          return !!this._parts.urn;
  
        case 'punycode':
          return punycode;
      }
  
      return null;
    };
  
    // component specific input validation
    var _protocol = p.protocol;
    var _port = p.port;
    var _hostname = p.hostname;
  
    p.protocol = function(v, build) {
      if (v !== undefined) {
        if (v) {
          // accept trailing ://
          v = v.replace(/:(\/\/)?$/, '');
  
          if (!v.match(URI.protocol_expression)) {
            throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
          }
        }
      }
      return _protocol.call(this, v, build);
    };
    p.scheme = p.protocol;
    p.port = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v !== undefined) {
        if (v === 0) {
          v = null;
        }
  
        if (v) {
          v += '';
          if (v.charAt(0) === ':') {
            v = v.substring(1);
          }
  
          URI.ensureValidPort(v);
        }
      }
      return _port.call(this, v, build);
    };
    p.hostname = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v !== undefined) {
        var x = {};
        var res = URI.parseHost(v, x);
        if (res !== '/') {
          throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
        }
  
        v = x.hostname;
        URI.ensureValidHostname(v, this._parts.protocol);
      }
      return _hostname.call(this, v, build);
    };
  
    // compound accessors
    p.origin = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v === undefined) {
        var protocol = this.protocol();
        var authority = this.authority();
        if (!authority) {
          return '';
        }
  
        return (protocol ? protocol + '://' : '') + this.authority();
      } else {
        var origin = URI(v);
        this
          .protocol(origin.protocol())
          .authority(origin.authority())
          .build(!build);
        return this;
      }
    };
    p.host = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v === undefined) {
        return this._parts.hostname ? URI.buildHost(this._parts) : '';
      } else {
        var res = URI.parseHost(v, this._parts);
        if (res !== '/') {
          throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
        }
  
        this.build(!build);
        return this;
      }
    };
    p.authority = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v === undefined) {
        return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
      } else {
        var res = URI.parseAuthority(v, this._parts);
        if (res !== '/') {
          throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
        }
  
        this.build(!build);
        return this;
      }
    };
    p.userinfo = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v === undefined) {
        var t = URI.buildUserinfo(this._parts);
        return t ? t.substring(0, t.length -1) : t;
      } else {
        if (v[v.length-1] !== '@') {
          v += '@';
        }
  
        URI.parseUserinfo(v, this._parts);
        this.build(!build);
        return this;
      }
    };
    p.resource = function(v, build) {
      var parts;
  
      if (v === undefined) {
        return this.path() + this.search() + this.hash();
      }
  
      parts = URI.parse(v);
      this._parts.path = parts.path;
      this._parts.query = parts.query;
      this._parts.fragment = parts.fragment;
      this.build(!build);
      return this;
    };
  
    // fraction accessors
    p.subdomain = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      // convenience, return "www" from "www.example.org"
      if (v === undefined) {
        if (!this._parts.hostname || this.is('IP')) {
          return '';
        }
  
        // grab domain and add another segment
        var end = this._parts.hostname.length - this.domain().length - 1;
        return this._parts.hostname.substring(0, end) || '';
      } else {
        var e = this._parts.hostname.length - this.domain().length;
        var sub = this._parts.hostname.substring(0, e);
        var replace = new RegExp('^' + escapeRegEx(sub));
  
        if (v && v.charAt(v.length - 1) !== '.') {
          v += '.';
        }
  
        if (v.indexOf(':') !== -1) {
          throw new TypeError('Domains cannot contain colons');
        }
  
        if (v) {
          URI.ensureValidHostname(v, this._parts.protocol);
        }
  
        this._parts.hostname = this._parts.hostname.replace(replace, v);
        this.build(!build);
        return this;
      }
    };
    p.domain = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (typeof v === 'boolean') {
        build = v;
        v = undefined;
      }
  
      // convenience, return "example.org" from "www.example.org"
      if (v === undefined) {
        if (!this._parts.hostname || this.is('IP')) {
          return '';
        }
  
        // if hostname consists of 1 or 2 segments, it must be the domain
        var t = this._parts.hostname.match(/\./g);
        if (t && t.length < 2) {
          return this._parts.hostname;
        }
  
        // grab tld and add another segment
        var end = this._parts.hostname.length - this.tld(build).length - 1;
        end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
        return this._parts.hostname.substring(end) || '';
      } else {
        if (!v) {
          throw new TypeError('cannot set domain empty');
        }
  
        if (v.indexOf(':') !== -1) {
          throw new TypeError('Domains cannot contain colons');
        }
  
        URI.ensureValidHostname(v, this._parts.protocol);
  
        if (!this._parts.hostname || this.is('IP')) {
          this._parts.hostname = v;
        } else {
          var replace = new RegExp(escapeRegEx(this.domain()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        }
  
        this.build(!build);
        return this;
      }
    };
    p.tld = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (typeof v === 'boolean') {
        build = v;
        v = undefined;
      }
  
      // return "org" from "www.example.org"
      if (v === undefined) {
        if (!this._parts.hostname || this.is('IP')) {
          return '';
        }
  
        var pos = this._parts.hostname.lastIndexOf('.');
        var tld = this._parts.hostname.substring(pos + 1);
  
        if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
          return SLD.get(this._parts.hostname) || tld;
        }
  
        return tld;
      } else {
        var replace;
  
        if (!v) {
          throw new TypeError('cannot set TLD empty');
        } else if (v.match(/[^a-zA-Z0-9-]/)) {
          if (SLD && SLD.is(v)) {
            replace = new RegExp(escapeRegEx(this.tld()) + '$');
            this._parts.hostname = this._parts.hostname.replace(replace, v);
          } else {
            throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
          }
        } else if (!this._parts.hostname || this.is('IP')) {
          throw new ReferenceError('cannot set TLD on non-domain host');
        } else {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        }
  
        this.build(!build);
        return this;
      }
    };
    p.directory = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v === undefined || v === true) {
        if (!this._parts.path && !this._parts.hostname) {
          return '';
        }
  
        if (this._parts.path === '/') {
          return '/';
        }
  
        var end = this._parts.path.length - this.filename().length - 1;
        var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
  
        return v ? URI.decodePath(res) : res;
  
      } else {
        var e = this._parts.path.length - this.filename().length;
        var directory = this._parts.path.substring(0, e);
        var replace = new RegExp('^' + escapeRegEx(directory));
  
        // fully qualifier directories begin with a slash
        if (!this.is('relative')) {
          if (!v) {
            v = '/';
          }
  
          if (v.charAt(0) !== '/') {
            v = '/' + v;
          }
        }
  
        // directories always end with a slash
        if (v && v.charAt(v.length - 1) !== '/') {
          v += '/';
        }
  
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
        this.build(!build);
        return this;
      }
    };
    p.filename = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (typeof v !== 'string') {
        if (!this._parts.path || this._parts.path === '/') {
          return '';
        }
  
        var pos = this._parts.path.lastIndexOf('/');
        var res = this._parts.path.substring(pos+1);
  
        return v ? URI.decodePathSegment(res) : res;
      } else {
        var mutatedDirectory = false;
  
        if (v.charAt(0) === '/') {
          v = v.substring(1);
        }
  
        if (v.match(/\.?\//)) {
          mutatedDirectory = true;
        }
  
        var replace = new RegExp(escapeRegEx(this.filename()) + '$');
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
  
        if (mutatedDirectory) {
          this.normalizePath(build);
        } else {
          this.build(!build);
        }
  
        return this;
      }
    };
    p.suffix = function(v, build) {
      if (this._parts.urn) {
        return v === undefined ? '' : this;
      }
  
      if (v === undefined || v === true) {
        if (!this._parts.path || this._parts.path === '/') {
          return '';
        }
  
        var filename = this.filename();
        var pos = filename.lastIndexOf('.');
        var s, res;
  
        if (pos === -1) {
          return '';
        }
  
        // suffix may only contain alnum characters (yup, I made this up.)
        s = filename.substring(pos+1);
        res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
        return v ? URI.decodePathSegment(res) : res;
      } else {
        if (v.charAt(0) === '.') {
          v = v.substring(1);
        }
  
        var suffix = this.suffix();
        var replace;
  
        if (!suffix) {
          if (!v) {
            return this;
          }
  
          this._parts.path += '.' + URI.recodePath(v);
        } else if (!v) {
          replace = new RegExp(escapeRegEx('.' + suffix) + '$');
        } else {
          replace = new RegExp(escapeRegEx(suffix) + '$');
        }
  
        if (replace) {
          v = URI.recodePath(v);
          this._parts.path = this._parts.path.replace(replace, v);
        }
  
        this.build(!build);
        return this;
      }
    };
    p.segment = function(segment, v, build) {
      var separator = this._parts.urn ? ':' : '/';
      var path = this.path();
      var absolute = path.substring(0, 1) === '/';
      var segments = path.split(separator);
  
      if (segment !== undefined && typeof segment !== 'number') {
        build = v;
        v = segment;
        segment = undefined;
      }
  
      if (segment !== undefined && typeof segment !== 'number') {
        throw new Error('Bad segment "' + segment + '", must be 0-based integer');
      }
  
      if (absolute) {
        segments.shift();
      }
  
      if (segment < 0) {
        // allow negative indexes to address from the end
        segment = Math.max(segments.length + segment, 0);
      }
  
      if (v === undefined) {
        /*jshint laxbreak: true */
        return segment === undefined
          ? segments
          : segments[segment];
        /*jshint laxbreak: false */
      } else if (segment === null || segments[segment] === undefined) {
        if (isArray(v)) {
          segments = [];
          // collapse empty elements within array
          for (var i=0, l=v.length; i < l; i++) {
            if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
              continue;
            }
  
            if (segments.length && !segments[segments.length -1].length) {
              segments.pop();
            }
  
            segments.push(trimSlashes(v[i]));
          }
        } else if (v || typeof v === 'string') {
          v = trimSlashes(v);
          if (segments[segments.length -1] === '') {
            // empty trailing elements have to be overwritten
            // to prevent results such as /foo//bar
            segments[segments.length -1] = v;
          } else {
            segments.push(v);
          }
        }
      } else {
        if (v) {
          segments[segment] = trimSlashes(v);
        } else {
          segments.splice(segment, 1);
        }
      }
  
      if (absolute) {
        segments.unshift('');
      }
  
      return this.path(segments.join(separator), build);
    };
    p.segmentCoded = function(segment, v, build) {
      var segments, i, l;
  
      if (typeof segment !== 'number') {
        build = v;
        v = segment;
        segment = undefined;
      }
  
      if (v === undefined) {
        segments = this.segment(segment, v, build);
        if (!isArray(segments)) {
          segments = segments !== undefined ? URI.decode(segments) : undefined;
        } else {
          for (i = 0, l = segments.length; i < l; i++) {
            segments[i] = URI.decode(segments[i]);
          }
        }
  
        return segments;
      }
  
      if (!isArray(v)) {
        v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
      } else {
        for (i = 0, l = v.length; i < l; i++) {
          v[i] = URI.encode(v[i]);
        }
      }
  
      return this.segment(segment, v, build);
    };
  
    // mutating query string
    var q = p.query;
    p.query = function(v, build) {
      if (v === true) {
        return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      } else if (typeof v === 'function') {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        var result = v.call(this, data);
        this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        this.build(!build);
        return this;
      } else if (v !== undefined && typeof v !== 'string') {
        this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        this.build(!build);
        return this;
      } else {
        return q.call(this, v, build);
      }
    };
    p.setQuery = function(name, value, build) {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
  
      if (typeof name === 'string' || name instanceof String) {
        data[name] = value !== undefined ? value : null;
      } else if (typeof name === 'object') {
        for (var key in name) {
          if (hasOwn.call(name, key)) {
            data[key] = name[key];
          }
        }
      } else {
        throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
      }
  
      this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      if (typeof name !== 'string') {
        build = value;
      }
  
      this.build(!build);
      return this;
    };
    p.addQuery = function(name, value, build) {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      URI.addQuery(data, name, value === undefined ? null : value);
      this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      if (typeof name !== 'string') {
        build = value;
      }
  
      this.build(!build);
      return this;
    };
    p.removeQuery = function(name, value, build) {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      URI.removeQuery(data, name, value);
      this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      if (typeof name !== 'string') {
        build = value;
      }
  
      this.build(!build);
      return this;
    };
    p.hasQuery = function(name, value, withinArray) {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      return URI.hasQuery(data, name, value, withinArray);
    };
    p.setSearch = p.setQuery;
    p.addSearch = p.addQuery;
    p.removeSearch = p.removeQuery;
    p.hasSearch = p.hasQuery;
  
    // sanitizing URLs
    p.normalize = function() {
      if (this._parts.urn) {
        return this
          .normalizeProtocol(false)
          .normalizePath(false)
          .normalizeQuery(false)
          .normalizeFragment(false)
          .build();
      }
  
      return this
        .normalizeProtocol(false)
        .normalizeHostname(false)
        .normalizePort(false)
        .normalizePath(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
    };
    p.normalizeProtocol = function(build) {
      if (typeof this._parts.protocol === 'string') {
        this._parts.protocol = this._parts.protocol.toLowerCase();
        this.build(!build);
      }
  
      return this;
    };
    p.normalizeHostname = function(build) {
      if (this._parts.hostname) {
        if (this.is('IDN') && punycode) {
          this._parts.hostname = punycode.toASCII(this._parts.hostname);
        } else if (this.is('IPv6') && IPv6) {
          this._parts.hostname = IPv6.best(this._parts.hostname);
        }
  
        this._parts.hostname = this._parts.hostname.toLowerCase();
        this.build(!build);
      }
  
      return this;
    };
    p.normalizePort = function(build) {
      // remove port of it's the protocol's default
      if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
        this._parts.port = null;
        this.build(!build);
      }
  
      return this;
    };
    p.normalizePath = function(build) {
      var _path = this._parts.path;
      if (!_path) {
        return this;
      }
  
      if (this._parts.urn) {
        this._parts.path = URI.recodeUrnPath(this._parts.path);
        this.build(!build);
        return this;
      }
  
      if (this._parts.path === '/') {
        return this;
      }
  
      _path = URI.recodePath(_path);
  
      var _was_relative;
      var _leadingParents = '';
      var _parent, _pos;
  
      // handle relative paths
      if (_path.charAt(0) !== '/') {
        _was_relative = true;
        _path = '/' + _path;
      }
  
      // handle relative files (as opposed to directories)
      if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
        _path += '/';
      }
  
      // resolve simples
      _path = _path
        .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
        .replace(/\/{2,}/g, '/');
  
      // remember leading parents
      if (_was_relative) {
        _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
        if (_leadingParents) {
          _leadingParents = _leadingParents[0];
        }
      }
  
      // resolve parents
      while (true) {
        _parent = _path.search(/\/\.\.(\/|$)/);
        if (_parent === -1) {
          // no more ../ to resolve
          break;
        } else if (_parent === 0) {
          // top level cannot be relative, skip it
          _path = _path.substring(3);
          continue;
        }
  
        _pos = _path.substring(0, _parent).lastIndexOf('/');
        if (_pos === -1) {
          _pos = _parent;
        }
        _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
      }
  
      // revert to relative
      if (_was_relative && this.is('relative')) {
        _path = _leadingParents + _path.substring(1);
      }
  
      this._parts.path = _path;
      this.build(!build);
      return this;
    };
    p.normalizePathname = p.normalizePath;
    p.normalizeQuery = function(build) {
      if (typeof this._parts.query === 'string') {
        if (!this._parts.query.length) {
          this._parts.query = null;
        } else {
          this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
        }
  
        this.build(!build);
      }
  
      return this;
    };
    p.normalizeFragment = function(build) {
      if (!this._parts.fragment) {
        this._parts.fragment = null;
        this.build(!build);
      }
  
      return this;
    };
    p.normalizeSearch = p.normalizeQuery;
    p.normalizeHash = p.normalizeFragment;
  
    p.iso8859 = function() {
      // expect unicode input, iso8859 output
      var e = URI.encode;
      var d = URI.decode;
  
      URI.encode = escape;
      URI.decode = decodeURIComponent;
      try {
        this.normalize();
      } finally {
        URI.encode = e;
        URI.decode = d;
      }
      return this;
    };
  
    p.unicode = function() {
      // expect iso8859 input, unicode output
      var e = URI.encode;
      var d = URI.decode;
  
      URI.encode = strictEncodeURIComponent;
      URI.decode = unescape;
      try {
        this.normalize();
      } finally {
        URI.encode = e;
        URI.decode = d;
      }
      return this;
    };
  
    p.readable = function() {
      var uri = this.clone();
      // removing username, password, because they shouldn't be displayed according to RFC 3986
      uri.username('').password('').normalize();
      var t = '';
      if (uri._parts.protocol) {
        t += uri._parts.protocol + '://';
      }
  
      if (uri._parts.hostname) {
        if (uri.is('punycode') && punycode) {
          t += punycode.toUnicode(uri._parts.hostname);
          if (uri._parts.port) {
            t += ':' + uri._parts.port;
          }
        } else {
          t += uri.host();
        }
      }
  
      if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
        t += '/';
      }
  
      t += uri.path(true);
      if (uri._parts.query) {
        var q = '';
        for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
          var kv = (qp[i] || '').split('=');
          q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
            .replace(/&/g, '%26');
  
          if (kv[1] !== undefined) {
            q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
              .replace(/&/g, '%26');
          }
        }
        t += '?' + q.substring(1);
      }
  
      t += URI.decodeQuery(uri.hash(), true);
      return t;
    };
  
    // resolving relative and absolute URLs
    p.absoluteTo = function(base) {
      var resolved = this.clone();
      var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
      var basedir, i, p;
  
      if (this._parts.urn) {
        throw new Error('URNs do not have any generally defined hierarchical components');
      }
  
      if (!(base instanceof URI)) {
        base = new URI(base);
      }
  
      if (resolved._parts.protocol) {
        // Directly returns even if this._parts.hostname is empty.
        return resolved;
      } else {
        resolved._parts.protocol = base._parts.protocol;
      }
  
      if (this._parts.hostname) {
        return resolved;
      }
  
      for (i = 0; (p = properties[i]); i++) {
        resolved._parts[p] = base._parts[p];
      }
  
      if (!resolved._parts.path) {
        resolved._parts.path = base._parts.path;
        if (!resolved._parts.query) {
          resolved._parts.query = base._parts.query;
        }
      } else {
        if (resolved._parts.path.substring(-2) === '..') {
          resolved._parts.path += '/';
        }
  
        if (resolved.path().charAt(0) !== '/') {
          basedir = base.directory();
          basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
          resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
          resolved.normalizePath();
        }
      }
  
      resolved.build();
      return resolved;
    };
    p.relativeTo = function(base) {
      var relative = this.clone().normalize();
      var relativeParts, baseParts, common, relativePath, basePath;
  
      if (relative._parts.urn) {
        throw new Error('URNs do not have any generally defined hierarchical components');
      }
  
      base = new URI(base).normalize();
      relativeParts = relative._parts;
      baseParts = base._parts;
      relativePath = relative.path();
      basePath = base.path();
  
      if (relativePath.charAt(0) !== '/') {
        throw new Error('URI is already relative');
      }
  
      if (basePath.charAt(0) !== '/') {
        throw new Error('Cannot calculate a URI relative to another relative URI');
      }
  
      if (relativeParts.protocol === baseParts.protocol) {
        relativeParts.protocol = null;
      }
  
      if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
        return relative.build();
      }
  
      if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
        return relative.build();
      }
  
      if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
        relativeParts.hostname = null;
        relativeParts.port = null;
      } else {
        return relative.build();
      }
  
      if (relativePath === basePath) {
        relativeParts.path = '';
        return relative.build();
      }
  
      // determine common sub path
      common = URI.commonPath(relativePath, basePath);
  
      // If the paths have nothing in common, return a relative URL with the absolute path.
      if (!common) {
        return relative.build();
      }
  
      var parents = baseParts.path
        .substring(common.length)
        .replace(/[^\/]*$/, '')
        .replace(/.*?\//g, '../');
  
      relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';
  
      return relative.build();
    };
  
    // comparing URIs
    p.equals = function(uri) {
      var one = this.clone();
      var two = new URI(uri);
      var one_map = {};
      var two_map = {};
      var checked = {};
      var one_query, two_query, key;
  
      one.normalize();
      two.normalize();
  
      // exact match
      if (one.toString() === two.toString()) {
        return true;
      }
  
      // extract query string
      one_query = one.query();
      two_query = two.query();
      one.query('');
      two.query('');
  
      // definitely not equal if not even non-query parts match
      if (one.toString() !== two.toString()) {
        return false;
      }
  
      // query parameters have the same length, even if they're permuted
      if (one_query.length !== two_query.length) {
        return false;
      }
  
      one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
      two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);
  
      for (key in one_map) {
        if (hasOwn.call(one_map, key)) {
          if (!isArray(one_map[key])) {
            if (one_map[key] !== two_map[key]) {
              return false;
            }
          } else if (!arraysEqual(one_map[key], two_map[key])) {
            return false;
          }
  
          checked[key] = true;
        }
      }
  
      for (key in two_map) {
        if (hasOwn.call(two_map, key)) {
          if (!checked[key]) {
            // two contains a parameter not present in one
            return false;
          }
        }
      }
  
      return true;
    };
  
    // state
    p.duplicateQueryParameters = function(v) {
      this._parts.duplicateQueryParameters = !!v;
      return this;
    };
  
    p.escapeQuerySpace = function(v) {
      this._parts.escapeQuerySpace = !!v;
      return this;
    };
  
    return URI;
  }));
  

});
