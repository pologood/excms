;/*!app/common/base.js*/
define('app/common/base', function(require, exports, module) {

  /**
   * 基类 JS
   * 重度依赖 jquery
   * Created by Dzl on 2016-8-8.
   *
   * 申明依赖, FIS3 用法
   * 详细参见: https://fex-team.github.io/fis3/docs/user-dev/require.html
   * @require lib/jquery.min.js
   */
  
  'use strict';
  if (typeof $ === 'undefined') {
      // 爱上一匹野马，可你的家里没有草原…
      throw new Error('Form designer requires jQuery :-(\n' +
          '\u7231\u4e0a\u4e00\u5339\u91ce\u9a6c\uff0c\u53ef\u4f60' +
          '\u7684\u5bb6\u91cc\u6ca1\u6709\u8349\u539f\u2026');
  }
  
  var Site = $.Site || {};
  Site.VERSION = '{{VERSION}}';
  Site.utils = {};
  
  /**
   * 宿主页中实例化后的程序对象
   * 使用注意: 在宿主页和主题模板页中的赋值的区别
   * @type {null}
   */
  Site.rootapp = null;
  /**
   * 主题模板页中实例化后的程序对象
   * 使用注意: 在宿主页和主题模板页中的赋值的区别
   * @type {null}
   */
  Site.templateApp = null;
  /**
   * 是否为设计状态
   * @type {boolean}
   */
  Site.isDesign = false;
  /**
   * 宿主页中的window对象
   * @type {null}
   */
  Site.rootWindow = null;
  /**
   * 主题模板页中wndows对象
   * @type {null}
   */
  Site.templateWindow = null;
  
  /**
   * 类初始化函数
   */
  Site.init = function () {
  
  };
  
  
  /**
   * 配置对象的转换
   * @type {Site.utils.options}
   */
  Site.utils.parseOptions = Site.utils.options = function (string) {
      if ($.isPlainObject(string)) {
          return string;
      }
  
      var start = (string ? string.indexOf('{') : -1);
      var options = {};
  
      if (start != -1) {
          try {
              options = (new Function('',
                  'var json = ' + string.substr(start) +
                  '; return JSON.parse(JSON.stringify(json));'))();
          } catch (e) {
          }
      }
  
      return options;
  };
  /**
   * 数组去重
   * @param  {[type]} arr [description]
   * @return {[type]}     [description]
   */
  Site.utils.arrayUnique = function (arr) {
      var result = [], hash = {};
      for (var i = 0, elem; (elem = arr[i]) != null; i++) {
          if (!hash[elem]) {
              result.push(elem);
              hash[elem] = true;
          }
      }
      return result;
  };
  
  /**
   * Plugin Site Component to jQuery
   *
   * @param {String} name - plugin name
   * @param {Function} Component - plugin constructor
   * @param {Object} [pluginOption]
   * @param {String} pluginOption.dataOptions
   * @param {Function} pluginOption.methodCall - custom method call
   * @param {Function} pluginOption.before
   * @param {Function} pluginOption.after
   * @since v2.4.1
   */
  Site.plugin = function LSDPlugin(name, Component, pluginOption) {
      var old = $.fn[name];
      pluginOption = pluginOption || {};
  
      $.fn[name] = function (option) {
          var allArgs = Array.prototype.slice.call(arguments, 0);
          var args = allArgs.slice(1);
          var propReturn;
          var $set = this.each(function () {
              var $this = $(this);
              var dataName = 'fd.' + name;
              var dataOptionsName = pluginOption.dataOptions || ('data-fd-' + name);
              var instance = $this.data(dataName);
              var options = $.extend(true,
                  Site.utils.parseOptions($this.attr(dataOptionsName)),
                  typeof option === 'object' && option);
  
              if (!instance && option === 'destroy') {
                  return;
              }
              if (!instance) {
                  //$this.data(dataName, (instance = new Component(this, options)));
              }
  
              // custom method call
              if (pluginOption.methodCall) {
                  pluginOption.methodCall.call($this, allArgs, instance);
              } else {
                  // before method call
                  pluginOption.before &&
                  pluginOption.before.call($this, allArgs, instance);
  
                  if (typeof option === 'string') {
                      propReturn = typeof instance[option] === 'function' ?
                          instance[option].apply(instance, args) : instance[option];
                  }
                  // after method call
                  pluginOption.after && pluginOption.after.call($this, allArgs, instance);
              }
          });
  
          return (propReturn === undefined) ? $set : propReturn;
      };
  
      $.fn[name].Constructor = Component;
  
      // no conflict
      $.fn[name].noConflict = function () {
          $.fn[name] = old;
          return this;
      };
  
      Site[name] = Component;
  };
  
  /**
   * 将textarea中的换行替换为br
   * @param str
   * @returns {*}
   * @private
   */
  Site.__textareaEncode = function (str) {
      var reg = new RegExp("[\n\r]", "gi");
      str = str.replace(reg, "<br>");
      return str;
  };
  
  /**
   * 将html中的br替换为textarea中的换行符
   * @param str
   * @returns {*}
   * @private
   */
  Site.__textareaDecode = function (str) {
      var reg = new RegExp("<br>", "g");
      str = str.replace(reg, "\r");
      return str;
  };
  
  /**
   * 颜色选择器组件
   * 依赖第三方组件: colorPicker
   * 请在主页面显示引入组件
   * @param  {[type]} element       [description]
   * @param  {[type]} pickerDefault [description]
   * @param  {[type]} colors        [description]
   * @param  {[type]} onColorChange [description]
   * @return {[type]}               [description]
   */
  Site.__colorPicker = function (element, pickerDefault, colors, onColorChange) {
      var me = this;
      me.log('Site.__colorPicker >>>');
      $(element).colorPicker({
          pickerDefault: pickerDefault,
          colors: colors,
          transparency: true,
          showHexField: false,
          onColorChange: function (id, value) {
              onColorChange && onColorChange(id, value);
          }
      });
  };
  /**
   * 获取 URL 参数的方法
   * @param name
   * @returns {*}
   */
  Site.getQueryString = function (name) {
      var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
      var r = window.location.search.substr(1).match(reg);
      if (r != null) return (r[2]);
      return null;
  };
  
  /**
   * 禁用所有 a 链接, 在模板设计状态下需要
   * @param $doc
   */
  Site.forbidALinkClickEvent = function ($doc) {
      var me = this;
      me.log('base.forbidALinkClickEvent >>>');
      $doc.find('#wraper a').on('click.ls.design', function () {
          return false;
      })
  };
  
  
  /**
   * 记录日志
   * @param  Object val  日志输出内容对象
   * @param  String name 附加的名称,如果直接使用-则打印一行分隔线
   */
  Site.log = function (val, name) {
      try {
          if (name) console.log(name + " >>> ")
          console.log(val);
          if (name == '-') console.log('------------------');
      } catch (e) {
      }
  };
  
  Site.rows = [];
  
  Site._enableEditLayer = true;
  
  Site.disableEditLayer = function () {
      Site._enableEditLayer = false;
      Site.removeAllDataEditLayer();
  };
  
  Site.enableEditLayer = function () {
      Site._enableEditLayer = true;
  };
  
  Site.removeAllEditLayer = function () {
      Site.removeDesignEditLayer();
      Site.removeAllDataEditLayer();
  };
  
  Site.removeAllDataEditLayer = function () {
  
      $(".editLayer").remove();
      $(".mulColTabSortIcon").remove();
      $(".moduleLayer").remove();
  };
  
  Site.removeDesignEditLayer = function () {
      $(".moveFrame").remove();
      $(".moduleLayer").remove();
      $(".flutterLayer").remove();
      $(".editLayerTips").remove();
      $(".shortcutLayer").remove();
      $(".fk-moduleToolbar").remove();
      $(".draggableBtn").remove();
      $(".mulColTabSortIcon").remove();
  
  };
  
  Site.addNewModuleHtml = '<div class="addNewModule">' +
      '   <div class="addBtn">' +
      '       <div class="mulMCol_Icon">' +
      // '           <div class="addBtnToolTip">可以拖动组件进来</div>' +
      '       </div>' +
      '   </div>' +
      '</div>';
  
  
  Site.alert = function (msg) {
      // // 优先使用layer对话框
      // if (layer) {
      //     layer.alert(msg, {
      //         title: '警告',
      //         icon: 5
      //     });
      // } else {
      alert(msg);
      // }
  };
  
  Site.info = function (msg) {
      alert(msg);
  };
  Site.error = function (msg) {
      alert(msg);
  };
  
  
  /**
   * 将str中的html符号转义,将转义“'，&，<，"，>”五个字符
   * @method unhtml
   * @param { String } str 需要转义的字符串
   * @return { String } 转义后的字符串
   * @example
   * ```javascript
   * var html = '<body>&</body>';
   *
   * //output: &lt;body&gt;&amp;&lt;/body&gt;
   * console.log( UE.utils.unhtml( html ) );
   *
   * ```
   */
  Site.unhtml = function (str, reg) {
      return str ? str.replace(reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp|#\d+);)?/g, function (a, b) {
              if (b) {
                  return a;
              } else {
                  return {
                      '<': '&lt;',
                      '&': '&amp;',
                      '"': '&quot;',
                      '>': '&gt;',
                      "'": '&#39;'
                  }[a]
              }
  
          }) : '';
  };
  
  /**
   * 将str中的转义字符还原成html字符
   * @see UE.utils.unhtml(String);
   * @method html
   * @param { String } str 需要逆转义的字符串
   * @return { String } 逆转义后的字符串
   * @example
   * ```javascript
   *
   * var str = '&lt;body&gt;&amp;&lt;/body&gt;';
   *
   * //output: <body>&</body>
   * console.log( UE.utils.html( str ) );
   *
   * ```
   */
  Site.html = function (str) {
      return str ? str.replace(/&((g|l|quo)t|amp|#39|nbsp);/g, function (m) {
              return {
                  '&lt;': '<',
                  '&amp;': '&',
                  '&quot;': '"',
                  '&gt;': '>',
                  '&#39;': "'",
                  '&nbsp;': ' '
              }[m]
          }) : '';
  };
  
  Site.showUploader = function (callback) {
      Site.log('Site.showUploader');
      var cls = this;
      Ls.uploadFile(callback, {
          // 上传参数
          // upload_url: "/fileCenter/fileUpload",
          file_upload_limit: 1
      });
  };
  
  Site.removeAllEditLayer = function () {
      $(".moveFrame").remove();
      $(".moduleLayer").remove();
      $(".shortcutLayer").remove();
  };
  
  /**
   * 组件DOM样式转换，提取不带特殊除号的样式名或ID
   */
  Site.convertAttr = function (s) {
      return s ? s.substr(1, s.length) + " multiModule" : "";
  };
  
  
  /**
   * 测试函数
   */
  Site.test = function () {
      this.log("Site.test run success!");
  };
  
  
  module.exports = Site;

});

;/*!app/common/store.js*/
define('app/common/store', function(require, exports, module) {

  /**
   * 本地存储操作类
   * Created by Dzl on 2016-10-2.
   */
  var store = (function () {
      var api = {},
          win = window,
          doc = win.document,
          localStorageName = 'localStorage',
          globalStorageName = 'globalStorage',
          storage;
  
      api.set = function (key, value) {
      };
      api.setJson = function (key, value) {
      };
      api.get = function (key) {
      };
      api.getJson = function (key) {
      };
      api.remove = function (key) {
      };
      api.clear = function () {
      };
      try {
          if (localStorageName in win && win[localStorageName]) {
              storage = win[localStorageName];
              api.set = function (key, val) {
                  storage.setItem(key, val)
              };
              api.setJson = function (key, val) {
                  storage.setItem(key, store.jsonEncode(val));
              };
              api.get = function (key) {
                  return storage.getItem(key)
              };
              api.getJson = function (key) {
                  var ret = null;
                  var str = storage.getItem(key);
                  if (str) ret = $.parseJSON(str);
                  return ret;
              };
              api.remove = function (key) {
                  storage.removeItem(key)
              };
              api.clear = function () {
                  storage.clear()
              };
  
          } else if (globalStorageName in win && win[globalStorageName]) {
              storage = win[globalStorageName][win.location.hostname];
              api.set = function (key, val) {
                  storage[key] = val
              };
              api.setJson = function (key, val) {
                  storage[key] = store.jsonEncode(val);
              };
              api.get = function (key) {
                  return storage[key] && storage[key].value
              };
              api.getJson = function (key) {
                  var ret = null;
                  var str = storage[key] && storage[key].value;
                  if (str) ret = store.jsonDecode(str);
                  return ret;
              };
              api.remove = function (key) {
                  delete storage[key]
              };
              api.clear = function () {
                  for (var key in storage) {
                      delete storage[key]
                  }
              };
  
          } else if (doc.documentElement.addBehavior) {
              function getStorage() {
                  if (storage) {
                      return storage
                  }
                  storage = doc.body.appendChild(doc.createElement('div'));
                  storage.style.display = 'none';
                  // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
                  // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
                  storage.addBehavior('#default#userData');
                  storage.load(localStorageName);
                  return storage;
              }
  
              api.set = function (key, val) {
                  var storage = getStorage();
                  storage.setAttribute(key, val);
                  storage.save(localStorageName);
              };
              api.setJson = function (key, val) {
                  var storage = getStorage();
                  storage.setAttribute(key, store.jsonEncode(val));
                  storage.save(localStorageName);
              };
              api.get = function (key) {
                  var storage = getStorage();
                  return storage.getAttribute(key);
              };
              api.getJson = function (key) {
                  var ret = null, storage = getStorage();
                  var str = storage.getAttribute(key);
                  if (str) ret = $.parseJSON(str);
                  return ret;
              };
              api.remove = function (key) {
                  var storage = getStorage();
                  storage.removeAttribute(key);
                  storage.save(localStorageName);
              };
              api.clear = function () {
                  var storage = getStorage();
                  var attributes = storage.XMLDocument.documentElement.attributes;
  
                  storage.load(localStorageName);
                  for (var i = 0, attr; attr = attributes[i]; i++) {
                      storage.removeAttribute(attr.name);
                  }
                  storage.save(localStorageName);
              }
          }
  
      } catch (e) {
      }
      return api;
  })();
  
  module.exports = store;

});

;/*!app/common/template-dom-structure.js*/
define('app/common/template-dom-structure', function(require, exports, module) {

  /**
   * 模板对象 DOM 结构对象的 jquery 选择符
   * app/common/template-dom-structure.js
   * 说明：
   *      以 Id 结尾的属性，其内容是 DOM ID，不是 jquery 选择符
   *      其他的属性内容默认都为 jquery 选择符
   */
  
  var templateDomStructure = {
      iframe: '#mainIframe',
      wraper: '#wraper',
      tplCommon: '.ls-tpl-common',
      pageTop: '#ls_top',
      pageTopInner: '#ls_top .ls-top-inner',
      pageTopLeft: '#ls_top .ls-top-inner .ls-top-left',
      pageTopCenter: '#ls_top .ls-top-inner .ls-top-center',
      pageTopRight: '#ls_top .ls-top-inner .ls-top-right',
      pageHeader: '#ls_header',
      pageHeaderInner: '#ls_header .ls-header-inner',
      pageHeaderId:'pageHeader', // 以 Id 结尾的属性，其内容是 DOM ID 而非 jquery 选择符
      logo: '.ls-logo',
      logoInner: '.ls-logo .ls-logo-inner',
      logoId:'logo', // 以 Id 结尾的属性，其内容是 DOM ID 而非 jquery 选择符
      search: '.ls-search',
      searchInner: '.ls-search .ls-search-inner',
      navigation: '#ls_navigation',
      navigationInner: '#ls_navigation .ls-navigation-inner',
      navigationLeft: '#ls_navigation .ls-navigation-inner .ls-navigation-left',
      navigationId: 'navigation', // 以 Id 结尾的属性，其内容是 DOM ID 而非 jquery 选择符
      navigationRight: '#ls_navigation .ls-navigation-inner .ls-navigation-right',
      container: '#ls_container',
      containerInner: '#ls_container .ls-container-inner',
      pageFooter: '#ls_footer',
      pageFooterInner: '#ls_footer .ls-footer-inner',
      module: '.module',
      col: '.col',
      colClassName:'col',
      row: '.row',
      rowClassName: 'row',
      infoTabsLabelContent:'',
      pageEdit: '.ls_edit'
  };
  
  module.exports = templateDomStructure;

});

;/*!app/common/placeholder.js*/
define('app/common/placeholder', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-4-21.
   */
  
  var _ = require('node_modules/lodash/lodash');
  
  var c,
      cc, //公用一个实例，减少内存占用，减少资源消耗
      rendered_attr = 'placeholder-rendered';
  
  function createCanvas(opts) {
      if (!c || !cc) {
          //如果不存在则实例化
          c = document.createElement('canvas');
          cc = c.getContext('2d');
      }
      var canvas_width = parseInt(opts.a[0]), canvas_height = parseInt(opts.a[1]);
      //图片大小
      c.width = canvas_width;
      c.height = canvas_height;
      cc.clearRect(0, 0, canvas_width, canvas_height); //清楚已有的画布
      //设置背景色
      cc.fillStyle = opts.c;
      cc.fillRect(0, 0, canvas_width, canvas_height);
      //字体颜色
      cc.fillStyle = opts.d;
      cc.font = opts.e + ' normal ' + opts.f + ' ' + (opts.g || 100) + 'px ' + opts.h;
      var scale = 1.0;
      if (opts.g === '') {
          //auto calculate size
          var width_limit = 0.7 * canvas_width,
              heigth_limit = 0.7 * canvas_height,
              text_width = cc.measureText(opts.b).width,
              text_height = 100;
          scale = Math.min(width_limit / text_width, heigth_limit / text_height);
      }
      //文字居中
      cc.translate(canvas_width / 2, canvas_height / 2);
      cc.scale(scale, scale);
      cc.textAlign = 'center';
      cc.textBaseline = 'middle';
  
      cc.fillText(opts.b, 0, 0);
      return c;
  }
  
  //随机颜色值
  function randomColor() {
      return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);
  }
  
  //预处理配置信息，补全默认项
  function prepareOpts(opts) {
      opts = opts || {};
      var size = opts.size || '128x128',
          text = opts.text || size,
          bgcolor = opts.bgcolor || '#f3f3f3', //other placeholder default bgcolor is '#ccc',
          color = opts.color || '#cccccc', //other placeholder default color is '#969696',
          //font参数
          fstyle = opts.fstyle || 'normal', //normal / italic / oblique
          fweight = opts.fweight || 'bold', //normal / bold / bolder / lighter
          fsize = opts.fsize || '', //auto calculate the font size to response to the image size
          ffamily = opts.ffamily || 'consolas', //规定字号和行高，以像素计。
          new_opts = {};
  
      size = size.split('x');
      if (size.length !== 2) {
          size = [128, 128];
      }
      //减少键值，压缩之后可以减少包大小
      new_opts.a = size;
      new_opts.b = text;
      new_opts.c = bgcolor;
      new_opts.d = color;
      new_opts.e = fstyle;
      new_opts.f = fweight;
      new_opts.g = fsize;
      new_opts.h = ffamily;
      opts = null;
      return new_opts;
  }
  
  //创建placeholder Canvas元素
  function placeholderCanvas(opts) {
      opts = prepareOpts(opts);
      return createCanvas(opts);
  }
  
  //获得placeholder的base64字符串
  function placeholder(opts) {
      return placeholderCanvas(opts).toDataURL();
  }
  
  //获取元素属性，带默认值
  function _getAttribute(node, name, defaultValue) {
      return node.getAttribute(name) || defaultValue;
  }
  
  //从url中解析配置信息
  function parseUrlOptions(url) {
      // console.log('url: ', url);
      url = _.unescape(url);
      // console.log('unescape url: ', url);
      var opts = {}, parameters = url.split('&'), k_v;
      // console.log('parameters: ', parameters);
      for (var i = 0, l = parameters.length; i < l; i++) {
          // for (var i in parameters) {
          // console.log('parameters[i]: ', parameters[i]);
          k_v = parameters[i].split('=');
          try {
              opts[k_v[0]] = decodeURIComponent(k_v[1]);
          } catch (e) {
              opts[k_v[0]] = k_v[1];
          }
      }
      return opts;
  }
  
  function isUndefined(source) {
      return typeof source == 'undefined' ? true : false;
  }
  function isNul(source) {
      return (isUndefined(source) ||
      source == "" || source == null) ? true : false;
  }
  
  
  //开始检查图片中
  function renderAll(force) {
      var image_eles = document.querySelectorAll('img.placeholder'), img, opts;
      for (var i = 0; i < image_eles.length; i++) {
          img = image_eles[i];
          var $img = $(img);
          if (isNul($img.attr('src')) || _.startsWith($img.attr('src'), 'data:') || _.endsWith($img.attr('src'), 's.png')) {
              //图片没有被处理过，立马处理
              if (force || (!_getAttribute(img, rendered_attr, ''))) {
                  opts = parseUrlOptions(_getAttribute(img, 'options', ''));
                  img.setAttribute('src', placeholder(opts));
                  //处理完成之后标记为处理
                  img.setAttribute(rendered_attr, '1');
              }
          }
      }
  }
  
  function render(moduleId) {
      var image_eles = $('#' + moduleId).find('img.placeholder'), img, opts;
      for (var i = 0; i < image_eles.length; i++) {
          img = image_eles[i];
          var $img = $(img);
          if (isNul($img.attr('src')) || _.startsWith($img.attr('src'), 'data:') || _.endsWith($img.attr('src'), 's.png')) {
              //图片没有被处理过，立马处理
              if ((!_getAttribute(img, rendered_attr, ''))) {
                  opts = parseUrlOptions(_getAttribute(img, 'options', ''));
                  img.setAttribute('src', placeholder(opts));
                  //处理完成之后标记为处理
                  img.setAttribute(rendered_attr, '1');
              }
          }
      }
  }
  
  module.exports = {
      getData: placeholder,
      getCanvas: placeholderCanvas,
      renderAll: renderAll,
      render: render
  };

});

;/*!app/common/utils.js*/
define('app/common/utils', function(require, exports, module) {

  /**
   * 本地存储操作类
   * Created by Dzl on 2016-8-26.
   */
  
  
  var store = require('app/common/store');
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  var doms = require('app/common/template-dom-structure');
  var placeholder = require('app/common/placeholder');
  
  /**
   * 工具操作类
   */
  
  var utils = {
      /**
       * 迭代当前页面中 .module
       */
      getComponentListFromPage: function () {
          var cls = this,list = [];
          $(doms.module).each(function () {
              var $el = $(this),
                  type = $el.attr('data-type');
              if(!cls.isNul(type)){
                  list.push(type);
              }
          });
          if(list.length > 0){
              // 去重
              list = _.uniq(list);
          }
      },
      /**
       * 向模板引擎中注入全局的过滤函数
       * @param template
       */
      templateHelpers: function (template) {
          var cls = this;
          // arttemplate.js 模板引擎注入方法
          // 用于所有组件的 data-conf 和 data-label 的 JSON 对象序列化
          template.helper('dataConfLabelFilter', function (label) {
              return cls.jsonStringify(label);
          });
  
          template.helper('dataConfFilter', function (conf) {
              return cls.jsonStringify(conf);
          });
  
          template.helper('dataLabelFilter', function (label) {
              return cls.jsonStringify(label);
          });
  
          template.helper('activeFilter', function (target) {
              return target === true ? 'active' : '';
          });
  
          template.helper('displayFilter', function (target) {
              return target == true ? '' : 'dn';
          });
  
          //显示
          template.helper('displayShow', function (value) {
              return value == true ? '' : 'dn';
          });
  
          //隐藏
          template.helper('displayNone', function (value) {
              return value == true ? 'dn' : '';
          });
  
          //转换JSON为字符串
          template.helper('jsonStr', function (label) {
              return cls.jsonStringify(label);
          });
  
          //日期转换
          template.helper('dateFormat', function (dateStr, format) {
              return cls.dateStrFormat(dateStr, format);
          });
  
      },
      /**
       * 获取当前专题的 specialId 参数值,兼容以前参数 themeId
       * 前置条件: 设计器页面地址和模板页面地址中必须 specialId 或 themeId 值
       * @returns {Number} specialId
       */
      getSpecialId: function () {
          var cls = this;
          var specialId = cls.getQueryString('specialId');
          if (cls.isNul(specialId)) {
              // 兼容以前的参数
              specialId = cls.getQueryString('themeId');
          }
          return specialId;
      },
      executeSequentially: function (promiseFactories) {
          var result = Q.resolve();
          _.forEach(promiseFactories, function (promiseFactory) {
              result = result.then(promiseFactory);
          });
          return result;
      },
      /**
       * 使用 placeholder.js 渲染图片生成图片占位符
       * @param domId 如果存在则渲染domId内的图片,不存在则整个页面渲染
       */
      placeholderRender: function (domId) {
          var cls = this;
          if (!cls.isNul(domId)) {
              // 渲染指定区域内的图片点位符
              placeholder.render(domId);
          } else {
              // 渲染整个页面内的图片点位符
              placeholder.renderAll();
          }
      },
      /**
       * 创建组件样式
       * @param moduleId
       * @param conf
       */
      compileStyle: function (moduleId, moduleSetting, styleTpl) {
          var cls = this,
              $module = $('#' + moduleId),
              conf = cls.initModuleWidthHeight($module, moduleSetting.conf);
          if (!cls.isNul(conf.width) && !cls.isNul(conf.height)) {
              if (styleTpl && styleTpl[conf.style]) {
                  // 为了能够自定义样式,在组件渲染时,在 wraper 区动态创建一个 style
                  cls.createStyleInWrapById(moduleId);
                  var compiled = _.template(styleTpl[conf.style]);
                  conf.moduleId = moduleId;
                  var style = compiled(moduleSetting);
                  // cls.log('moduleId: ',moduleId);
                  // cls.log('type: ',moduleSetting.type);
                  // cls.log('start add style moduleSetting: ',moduleSetting);
  
                  $('#' + moduleId + '_style').html(style);
              }
          }
      },
      /**
       * 初始化组件 module 的宽度,高度和 panel 的 padding 值
       * @param $target
       * @param conf
       * @returns {*}
       */
      initModuleWidthHeight: function ($target, modelSettingConf) {
          var cls = this, width = 0;
          var conf = _.cloneDeep(modelSettingConf);
          if ($target.length == 0) return conf;
          var $panel = $target.find('.panel');
          // 计算 panel 的 padding 值
          if (_.isUndefined(conf.panelPadding) || conf.panelPadding == null) {
              conf.panelPadding = utils.getIntegerFixPX($panel.css('padding'));
          }
  
          // 计算 panel 的 border 值
          if (_.isUndefined(conf.borderLeftWidth) || conf.borderLeftWidth == null) {
              conf.borderLeftWidth = utils.getIntegerFixPX($panel.css('border-left-width'));
          }
          if (_.isUndefined(conf.borderRightWidth) || conf.borderRightWidth == null) {
              conf.borderRightWidth = utils.getIntegerFixPX($panel.css('border-right-width'));
          }
          if (_.isUndefined(conf.borderTopWidth) || conf.borderTopWidth == null) {
              conf.borderTopWidth = utils.getIntegerFixPX($panel.css('border-top-width'));
          }
          if (_.isUndefined(conf.borderBottomWidth) || conf.borderBottomWidth == null) {
              conf.borderBottomWidth = utils.getIntegerFixPX($panel.css('border-bottom-width'));
          }
  
          // 计算 组件 宽度
          if (utils.isNul(conf.width)) {
              width = $target.hasClass(doms.module.substring(1)) ? $target.parent(doms.col).innerWidth() : $target.innerWidth();
              conf.width = width - utils.getIntegerFixPX($(doms.module).css('margin-right'));
          }
          // cls.log('id: ' + $target[0].id + ',panelPadding: ' + conf.panelPadding + ',outerWidth: ' + width + ', innerWidth: ' + $target.innerWidth() + ', width: ' + $target.width() + ',borderLeftWidth: ' + conf.borderLeftWidth + ',borderRightWidth: ' + conf.borderRightWidth + ',borderTopWidth: ' + conf.borderTopWidth + ',borderBottomWidth: ' + conf.borderBottomWidth);
          // 计算 组件 高度
          if (utils.isNul(conf.height)) {
              conf.height = $target.innerHeight();
          }
  
          conf.panelWidth = conf.width - (conf.panelPadding * 2) - conf.borderLeftWidth - conf.borderRightWidth;
          conf.panelHeight = conf.height - (conf.panelPadding * 2) - conf.borderTopWidth - conf.borderBottomWidth;
  
          // 计算 组件  panel-heading 高度
          var $panelHeading = $target.find('.panel-heading');
          if ($panelHeading.length > 0) {
              if (!conf.panelHeadingHeight || conf.panelHeadingHeight == null) {
                  conf.panelHeadingHeight = !$panelHeading.hasClass('dn') ? $target.find('.panel-heading').outerHeight() : 0;
                  // utils.log('conf.panelHeadingHeight: ', conf.panelHeadingHeight);
              }
              // 计算 组件 panel-body 高度
              if (utils.isNul(conf.panelBodyHeight)) {
                  conf.panelBodyHeight = $panelHeading.hasClass('dn') ? conf.height - 2 : conf.height - conf.panelHeadingHeight - 2;
              }
  
          } else {
              conf.panelHeadingHeight = 0;
              conf.panelBodyHeight = conf.height - 2;
          }
  
  
          //cls.log('utils.initModuleWidthHeight >>> conf mix after: ' + JSON.stringify(conf));
          return conf;
      },
      getColumnId: function () {
          var cls = this;
          return !cls.isNul(cls.data.get('COLUMNID')) ? cls.data.get('COLUMNID') : cls.getQueryString('columnId');
      },
      /**
       * 统一处理组件参数初始化数据
       * @param moduleId
       * @param moduleSetting
       * @returns {*}
       */
      initModuleData: function (moduleId, moduleSetting) {
          var cls = this,
              $module = $('#' + moduleId),
              _conf = $module.attr('data-conf'),
              _label = $module.attr('data-label');
  
          //cls.log('initModuleData>>>', moduleId, $module, _conf, _label, moduleSetting);
          //cls.log('initModuleData moduleId: ', moduleId);
          //cls.log('initModuleData col: ', $module.parent('.col').attr('class'));
  
          // var data = _.cloneDeep(moduleSetting);
          var data = _.merge({}, moduleSetting, {
              conf: cls.parseOptions(_conf),
              label: cls.parseOptions(_label)
          });
          data.moduleId = moduleId;
          data.isShowPanelBodyHeight = true;
          // _.assign(data.conf, cls.parseOptions(_conf));
          // _.assign(data.label, cls.parseOptions(_label));
          // $.extend(true, data.conf, cls.parseOptions(_conf));
          // $.extend(true, data.label, cls.parseOptions(_label));
          data.conf = cls.initModuleWidthHeight($module, data.conf);
  
          if (!data.conf.className) data.conf.className = data.type;
          data.styleList = $.Site['STYLELIST'] && $.Site['STYLELIST'][data.type] ? JSON.stringify($.Site['STYLELIST'][data.type]) : "";
          //cls.log('initModuleData data.conf: ', JSON.stringify(data.conf));
          return data;
      },
      /**
       * 选择栏目
       * @param configType
       * @param chkStyle
       * @param tabId    针对页签类组件
       * @param targetId   针对动态构造类组件
       * @param callback
       */
      selectColumn: function (options, callback) {
          var columnId = this.getColumnId(),
              tabId = options.tabId || "",
              targetId = options.targetId || "";
  
          var selectNodeWinUrl = '/special/specialSelectColumn?configType=' + options.configType + '&chkStyle=' + options.chkStyle + '&columnId=' + columnId + '&tabId=' + tabId + '&targetId=' + targetId;
          Ls.openWin(selectNodeWinUrl,
              '400px',
              '400px',
              {
                  id: 'selectColumn',
                  title: '栏目选择',
                  padding: 0,
                  close: function (data) {
                      callback(data);
                  }
              });
      },
      swapItems: function (arr, index1, index2) {
          arr[index1] = arr.splice(index2, 1, arr[index1])[0];
          return arr;
      },
      assignClone: function (source, target) {
          return _.merge({}, source, target);
      },
      assignClone1: function (source, target) {
          // return _.assign(_.cloneDeep(source), target);
          return _.merge({}, source, target);
          // return $.extend(true, {}, source, target);
      },
      /**
       * 获取关联节点的 URL
       * @param contentModuleType 内容模型的 CODE
       * @param chkStyle radio 单选, 其他 多选
       * @returns {string}
       */
      getAssociateNodeUrl: function (contentModuleType, chkStyle) {
          var cls = this;
          var columnId = utils.getQueryString('columnId');
          //cls.log('getAssociateNodeUrl columnId = ' + columnId);
          return '/special/specialSelectColumn?configType=' + contentModuleType + '&chkStyle=' + chkStyle + '&columnId=' + columnId;
      },
      loadCssFile: function (path) {
          var element = document.createElement("link");
          element.setAttribute("rel", "stylesheet");
          element.setAttribute("type", "text/css");
          element.setAttribute("href", path);
          document.getElementsByTagName("head")[0].appendChild(element);
      },
      loadJsFile: function (path) {
          var element = document.createElement('script');
  
          element.setAttribute('type', 'text/javascript');
          element.setAttribute('src', path);
          element.setAttribute('defer', 'defer');
  
          document.getElementsByTagName("head")[0].appendChild(element);
      },
      jsonStringify: function (json) {
          return JSON.stringify(json).replace(/\"/g, "'");
      },
      parseOptions: function (s) {
          if (s) {
  
              if (s.substring(0, 1) != "{" && s.substring(0, 1) != "[") {
                  s = "{" + s + "}";
              }
              try {
                  return (new Function("return " + s))();
              } catch (e) {
                  this.log("转换JSON异常：", s);
              }
          }
      },
      scrollImages: function (wraper, speed, autoPlay) {
          var cls = this;
          //cls.log('scrollImages >>> wraper: ' + wraper);
          cls[wraper + '_speed'] = speed;
          var $wraper = $('#' + wraper);
          var $prev = $wraper.find('.prev');
          var $next = $wraper.find('.next');
          var $imgUL = $wraper.find('.ind_tplist').find('ul');
          var w = $imgUL.find('li').outerWidth(true);
          var liw = $imgUL.find('li').width();
          var l = $imgUL.find('li').length;
          $imgUL.width(l * (liw + 228));
          $next.click(function () {
              $imgUL.animate({'margin-left': -w}, function () {
                  $imgUL.find('li').eq(0).appendTo($imgUL);
                  $imgUL.css({'margin-left': 0});
              });
          });
          $prev.click(function () {
              $imgUL.find('li:last').prependTo($imgUL);
              $imgUL.css({'margin-left': -w});
              $imgUL.animate({'margin-left': 0});
          });
          if (autoPlay == true) {
              cls[wraper + '_timer'] = setInterval(function () {
                  $next.click();
              }, cls[wraper + '_speed'] * 1000);
              $wraper.hover(function () {
                  clearInterval(cls[wraper + '_timer']);
              }, function () {
                  cls[wraper + '_timer'] = setInterval(function () {
                      $next.click();
                  }, cls[wraper + '_speed'] * 1000);
              });
          }
      },
      getPreviewStatus: function () {
          var debug = this.getQueryValue('preview');
          if (!debug) {
              try {
                  debug = this.getQueryValue('preview', parent.document.URL);
              } catch (e) {
              }
          }
          return debug == 1;
      },
      getDevelopStatus: function () {
          var debug = this.getQueryValue('debug');
          if (!debug) {
              try {
                  debug = this.getQueryValue('debug', parent.document.URL);
              } catch (e) {
              }
          }
          return debug == 1;
      },
      getDevelopTplId: function () {
          var tplId = this.getQueryValue('tplId');
          return tplId;
      },
      getMoreHref: function (ids) {
          if (this.isNul(ids)) return '#';
          // if (ids.toString() == '0') return '#';
          if (ids.toString().split(',').length > 0) return ids.toString().split(',')[0];
          return ids;
      },
      data: {
          get: store.get,
          set: store.set,
          getJson: store.getJson,
          setJson: store.setJson,
          remove: store.remove,
          clear: store.clear
      },
      textAreaToDb: function (str) {
          var reg = new RegExp("\n", "g");
          str = str.replace(reg, "<br/>");
          return str;
      },
      dbToTextArea: function (str) {
          var reg = new RegExp("<br/>", "g");
          str = str.replace(reg, "\n");
          return str;
      },
  
      /**
       * 字符串转换成json
       * @param str 字符串,注意这不是一个标准的json字符串,仅包含内容
       * @returns {string}
       */
      parseJSON: function (str) {
          if (!!str) {
              var json = "{" + str + "}";
              json = eval('(' + json + ')');
              return json;
          } else {
              json = {};
              return json;
          }
      },
      /**
       * 将json转换成字符串
       * @param json
       * @returns {string}
       * @constructor
       */
      JSONStringify: function (json) {
          var x = [];
          for (var i in json) {
              x.push(i + ":" + json[i]);
          }
          return x.join(",");
      },
      /**
       * 当鼠标移入时添加选中虚线
       * @param $element
       */
      addMouseoverDottedBox: function ($element) {
          var xl = "",
              w = $element.outerWidth(),
              h = $element.outerHeight();
          xl += '<div class="wire wireL" style="height:' + h + 'px;"></div><div class="wire wireT" style="width:' + w + 'px;"></div><div class="wire wireR" style="height:' + h + 'px;"></div><div class="wire wireB" style="width:' + w + 'px;"></div>';
          $element.append(xl);
      },
      /**
       * 删除选中虚线
       * @param $element
       */
      removeMouseoverDottedBox: function ($element) {
          $element.children(".wire").remove();
      },
      /**
       * 添加遮罩
       * @param $element
       * @param className
       */
      addShade: function ($element, className) {
          $element.append('<div class="' + className + '" style="width:' + $element.width() + 'px; height:' + $element.height() + 'px;"></div>');
      },
      /**
       * 删除遮罩
       * @param $element
       * @param className
       */
      removeShade: function ($element, className) {
          $element.children("." + className).remove();
      },
      /**
       * 上移动函数
       * @param $element
       */
      upMove: function ($element) {
          var p = $element.prev(),
              _o = $element;
          if (p.length) {
              $element.animate({
                  "top": -p.height()
              }, 500);
              p.animate({
                  "top": $element.height()
              }, 500);
              setTimeout(function () {
                  $element.css({
                      "top": ""
                  });
                  p.css({
                      "top": ""
                  });
                  $element.mouseleave();
                  $element.remove();
                  p.before(_o);
              }, 1000);
          }
      },
      /**
       * 下移动函数
       * @param $element
       */
      downMove: function ($element) {
          var n = $element.next(),
              _o = $element;
          if (n.length) {
              $element.animate({
                  "top": n.height()
              }, 500);
              n.animate({
                  "top": -$element.height()
              }, 500);
              setTimeout(function () {
                  $element.css({
                      "top": ""
                  });
                  n.css({
                      "top": ""
                  });
                  $element.mouseleave();
                  $element.remove();
                  n.after(_o);
              }, 1000);
          }
      },
      /**
       * 删除函数
       * @param $element
       */
      delfn: function ($element) {
          $element.animate({
              "opacity": 0,
              "height": 10
          }, 500, function () {
              $(this).remove();
          });
      },
      /**
       * 添加编辑
       * @param $element
       * @param addObj
       * @param className
       * @returns {*|jQuery|HTMLElement}
       */
      addEdit: function ($element, addObj, className) {
          var op = $('<span class="' + className + '"></span>');
          for (i = 0; i < addObj.length; i++) {
              op.append(addObj[i]);
          }
          op.find("small").hover(function () {
              $(this).addClass("cur");
          }, function () {
              $(this).removeClass("cur");
          });
          $element.append(op);
          return op;
      },
      /**
       * 移除编辑
       * @param $element
       * @param className
       */
      removeEdit: function ($element, className) {
          className = className || '.operateEdit';
          $element.children(className).remove();
      },
      removeEditDom: function ($element) {
          $element.children('.wire,.operateEdit').remove();
      },
      /**
       * 改变元素的指定属性
       * @param $element
       * @param setAttr
       * @param setVal
       */
      changeAttr: function ($element, setAttr, setVal) {
          $element.attr(setAttr, setVal);
      },
      /**
       *
       * @param cSId
       */
      writeStyle: function (cSId) {
          var cS = $("#" + cSId),
              cSh = "",
              x;
          if (cS.length != 0) {
              cS.remove();
          }
          if (cSId != 'Mstyle' && cSId != 'Rstyle' && cSId != 'cusMstyle' && cSId != 'cusHMstyle') {
              if (sCssJson[cSId] == 'undefined' || !sCssJson[cSId]) {
                  cSh = "";
              } else {
                  cSh = sCssJson[cSId];
              }
          } else {
              for (x in sCssJson[cSId]) {
                  if (sCssJson[cSId][x] == 'undefined' || !sCssJson[cSId][x]) {
                      cSh += "";
                  } else {
                      cSh += sCssJson[cSId][x];
                  }
              }
          }
          $("head").append("<style type='text/css' id=" + cSId + ">" + cSh + "</style>");
      },
      /**
       *
       * @param cSId
       * @param idArray
       */
      deleteStyle: function (cSId, idArray) {
          if (cSId == 'Mstyle') {
              for (var i = 0; i < idArray.length; i++) {
                  delete sCssJson[cSId][idArray[i]];
              }
          } else {
              delete sCssJson[idArray[0]];
          }
      },
      /**
       *
       */
      changeStyleJson: function () {
  
      },
      /**
       * 拖拽停止时执行的方法
       * @param $element
       */
      dragStopFn: function ($element) {
          var sl = Math.floor(($(document).width() - DF.config.webWidth[0]) / 2),
              bl = sl + DF.config.webWidth[0] - $element.outerWidth();
          if ($element.offset().left < sl) {
              $element.css({
                  left: sl
              });
          }
          if ($element.offset().left > bl) {
              $element.css({
                  left: bl
              });
          }
      },
      /**
       * 计算当前组件的大小
       * @param cls 调用的类对象
       * @param moduleId 组件ID
       * @returns {*}
       */
      computedSize: function (cls, $target) {
          // 动态取得其 warpPadding 的值
  
          //var panelPadding = utils.getIntegerFixPX($target.find('.panel').css('padding'));
          //cls.moduleSetting.conf.panelPadding = panelPadding;
          // cls.moduleSetting.conf.width = $target.innerWidth();
          // //cls.moduleSetting.label.width = $module.innerWidth() - (panelPadding*2);
          // cls.moduleSetting.conf.height = $target.innerHeight();
          //cls.moduleSetting.label.height = $module.innerHeight() - (panelPadding*2);
          // return panelPadding;
      },
      /**
       * 生成随机数
       * @param len
       * @returns {string}
       */
      randomS: function (len) {
          var len = len || 5,
              chars = '12345qwertyuiopasdfgh67890jklmnbvcxzMNBVCZXASDQWERTYHGFUIOLKJP',
              maxPos = chars.length,
              pwd = '';
          for (var i = 0; i < len; i++) {
              pwd += chars.charAt(Math.floor(Math.random() * maxPos));
          }
          return pwd;
      },
      /**
       * 打印日志
       * @param msg
       */
      log: function (msg) {
          try {
              window.console && Function.apply.call(console.log, console, arguments)
          } catch (e) {
          }
      },
      isUndefined: function (source) {
          return typeof source == 'undefined' ? true : false;
      },
      isNul: function (source) {
          return (this.isUndefined(source) ||
          source == "" || source == null) ? true : false;
      },
      trim: function (source) {
          var trimer = new RegExp("(^[\\s\\t\\xa0\\u3000]+)|([\\u3000\\xa0\\s\\t]+\x24)", "g");
          return String(source).replace(trimer, "");
  
      },
      tryCatch: function (fn, isShowErr) {
          isShowErr = isShowErr || false;
  
          try {
              if (typeof fn === "function") {
                  fn();
              }
  
          } catch (e) {
              this.log(e);
              if (isShowErr) {
  
              }
          }
      },
      /**
       * 颜色选择器组件
       * 依赖第三方组件: colorPicker
       * 请在主页面显示引入组件
       * @param  {[type]} element       [description]
       * @param  {[type]} pickerDefault [description]
       * @param  {[type]} colors        [description]
       * @param  {[type]} onColorChange [description]
       * @return {[type]}               [description]
       */
      colorPicker: function (element, pickerDefault, colors, onColorChange) {
          $(element).colorPicker({
              pickerDefault: pickerDefault,
              colors: colors,
              transparency: true,
              showHexField: false,
              onColorChange: function (id, value) {
                  onColorChange && onColorChange(id, value);
              }
          });
      },
      stopInterval: function (objId) {
          var cls = this;
          if (cls.isNull(cls.intervalFunc)) {
              return
          }
          for (var i = 0; i < cls.intervalFunc.length; ++i) {
              var obj = cls.intervalFunc[i];
              if (objId == null || obj.id == objId) {
                  if (obj.timer) {
                      clearInterval(obj.timer)
                  }
              }
          }
      },
      dateFormater: function (dateObj, formatStr) {
          var str = formatStr;
          var Week = ['日', '一', '二', '三', '四', '五', '六'];
          var m = dateObj.getMonth() + 1;
          str = str.replace(/yyyy|YYYY/, dateObj.getFullYear());
          str = str.replace(/yy|YY/, (dateObj.getYear() % 100) > 9 ? (dateObj.getYear() % 100).toString() : '0' + (dateObj.getYear() % 100));
  
          str = str.replace(/MM/, m > 9 ? m.toString() : '0' + m);
          str = str.replace(/M/g, m);
  
          str = str.replace(/w|W/g, Week[dateObj.getDay()]);
  
          str = str.replace(/dd|DD/, dateObj.getDate() > 9 ? dateObj.getDate().toString() : '0' + dateObj.getDate());
          str = str.replace(/d|D/g, dateObj.getDate());
  
          str = str.replace(/hh|HH/, dateObj.getHours() > 9 ? dateObj.getHours().toString() : '0' + dateObj.getHours());
          str = str.replace(/h|H/g, dateObj.getHours());
          str = str.replace(/mm/, dateObj.getMinutes() > 9 ? dateObj.getMinutes().toString() : '0' + dateObj.getMinutes());
          str = str.replace(/m/g, dateObj.getMinutes());
  
  
          str = str.replace(/ss|SS/, dateObj.getSeconds() > 9 ? dateObj.getSeconds().toString() : '0' + dateObj.getSeconds());
          str = str.replace(/s|S/g, dateObj.getSeconds());
  
          return str;
      },
      getIntegerFixPX: function (source, defaultValue) {
          defaultValue = defaultValue || 0;
          if (this.isNul(source)) return defaultValue;
          source = source.replace('px', '');
          return _.toInteger(source);
      },
      getFontLength: function (width) {
          var len = 10;
          // this.log('utils.js getFontLength width: ', width);
          len = parseInt((width - 80) / 20);
          return len;
      },
      getRowIDS: function () {
          var ids = [];
          $(doms.row).each(function () {
              if (this.id) {
                  ids.push(this.id);
              }
          });
          return ids;
      },
      getModuleIDS: function () {
          var ids = [];
          $(doms.module).each(function () {
              if (this.id) {
                  ids.push(this.id);
              }
          });
          return ids;
      },
      /**
       * 生成不重复的 ID
       * @param prefix 要添加到 ID 前缀的值
       * @param id 已经存在 ID
       * @param arr 页面中相同前缀值(同一类型的)的所有已存在的 ID 集合数组
       * @returns {String} 返回一个当前页面唯一的ID
       */
      createUniqueId: function (prefix, id, arr) {
          var cls = this, uniqueId;
          //cls.log('createUniqueId >>> id: ' + id + ',arr:' + JSON.stringify(arr));
          // 在 arr 数据中找,是否存在这个 ID, 如果存在, 重新创建
          if (_.indexOf(arr, id) > -1) {
              //cls.logT('ID: ${id} 已存在,继续查找...', {id: id});
              // 如果存在
              // 递归调用自己,直到生成不重复的 ID 为止
              return cls.createUniqueId(prefix, _.uniqueId(prefix), arr);
          } else {
              // 不存在
              //cls.logT('ID: ${id} 不存在,可以正常使用...', {id: id});
              uniqueId = id;
          }
          return uniqueId;
      },
      logT: function (tpl, data) {
          var cls = this;
          var compiled = _.template(tpl);
          //cls.log(compiled(data));
      },
  
      /**
       * 创建一个与现有页面中不重复的 rowId
       * @returns {*|String}
       */
      createRowUniqueId: function () {
          var cls = this, uniqueId = _.uniqueId('row');
          return cls.createUniqueId('row', uniqueId, cls.getRowIDS())
      },
      /**
       * 创建一个与现在页面中不重复的 moduleId
       * @returns {*|String}
       */
      createModuleUniqueId: function () {
          var cls = this, uniqueId = _.uniqueId('module');
          //cls.log('utils.createModuleUniqueId >>> uniqueId: ' + uniqueId);
          var n_uniqueId = cls.createUniqueId('module', uniqueId, cls.getModuleIDS());
          // cls.log('utils.createModuleUniqueId >>> uniqueId(可用): ' + n_uniqueId);
          return n_uniqueId;
  
      },
      getQueryString: function (name) {
          var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
          var r = window.location.search.substr(1).match(reg);
          if (r != null) return (r[2]);
          return null;
      },
      suiError: function (str) {
          return '<div class="sui-msg msg-large msg-stop"><div class="msg-con">' + str + '</div><s class="msg-icon"></s></div>';
      },
      tipError: function (str, time) {
          time = time || 1;
          $.dialog.tips(utils.suiError(str), time);
      },
      createStyleInWrapById: function (moduleId) {
          if ($('#' + moduleId + '_style').length > 0)return;
          var styleHtml = '<' +
              'style type="text/css" id="' + moduleId + '_style" class="module_custom_style"></style>';
          $(doms.wraper).prepend(styleHtml);
      }
      ,
      toBoolean: function (source) {
          //if( _.isBoolean(source))return source;
          if (this.isNul(source)) return false;
          source = _.toLower(this.trim(source));
          if (source == 1 || source == "1" || source == "true") return true;
          return false;
      }
      ,
      dateStrFormat: function (dateStr, format) {
          var pattern = format.replace(/(yyyy)/g, "([0-9]{4})")
              .replace(/(yy)|(MM)|(dd)|(hh)|(mm)|(ss)/g, "([0-9]{2})")
              .replace(/[Mdhms]/g, "([0-9]{1,2})");
  
          //获取子表达式的索引
          var getIndex = function (expr1, expr2) {
              var index = format.indexOf(expr1);
              if (index == -1) index = format.indexOf(expr2);
              return index;
          };
  
          var today = new Date();
          var returnDate;
          if (new RegExp(pattern).test(this)) {
              var yPos = getIndex("yyyy", "yy");
              var mPos = getIndex("MM", "M");
              var dPos = getIndex("dd", "d");
              var hPos = getIndex("hh", "h");
              var miPos = getIndex("mm", "m");
              var sPos = getIndex("ss", "s");
              var data = {y: 0, m: 0, d: 0, h: 0, mi: 0, s: 0};
              //对索引进行排序
              var pos = new Array(yPos + ",y", mPos + ",m", dPos + ",d", hPos + ",h", miPos + ",mi", sPos + ",s").sort(function (a, b) {
                  a = parseInt(a.split(",")[0]);
                  b = parseInt(b.split(",")[0]);
                  return a > b;
              });
  
              //删除索引为-1的数组
              var tmpIndex = 0;
              var newPos = new Array();
              for (var i = 0; i < pos.length; i++) {
                  if (parseInt(pos[i].split(",")[0]) != -1) {
                      newPos[tmpIndex] = pos[i];
                      tmpIndex++;
                  }
              }
  
              //与当前文本进行匹配
              var m = dateStr.match(pattern);
              for (var i = 1; i < m.length; i++) {
                  if (i == 0) return;
                  var flag = newPos[i - 1].split(',')[1];
                  data[flag] = m[i];
              }
  
  
              data.y = data.y || today.getFullYear(); //年如果为空，则取当前年
              data.d = data.d || today.getDate(); //天如果为空，则取今天
              //月不需要处理，因为月的0月是1月
  
              //如果年是yy格式，则加上20
              if (data.y.toString().length == 2) data.y = parseInt('20' + data.y);
              data.m -= 1;
              returnDate = new Date(data.y, data.m, data.d, data.h, data.mi, data.s);
          }
          returnDate = returnDate || today;
          return returnDate;
      }
      ,
      /**
       * 将目标字符串中可能会影响正则表达式构造的字符串进行转义。
       * @name utils.escapeReg
       * @function
       * @grammar utils.escapeReg(source)
       * @param {string} source 目标字符串
       * @remark
       * 给以下字符前加上“\”进行转义：.*+?^=!:${}()|[]/\
       * @meta standard
       *
       * @returns {string} 转义后的字符串
       */
      escapeReg: function (source) {
          return String(source)
              .replace(new RegExp("([.*+?^=!:\x24{}()|[\\]\/\\\\])", "g"), '\\\x241');
      }
      ,
      alert: function (message) {
          alert(message);
      }
      ,
      error: function (message) {
          alert(message);
      }
      ,
      /**
       * 根据参数名从目标URL中获取参数值
       * @name utils..getQueryValue
       * @function
       * @grammar utils..getQueryValue(url, key)
       * @param {string} url 目标URL
       * @param {string} key 要获取的参数名
       * @meta standard
       * @see baidu.url.jsonToQuery
       *
       * @returns {string|null} - 获取的参数值，其中URI编码后的字符不会被解码，获取不到时返回null
       */
      getQueryValue: function (key, url) {
          var cls = this;
          url = url || location.href;
          var reg = new RegExp(
              "(^|&|\\?|#)" + cls.escapeReg(key) + "=([^&#]*)(&|\x24|#)",
              "");
          var match = url.match(reg);
          if (match) {
              return match[2];
          }
  
          return null;
      }
      ,
      parseLabelSubs: function (attrObj) {
  
          var labelStr = "",
              labelName = "";
  
          if (attrObj && _.isPlainObject(attrObj)) {
              _.mapKeys(attrObj, function (value, key) {
                  if (key == 'labelName') {
                      labelName = value;
                  } else {
                      labelStr += key + '="' + value + '" ';
                  }
              })
          }
          if (!_.isNull(labelName) && !_.isEmpty(labelName)) {
              labelStr = '{ls:' + _.trim(labelName) + ' ' + labelStr + '}{/ls:' + _.trim(labelName) + '}';
          }
          return labelStr;
      }
      ,
      /**
       * 将JSON字符串对象转换为模板标签对象
       * @param  {[type]} jsonStr [description]
       * @return {[type]}         [description]
       */
      parseLabel: function (attrObj) {
  
          var cls = this,
              labelStr = "",
              labelName = "",
              subLabelStr = "",
              cls = this;
          //cls.log('parseLabel >>> attrObj');
          //cls.log(attrObj);
  
          // 先判断是否有子标签
          if (attrObj && attrObj.subLabels) {
              _(attrObj.subLabels).forEach(function (item) {
                  subLabelStr += cls.parseLabelSubs(item);
              });
          }
          if (attrObj && _.isPlainObject(attrObj)) {
              _.mapKeys(attrObj, function (value, key) {
                  if (key == 'labelName') {
                      labelName = value;
                  } else if (key == 'subLabels') {
                      // 包含子标签
  
                  } else {
                      labelStr += key + '="' + value + '" ';
                  }
              })
  
          }
          if (!_.isNull(labelName) && !_.isEmpty(labelName)) {
              labelStr = '{ls:' + _.trim(labelName) + ' ' + labelStr + '}' + subLabelStr + '{/ls:' + _.trim(labelName) + '}';
          }
          return labelStr;
      }
      ,
      cookie: {
  
          _isValidKey: function (key) {
              // http://www.w3.org/Protocols/rfc2109/rfc2109
              // Syntax:  General
              // The two state management headers, Set-Cookie and Cookie, have common
              // syntactic properties involving attribute-value pairs.  The following
              // grammar uses the notation, and tokens DIGIT (decimal digits) and
              // token (informally, a sequence of non-special, non-white space
              // characters) from the HTTP/1.1 specification [RFC 2068] to describe
              // their syntax.
              // av-pairs   = av-pair *(";" av-pair)
              // av-pair    = attr ["=" value] ; optional value
              // attr       = token
              // value      = word
              // word       = token | quoted-string
  
              // http://www.ietf.org/rfc/rfc2068.txt
              // token      = 1*<any CHAR except CTLs or tspecials>
              // CHAR       = <any US-ASCII character (octets 0 - 127)>
              // CTL        = <any US-ASCII control character
              //              (octets 0 - 31) and DEL (127)>
              // tspecials  = "(" | ")" | "<" | ">" | "@"
              //              | "," | ";" | ":" | "\" | <">
              //              | "/" | "[" | "]" | "?" | "="
              //              | "{" | "}" | SP | HT
              // SP         = <US-ASCII SP, space (32)>
              // HT         = <US-ASCII HT, horizontal-tab (9)>
  
              return (new RegExp("^[^\\x00-\\x20\\x7f\\(\\)<>@,;:\\\\\\\"\\[\\]\\?=\\{\\}\\/\\u0080-\\uffff]+\x24")).test(key);
          }
          ,
          setRaw: function (key, value, options) {
              if (!this._isValidKey(key)) {
                  return;
              }
  
              options = options || {};
              //options.path = options.path || "/"; // meizz 20100402 设定一个初始值，方便后续的操作
              //berg 20100409 去掉，因为用户希望默认的path是当前路径，这样和浏览器对cookie的定义也是一致的
  
              // 计算cookie过期时间
              var expires = options.expires;
              if ('number' == typeof options.expires) {
                  expires = new Date();
                  expires.setTime(expires.getTime() + options.expires);
              }
  
              document.cookie =
                  key + "=" + value + (options.path ? "; path=" + options.path : "") + (expires ? "; expires=" + expires.toGMTString() : "") + (options.domain ? "; domain=" + options.domain : "") + (options.secure ? "; secure" : '');
          }
          ,
          set: function (key, value, options) {
  
              this.setRaw(key, encodeURIComponent(value), options);
          }
          ,
          getRaw: function (key) {
              if (this._isValidKey(key)) {
                  var reg = new RegExp("(^| )" + key + "=([^;]*)(;|\x24)"),
                      result = reg.exec(document.cookie);
  
                  if (result) {
                      return result[2] || null;
                  }
              }
  
              return null;
          }
          ,
          get: function (key) {
              var value = this.getRaw(key);
              if ('string' == typeof value) {
                  value = decodeURIComponent(value);
                  return value;
              }
              return null;
          }
          ,
          remove: function (key, options) {
              options = options || {};
              options.expires = new Date(0);
              this.setRaw(key, '', options);
          }
      }
      ,
      /**
       * 截取字符串
       * @cutstr
       * @param   {String}        字符串
       * @param   {Integer}       截取字符串长度
       */
      cutstr: function (str, len, fill) {
          if (_.isNull(str)) {
              return "";
          }
          var str_length = 0;
          var fill = fill ? fill : "...";
          var len = len ? len : 100;
          var str_cut = new String();
          var str_len = (str + "").length;
          len = len * 2;
  
          for (var i = 0; i < str_len; i++) {
              var a = str.charAt(i);
              str_length++;
              if (escape(a).length > 4) {
                  //中文字符的长度经编码之后大于4
                  str_length++;
              }
              str_cut = str_cut.concat(a);
              if (str_length >= len) {
                  str_cut = str_cut.concat(fill);
                  return str_cut;
              }
          }
          //如果给定字符串小于指定长度，则返回源字符串；
          if (str_length < len) {
              return str;
          }
      },
      /**
       * 添加专题自定义组件样式
       */
      addCustomStyleList: function (obj, data) {
          var cls = this,
              key = data['type'];
  
          if (data && data.conf) {
              var className = data.conf.className ? data.conf.className : key;
              if (!obj.STYLELIST) obj.STYLELIST = {};
              if (!obj.STYLELIST[key]) {
                  obj.STYLELIST[key] = [{text: '默认样式', value: key}];
              }
              var styleList = obj.STYLELIST[key];
              if (!cls.checkStyleList(className, styleList)) {
                  styleList.push({text: '样式' + styleList.length, value: className});
              }
          }
      },
      checkStyleList: function (className, styleList) {
          if ($.isArray(styleList)) {
              for (var i = 0, l = styleList.length; i < l; i++) {
                  if (className == styleList[i].value) {
                      return true;
                      break;
                  }
              }
          }
          return false;
      },
      /**
       * 获取专题自定义组件样式
       */
      getCustomStyleList: function (obj, type) {
          if (!obj)return {};
          if (type && obj.STYLELIST) {
              return obj.STYLELIST[type];
          } else {
              return obj.STYLELIST;
          }
      },
      //过滤自定义组件样式
      replaceClassName: function ($module, data, pageIsFristLoad) {
          if (!data) {
              return "";
          }
         var css = $module.removeClass(data.type).attr("class"),
          // var css = $module.attr("class"),
              re = new RegExp(data.type + "-(\\w+)", "gi");
  
          //非初始化，清空所有样式
          if (!pageIsFristLoad) {
              $module.removeClass();
          }
  
          $module.addClass((css + "").replace(re, "") + " " + data.conf.className);
      }
  };
  
  module.exports = utils;
  

});

;/*!app/common/config.js*/
define('app/common/config', function(require, exports, module) {

  /**
   * 程序配置类
   * Created by Dzl on 2016-8-25.
   */
  'use strict';
  
  // var $ = require('jquery');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var doms = require('app/common/template-dom-structure');
  
  
  /**
   * 默认配置
   * @type {Object}
   */
  var Config = {
      // 获取JAVA的上下文,使用top.的目的是只取顶层页面的变量值,这样专题模板页面就无需放置相关变量.
      CTX: top.window.WEBCONTEXT ? top.window.WEBCONTEXT : '',
      FASTDFS_HOST: top.window.FASTDFS_HOST ? top.window.FASTDFS_HOST : '/',
      DOMAIN: top.window.GLOBAL_SITEURI ? top.window.GLOBAL_SITEURI : '',
      /**
       * 获取当前站点的URL
       * @returns {string}
       */
      getSiteUrl: function () {
          return top.window.GLOBAL_SITEURI ? top.window.GLOBAL_SITEURI : '';
      },
      /**
       * 获取当前应用的上下文
       * @returns {string}
       */
      getCtx: function () {
          return top.window.WEBCONTEXT ? top.window.WEBCONTEXT : '';
      },
      /**
       * 获取 FastDfs 的 host
       * @returns {*}
       */
      getFastDfsHost: function () {
          return top.window.FASTDFS_HOST ? top.window.FASTDFS_HOST : '/';
      },
      /**
       * 获取文件服务器地址
       * @returns {string}
       */
      getFileServerPath: function () {
          return top.window.GLOBAL_FILESERVERPATH ? top.window.GLOBAL_FILESERVERPATH : '';
      },
      /**
       * 获取文件服务器地址，新的前缀
       * @returns {string}
       */
      getFileServerNamePath: function () {
          return top.window.GLOBAL_FILESERVERNAMEPATH ? top.window.GLOBAL_FILESERVERNAMEPATH : '';
      },
      /**
       * 获取栏目的服务端路径
       * @returns {string}
       */
      getNodeUrl: function () {
          return this.getSiteUrl() + '/content/column/';
      },
  
      getTemplateIndexCss: function () {
          return base.templateWindow.$('#indexCss').attr('href');
      },
      /**
       * 获取标题链接
       * @param id
       * @returns {*}
       */
      getTitleHref: function (ids) {
          return this.getNodeUrl() + this.getFristIds(ids);
      },
      /**
       * 获取其他站点的栏目标题链接
       * @param id
       * @returns {*}
       */
      getOtherTitleHref: function (ids,siteId) {
          var arr = base.SITE_LIST,
              href = '';
          if(!siteId) {
              return false;
          }
          if(!arr || arr.length==0) {
              return false;
          }
          for(var i=0;i<arr.length;i++) {
              if(siteId==arr[i].siteId) {
                  href = arr[i].uri + '/content/column/' + this.getFristIds(ids);
                  break;
              }
          }
          return href;
      },
      /**
       * 获取专题首页链接
       * @param id
       * @returns {string}
       */
      getIndexHref: function () {
          //var id = base.getQueryString('rootTplId');
          var id = Ls.url.get("rootTplId",$(doms.iframe).attr("src"));
          return this.getSiteUrl() + '/site/tpl/' + this.getFristIds(id);
      },
      /**
       * 获取更多链接
       * @param ids
       * @returns {*}
       */
      getFristIds: function (ids) {
          if (utils.isNul(ids)) return '#';
          // if (ids.toString() == '0') return '#';
          if (ids.toString().split(',').length > 0) return ids.toString().split(',')[0];
          return ids;
      },
      /**
       * 公共组件列表配置
       */
      COMMON_COMPONENT_LIST: ['infoList','imgList','carousel','scrollImages','singleImage','fileDownloadList',
          'infoTabs','infoHeadlineList','docHeadlinesTabs','tabsContent','infoTabsHeadline','infoImgList',
          'infoImgNote','imgList','imgDocList','flipScreenMarquee','imgListMarquee','linkImgMarquee',
          'linkListText','linkListImg','linkListImgScroll','htmlLinkEdit','htmlEdit','vote','videoPlay','videoCarousel','linkDocList'],
      // 服务器接口
  
      // 开发状态标记: true为开发状态,不与服务器交互 | false 为正式平台,则与服务器交互
      developStatus: false,
      // 模板标记，用于开发测试时使用
      developTplId: "",
      /**
       * 允许上传的文件后缀
       */
      allowUploadFileExtensions: {
          all: {
              extensions: 'doc,docx,xls,xlsx,wps,zip,rar,txt,pdf,ppt,pptx,bpd,hfd,esp,lrm,pic,png,jpg,jpeg,gif,bmp,mp4,flv',
              mimeTypes: 'application/*,text/*,image/*,video/*'
          },
          image: {extensions: 'png,jpg,jpeg,gif,bmp', mimeTypes: 'image/*'},
          doc: {
              extensions: 'doc,docx,xls,xlsx,wps,zip,rar,txt,pdf,ppt,pptx,bpd,hfd,esp,lrm,pic',
              mimeTypes: 'application/*,text/*'
          },
          video: {extensions: 'mp4,flv', mimeTypes: 'video/*'}
      },
      /**
       * 最大行设置
       */
      maxRow: 10,
  
      maxMo: 20,
      rowNum: 0,
      showPx: true,
      /**
       * 是否显示向导
       */
      showGuides: true,
      /**
       * 删除组件历史记录
       */
      delMoHistory: {},
      /**
       * 远程服务 API 地址
       */
      rpc: {
          /**
           * 根据专题ID获取可用组件列表
           * 类型: GET
           * 参数：specicalId
           * 返回: {String} 以逗号分隔,如:infoList,imgList,...
           */
          getComponentList: '/design/getComponentList',
          /**
           * 保存可用组件列表
           * 类型: POST
           * 参数: specicalId
           *      componentsList
           *
           */
          saveComponentList: '/design/saveComponentList',
          /*
           根据模板ID获取模板内容
           参数: *tplId 模板ID
           */
          getTplContentById: '/design/getTplContentById',
          /**
           * 保存模板内容
           * 参数: *mongoId 模板ID
           * *content 模板内容
           */
          saveTplContent: '/design/saveTplContent',
          /*
           根据模板类型(tplType)获取模板列表
           参数:
           *themeId
           tplType 模板类型，允许值：index，nav，news，common
           返回值:
           "data":[{
           "template":true,
           "filePath":null,
           "tempType":"nav",
           "pid":4138034,
           "createOrganId":15005,
           "leaf":0,
           "type":"Special",
           "specialId":4138030,
           "updateDate":"2016-12-26 15:13:45",
           "id":4138041,
           "updateUserId":484685,
           "siteId":53310,
           "tempTypeName":null,
           "tplContent":null,
           "name":"专题-栏目页",
           "fileName":null,
           "createDate":"2016-12-26 15:13:45",
           "createUserId":484685
           }]
           */
          getTplItem: '/design/getTplItem',
          /*
           获取皮肤
           参数: *themeId 专题ID
           返回值:
           "data":[{
           "id":4138033,
           "updateUserId":484685,
           "themeId":4133195,
           "siteId":53310,
           "color":"#F8CF8B",
           "name":"黄色",
           " ":"yellow.css",
           "createOrganId":15005,
           "createDate":"2016-12-26 15:13:45",
           "updateDate":"2016-12-26 15:13:45",
           "specialID":4133195,
           "recordStatus":"Normal",
           "createUserId":484685
           }]
  
           */
          getSpecileSkins: '/design/getSpecileSkins',
          /**
           * 更改默认皮肤样式
           * 参数： themeId,skins
           */
          updateDefaultSkins: '/design/updateDefaultSkins',
          /**
           *  新增(修改)栏目接口
           *  url: /design/saveColumn
           * type: post
           * params: <父栏目 ID>
           * <栏目名称>
           * [栏目ID] 有值作为修改操作
           * {code}
           * 注：默认新闻类型
           */
          saveColumn: '/design/saveColumn',
          /**
           * 设置缓存
           * 可多次设置缓存(点击设置缓存,值如果为空,提示:"内容为空")
           * html <字符串>: 输入内容
           * themeId <整数>: 主题 ID
           */
          setCache: '/special/cache/setCache',
          /**
           * 读取缓存 可一直回退,直到初始状态(为空)
           * themeId <整数>: 主题 ID
           */
          getCache: '/special/cache/getCache',
          /**
           * 清除缓存 将缓存设置为空(即清除),再点击读取缓存,显示值为空
           * themeId<整数>: 主题ID
           */
          clearCache: '/special/cache/clearCache',
          /**
           * 读取缓存 只可读取上一个缓存
           * themeId<整数>: 主题ID
           */
          getPreViewCache: '/special/cache/getPreViewCache',
          /**
           * 保存组件自定义样式
           */
          saveCustomStyleList: '/design/saveCustomStyleList',
          /**
           * 获取专题相关信息
           */
          getSpecialEO: '/design/getSpecialEO',
          /**
           * 用于保存用户的页面背景
           */
          savePageBackground: '/design/savePageBackground',
          saveSpecialModuleSytle: '/design/saveSpecialModuleSytle',
          getPageBackground: '/design/getPageBackground',
          /**
           * 获取站点tree
           */
          getSiteTree: '/siteMain/getAllSites'
  
  
  
      }
  };
  
  base.plugin('config', Config);
  
  module.exports = Config;
  

});

;/*!app/mock-data/skins.js*/
define('app/mock-data/skins', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-2-25.
   */
  
  module.exports = [{
      "color": "#c40000",
      "defaults": 0,
      "path": "red"
  }, {
      "color": "#0086c1",
      "defaults": 0,
      "path": "blue"
  }, {
      "color": "#8fc31f",
      "defaults": 0,
      "path": "green"
  }, {
      "color": "#ffbd0c",
      "defaults": 0,
      "path": "yellow.css"
  }];

});

;/*!app/common/db.js*/
define('app/common/db', function(require, exports, module) {

  /**
   * 与服务端交户的类
   * Created by Dzl on 2016-8-25.
   * app/common/db.js
   */
  
  var Q = require('node_modules/q/q');
  var _ = require('node_modules/lodash/lodash');
  
  var config = require('app/common/config');
  var utils = require('app/common/utils');
  var doms = require('app/common/template-dom-structure');
  
  /**
   * 封装的 ajax get 方法
   * @param url
   * @param data
   * @param okFn
   * @returns 返回 promise 对象
   */
  var ajaxGet = function (url, data, okFn) {
      var dtd = Q.defer();
      $.ajax({
          url: url,
          cache: false,
          data: data,
          contentType: 'application/json',
          dataType: 'json',
          success: function (json) {
              if (json.status) {
                  dtd.resolve(json.data);
                  if (_.isFunction(okFn)) okFn(json.data);
              } else {
                  // utils.alert(json.desc);
                  dtd.reject(json.desc);
              }
          },
          error: function (e) {
              utils.alert('服务端出现异常,请与管理员联系');
          }
  
      });
      return dtd.promise;
  };
  
  /**
   * 封装的 ajax post 方法
   * @param url
   * @param data
   * @returns  返回 promise 对象
   */
  var ajaxPost = function (url, data) {
      var dtd = Q.defer();
      $.ajax({
          type: 'post',
          url: url,
          cache: false,
          data: data,
          dataType: 'json',
          success: function (json) {
              if (json.status) {
                  // okFn(json.data);
                  dtd.resolve(json.data);
              } else {
                  utils.alert(json.desc);
              }
          },
          error: function (e) {
              utils.alert('服务端出现异常,请与管理员联系');
          }
  
      });
      return dtd.promise;
  };
  
  var DB = {};
  DB.ajaxGet = ajaxGet;
  DB.ajaxPost = ajaxPost;
  
  DB.clearDomSelector = '.moveFrame,.moduleLayer,.flutterLayer,.editLayerTips,.ui-draggable-dragging,.shortcutLayer,.ui-sortable-placeholder,.fk-moduleToolbar,.draggableBtn,.mulColTabSortIcon,.addNewModule';
  
  
  /**
   * 根据专题ID获取可用的组件列表
   * @param specialId
   * @returns {Object}  Promise 对象 数据为： infoList,imgList
   */
  DB.getComponentList = function (specialId) {
      if (!utils.getDevelopStatus()) {
          // 生产环境
          return ajaxGet(config.rpc.getComponentList, {
              specialId: specialId
          });
      } else {
          // 本地开发环境
          var dtd = Q.defer();
          // 模拟数据
          var data = null;
          dtd.resolve(data);
          return dtd.promise;
      }
  };
  /**
   * 保存可用组件列表到后端
   * @param specialId
   * @param list
   * @returns {Object} Promise 对象
   */
  DB.saveComponentList = function (specialId, list) {
  
      if (!utils.getDevelopStatus()) {
          utils.log('DB.saveComponentList specialId: ', specialId);
          utils.log('DB.saveComponentList componentsList: ', list.join(','));
          // 生产环境
          return ajaxPost(config.rpc.saveComponentList, {
              specialId: specialId,
              componentsList: list.join(',')
          });
      } else {
          // 本地开发环境
          var dtd = Q.defer();
          // 模拟数据
          var data = '';
          dtd.resolve(data);
          return dtd.promise;
      }
  };
  
  /**
   * 从远程获取皮肤样式数组
   * @returns {Object} Promise 对象
   */
  DB.getSkins = function (specialId) {
      if (!utils.getDevelopStatus()) {
          // 生产环境
          return ajaxGet(config.rpc.getSpecileSkins, {
              specialId: specialId,
              themeId: specialId
          });
      } else {
          // 本地开发环境
          var dtd = Q.defer();
          // 模拟数据
          var data = require('app/mock-data/skins');
          dtd.resolve(data);
          return dtd.promise;
      }
  };
  
  /**
   * 更新默认皮肤样式
   * @param specialId 主题ID
   * @param skins 皮肤值
   * @returns {Object} Promise 对象
   */
  DB.updateDefaultSkins = function (specialId, skins) {
      utils.log('[db.js] updateDefaultSkins');
      var cls = this, dtd = Q.defer();
      if (!utils.getDevelopStatus()) {
          // TODO: 当用户选择了皮肤后， 但没有保存模板，其选择的皮肤将与实现模板展示的不相符合
          // 解决方案：在选择皮肤时， 先保存当前模板，然后再设置皮肤
          var ajaxQueue = [];
          ajaxQueue.push(cls.saveTemplate(true));
          ajaxQueue.push(ajaxPost(config.rpc.updateDefaultSkins, {
              specialId: specialId,
              themeId: specialId,
              skins: skins
          }));
          Q.all(ajaxQueue).then(function () {
              dtd.resolve();
          });
          // return this.saveTemplate().then(function () {
          //     return ajaxPost(config.rpc.updateDefaultSkins, {
          //         specialId: specialId,
          //         skins: skins
          //     });
          // });
      } else {
          dtd.resolve();
      }
      return dtd.promise;
  };
  
  /**
   * 保存用户上传的专题全局页面背景
   * @param specialId 专题ID
   * @param pageBackground 页面背景值
   * @returns {Object} Promise 对象
   */
  DB.savePageBackground = function (specialId, pageBackground) {
      utils.log('[db.js] savePageBackground specialId: ', specialId);
      utils.log('[db.js] savePageBackground pageBackground: ', pageBackground);
      var cls = this, dtd = Q.defer();
      if (!utils.getDevelopStatus()) {
          return ajaxPost(config.rpc.savePageBackground, {
              specialId: specialId,
              pageBackground: pageBackground
          });
      } else {
          dtd.resolve();
      }
      return dtd.promise;
  };
  
  DB.saveSpecialModuleSytle = function (tplId, style) {
      utils.log('[db.js] saveSpecialModuleSytle tplId: ', tplId);
      // utils.log('[db.js] saveSpecialModuleSytle style: ', style);
      var cls = this, dtd = Q.defer();
      if (!utils.getDevelopStatus()) {
          return ajaxPost(config.rpc.saveSpecialModuleSytle, {
              tplId: tplId,
              style: style
          });
      } else {
          dtd.resolve();
      }
      return dtd.promise;
  };
  
  
  /**
   * 保存模板
   * @param noNeedTips
   * @returns {Object} Promise 对象
   */
  DB.saveTemplate = function (noNeedTips) {
      utils.log('[db.js] saveTemplate');
      var dtd = Q.defer();
      // 从本地存储中取,不能通过URL中获取,因为处于顶层页面的URL中的tplId是不变化的
      // 只有处理iframe页面中的URL中的tplId才是可用的.
      // 在顶层页面(设计器页面)加载时获取并存入到本地存储
      // 页面切换时要同步修改TPLID的值,要保证本地存储中的TPLID就是当前操作的模板ID
      //var tplId = utils.data.get('TPLID');
      var tplId = "";
      if (!utils.getDevelopStatus()) {
          tplId = Ls.url.get("tplId", $(doms.iframe).attr("src"));
      } else {
          tplId = utils.data.get('TPLID');
      }
  
      utils.log('tplId>>>>>>>>>>', tplId);
  
      // 获取专题ID,对于同一个专题其值是唯一的,因此不用去本地存储中获取,可以通过URL参数获取
      var specialId = utils.getSpecialId();
      utils.log('db.saveTemplate >>> tplId: ', tplId);
      utils.log('db.saveTemplate >>> specialId: ', specialId);
      if (utils.isNul(tplId) || tplId == 'null') {
          tplId = 1;
      }
      var cls = this;
      // if (utils.isNul(tplId)) {
      //     utils.error('当前模板主题ID错误,请重新打开');
      //     return;
      // }
      // 先获取未修改前的模板内容
      cls.getTemlateHtmlById(tplId, function (html) {
          utils.log(html);
          // 取得模板内容
          var htmlContent = html;
          cls.SAVEFLAG = true;
          // 取得皮肤样式
          var skins = $.Site.templateWindow.$('body').attr('class');
          var saveFlag = $.Site.templateWindow.$('body').attr('data-save');
          var dataSave = !utils.isNul(saveFlag) ? ' data-save="' + saveFlag + '" ' : '';
          // 注意此处是clone一个对象,并不是针对原dom文档操作
          var $templateContent = $.Site.templateWindow.$(doms.wraper).clone();
          var attachContent = "";
          /*var reg = /<div id="ls_common_float"[^>]*>([\s\S]*)<\/div>/i;
          var $fl = !utils.isNul(htmlContent.match(reg)) ? $(htmlContent.match(reg)[0]) : "";
          if ($fl.length > 0) {
              $floatContent = '<div id="ls_common_float" class="home_web j-couplet">' + $fl.clone().html() + '</div>';
          }*/
  
          // 保存附加的html片段
          $templateContent.find(".j-attach-html").each(function (i, v) {
              attachContent += v.outerHTML;
          });
  
          // 保存时作内容清洗
          // 1. 把所有.module中的内容去除
          //var $templateContent = $(templateContent);
          //$templateContent.find(doms.module).empty();
          // 处理公共部分
          var ajaxObj = {}, ajaxQueue = [], ajaxQueueData = [];
          $templateContent.find(doms.module).each(function () {
              var $el = $(this),
                  moduleId = $el.attr('id'),
                  type = $el.attr('data-type'),
                  conf = $el.attr('data-conf'),
                  label = $el.attr('data-label');
              // utils.log('db.saveTemplate: type: ' + type + ' ,label: ' + label);
              if (type == 'articleNewsDetail') {
                  cls.IsDetailPage = true;
              }
              // 针对有内容控件对象存在的模板,并且label不为空的模板进行处理
              if ($.Site.templateApp[type] && _.isFunction($.Site.templateApp[type].parseSave)) {
                  // 清空原来的内容
                  //$el.empty();
                  // 将标签字符串转换为对象
                  var labelObj = utils.isNul(label) ? {} : utils.parseOptions(label);
                  var confObj = utils.isNul(conf) ? {} : utils.parseOptions(conf);
                  var options = {conf: confObj, label: labelObj, moduleId: moduleId};
                  // utils.log('start parseSave >>> confObj: ' + confObj);
                  // utils.log('start parseSave >>> labelObj: ' + labelObj);
                  //utils.log('start parseSave >>> options: ' + JSON.stringify(options));
                  var panelHtml = $.Site.templateApp[type].parseSave(options);
                  // 验证标签没有关联
                  if (!utils.getDevelopStatus()) {
                      if (panelHtml === null) {
                          Ls.tipsErr(confObj.title + '组件没有关联到有效栏目');
                          cls.SAVEFLAG = false;
                          return false; // 结束循环
                      }
                  }
                  //utils.log('panelHtml: ' + panelHtml);
                  // 保存前处理标签
                  $el.html(panelHtml);
              }
          });
          utils.log('db.saveTemplate: label parse end, cls.SAVEFLAG:  ', cls.SAVEFLAG);
          if (cls.SAVEFLAG) {
              // 处理公共模板
              $templateContent.find(doms.tplCommon).each(function () {
                  var $elc = $(this),
                      _tplId = $elc.attr('data-tplid'),
                      _labelStr = '{ls:include id="' + _tplId + '" }{/ls:include}',
                      _html = $elc[0].outerHTML;
                  // 分别保存
                  if (!utils.getDevelopStatus()) {
                      //ajaxQueue.push(cls.saveTemplateById(_tplId, _html));
                      // 准备用于提交的参数数据对象
                      ajaxQueueData.push({tplId: _tplId, html: _html});
  
                  }
                  $elc.replaceWith(_labelStr);
              });
  
              // 处理自定义样式
              var customStyle = '';
              $templateContent.find('.module_custom_style').each(function () {
                  var $el = $(this);
                  customStyle += $el.html();
              });
              //utils.log('customStyle: ', customStyle);
              $templateContent.find('.module_custom_style').remove();
              // 检查模板页面是否存在 <style id="specialModuleSytle">{ls:specialModuleSytle tplId={#tplId}}{/ls:specialModuleSytle}</style>
              var specialModuleSytle = '<style id="specialModuleSytle">{ls:specialModuleSytle tplId="' + tplId + '"}{\/ls:specialModuleSytle}<\/style>';
              // 使用正则式查找 head
              var regex = /<head>([\s\S]*?)<\/head>/gi;
              var head = htmlContent.match(regex)[0];
              // utils.log('开始处理head >>> head: ',head);
  
              // 将 head 替换为 div,以便于jquery能够操作
              var headDiv = head.replace('<head>', '<div>').replace('<\/head>', '<\/div>');
              var headInnerHtml = head.replace('<head>', '').replace('<\/head>', '');
              //utils.log('开始处理head >>> headInnerHtml: ',headInnerHtml);
              var $headDiv = $(headDiv);
              //utils.log('将 head 替换为 div,以便于jquery能够操作: ',headDiv);
              // 查找是否存在 specialModuleSytle 对象
              var $specialModuleSytle = $headDiv.find('#specialModuleSytle');
              // 如果存在则忽略
              if ($specialModuleSytle.length > 0) {
              } else {
  
                  headInnerHtml += specialModuleSytle;
                  //utils.log('处理后的head: ',headInnerHtml);
                  // 重新构造 head
                  var nHead = '<head>' + headInnerHtml + '<\/head>';
                  // 将获取的模板页面中的head替换为处理过的head
                  //utils.log('重新构造后的head: ',nHead);
                  htmlContent = htmlContent.replace(regex, nHead);
              }
              // 保存自定义样式内容
              cls.saveSpecialModuleSytle(tplId, customStyle);
  
              // 模板清洗
              //$templateContent.find('.moveFrame,.moduleLayer,.flutterLayer,.editLayerTips,.ui-sortable-placeholder,.shortcutLayer,.fk-moduleToolbar,.draggableBtn,.mulColTabSortIcon,.addNewModule').remove();
              $templateContent.remove(cls.clearDomSelector);
              $templateContent.find('.ui-droppable').removeClass('ui-droppable');
              $templateContent.find('.ui-sortable').removeClass('ui-sortable');
              $templateContent.find(doms.module).removeAttr('title');
              // 处理专题模板中的首页链接
              $templateContent.find('.j-specialIndexUrl').attr('href', '#{specialIndexUrl}');  //无甚作用
  
  
              // 使用正则表达式替换body中所有内容
              var specialPageBackgroundLabel = "{ls:specialPageBackground specialId='" + specialId + "'}{/ls:specialPageBackground}";
              var nhtmlContent = htmlContent.replace(/<body.*>/i, '<body ' + dataSave + ' class=\'{ls:specialSkin specialId="' + specialId + '"}{/ls:specialSkin}\'>')
                  .replace(/<div id="wraper"[^>]*>([\s\S]*)<\/div>/i, '<div id="' + doms.wraper.substring(1) + '" class="' + $templateContent.attr('class') + '" data-setting="' + $templateContent.attr('data-setting') + '" style="' + specialPageBackgroundLabel + '">' + $templateContent.html() + '</div>' + attachContent);
              // var $htmlContent = $(htmlContent);
              // $htmlContent.find('body').attr({
              //     'data-save':saveFlag,
              //     'class': '{ls:specialSkin specialId="'+specialId+'"}{/ls:specialSkin}'
              // }).find(doms.wraper).html($templateContent.html());
              // var nhtmlContent = $htmlContent[0].outerHTML;
  
  
              utils.log(nhtmlContent);
              if (!utils.getDevelopStatus()) {
                  // ajaxQueue.push(cls.saveTemplateById(tplId, nhtmlContent));
                  // 准备用于提交的参数数据对象
                  ajaxQueueData.push({tplId: tplId, html: nhtmlContent});
  
                  // 迭代数据,构造用于 Promise 工厂所需的方法
                  _.forEach(ajaxQueueData, function (value) {
                      ajaxObj['fn' + value.tplId] = function () {
                          // cls.saveTemplateById 返回的必须是一个 Promise 对象
                          return cls.saveTemplateById(value.tplId, value.html);
                      };
                  });
                  // 迭代对象,构造 Promise 队列
                  _.map(ajaxObj, function (value) {
                      ajaxQueue.push(value)
                  });
                  // 使用 Promise 工厂方法指执行 Promise 队列
                  utils.executeSequentially(ajaxQueue).then(function (result) {
                      // 放置已经保存的标记
                      $.Site.templateWindow.$('body').attr('data-save', '1');
                      dtd.resolve();
                      if (!noNeedTips) {
                          Ls.tipsOk('保存成功');
                      }
                  });
                  // 处理公共底部
                  // Q.all(ajaxQueue).then(function () {
                  //     // 放置已经保存的标记
                  //     $.Site.templateWindow.$('body').attr('data-save', '1');
                  //     dtd.resolve();
                  //     if (!noNeedTips) {
                  //         Ls.tipsOk('保存成功');
                  //     }
                  // });
              } else {
                  utils.log(nhtmlContent);
                  dtd.resolve();
  
              }
  
          } else {
              dtd.resolve();
          }
      });
      return dtd.promise;
  };
  
  
  /**
   * 获取模板页面经过处理后的的HTML，用于保存到历史记录中
   * @param $wraperClone
   * @returns {string|*}
   */
  DB.getTemplateHtml = function ($wraperClone) {
      var cls = this;
      var $templateContent = $wraperClone ? $wraperClone : $.Site.templateWindow.$(doms.wraper).clone();
      $templateContent.find(doms.module).empty();
      $templateContent.remove(cls.clearDomSelector);
      $templateContent.find('.ui-droppable').removeClass('ui-droppable');
      $templateContent.find('.ui-sortable').removeClass('ui-sortable');
      $templateContent.find(doms.module).removeAttr('title');
      $templateContent.remove('.ui-draggable-dragging');
      return $templateContent[0].outerHTML;
  };
  /**
   * 保存历史记录.
   * @returns 返回Promise 对象
   */
  DB.saveHistory = function ($wraperClone) {
      var html = this.getTemplateHtml($wraperClone);
      var postData = {
          tplId: Ls.url.get("tplId", $(doms.iframe).attr("src")),
          html: html
      };
      return this.setCache(postData);
  };
  /**
   * 撤消(返回上一步)
   * @returns  返回Promise 对象
   */
  DB.undo = function () {
      var tplId = Ls.url.get("tplId", $(doms.iframe).attr("src"));
      return this.getCache(tplId);
  };
  
  /**
   * 根据模板类型获取模板页列表
   * @param  {Number} specialId [主题ID]
   * @param  {String} tplType [模板类型: index，nav(默认)，news，common]
   * @returns {Object} Promise 对象
   */
  DB.getPages = function (specialId, tplType) {
      return ajaxGet(config.rpc.getTplItem, {
          specialId: specialId,
          themeId: specialId,
          tplType: tplType
      })
  };
  
  /**
   * 保存模板内容
   * @param  {[Number]}   tplId    [模板ID]
   * @param  {[String]}   html     [要保存的模板内容]
   * @returns {Object} Promise 对象
   */
  DB.saveTemplateById = function (tplId, html) {
      return ajaxPost(config.rpc.saveTplContent, {
          mongoId: tplId,
          content: html
      })
  };
  // h3. 新增(修改)栏目接口
  //
  // {code}
  // url: /design/addColumn
  // type: post
  // params: <父栏目ID>
  // <栏目名称>
  // [栏目ID] 有值作为修改操作
  // {code}
  // 注：默认新闻类型
  
  DB.saveNode = function (data) {
      return ajaxPost(config.rpc.saveColumn, data);
  };
  
  /**
   * 设置缓存
   * @param tplId 模板ID
   * @param html 要保存的内容
   * @returns  返回 promise 对象
   */
  DB.setCache = function (options) {
      utils.log('DB.setCache 保存历史记录');
      var postData = {
          specialId: options.tplId,
          html: options.html
      };
      var dtd = Q.defer();
      if (utils.getDevelopStatus()) {
          utils.log('开发模式 >>>');
  
          setTimeout(function () {
              //utils.log('postData: ', postData);
              dtd.resolve({
                  status: true, desc: '', data: ''
              });
          }, 200);
          return dtd.promise;
      } else {
          // setTimeout(function () {
          //     utils.log('postData: ', postData);
          //     dtd.resolve({
          //         status: true, desc: '', data: ''
          //     });
          // }, 200);
          // return dtd.promise;
          return ajaxPost(config.rpc.setCache, postData);
      }
  
  };
  /**
   * 读取缓存 可一直回退,直到初始状态(为空)
   * @param tplId 模板ID
   * @returns   返回 promise 对象 data:模板内容
   */
  DB.getCache = function (tplId) {
      utils.log('DB.getCache 撤消,返回到上一次');
      var dtd = Q.defer();
      if (utils.getDevelopStatus()) {
          utils.log('开发模式 >>>');
  
          var html = this.getTemplateHtml();
          setTimeout(function () {
              utils.log('tplId: ', tplId);
              dtd.resolve(html);
          }, 200);
          return dtd.promise;
      } else {
          // var html = this.getTemplateHtml();
          // setTimeout(function () {
          //     utils.log('tplId: ', tplId);
          //     dtd.resolve(html);
          // }, 200);
          // return dtd.promise;
  
          return ajaxGet(config.rpc.getCache, {
              specialId: tplId
          })
      }
  };
  /**
   * 清除缓存 将缓存设置为空(即清除),再点击读取缓存,显示值为空
   * @param tplId 模板ID
   * @returns  返回 promise 对象
   */
  DB.clearCache = function (tplId) {
      //utils.log('DB.clearCache 清除历史记录');
      return ajaxPost(config.rpc.clearCache, {
          specialId: tplId
      })
  };
  /**
   * 读取缓存 只可读取上一个缓存
   * @param tplId 模板ID
   * @returns  返回 promise 对象
   */
  DB.getPreViewCache = function (tplId) {
      return ajaxGet(config.rpc.getPreViewCache, {
          specialId: tplId
      })
  };
  /**
   *  获取专题对象
   * @param specialId
   * @returns  返回 promise 对象
   */
  DB.getSpecialEO = function (specialId) {
      return ajaxGet(config.rpc.getSpecialEO, {
          specialId: specialId
      })
  };
  /**
   * 保存组件自定义样式
   * @param specialId 主题ID
   * @param styleList 组件样式列表字符串
   * @returns  返回 promise 对象
   */
  DB.saveCustomStyleList = function (specialId, styleList) {
      return ajaxPost(config.rpc.saveCustomStyleList, {
          specialId: specialId,
          styleList: styleList
      })
  };
  
  /**
   * 根据模板ID直接返回模板HTML
   * @param  {[type]}   tplId    [description]
   * @param  {Function} callback [description]
   * @returns {Object} Promise 对象
   */
  DB.getTemlateHtmlById = function (tplId, callback) {
      var dtd = Q.defer();
      tplId = tplId || '1';
      if (!utils.getDevelopStatus()) {
          $.get(config.rpc.getTplContentById, {tplId: tplId}, function (html) {
              utils.data.set('TPLID', tplId);
              callback(html);
              dtd.resolve(html);
          })
  
      } else {
          // __uri() 函数为 FIS3 框架中用于在 JS 中生成全路径的方法
          // 不能将 '../page/web1/index.html' 抽取为变量, 因为 __uri 只能识别静态的文件
          $.get(('/page/web' + tplId + '/page/template/index-dev.html'), function (html) {
              callback(html);
              dtd.resolve(html);
          })
      }
      return dtd.promise;
  
  };
  module.exports = DB;
  

});

;/*!app/common/arttemplate.js*/
define('app/common/arttemplate', function(require, exports, module) {

  /**
   * artTemplate.js 的封装对象
   * Created by Dzl on 2016-10-2.
   */
  
  /**
   * 模板类 构造器
   * @param filename
   * @param content
   * @returns {*}
   */
  var template = function (filename, content) {
      return typeof content === 'string'
          ? compile(content, {filename: filename})
          : renderFile(filename, content);
  };
  
  
  template.version = '3.0.0';
  
  
  /**
   * 设置全局配置
   * @name    template.config
   * @param   {String}    名称
   * @param   {Any}       值
   */
  template.config = function (name, value) {
      defaults[name] = value;
  };
  
  var defaults = template.defaults = {
      openTag: '<%',    // 逻辑语法开始标签
      closeTag: '%>',   // 逻辑语法结束标签
      escape: true,     // 是否编码输出变量的 HTML 字符
      cache: true,      // 是否开启缓存（依赖 options 的 filename 字段）
      compress: false,  // 是否压缩输出
      parser: null      // 自定义语法格式器 @see: template-syntax.js
  };
  
  
  var cacheStore = template.cache = {};
  
  
  /**
   * 渲染模板
   * @name    template.render
   * @param   {String}    模板
   * @param   {Object}    数据
   * @return  {String}    渲染好的字符串
   */
  template.render = function (source, options) {
      return compile(source, options);
  };
  
  
  /**
   * 渲染模板(根据模板名)
   * @name    template.render
   * @param   {String}    模板名
   * @param   {Object}    数据
   * @return  {String}    渲染好的字符串
   */
  var renderFile = template.renderFile = function (filename, data) {
      var fn = template.get(filename) || showDebugInfo({
              filename: filename,
              name: 'Render Error',
              message: 'Template not found'
          });
      return data ? fn(data) : fn;
  };
  
  
  /**
   * 获取编译缓存（可由外部重写此方法）
   * @param   {String}    模板名
   * @param   {Function}  编译好的函数
   */
  template.get = function (filename) {
  
      var cache;
  
      if (cacheStore[filename]) {
          // 使用内存缓存
          cache = cacheStore[filename];
      } else if (typeof document === 'object') {
          // 加载模板并编译
          var elem = document.getElementById(filename);
  
          if (elem) {
              var source = (elem.value || elem.innerHTML)
                  .replace(/^\s*|\s*$/g, '');
              cache = compile(source, {
                  filename: filename
              });
          }
      }
  
      return cache;
  };
  
  
  var toString = function (value, type) {
  
      if (typeof value !== 'string') {
  
          type = typeof value;
          if (type === 'number') {
              value += '';
          } else if (type === 'function') {
              value = toString(value.call(value));
          } else {
              value = '';
          }
      }
  
      return value;
  
  };
  
  
  var escapeMap = {
      "<": "&#60;",
      ">": "&#62;",
      '"': "&#34;",
      "'": "&#39;",
      "&": "&#38;"
  };
  
  
  var escapeFn = function (s) {
      return escapeMap[s];
  };
  
  var escapeHTML = function (content) {
      return toString(content)
          .replace(/&(?![\w#]+;)|[<>"']/g, escapeFn);
  };
  
  
  var isArray = Array.isArray || function (obj) {
          return ({}).toString.call(obj) === '[object Array]';
      };
  
  
  var each = function (data, callback) {
      var i, len;
      if (isArray(data)) {
          for (i = 0, len = data.length; i < len; i++) {
              callback.call(data, data[i], i, data);
          }
      } else {
          for (i in data) {
              callback.call(data, data[i], i);
          }
      }
  };
  
  
  var utils = template.utils = {
  
      $helpers: {},
  
      $include: renderFile,
  
      $string: toString,
  
      $escape: escapeHTML,
  
      $each: each
  
  };
  /**
   * 添加模板辅助方法
   * @name    template.helper
   * @param   {String}    名称
   * @param   {Function}  方法
   */
  template.helper = function (name, helper) {
      helpers[name] = helper;
  };
  
  var helpers = template.helpers = utils.$helpers;
  
  
  /**
   * 模板错误事件（可由外部重写此方法）
   * @name    template.onerror
   * @event
   */
  template.onerror = function (e) {
      var message = 'Template Error\n\n';
      for (var name in e) {
          message += '<' + name + '>\n' + e[name] + '\n\n';
      }
  
      if (typeof console === 'object') {
          console.error(message);
      }
  };
  
  
  // 模板调试器
  var showDebugInfo = function (e) {
  
      template.onerror(e);
  
      return function () {
          return '{Template Error}';
      };
  };
  
  
  /**
   * 编译模板
   * 2012-6-6 @TooBug: define 方法名改为 compile，与 Node Express 保持一致
   * @name    template.compile
   * @param   {String}    模板字符串
   * @param   {Object}    编译选项
   *
   *      - openTag       {String}
   *      - closeTag      {String}
   *      - filename      {String}
   *      - escape        {Boolean}
   *      - compress      {Boolean}
   *      - debug         {Boolean}
   *      - cache         {Boolean}
   *      - parser        {Function}
   *
   * @return  {Function}  渲染方法
   */
  var compile = template.compile = function (source, options) {
  
      // 合并默认配置
      options = options || {};
      for (var name in defaults) {
          if (options[name] === undefined) {
              options[name] = defaults[name];
          }
      }
  
  
      var filename = options.filename;
  
  
      try {
  
          var Render = compiler(source, options);
  
      } catch (e) {
  
          e.filename = filename || 'anonymous';
          e.name = 'Syntax Error';
  
          return showDebugInfo(e);
  
      }
  
  
      // 对编译结果进行一次包装
  
      function render(data) {
  
          try {
  
              return new Render(data, filename) + '';
  
          } catch (e) {
  
              // 运行时出错后自动开启调试模式重新编译
              if (!options.debug) {
                  options.debug = true;
                  return compile(source, options)(data);
              }
  
              return showDebugInfo(e)();
  
          }
  
      }
  
  
      render.prototype = Render.prototype;
      render.toString = function () {
          return Render.toString();
      };
  
  
      if (filename && options.cache) {
          cacheStore[filename] = render;
      }
  
  
      return render;
  
  };
  
  
  // 数组迭代
  var forEach = utils.$each;
  
  
  // 静态分析模板变量
  var KEYWORDS =
      // 关键字
      'break,case,catch,continue,debugger,default,delete,do,else,false'
      + ',finally,for,function,if,in,instanceof,new,null,return,switch,this'
      + ',throw,true,try,typeof,var,void,while,with'
  
      // 保留字
      + ',abstract,boolean,byte,char,class,const,double,enum,export,extends'
      + ',final,float,goto,implements,import,int,interface,long,native'
      + ',package,private,protected,public,short,static,super,synchronized'
      + ',throws,transient,volatile'
  
      // ECMA 5 - use strict
      + ',arguments,let,yield'
  
      + ',undefined';
  
  var REMOVE_RE = /\/\*[\w\W]*?\*\/|\/\/[^\n]*\n|\/\/[^\n]*$|"(?:[^"\\]|\\[\w\W])*"|'(?:[^'\\]|\\[\w\W])*'|\s*\.\s*[$\w\.]+/g;
  var SPLIT_RE = /[^\w$]+/g;
  var KEYWORDS_RE = new RegExp(["\\b" + KEYWORDS.replace(/,/g, '\\b|\\b') + "\\b"].join('|'), 'g');
  var NUMBER_RE = /^\d[^,]*|,\d[^,]*/g;
  var BOUNDARY_RE = /^,+|,+$/g;
  var SPLIT2_RE = /^$|,+/;
  
  
  // 获取变量
  function getVariable(code) {
      return code
          .replace(REMOVE_RE, '')
          .replace(SPLIT_RE, ',')
          .replace(KEYWORDS_RE, '')
          .replace(NUMBER_RE, '')
          .replace(BOUNDARY_RE, '')
          .split(SPLIT2_RE);
  };
  
  
  // 字符串转义
  function stringify(code) {
      return "'" + code
          // 单引号与反斜杠转义
              .replace(/('|\\)/g, '\\$1')
              // 换行符转义(windows + linux)
              .replace(/\r/g, '\\r')
              .replace(/\n/g, '\\n') + "'";
  }
  
  
  function compiler(source, options) {
  
      var debug = options.debug;
      var openTag = options.openTag;
      var closeTag = options.closeTag;
      var parser = options.parser;
      var compress = options.compress;
      var escape = options.escape;
  
  
      var line = 1;
      var uniq = {$data: 1, $filename: 1, $utils: 1, $helpers: 1, $out: 1, $line: 1};
  
  
      var isNewEngine = ''.trim;// '__proto__' in {}
      var replaces = isNewEngine
          ? ["$out='';", "$out+=", ";", "$out"]
          : ["$out=[];", "$out.push(", ");", "$out.join('')"];
  
      var concat = isNewEngine
          ? "$out+=text;return $out;"
          : "$out.push(text);";
  
      var print = "function(){"
          + "var text=''.concat.apply('',arguments);"
          + concat
          + "}";
  
      var include = "function(filename,data){"
          + "data=data||$data;"
          + "var text=$utils.$include(filename,data,$filename);"
          + concat
          + "}";
  
      var headerCode = "'use strict';"
          + "var $utils=this,$helpers=$utils.$helpers,"
          + (debug ? "$line=0," : "");
  
      var mainCode = replaces[0];
  
      var footerCode = "return new String(" + replaces[3] + ");"
  
      // html与逻辑语法分离
      forEach(source.split(openTag), function (code) {
          code = code.split(closeTag);
  
          var $0 = code[0];
          var $1 = code[1];
  
          // code: [html]
          if (code.length === 1) {
  
              mainCode += html($0);
  
              // code: [logic, html]
          } else {
  
              mainCode += logic($0);
  
              if ($1) {
                  mainCode += html($1);
              }
          }
  
  
      });
  
      var code = headerCode + mainCode + footerCode;
  
      // 调试语句
      if (debug) {
          code = "try{" + code + "}catch(e){"
              + "throw {"
              + "filename:$filename,"
              + "name:'Render Error',"
              + "message:e.message,"
              + "line:$line,"
              + "source:" + stringify(source)
              + ".split(/\\n/)[$line-1].replace(/^\\s+/,'')"
              + "};"
              + "}";
      }
  
  
      try {
  
  
          var Render = new Function("$data", "$filename", code);
          Render.prototype = utils;
  
          return Render;
  
      } catch (e) {
          e.temp = "function anonymous($data,$filename) {" + code + "}";
          throw e;
      }
  
  
      // 处理 HTML 语句
      function html(code) {
  
          // 记录行号
          line += code.split(/\n/).length - 1;
  
          // 压缩多余空白与注释
          if (compress) {
              code = code
                  .replace(/\s+/g, ' ')
                  .replace(/<!--[\w\W]*?-->/g, '');
          }
  
          if (code) {
              code = replaces[1] + stringify(code) + replaces[2] + "\n";
          }
  
          return code;
      }
  
  
      // 处理逻辑语句
      function logic(code) {
  
          var thisLine = line;
  
          if (parser) {
  
              // 语法转换插件钩子
              code = parser(code, options);
  
          } else if (debug) {
  
              // 记录行号
              code = code.replace(/\n/g, function () {
                  line++;
                  return "$line=" + line + ";";
              });
  
          }
  
  
          // 输出语句. 编码: <%=value%> 不编码:<%=#value%>
          // <%=#value%> 等同 v2.0.3 之前的 <%==value%>
          if (code.indexOf('=') === 0) {
  
              var escapeSyntax = escape && !/^=[=#]/.test(code);
  
              code = code.replace(/^=[=#]?|[\s;]*$/g, '');
  
              // 对内容编码
              if (escapeSyntax) {
  
                  var name = code.replace(/\s*\([^\)]+\)/, '');
  
                  // 排除 utils.* | include | print
  
                  if (!utils[name] && !/^(include|print)$/.test(name)) {
                      code = "$escape(" + code + ")";
                  }
  
                  // 不编码
              } else {
                  code = "$string(" + code + ")";
              }
  
  
              code = replaces[1] + code + replaces[2];
  
          }
  
          if (debug) {
              code = "$line=" + thisLine + ";" + code;
          }
  
          // 提取模板中的变量名
          forEach(getVariable(code), function (name) {
  
              // name 值可能为空，在安卓低版本浏览器下
              if (!name || uniq[name]) {
                  return;
              }
  
              var value;
  
              // 声明模板变量
              // 赋值优先级:
              // [include, print] > utils > helpers > data
              if (name === 'print') {
  
                  value = print;
  
              } else if (name === 'include') {
  
                  value = include;
  
              } else if (utils[name]) {
  
                  value = "$utils." + name;
  
              } else if (helpers[name]) {
  
                  value = "$helpers." + name;
  
              } else {
  
                  value = "$data." + name;
              }
  
              headerCode += name + "=" + value + ",";
              uniq[name] = true;
  
  
          });
  
          return code + "\n";
      }
  
  
  };
  
  
  // 定义模板引擎的语法
  
  
  defaults.openTag = '{{';
  defaults.closeTag = '}}';
  
  
  var filtered = function (js, filter) {
      var parts = filter.split(':');
      var name = parts.shift();
      var args = parts.join(':') || '';
  
      if (args) {
          args = ', ' + args;
      }
  
      return '$helpers.' + name + '(' + js + args + ')';
  }
  
  
  defaults.parser = function (code, options) {
  
      // var match = code.match(/([\w\$]*)(\b.*)/);
      // var key = match[1];
      // var args = match[2];
      // var split = args.split(' ');
      // split.shift();
  
      code = code.replace(/^\s/, '');
  
      var split = code.split(' ');
      var key = split.shift();
      var args = split.join(' ');
  
  
      switch (key) {
  
          case 'if':
  
              code = 'if(' + args + '){';
              break;
  
          case 'else':
  
              if (split.shift() === 'if') {
                  split = ' if(' + split.join(' ') + ')';
              } else {
                  split = '';
              }
  
              code = '}else' + split + '{';
              break;
  
          case '/if':
  
              code = '}';
              break;
  
          case 'each':
  
              var object = split[0] || '$data';
              var as = split[1] || 'as';
              var value = split[2] || '$value';
              var index = split[3] || '$index';
  
              var param = value + ',' + index;
  
              if (as !== 'as') {
                  object = '[]';
              }
  
              code = '$each(' + object + ',function(' + param + '){';
              break;
  
          case '/each':
  
              code = '});';
              break;
  
          case 'echo':
  
              code = 'print(' + args + ');';
              break;
  
          case 'print':
          case 'include':
  
              code = key + '(' + split.join(',') + ');';
              break;
  
          default:
  
              // 过滤器（辅助方法）
              // {{value | filterA:'abcd' | filterB}}
              // >>> $helpers.filterB($helpers.filterA(value, 'abcd'))
              // TODO: {{ddd||aaa}} 不包含空格
              if (/^\s*\|\s*[\w\$]/.test(args)) {
  
                  var escape = true;
  
                  // {{#value | link}}
                  if (code.indexOf('#') === 0) {
                      code = code.substr(1);
                      escape = false;
                  }
  
                  var i = 0;
                  var array = code.split('|');
                  var len = array.length;
                  var val = array[i++];
  
                  for (; i < len; i++) {
                      val = filtered(val, array[i]);
                  }
  
                  code = (escape ? '=' : '=#') + val;
  
                  // 即将弃用 {{helperName value}}
              } else if (template.helpers[key]) {
  
                  code = '=#' + key + '(' + split.join(',') + ');';
  
                  // 内容直接输出 {{value}}
              } else {
  
                  code = '=' + code;
              }
  
              break;
      }
  
  
      return code;
  };
  
  module.exports = template;

});

;/*!app/common/artdialog.js*/
define('app/common/artdialog', function(require, exports, module) {

  'use strict';
  
  // var $ = require('jquery');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  
  /**
   * 定义PropWin属性窗口对象
   * @param {Object} options 配置
   */
  var ArtDialog = function (options) {
      this.options = $.extend(true, ArtDialog.DEFAULTS, options);
  };
  
  
  /**
   * 默认配置
   * @type {Object}
   */
  ArtDialog.DEFAULTS = {
      title: 'title',
      width: 400,
      height: 300
  };
  
  ArtDialog.prototype.open = function (id, url, type, width, height, title,isApplyBtn) {
      utils.log('ArtDialog.prototype.open params: ', id, url, type, width, height, title, isApplyBtn);
      // utils.log('ArtDialog.prototype.open base.WINSUBMIT: ', base.WINSUBMIT);
      // utils.log('ArtDialog.prototype.open base.WINSTYPE: ', base.WINSTYPE);
      // utils.log('ArtDialog.prototype.open base.WINS: ', base.WINS);
      var cls = this,
          options = cls.options,
          title = title ? title : options.title,
          width = width ? width : options.width,
          isApplyBtn = isApplyBtn === false ? false : true,
          height = height ? height : options.height;
  
      base.WINSUBMIT = base.WINSUBMIT ? base.WINSUBMIT : {};
      base.WINSTYPE = base.WINSTYPE ? base.WINSTYPE : {};
      base.WINS =  base.WINS  ?  base.WINS  : {};
  
      var winConfig = {
          id: id,
          title: title,
          lock: true,
          isApplyBtn:isApplyBtn,
          // okValue: '确定',
          // cancelValue: '取消',
          width: width,
          height: height
      };
      winConfig.button = [{
          name: '确定',
          focus : true,
          callback: function () {
              utils.log('ArtDialog submit btn callback >>> type' ,type);
              utils.log('ArtDialog submit btn callback >>> id' ,id);
              utils.log('ArtDialog submit btn callback >>> base[type]' ,base[type]);
  
              // 新增表单提交前置方法
              base.WIN_SUBMIT = 1;
              base.WINSUBMIT[id] = 1;
              if (base[type] && base[type].beforeSubmit) {
                  base[type].beforeSubmit(id);
              }
              cls.submit(id);
              if (base[type] && base[type].afterSubmit) {
                  base[type].afterSubmit(id);
              }
  
              base.WIN_SUBMIT = 0;
              base.WINSUBMIT[id] = 0;
              return false;
          }
      }];
      if(winConfig.isApplyBtn){
          winConfig.button.push({
              name: '应用',
              focus : false,
              callback: function () {
                  utils.log('ArtDialog apply btn callback >>> type' ,type);
                  utils.log('ArtDialog apply btn callback >>> id' ,id);
                  base.WIN_SUBMIT = 1;
                  base.WINSUBMIT[id] = 1;
                  if (base[type] && base[type].beforeSubmit) {
                      base[type].beforeSubmit(id);
                  }
                  cls.formApply(id);
                  if (base[type] && base[type].afterSubmit) {
                      base[type].afterSubmit(id);
                  }
                  base.WIN_SUBMIT = 0;
                  base.WINSUBMIT[id] = 0;
                  return false;
              }
          })
      }
      winConfig.button.push({
          name: '取消',
          callback: function () {
              base.log('ArtDialog cancel callback >>>');
              if (base[type] && base[type].afterCancel) {
                  base[type].afterCancel(id);
              }
          }
      });
  
      // base.log('ArtDialog.prototype.open >>>');
      base.winType = type;
      base.WINSTYPE[id] = type;
      // 通过 ajax 加载 窗口内容
      $.ajax({
          // async:false,
          url: url,
          success: function (html) {
              utils.log('ArtDialog.prototype.open ajax get form success: ');
              winConfig.content = '<div class="dialog-content" style="height: ' + height + 'px;width:' + width + 'px;overflow: auto">' + html + '</div>';
              winConfig.init = function () {
                  // base.log('ArtDialog success callback >>>');
                  //setTimeout(function () {
                      base[type] && base[type].initForm(id);
                 // },200);
  
              };
  
              // winConfig.ok = function () {
              //     // base.log('ArtDialog yes btn callback >>>');
              //     // 新增表单提交前置方法
              //     base.WIN_SUBMIT = 1;
              //     if (base[type] && base[type].beforeSubmit) {
              //         base[type].beforeSubmit();
              //     }
              //     cls.submit();
              //     if (base[type] && base[type].afterSubmit) {
              //         base[type].afterSubmit();
              //     }
              //     base.WIN_SUBMIT = 0;
              //     return false;
              // };
              // winConfig.cancel = function () {
              //     base.log('ArtDialog cancel callback >>>');
              //     if (base[type] && base[type].afterCancel) {
              //         base[type].afterCancel();
              //     }
              // };
              winConfig.onclose = function () {
                  // base.log('ArtDialog end callback >>>');
                  try {
                      base.removeAllEditLayer();
                  } catch (e) {
                  }
                  try {
                      base.templateApp.removeAllEditLayer();
                  } catch (e) {
                  }
                  // 重要, 如果存在 base.vm 对象则销毁对象
                  if (base.vm)base.vm.$destroy(true);
              };
              base.winObject = art.dialog(winConfig);
              base.WINS[id] = art.dialog(winConfig);
              base.WINS[id].show();
              utils.log('ArtDialog.prototype.open success: ', base.WINS[id]);
              utils.log('ArtDialog.prototype.open success base.WINSUBMIT: ', base.WINSUBMIT);
              utils.log('ArtDialog.prototype.open success base.WINSTYPE: ', base.WINSTYPE);
              utils.log('ArtDialog.prototype.open success base.WINS: ', base.WINS);
              //base.winObject.showModal();
          }
      });
  
  
  };
  
  /**
   * 窗口 提交按钮事件
   */
  ArtDialog.prototype.submit = function (id) {
      utils.log('ArtDialog.prototype.submit >>> id: ',id);
      // utils.log('ArtDialog.prototype.submit submit base.WINSUBMIT: ', base.WINSUBMIT);
      // utils.log('ArtDialog.prototype.submit submit base.WINSTYPE: ', base.WINSTYPE);
      // utils.log('ArtDialog.prototype.submit submit base.WINS: ', base.WINS);
      var cls = this;
      if (cls.formApply(id)) {
          cls.close(id);
      }
  };
  /**
   * 窗口 应用 按钮事件
   * @returns {boolean}
   */
  ArtDialog.prototype.formApply = function (id) {
      utils.log('ArtDialog.prototype.formApply >>> id: ',id);
      // utils.log('ArtDialog.prototype.formApply base.WINSUBMIT: ', base.WINSUBMIT);
      // utils.log('ArtDialog.prototype.formApply base.WINSTYPE: ', base.WINSTYPE);
      // utils.log('ArtDialog.prototype.formApply base.WINS: ', base.WINS);
      // utils.log('ArtDialog.prototype.formApply >>> base.WINS[id]: ',base.WINS[id]);
      // utils.log('ArtDialog.prototype.formApply >>> base.WINSTYPE[id]: ',base.WINSTYPE[id]);
      var cls = this, formStatus = false;
      // 获取当前属性表单的类型,根据类型来动态设置html对象的值
      // if (base.winObject && base.winType) {
      if (base.WINS[id] && base.WINSTYPE[id]) {
          formStatus = cls.__formSubmit(base.WINSTYPE[id],id);
      }
      return formStatus;
  };
  /**
   * 窗口 关闭按钮事件
   */
  ArtDialog.prototype.close = function (id) {
      // if (base.winObject)base.winObject.close();
      if (base.WINS[id]){
          base.WINS[id].close();
          delete base.WINS[id];
          delete base.WINSTYPE[id];
      }
  };
  
  /**
   * 根据不同类型的组件 调用各组件的 open 方法打开窗口
   * @param type
   */
  ArtDialog.prototype.openByType = function (type) {
      base[type] && base[type].open();
  };
  
  /**
   * 表单提交前的处理事件
   * @param type 挂载到 app/common/base.js 上的各组件名称
   * @returns {Boolean} true 验证通过  false 验证未通过
   * @private
   */
  ArtDialog.prototype.__formSubmit = function (type,id) {
      var formStatus = base[type] && base[type].formSumbit(id);
      return formStatus;
  };
  
  ArtDialog.prototype.test = function () {
      // base.log("ArtDialog test success!");
  };
  // 将窗口的实例化对象挂载到 base 对象之上
  base.plugin('artdialog', new ArtDialog());
  
  module.exports = ArtDialog;

});

;/*!app/common/draggable-btn.js*/
define('app/common/draggable-btn', function(require, exports, module) {

  /**
   * 用于生成模板中上部移动图标的操作类
   * Created by Dzl on 2016-9-19.
   */
  
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  
  var DraggableBtn = function(options){
      this.options = $.extend(true, DraggableBtn.DEFAULTS, options);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  DraggableBtn.DEFAULTS = {
  
  };
  
  DraggableBtn.prototype.create = function (moduleId) {
      var $module = $("#"+moduleId);
      if($module.children('.draggableBtn').length<1){
          var html = [];
          html.push('<div class="draggableBtn" _mouseIn="0">');
          html.push('<a href="javascript:;" onclick="return false;" class="J_handle dragHandle"></a>');
          html.push('</div>');
          $module.append(html.join(""));
          var leftPos = $module.width() / 2 - 30;
          $module.children(".draggableBtn").css("left", leftPos + "px");
          // $module.find(".J_subShortcut_pos").hover(function() {
          //     $(this).stop(true).animate({
          //         width: $(this).attr("totalwidth") + "px"
          //     },200)
          // },function() {
          //     $(this).stop(true).animate({
          //         width: $(this).attr("initwidth") + "px"
          //     },200)
          // });
      }else{
  
      }
  };
  
  /**
   * 显示
   * @param $obj
   */
  DraggableBtn.prototype.show = function ($obj) {
      if ($obj.length < 1) {
          return;
      }
      var cls = this;
      clearTimeout(cls.timer);
      var timer = setTimeout(function() {
          $obj.children(".draggableBtn").stop(true).css("opacity", "1").show()
      },300);
      cls.timer = timer;
  };
  
  /**
   * 移除
   * @param moduleId
   */
  DraggableBtn.prototype.remove = function (moduleId) {
      // base.log('DraggableBtn.prototype.remove');
      var $module = $("#" + moduleId);
      var $draggableBtn = $module.children(".draggableBtn");
      var $layer = $("#" + moduleId + "moduleLayer");
      $layer.attr("_mouseIn", 0);
      $module.attr("_mouseIn", 0);
      $draggableBtn.attr("_mouseIn", 0);
      var cls = this;
      // 使用延时的目的是当鼠标从module移动到 ModuleLayer 上时
      // 让ModuleLayer的mouseenter先执行
      // 以保证ModuleLayer的正确显示与移除
      setTimeout(function () {
          cls._remove(moduleId);
      },100)
  };
  
  DraggableBtn.prototype._remove = function (moduleId) {
  
      var cls = this;
      var $module = $("#" + moduleId);
      var $draggableBtn = $module.children(".draggableBtn");
      var $layer = $("#" + moduleId + "moduleLayer");
  
      // base.log('DraggableBtn.prototype._remove >>>');
  
      if( $module.attr("_mouseIn") != 1 &&
          $draggableBtn.attr("_mouseIn") != 1 &&
          $layer.attr("_mouseIn") != 1 ){
          // base.log('ModuleLayer start remove...');
          $draggableBtn.remove();
      }
  
  };
  
  
  DraggableBtn.prototype.test = function () {
  
  };
  
  base.plugin('draggableBtn', new DraggableBtn());
  
  module.exports = DraggableBtn;
  

});

;/*!app/mock-data/index.js*/
define('app/mock-data/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-10-2.
   */
  'use strict';
  
  var base = require('app/common/base');
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  var utils = require('app/common/utils');
  
  Mock.mock('/api/getInfoList', {
      'data|10': [
          {
              'title': '@ctitle(20,30)',
              'createDate': '@date(MM-dd)'
          }
      ]
  });
  
  var MockData = {
      cutstr: function (str, len, fill) {
          if (_.isNull(str)) {
              return "";
          }
          var str_length = 0;
          var fill = fill ? fill : "...";
          var len = len ? len : 100;
          var str_cut = new String();
          var str_len = (str + "").length;
          len = len * 2;
  
          for (var i = 0; i < str_len; i++) {
              var a = str.charAt(i);
              str_length++;
              if (escape(a).length > 4) {
                  //中文字符的长度经编码之后大于4
                  str_length++;
              }
              str_cut = str_cut.concat(a);
              if (str_length >= len) {
                  str_cut = str_cut.concat(fill);
                  return str_cut;
              }
          }
          //如果给定字符串小于指定长度，则返回源字符串；
          if (str_length < len) {
              return str;
          }
      },
      getInfoList2:function (options) {
          utils.log('app/mock-data/index.js #getInfoList2(options) >  options: ',options);
          var cls = this;
          var conf = {
              num: 8,
              'length':20,
              dateFormat:'MM-dd',
              noteLength:30,
              showNote: false
          };
          _.assign(conf,options);
          utils.log('app/mock-data/index.js #getInfoList2(options) > conf:  ',conf);
          // 利用随机数, 返回一个标题长度不一致的列表
          // var titleLenR = _.random(titleLen - 5, titleLen);
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
          var mockConf = {};
          var mockItemConf = {
              'title': cls.cutstr(str, conf['length']),
              'href': '#',
              'createDate': Mock.Random.date(conf['dateFormat']),
              'imageLink': '/assets/design/static/css/imgs/s.png',
              'status': '已结束',
              'dateType': conf.dateType,
              'startDate': Mock.Random.date(conf['dateFormat']),
              'endDate': Mock.Random.date(conf['dateFormat']),
              'remarks': cls.cutstr(str, conf['noteLength'])
          };
  
          if(conf.showNote || conf.isDetailed){
              mockItemConf.note =  cls.cutstr(str, conf['noteLength']);
          }
  
          mockConf['data|' + conf.num] = [mockItemConf];
          utils.log('app/mock-data/index.js #getInfoList2(options) > mockConf:  ',mockConf);
          var _list = Mock.mock(mockConf);
          utils.log('app/mock-data/index.js #getInfoList2(options) > _list:  ',_list);
          var obj = {data:[]};
          // if(!_.isArray(_list.data)){
          //     obj.data.push(_list.data);
          // }else{
          //     obj.data = _list.data;
          // }
          obj.data= _.concat([],_list.data);
          utils.log('app/mock-data/index.js #getInfoList2(options) > obj:  ',obj);
          return obj;
  
      },
      getInfoList: function (num, titleLen, dataFormat, noteLength) {
          var cls = this;
          var conf = {};
          num = num || 6;
          titleLen = titleLen || 20;
          noteLength = noteLength || 50;
          // 利用随机数, 返回一个标题长度不一致的列表
          var titleLenR = titleLen;
          // var titleLenR = _.random(titleLen - 5, titleLen);
          dataFormat = dataFormat || "MM-dd";
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
  
          conf['data|' + num] = [
              {
                  'title': cls.cutstr(str, titleLenR),
                  // 'title': Mock.Random.ctitle(titleLen),
                  'href': '#',
                  'createDate': Mock.Random.date(dataFormat),
                  'note': cls.cutstr(str, noteLength),
                  'imageLink': '/assets/design/static/css/imgs/s.png'
              }
          ];
          var _list = Mock.mock(conf);
          var obj = {data:[]};
          // cls.log('MockData getInfoList >>> ',_list);
          if(!_.isArray(_list.data)){
              obj.data.push(_list.data);
          }else{
              obj.data = _list.data;
          }
          return obj;
  
      },
      getMenuList: function (num,titleLen) {
          var cls = this;
          var conf = {};
          num = num || 6;
          titleLen = titleLen || 6;
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
          conf['data|' + num] = [
              {
                  'name': cls.cutstr(str, titleLen),
                  'href': '#',
                  'taget': '_blank',
                  'isShow': true
              }
          ];
          var _list = Mock.mock(conf);
          var obj = {data:[]};
          // cls.log('MockData getInfoList >>> ',_list);
          if(!_.isArray(_list.data)){
              obj.data.push(_list.data);
          }else{
              obj.data = _list.data;
          }
          return obj;
  
      },
      getImage: function () {
          var cls = this;
          var data = {
              title: '测试图片',
              src: '/assets/design/static/css/imgs/banner/1.jpg',
              href: '#',
              target: '_blank'
          };
          // if (base.isMobile) {
          //     data.src = __uri('../css/imgs/banner/m1.jpg');
          // }
          return data;
      },
      getPageInfo: function (length) {
          var cls = this;
          var conf = {};
          conf['data|' + length] = "演示数据";
          var mockData = Mock.mock(conf);
          // cls.log('mockData: ', mockData);
          mockData.data = cls.cutstr(mockData.data, length);
          return mockData;
      },
      getVoteList: function (num, titleLen, dateFormat, dateType) {
          var conf = {};
          num = num || 8;
          titleLen = titleLen || 20;
          dateFormat = dateFormat || 'MM-dd';
  
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
  
          conf['data|' + num] = [
              {
                  'title': utils.cutstr(str, titleLen),
                  'href': '#',
                  'dateType': dateType,
                  'createDate': Mock.Random.date(dateFormat),
                  'startDate': Mock.Random.date(dateFormat),
                  'endDate': Mock.Random.date(dateFormat),
                  'isTimeOut': '1'
              }
          ];
  
          var _list = Mock.mock(conf);
          var obj = {data:[]};
          if(!_.isArray(_list.data)){
              obj.data.push(_list.data);
          }else{
              obj.data = _list.data;
          }
          return obj;
  
      },
  	getMessageBoardList: function (options) {
          utils.log('app/mock-data/index.js #getInfoList2(options) >  options: ', options);
          var cls = this;
          var conf = {
              num: 8,
              'length': 20,
              dateFormat: 'MM-dd',
              noteLength: 30,
              showNote: false
          };
          _.assign(conf, options);
          utils.log('app/mock-data/index.js #getInfoList2(options) > conf:  ', conf);
          // 利用随机数, 返回一个标题长度不一致的列表
          // var titleLenR = _.random(titleLen - 5, titleLen);
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
          var mockConf = {};
          var mockItemConf = {
              'num|1000000000-9999999999': "0000000000",
              'title': cls.cutstr(str, conf['length']),
              'href': '#',
              'createDate': Mock.Random.date(conf['dateFormat']),
              'status|1-3': 100
          };
  
          if (conf.showNote || conf.isDetailed) {
              mockItemConf.note = cls.cutstr(str, conf['noteLength']);
          }
  
          mockConf['data|' + conf.num] = [mockItemConf];
          utils.log('app/mock-data/index.js #getInfoList2(options) > mockConf:  ', mockConf);
          var _list = Mock.mock(mockConf);
          utils.log('app/mock-data/index.js #getInfoList2(options) > _list:  ', _list);
          var obj = {data: []};
          // if(!_.isArray(_list.data)){
          //     obj.data.push(_list.data);
          // }else{
          //     obj.data = _list.data;
          // }
          obj.data = _.concat([], _list.data);
          utils.log('app/mock-data/index.js #getInfoList2(options) > obj:  ', obj);
          return obj;
  
      },
      getCarouselList: function (num, titleLen, dataFormat, noteLength) {
          var cls = this;
          var conf = {};
          num = num || 5;
          titleLen = titleLen || 20;
          noteLength = noteLength || 50;
          // 利用随机数, 返回一个标题长度不一致的列表
          var titleLenR = titleLen;
          // var titleLenR = _.random(titleLen - 5, titleLen);
          dataFormat = dataFormat || "MM-dd";
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
  
          conf['data|' + num] = [
              {
                  'title': cls.cutstr(str, titleLenR),
                  // 'title': Mock.Random.ctitle(titleLen),
                  'href': '#',
                  'createDate': Mock.Random.date(dataFormat),
                  'note': cls.cutstr(str, noteLength),
                  'imageLink': '/assets/design/static/css/imgs/carousel/1.jpg'
              }
          ];
          var _list = Mock.mock(conf);
          var obj = {data:[]};
          if(!_.isArray(_list.data)){
              obj.data.push(_list.data);
          }else{
              obj.data = _list.data;
          }
          return obj;
      },
      getOrdinaryInfo: function (length,detailed) {
          var cls = this;
          var length = length || 40;
          var detailed = detailed || '【详细】';
          var conf = {};
          var str = "演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据演示数据";
  
          conf['data|' + 1] = [{
              'article': cls.cutstr(str,length),
              'detailed': detailed,
              'remarks': cls.cutstr(str,length)
          }];
          var mockData = Mock.mock(conf);
          // cls.log('mockData: ', mockData);
  
          return mockData;
      }
  
  };
  
  
  module.exports = MockData;

});

;/*!app/common/vue-common.js*/
define('app/common/vue-common', function(require, exports, module) {

  /**
   * VUE 表单初始化时公共的方法
   * Created by Dzl on 2017-4-17.
   */
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  
  var VueCommon = {
      methods: {
          onStyleListChange: function (value) {
              this.conf.className = value;
          }
      },
      computed: {
          isStyleList: function () {
              return !utils.isNul(this.styleList);
          },
          isShowPanelHeadingHeight: function () {
             // return this.conf.isTitle && this.conf.panelHeadingHeight > 0;
          },
          isShowPanelBodyHeight: function () {
              utils.log('this.type: ',this.type);
              utils.log(this.type !== 'linkListImg');
              return this.type !== 'linkListImg';
          }
      },
      watch:{
          conf: {
              handler: function (val) {
                  // if(this.type == 'carousel' || this.type == 'singleImage'){
                  //     if(this.conf.imgWidth){
                  //         this.conf.imgWidth = val.width - (val.panelPadding * 2);
                  //     }
                  //     if(this.conf.imgHeight){
                  //         this.conf.imgHeight = val.height - (val.panelPadding * 2);
                  //     }
                  // }
                  // if(this.type == 'linkListImgScroll'){
                  //     this.conf.panelBodyHeight = val.height - val.panelHeadingHeight;
                  // }else{
                  //     this.conf.panelBodyHeight = val.height - val.panelHeadingHeight - 2;
                  // }
              },
              deep: true
          }
      }
  
  };
  
  base.plugin('vueCommon', VueCommon);
  
  module.exports = VueCommon;
  

});

;/*!app/components/commonModuleSetting.js*/
define('app/components/commonModuleSetting', function(require, exports, module) {

  /**
   * 所有组件公共的属性
   * Created by Dzl on 2017-6-13.
   */
  
  module.exports = {
  
      conf:{
          /**
           * 是否使用自定义的 PanelBody 高度
           */
          isCustomPBH: false,
          /**
           * 是否设置 module 高度为auto
           */
          isAutoHeight: false,
          /**
           * 是否自定义标题更多链接
           */
          isCustomMore: false
      }
  };

});

;/*!app/components/commonModuleFunction.js*/
define('app/components/commonModuleFunction', function(require, exports, module) {

  /**
   * 抽取控件公共的方法
   * Created by Dzl on 2017-6-13.
   */
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var db = require('app/common/db');
  
  module.exports = {
      /**
       * 组件统一的表单提交处理函数
       * @param 返回表单验证的状态 true 通过  false 不通过
       */
      componentCommonFormSubmitFn:function (moduleType,baseObj) {
          var cls = this;
          if (!baseObj.vm) {
              baseObj.alert('base.vm对象不存在!');
              return false;
          }
  
          $('#attrForm').submit();
          utils.log(baseObj.attrFormValidateState,'base.attrFormValidateState');
          // 表单验证通过后的处理事件
          if (baseObj.attrFormValidateState) {
              var data = baseObj.vm.$data;
              utils.log('form submit data >>> ',data);
              // 保存历史记录并处理表单提交
              db.saveHistory();
              baseObj.templateApp[moduleType].setModuleAttrData(data.moduleId, data);
          }
          return baseObj.attrFormValidateState;
      }
  };
  

});

;/*!app/common/labels.js*/
define('app/common/labels', function(require, exports, module) {

  /**
   *  标签库对象
   * Created by Dzl on 2017-2-24.
   */
  
  var Labels = {
  
      pageInfo: {
          length: 150
      },
      linkList: {
          labelName: 'linkList',
          id: '',
          length: 15,
          num: '5',
          order: 'desc',
          siteId: ''
      },
      docImgList: {
          labelName: 'docImgList',
          id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
          num: 8, // 调用条数
          isChild: false,  // 是否调用下级分类信息
          length: 20, // 标题字数
          target: '_blank',
          dateFormat: 'MM-dd',
          noteLength: 35,
          imgWidth: '',
          imgHeight: ''
      },
      docHeadlines: {
          labelName: 'docHeadlines',
          id: '',     //栏目ID
          num: 1, // 调用条数
          length: 20, //标题字数
          showType: 1,   // 0、调用摘要。1、调用内容
          noteLength: 26, //摘要/内容截取字数
          target: '_blank', //是否新窗口
          detailed: '【详细】',   //为空不显示【详细】按扭，可自定义
          isDetailed: true,  // true 是显示，false 是不显示
          where: 'isTitle=1'//是否标签新闻
      },
      docImgNote: {
          labelName: 'docImgNote',
          id: '',     //栏目ID
          num: 1, // 调用条数
          isChild: false,// 是否调用下级分类
          length: '12', //标题字数
          target: '_blank', //是否新窗口
          showType: '1',   //1、调用摘要。2、调用内容
          noteLength: '26', //摘要/内容截取字数
          detailed: '【详细】',   //为空不显示【详细】按扭，可自定义
          isDetailed: '1',  //1 是显示，0 是不显示
          showTitle: 1,//是否显示标题
          showNote: 1,//是否显示内容
          isLi: 1
      },
      docList: {
          labelName: 'docList',
          id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
          num: 8, // 调用条数
          isChild: false, // 是否调用下级分类信息
          isHit: false, // 是否显示点击数
          length: 20, // 标题字数
          isDate: true, //  是否显示日期
          dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
          target: '_blank', // 打开窗口方式
          isColumn: false, // 是否显示栏目名称，需要自定义标签实现
          where: '', // 自定义条件，例如调用标题新闻：isTilt=1
          result: '暂无相关信息',
          exceptTitle: 1,//是否启用去重功能，当两个标签同时调用时，去掉后代标签重复的信息
          exceptNum: 1//默认去重的数量
      },
      curColumn: {
          labelName: 'curColumn',
          isHtml: false
      },
      peerOrChildList: {
          labelName: 'peerOrChildList',
          isHtml: false
      },
      nav: {
          labelName: 'nav',
          isHtml: false
      },
      articleNewsDetail: {
          labelName: 'articleNewsDetail',
          isHtml: false
      },
      surveyInfo: {
          labelName: 'surveyInfo',
          isHtml: false
      },
      collectInfo: {
          labelName: 'collectInfo',
          isHtml: false
      },
      videoNewsInfo: {
          labelName: 'videoNewsInfo',
          isHtml: false
      },
      interviewInfo: {
          labelName: 'interviewInfo',
          isHtml: false
      },
      messageBoard: {
          labelName: 'messageBoard',
          isHtml: false
      },
      videoNewsList: {
          labelName: 'videoNewsList',
          file: '/special/videoNewsImgList',
          id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
          num: 8, // 调用条数
          isChild: false, // 是否调用下级分类信息
          isHit: false, // 是否显示点击数
          length: 20, // 标题字数
          isDate: true, //  是否显示日期
          dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
          target: '_blank', // 打开窗口方式
          isColumn: false, // 是否显示栏目名称，需要自定义标签实现
          where: '' // 自定义条件，例如调用标题新闻：isTilt=1
      },
      surveyList: {
          labelName: 'surveyList',
          id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
          num: 8, // 调用条数
          length: 20, // 标题字数
          isDate: true, //  是否显示日期
          dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
          dateType: 1, // 1 显示添加日期，2 显示开始-始结日期
          timeStr: '',
          target: '_blank', // 打开窗口方式
          isLoadOptions: false // 是否加载投票选项
      },
      onlineNavItem: {
          labelName: 'onlineNavItem',
          id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
          num: 8, // 调用条数
          length: 20, // 标题字数
          target: '_blank', // 打开窗口方式
          isPage: false,  //是否显示翻页
          tableColumnId: '',  //表格资源库栏目ID
          relateColumnId: '',   //相关资源库栏目ID
          where: ''     //自定义条件，例如调用标题新闻：isTilt=1
      },
      fileDownloadList: {
          labelName: 'fileDownloadList',
          id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
          num: 8, // 调用条数
          length: 20, // 标题字数
          target: '_blank', // 打开窗口方式
          isDate: true, //  是否显示日期
          dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
          isHit: false, // 是否显示点击数
          isChild: false, // 是否调用下级分类信息
          isColumn: false, // 是否显示栏目名称，需要自定义标签实现
          isDetail: false,  //true查看详细，false下载页
          where: ''     //自定义条件，例如调用标题新闻：isTilt=1
      },
      columnNav: {
          labelName: 'columnNav',
          articleNews_pageSize: 5,
          exclude: 'pictureNews,videoNews,guestBook,fileDownload,survey,leaderWin,interview,collectInfo,onlinePetition,review',
          subLabels: [
              {labelName: 'ordinaryPage'},
              {
                  labelName: 'articleNewsPageList',
                  pageSize: 24,
                  length: 34,
                  contentLength: 116,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd',
                  isHit: false,
                  isLine: true,
                  lineCount: 6
              },
              {
                  labelName: 'pictureNewsPageList',
                  pageSize: 16,
                  length: 12,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd',
                  isHit: false,
                  listStyle: 1
              },
              {
                  labelName: 'videoNewsPageList',
                  pageSize: 12,
                  length: 15,
                  noteLength: 100,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd',
                  file: '/huainan/videoNewsPageList-hn-01'
              },
              {
                  labelName: 'messageBoardPageList',
                  pageSize: 15,
                  length: 35,
                  isDate: 4,
                  dateFormat: 'yyyy-MM-dd',
                  isHit: true,
                  action: 'singleList',
                  result: '暂无相关信息'
              },
              {
                  labelName: 'fileDownloadPageList',
                  pageSize: 15,
                  length: 50,
                  isDate: false,
                  dateFormat: 'yyyy-MM-dd',
                  isHit: true
              },
              {
                  labelName: 'surveyPageList',
                  pageSize: 20,
                  length: 40,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd',
                  file: '/huainan/videoNewsPageList-hn-01'
              },
              {
                  labelName: 'leaderWinPageList',
                  pageSize: 15,
                  length: 48,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd'
              },
              {
                  labelName: 'interviewInfoPageList',
                  pageSize: 5,
                  length: 48,
                  isDate: true,
                  dateFormat: 'MM-dd',
                  descLength: 58,
                  target: '_blank'
              },
              {
                  labelName: 'collectInfoPageList',
                  pageSize: 20,
                  length: 40,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd',
                  timeStr: 'startTime 至 endTime',
                  file: '/huainan/collectInfoPageList-hn-01'
              },
              {
                  labelName: 'onlinePetitionPageList',
                  pageSize: 15,
                  length: 48,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd'
              },
              {
                  labelName: 'reviewPageList',
                  pageSize: 15,
                  length: 48,
                  isDate: true,
                  dateFormat: 'yyyy-MM-dd'
              }
          ]
      }
  };
  
  module.exports = Labels;
  

});

;/*!app/components/info-list/index.js*/
define('app/components/info-list/index', function(require, exports, module) {

  /**
   * 文章信息列表
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var InfoList = function (options) {
      this.options = utils.assignClone(InfoList.DEFAULTS, options);
      // this.config = base['config'];
      // this.win = new Artdialog();
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'infoList',
          moduleId: 0,
          isMobile: false,
          list: [],
          conf: {
              style: 'default',
              isTitle: true,
              isMore: true,
              title: '组件标题',
              titleHref: '#',
              more: '更多+',
              height: 330,
              isMarquee: false,
              Marquee: {
                  MSClass: [],
                  Direction: 0,
                  Timer: 50,
                  WaitTime: 0,
                  ScrollStep: 20,
                  AutoStart: 1
              },
              isImg: false
          },
          label: require('app/common/labels').docList
      };
  
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body .link-img img{ width: <%=conf.imgWidth%>px;height: <%=conf.imgHeight%>px; }"
      };
  
      // 用于从控件中拖动到布局中 构造主体内容使用
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            {{if conf.isImg}}\r\n            <a href=\"{{conf.imgHref}}\" target=\"{{label.target}}\" class=\"link-img\">\r\n                <img src=\"{{conf.imgSrc}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\" title=\"{{conf.imgTitle}}\">\r\n            </a>\r\n            {{/if}}\r\n            <div class=\"list\">\r\n                <ul class=\"ls-label {{if conf.isMarquee}}j-marquee{{/if}}\" id=\"{{if conf.isMarquee}}marquee_{{moduleId}}{{/if}}\"\r\n                    data-setting=\"{{if conf.isMarquee}}{MSClass:['{{conf.Marquee.MSClass[0]}}'],Direction:{{conf.Marquee.Direction}},\r\n             Timer:{{conf.Marquee.Timer}},WaitTime:{{conf.Marquee.WaitTime}},AutoStart:1,\r\n             Width:{{conf.Marquee.Width}},Height:{{conf.Marquee.Height}},ScrollStep:{{conf.Marquee.ScrollStep}}}{{/if}}\">\r\n                    {{each list as el index}}\r\n                    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                        <span class=\"date {{label.isDate | displayShow}}\">{{el.createDate}}</span>\r\n                        <a href=\"{{el.href}}\" target=\"{{label.target}}\">{{el.title}}</a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 用于从控件中拖动到布局中 构造module使用
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 编译模板,后面直接使用, 提高执行效率
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  InfoList.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/info-list/form.html',
          width: 600,
          height: 520
      },
      type: 'infoList'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  InfoList.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  InfoList.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     var tplWin = base.templateWindow;
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  InfoList.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
      data.isMobile = base.isMobile;
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.label['length'] = utils.getFontLength(data.conf.width);
      }
  
      if(base.IS_SORTABLE) {
          data.conf.imgWidth = data.conf.width - 15*2;
      }
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
      }
  
      // 构造标题更多链接
      cls.createMoreHref(data);
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  InfoList.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  InfoList.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  /**
   * 从html中获取相关内容来替换默认值,修改moduleSetting的值
   * @param  {[type]} moduleId [description]
   */
  InfoList.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      return data;
  };
  
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  InfoList.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      // utils.log('InfoList.prototype.getPanelHtml >>>');
      // utils.log(JSON.stringify(data));
      var html = cls.compileTpl(data);
      return html;
  };
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  InfoList.prototype.initForm = function () {
      var cls = this, conf = cls.moduleSetting.conf;
      // var options = this.config.options;
      // utils.log('InfoList.prototype.initForm >>>');
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      var tplWin = base.templateWindow;
      // 取得模板中的组件对象并解析相关属性值
      var $module = tplWin.$('#' + curEditModuleId);
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      utils.log('InfoList.prototype.initForm data: ',data);
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.label.target = value;
          },
          onTargetChangeImg: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.conf.target = value;
          },
          onImgChange: function (ev) {
              utils.log('__________________',ev);
              this.conf.isImg = ev.target.checked;
              this.conf.Marquee.Height = null;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.label.dateFormat = value;
          },
          // 关联栏目
          associateNode: function () {
              //  utils.log('cls.selectNodeWinUrl: ' + cls.selectNodeWinUrl);
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      $('#addImageBtn').on('click', function () {
          $.Site.showUploader(function (filePathArr) {
              if (filePathArr && filePathArr.length > 0) {
                  var file = filePathArr[0];
                  utils.log(file);
                  $.Site.vm.conf.imgSrc = config.getFileServerPath() + file.mongoId;
              }
          });
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  InfoList.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  InfoList.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(data);
      var $panelHtml = $(panelHtml);
      // 解析标签
      var labelStr = '', isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          // 解析标签
          labelStr = utils.parseLabel(data.label);
          // 将解析后的标签回写到 panel 中
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  
  };
  
  /**
   * 渲染组件
   * @param  {[type]} moduleId [description]
   * @param  {[type]} num      [description]
   * @return {[type]}          [description]
   */
  InfoList.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
  
      cls.setModuleAttrData(moduleId, _data, true);
  
      // // 获取用于模板渲染使用的演示数据
      // var data = cls.getData(_data);
      //提取自定义组件样式
      // utils.addCustomStyleList(base, data);
      //cls.renderPanel(moduleId, data);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  InfoList.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true),
          conf = _data.conf;
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
  
      var $marquee = $module.find(".j-marquee");
  
      if(conf.isMarquee && $marquee.length>0) {
  
          setTimeout(function () {
              Ls.www.myMarquee($marquee);
          },100)
  
      }
  
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  InfoList.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   * @param d  挂载数据
   */
  InfoList.prototype.setModuleAttrData = function (moduleId, options, d) {
      var cls = this;
      var $module = $('#' + moduleId);
      var conf = options.conf;
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          if(conf.isImg) {
              if(utils.isNul(conf.imgWidth)){
                  options.conf.imgWidth = conf.width - 15*2;
              }
              if(utils.isNul(conf.imgHeight)){
                  options.conf.imgHeight = 120;
              }
              if(utils.isNul(conf.imgSrc) || _.startsWith(conf.imgSrc,'data:')){
                  // 使用的是图片点位符
                  // 构造图片占位符代码
                  options.placeholderOpt = 'size='+conf.imgWidth+'x'+conf.imgHeight+'&text='+conf.imgWidth+'x'+conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
                  options.placeholderClass = 'placeholder';
              }
          }
          if(conf.isMarquee) {  //启用内容滚动
              conf.Marquee.MSClass = ['marquee_'+moduleId];
  
              if (_.isUndefined(conf.Marquee.Width) || conf.Marquee.Width == null) {
                  conf.Marquee.Width = conf.width - 15*2;
  
              }
              if (_.isUndefined(conf.Marquee.Height) || conf.Marquee.Height == null) {
                  if(!conf.isImg) {
                      conf.Marquee.Height = conf.height - 15*2 - conf.panelHeadingHeight;
                  }else {
                      conf.Marquee.Height = conf.height - conf.imgHeight - conf.panelHeadingHeight - 15 -15*2;
                  }
              }
  
          }
          // options.conf.Marquee = conf.Marquee;
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      var data = options;
      if(d) {
          data = cls.getData(options,false,false);
          utils.addCustomStyleList(base, data);
  
      }
  
      // 重新渲染
      cls.renderPanel(moduleId, data);
  };
  
  InfoList.prototype.test = function () {
      // utils.log("InfoList test success!");
  };
  
  base.plugin('infoList', new InfoList());
  
  module.exports = InfoList;
  

});

;/*!app/components/single-image/index.js*/
define('app/components/single-image/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var SingleImage = function (options) {
      this.options = utils.assignClone(SingleImage.DEFAULTS, options);
      // this.config = base['config'];
      // this.win = new Artdialog();
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
  
      // 表单提交标记
      this.formSubmitStatus = false;
  
      // 是否需要 Render
      this.isNeedRender = true;
  
  
      /**
       * 定义当前对象要使用样式的 lodash 模板
       * @type {{defalut: string}}
       */
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body { width:<%=conf.width%>px; height:<%=conf.height%>px; line-height: <%=conf.height%>px; }\r\n.<%= moduleId %>_panel .panel-body img{width:<%= conf.imgWidth %>px; height:<%= conf.imgHeight  %>px}"
      };
  
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      this.moduleSetting = {
          type: 'singleImage',
          conf: {
              title: '组件标题',
              isShowTitle: false,
              href: '#',
              target: '_blank',
              height: 90,
              width: null,
              src: null,
              panelPadding: null,
              style: 'default'
          },
          label: {}
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-body clearfix\">\r\n        {{if conf.href&&conf.href!=\"#\"}}\r\n        <a href=\"{{conf.href}}\" target=\"{{conf.target}}\">\r\n            <img src=\"{{conf.src}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\">\r\n        </a>\r\n        {{else}}\r\n        <img src=\"{{conf.src}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\">\r\n        {{/if}}\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div id="{{moduleId}}"  class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}"  _autoload="1" data-conf="{{#conf | jsonStr}}">' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  SingleImage.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/single-image/form.html',
          width: 600,
          height: 480
      },
      type: 'singleImage'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  SingleImage.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  SingleImage.prototype.formSumbit = function () {
      // var cls = this;
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  /**
   * 获取供模板渲染的数据
   * @param options
   * @param isNewModule
   */
  SingleImage.prototype.getData = function (options, isNewModule, excludeListData) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
      data.isMobile = base.isMobile;
      if (isNewModule) {
          data.moduleId = utils.createModuleUniqueId();
          //data.conf.src = __uri('../../css/imgs/s.png');
      }
      if(utils.isNul(data.conf.imgWidth) || base.IS_SORTABLE){
          data.conf.imgWidth = data.conf.width - (data.conf.panelPadding * 2);
      }
      if(utils.isNul(data.conf.imgHeight) || base.IS_SORTABLE){
          data.conf.imgHeight = data.conf.height - (data.conf.panelPadding * 2) -16;
      }
      if(utils.isNul(data.conf.src) || _.startsWith(data.conf.src,'data:')){
          // 使用的是图片点位符
          // 构造图片占位符代码
          data.placeholderOpt = 'size='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&text='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
      }
      if(_.startsWith(data.conf.src,'data:')){
          delete  data.conf.src;
      }
      data.isShowPanelBodyHeight = false; // 隐藏内容高度输入框
      return data;
  };
  
  SingleImage.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  SingleImage.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 从 dom 节点属性中取得配置值
      //if (utils.isNul(data.conf.src)) {
          // 从当前的 HTML 结构中提取相关值
          // data.conf.href = $module.find('a').attr('href');
          // data.conf.target = $module.find('a').attr('target') || '_blank';
          // data.conf.src = $module.find('img').attr('src');
      //}
      return data;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  SingleImage.prototype.initForm = function () {
      var cls = this;
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      cls.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      data.moduleId = curEditModuleId;
      // utils.log('SingleImage.prototype.initForm data: ', data);
      // var $module = $('#' + curEditModuleId);
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.conf.target = value;
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              // return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      $('#addImageBtn').on('click', function () {
          $.Site.showUploader(function (filePathArr) {
              if (filePathArr && filePathArr.length > 0) {
                  var file = filePathArr[0];
                  utils.log(file);
                  //$.Site.vm.conf.src = config.getFileServerPath() + file.mongoId;
                  $.Site.vm.conf.src = config.getFileServerNamePath() + file.fileName;
              }
          });
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  SingleImage.prototype.open = function () {
      var options = this.options;
      var id = 'singleImage';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 模板渲染到页面，用于自动化构造组件内容
   * @param moduleId
   */
  SingleImage.prototype.render = function (moduleId) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      cls.setModuleAttrData(moduleId, data);
      // var html = cls.compileTpl(data);
      // $module.html(html);
      // cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染后回调，当构造的 html 渲染到页后后执行此方法
   * @param moduleId
   */
  SingleImage.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 表单提交后调用此方法来处理数据
   * @param moduleId
   * @param options
   */
  SingleImage.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          // 将表单数据保存到 module 的 DOM 节点上
          $module.attr('data-conf', utils.jsonStringify(options.conf));
          $module.attr('data-label', utils.jsonStringify(options.label));
      }
  
      // 设置表单提交标记为 true， 用于动态的创建样式使用
      cls.formSubmitStatus = true;
      // 获取用于组件重新渲染的数据
      var data = cls.getData(options);
      // 编译模板
      var html = cls.compileTpl(data);
      // 向模板页面中写入组件
      $module.html(html);
      // 调用页面渲染后的处理方法
      cls.renderAfter(moduleId);
  
  };
  
  SingleImage.prototype.test = function () {
      // utils.log("SingleImage test success!");
  };
  
  base.plugin('singleImage', new SingleImage());
  
  module.exports = SingleImage;
  

});

;/*!app/common/move-frame.js*/
define('app/common/move-frame', function(require, exports, module) {

  /**
   * 为DOM对象创建虚框,可应用于鼠标移入对象时的突出显示,也可以应用于改变DOM对象大小的handler
   * Created by Dzl on 2016-8-9.
   */
  // var $ = require('jquery');
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var doms = require('app/common/template-dom-structure');
  
  var MoveFrame = function (options) {
      this.options = $.extend(true, MoveFrame.DEFAULTS, options);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  MoveFrame.DEFAULTS = {};
  
  /**
   * 根据data使用lodash模板引擎编译出需要的html
   * @param data 数据对象:{id:_.uniqueId(),left:{width:0,height:325,top:100,left:184,opacity:1},right:{width:0,height:325,top:100,left:1183,opacity:1},top:{width:998,height:0,top:100,left:184,opacity:1},bottom:{width:998,height:0,top:425,left:184,opacity:1}};
   * @returns {String} 返回html
   * @private
   */
  MoveFrame.prototype._getHtmlByData = function (data) {
      var str = "<div class=\"moveFrame\" id=\"<%=  id  %>moveFrameLeft\"\r\n     style=\"width: <%=  left.width  %>px; height: <%=  left.height  %>px; left: <%=  left.left  %>px; top: <%=  left.top  %>px; background: rgb(255, 255, 255) none repeat scroll 0% 0%; border-left-width: 1px; opacity: <%=  left.opacity  %>;\"></div>\r\n<div class=\"moveFrame\" id=\"<%=  id  %>moveFrameRight\"\r\n     style=\"width: <%=  right.width  %>px; height: <%= right.height %>px; left: <%= right.left %>px; top: <%= right.top %>px; background: rgb(255, 255, 255) none repeat scroll 0% 0%; border-right-width: 1px; opacity: <%= right.opacity %>;\"></div>\r\n<div class=\"moveFrame\" id=\"<%= id %>moveFrameTop\"\r\n     style=\"width: <%= top.width %>px; height: <%= top.height %>px; left: <%= top.left %>px; top: <%= top.top %>px; background: rgb(255, 255, 255) none repeat scroll 0% 0%; border-top-width: 1px; opacity: <%= top.opacity %>;\"></div>\r\n<div class=\"moveFrame\" id=\"<%= id %>moveFrameBottom\"\r\n     style=\"width: <%= bottom.width %>px; height: <%= bottom.height %>px; left: <%= bottom.left %>px; top: <%= bottom.top %>px; background: rgb(255, 255, 255) none repeat scroll 0% 0%; border-bottom-width: 1px; opacity: <%= bottom.opacity %>;\"></div>";
      var compiled = _.template(str);
      return compiled(data);
  };
  
  /**
   * 根据DOM对象ID构造出虚框html
   * @param moduleId dom对象ID
   * @returns {String|*} 返回html
   * @private
   */
  MoveFrame.prototype._getHtmlById = function (moduleId) {
      var $module = $("#" + moduleId);
      var isModule = true;
      if (moduleId.indexOf(doms.row.substring(1)) > -1) {
          isModule = false;
      }
      var _objWidth = $module.outerWidth() - 2;
      var _objHeight = $module.outerHeight() - 2;
      var _rowWidth = _objWidth;
      if (!base.isMobile) {
          _rowWidth = _objWidth - 10;
      }
      var offsetTop = 0;
      var offsetLeft = 0;
      try {
          offsetTop = $module.offset().top;
      } catch (e) {
      }
      try {
          offsetLeft = $module.offset().left;
      } catch (e) {
      }
  
      var data = {
          id: moduleId,
          left: {
              width: 0,
              height: _objHeight,
              top: offsetTop,
              left: offsetLeft,
              opacity: 1
          },
          right: {
              width: 0,
              height: _objHeight,
              top: offsetTop,
              left: isModule ? offsetLeft + _objWidth + 1 : offsetLeft + _rowWidth + 1,
              opacity: 1
          },
          top: {
              width: isModule ? _objWidth : _rowWidth,
              height: 0,
              top: offsetTop,
              left: offsetLeft,
              opacity: 1
          },
          bottom: {
              width: isModule ? _objWidth : _rowWidth,
              height: 0,
              top: offsetTop + _objHeight + 1,
              left: offsetLeft,
              opacity: 1
          }
      };
      return this._getHtmlByData(data);
  };
  
  /**
   * 根据DOM对象ID构造出虚框html并添加到页面
   * @param moduleId
   */
  MoveFrame.prototype.create = function (moduleId) {
      // base.log('MoveFrame.prototype.create ');
      if ($("#" + moduleId + "moveFrameLeft").length > 0) {
          return;
      }
      var html = this._getHtmlById(moduleId);
      $('body').append(html);
  };
  
  
  MoveFrame.prototype.remove = function (moduleId) {
      var cls = this;
      setTimeout(function () {
          cls._remove(moduleId);
      }, 100);
  };
  MoveFrame.prototype._remove = function (moduleId) {
  
      $("#" + moduleId + "moveFrameLeft").remove();
      $("#" + moduleId + "moveFrameRight").remove();
      $("#" + moduleId + "moveFrameTop").remove();
      $("#" + moduleId + "moveFrameBottom").remove()
  };
  
  MoveFrame.prototype.removeAll = function () {
      $('.moveFrame').remove();
  };
  
  base.plugin('moveFrame', new MoveFrame());
  module.exports = MoveFrame;
  

});

;/*!app/common/shortcut-layer.js*/
define('app/common/shortcut-layer', function(require, exports, module) {

  /**
   * 用于构造组件右上角移动图标及快捷操作图标的操作类
   * Created by Dzl on 2016-8-9.
   */
  
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var doms = require('app/common/template-dom-structure');
  
  var ShortcutLayer = function (options) {
      this.options = _.assign(ShortcutLayer.DEFAULTS, options);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  ShortcutLayer.DEFAULTS = {};
  
  
  ShortcutLayer.prototype.create = function (moduleId) {
      var cls = this;
      var $module = $("#" + moduleId);
      var layerId = moduleId + "shortcutLayer";
      var $row = $module.closest(doms.row);
      var $prevRow = $row.prev(doms.row);
      var $nextRow = $row.next(doms.row);
      var isFirst = $prevRow.length == 0;
      var isLast = $nextRow.length == 0;
  
  
      // 如果快捷操作层不存在,则创建
      if ($("#" + layerId).length < 1) {
          var html = [];
          html.push('<div id="' + layerId + '" class="shortcutLayer">');
          var tmp = [];
          // 处理上下移动按钮
          if (!isFirst) {
              tmp.push('<a class="directionBtn mtop" href="javascript:;" title="上移"></a>');
          }
          if (!isLast) {
              tmp.push('<a class="directionBtn mbottom" href="javascript:;" title="下移"></a>');
          }
          html.push('<div class="shortcutContainer shortcutContainer_direction">');
          if (isFirst || isLast) {
              html.push('	<div class="J_directionBox direction-box" initwidth="27" totalwidth="27">');
          } else {
              html.push('	<div class="J_directionBox direction-box" initwidth="27" totalwidth="54">');
          }
  
          html.push(tmp.join(''));
          html.push('	</div>');
          html.push('</div>');
          html.push('<div class="shortcutContainer ">');
          html.push('<a href="javascript:;" title="删除行" class="shortcutBtn close removeRow"></a>');
          html.push('</div>');
  
          html.push('</div>');
  
          var $shortcutLayer = $(html.join(""));
          $shortcutLayer.appendTo('body');
          $shortcutLayer.css('margin', 0);
          var scrollLeft = document.body.scrollLeft;
          // var rightBoundary = document.documentElement.clientWidth + scrollLeft - 16;
          var nowPosition = $module.offset().left + $module.width() + 40;
          if (!base.isMobile) {
              nowPosition = $module.offset().left + $module.width() - 10;
          }
          base.log('nowPosition = ' + nowPosition);
          var moveFrameLeft = $("#" + moduleId + "moveFrameLeft");
          var moveFrameRight = $("#" + moduleId + "moveFrameRight");
          // var outerWidth = $shortcutLayer.outerWidth();
          $shortcutLayer.css("left", nowPosition + 'px');
          $shortcutLayer.css("top", $module.offset().top + 'px');
  
          $shortcutLayer.mouseenter(function () {
              // base.log('$shortcutLayer.mouseenter ');
              $(this).attr("_mouseIn", 1);
              $("#" + moduleId).attr("_mouseIn", 1);
          }).mouseleave(function () {
              // base.log('$shortcutLayer.mouseleave ');
              $(this).attr("_mouseIn", 0);
              $("#" + moduleId).attr("_mouseIn", 0);
              cls.remove(moduleId);
          });
  
          $shortcutLayer.find('.mtop').on('click.ls.design.mtop', function () {
              // 调用父页面的保存历史记录方法
              parent.$.Site['db'].saveHistory();
              $(this).closest('.shortcutLayer').attr("_mouseIn", 0);
              $("#" + moduleId).attr("_mouseIn", 0);
              cls.remove(moduleId);
              var $curRow = $("#" + moduleId).closest(doms.row);
              var $prevRow = $curRow.prev(doms.row);
              $prevRow.before($curRow);
          });
          $shortcutLayer.find('.mbottom').on('click.ls.design.mbottom', function () {
              //base.alert('mbottom');
              // 调用父页面的保存历史记录方法
              parent.$.Site['db'].saveHistory();
  
              $(this).closest('.shortcutLayer').attr("_mouseIn", 0);
              $("#" + moduleId).attr("_mouseIn", 0);
              cls.remove(moduleId);
              var $curRow = $("#" + moduleId).closest(doms.row);
              var $prevRow = $curRow.next(doms.row);
              $prevRow.after($curRow);
          });
          $shortcutLayer.find('.removeRow').on('click.ls.design.removeRow', function () {
              $(this).closest('.shortcutLayer').attr("_mouseIn", 0);
              $("#" + moduleId).attr("_mouseIn", 0);
              cls.remove(moduleId);
              if (confirm('确定要删除行吗?')) {
                  // 调用父页面的保存历史记录方法
                  parent.$.Site['db'].saveHistory();
                  $("#" + moduleId).closest(doms.row).remove();
              }
  
          });
  
          if (!isFirst && !isLast) {
              $shortcutLayer.find(".J_directionBox").hover(function () {
                  $(this).stop(true).animate({
                      width: $(this).attr("totalwidth") + "px"
                  }, 200)
              }, function () {
                  $(this).stop(true).animate({
                      width: $(this).attr("initwidth") + "px"
                  }, 200)
              });
          }
  
  
      } else {
          // 如果存在
          var $shortcutLayer = $("#" + layerId);
          $shortcutLayer.attr("_mouseIn", 1);
          //if (!draggableBtnMouseIn) {
          $shortcutLayer.show();
          //} else {
          //    $shortcutLayer.hide()
          // }
      }
  
  };
  
  ShortcutLayer.prototype.remove = function (moduleId) {
      //var $module = $("#" + moduleId);
      var layerId = moduleId + "shortcutLayer";
      var $shortcutLayer = $("#" + layerId);
      $shortcutLayer.attr("_mouseIn", 0);
      var cls = this;
      setTimeout(function () {
          cls._remove(moduleId);
      }, 100);
  
  };
  
  ShortcutLayer.prototype._remove = function (moduleId) {
      var $module = $("#" + moduleId);
      var $rowHandle = $module.find(".rowHandle");
      var layerId = moduleId + "shortcutLayer";
      var $shortcutLayer = $("#" + layerId);
      var $moveFrameLeft = $("#" + moduleId + "moveFrameLeft");
      var $moveFrameRight = $("#" + moduleId + "moveFrameRight");
      var $moveFrameTop = $("#" + moduleId + "moveFrameTop");
      var $moveFrameBottom = $("#" + moduleId + "moveFrameBottom");
  
  
      // base.log('ShortcutLayer.prototype._remove >>> moduleId = ' + moduleId);
      // base.log('$shortcutLayer.attr("_mouseIn")  = ' +$shortcutLayer.attr("_mouseIn")  );
      // base.log('$moveFrameLeft.attr("_mouseIn") = ' +$moveFrameLeft.attr("_mouseIn") );
      // base.log('$moveFrameRight.attr("_mouseIn") = ' + $moveFrameRight.attr("_mouseIn"));
      // base.log('$moveFrameTop.attr("_mouseIn") = ' + $moveFrameTop.attr("_mouseIn"));
      // base.log('$moveFrameBottom.attr("_mouseIn") = ' + $moveFrameBottom.attr("_mouseIn") );
      // base.log('$module.attr("_mouseIn") = ' + $module.attr("_mouseIn"));
  
      if ($shortcutLayer.attr("_mouseIn") != 1
          && $module.attr("_mouseIn") != 1
          && $moveFrameLeft.attr("_mouseIn") != 1
          && $moveFrameRight.attr("_mouseIn") != 1
          && $moveFrameTop.attr("_mouseIn") != 1
          && $moveFrameBottom.attr("_mouseIn") != 1) {
  
          // base.log('start remove shortcutLayer...');
  
          $shortcutLayer.remove();
          $moveFrameLeft.remove();
          $moveFrameRight.remove();
          $moveFrameTop.remove();
          $moveFrameBottom.remove();
          $rowHandle.remove();
  
      }
  
  
  };
  
  ShortcutLayer.prototype.test = function () {
  
  };
  base.plugin('shortcutLayer', new ShortcutLayer());
  
  
  module.exports = ShortcutLayer;
  

});

;/*!app/common/module-layer.js*/
define('app/common/module-layer', function(require, exports, module) {

  /**
   *  用于构造模板右上角操作菜单的类
   * Created by Dzl on 2016-8-9.
   */
  
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var doms = require('app/common/template-dom-structure');
  require('app/components/info-list/index');
  require('app/components/single-image/index');
  require('app/common/move-frame');
  require('app/common/draggable-btn');
  require('app/common/shortcut-layer');
  var db = require('app/common/db');
  
  /**
   * 组件操作菜单层对象
   * @param options
   * @constructor
   */
  var ModuleLayer = function (options) {
      this.options = $.extend(true, ModuleLayer.DEFAULTS, options);
      this.moveFrame = base['moveFrame'];
      this.draggableBtn = base['draggableBtn'];
      this.shortcutLayer = base['shortcutLayer'];
      this.addModuleBtnHtml = base.addNewModuleHtml;
  };
  
  ModuleLayer.base = base;
  
  /**
   * 默认配置
   * @type {Object}
   */
  ModuleLayer.DEFAULTS = {};
  
  // items : [{text:"设置组件",click:""}]
  /**
   * 使用lodash的template生成操作菜单的html
   * @param id
   * @param items [{text:"设置组件",click:""}]
   * @returns {string}
   * @private
   */
  ModuleLayer.prototype._createItem = function (id, items) {
      if (items && items.length > 0) {
          var tpl = '<div class="item"><a href="javascript:;" data-type="<%=type%>" ' +
              ' data-moduleId="<%=moduleId%>"  title="<%=text%>" class="tool " id="' + id + 'moduleLayeritem<%=index%>" hidefocus="true"><%=text%></a></div>';
          var complie = _.template(tpl);
          var str = '';
          for (var i = 0, l = items.length; i < l; i++) {
              var el = items[i];
              el.index = i;
              str += complie(el);
              if (l > 1 && i < (l - 1)) {
                  str += '<div class="itemHr"></div>';
              }
          }
          return str;
      }
  
  };
  
  /**
   * 创建组件鼠标移入时的菜单
   * @param moduleId 组件ID
   * @param items  [{text:"设置组件",click:""}]
   * @param draggableBtnMouseIn 鼠标是否在拖拽按钮之上
   */
  ModuleLayer.prototype.create = function (moduleId, items) {
      //base.log('ModuleLayer.prototype.create');
      var $module = $("#" + moduleId);
      var layerId = moduleId + "moduleLayer";
      var cls = this;
      var tpl = '<div class="moduleLayer " id="' + moduleId + 'moduleLayer"><%=itemsHtml%></div>';
      var moduleType = $module.attr('data-type');
  
      if (!moduleType) {
          // base.alert('组件的type类型不能为空,请检查组件属性中是否含有data-type类型!');
          return;
      }
  
      // 避免重复创建
      if ($("#" + layerId).length < 1) {
          //base.log('ModuleLayer is not exists, now create...');
          var objWidth = $module.outerWidth() - 2;
          // 获取菜单项目的html
          var itemsHtml = this._createItem(moduleId, items);
          var data = {itemsHtml: itemsHtml};
          // 使用lodash的模板引擎
          var complie = _.template(tpl);
          // 获取组件操作菜单层的html
          var layerHtml = complie(data);
          // 将html对象转为jQuery对象
          var $layer = $(layerHtml);
          // 添加到body
          $layer.appendTo("body");
  
          // 处理操作菜单中按钮的事件
          $layer.find('.item > a').each(function () {
              var $item = $(this);
              var itemType = $item.attr('data-type');
              // utils.log($item);
              if (itemType == 'setting') {
                  $item.on('click.ls.design', function () {
                      utils.data.set("CUR_EDIT_MODULE_ID", moduleId);
                      base.removeAllEditLayer();
                      // base.log(base.rootApp);
                      base.log('moduleType: ' + moduleType);
                      if(moduleType == 'pageEdit') {
                          base.rootApp[moduleType].open(moduleId);
                      }else {
                          base.rootApp[moduleType].open();
                      }
                  });
              } else if (itemType == 'delete') {
                  $item.click(function () {
                      if (confirm('确定要删除组件吗?')) {
                          // 调用父页面的保存历史记录方法
                          parent.$.Site['db'].saveHistory();
                          var $col = $("#" + moduleId).parent(doms.col);
                          $("#" + moduleId).remove();
                          $col.html(cls.addModuleBtnHtml);
                      }
                  });
              }
          });
  
          // 处理显示的位置
          $layer.css("margin", 0);
          $layer.css("left", $module.offset().left + objWidth - $layer.width());
          var layerTop = ($module.offset().top - $layer.height() - 1);
          // 处理顶端对象
          // if (layerTop < $(doms.container).offset().top) {
          //     $layer.addClass("moduleLayerBottom");
          //     layerTop = $module.offset().top + $module.height()
          // }
          $layer.css("top", layerTop + "px");
          // 绑定鼠标的移入事件
          $layer.mouseenter(function () {
              // base.log('moduleLayer.mouseenter >>>');
              $("#" + moduleId).attr("_mouseIn", 1).closest(doms.row).attr("_mouseIn", 1);
              $(this).attr("_mouseIn", 1);
              // $("#" + moduleId).closest(doms.module).attr("_mouseIn", 1)
          });
          // 绑定鼠标的移出事件
          $layer.mouseleave(function () {
              // base.log('moduleLayer.mouseleave >>>');
              $("#" + moduleId).attr("_mouseIn", 0).closest(doms.row).attr("_mouseIn", 0);
              $(this).attr("_mouseIn", 0);
              cls.remove(moduleId);
  
          });
      } else {
          // 如果moduleLayer已存在
          var $layer = $("#" + layerId);
          $layer.attr("_mouseIn", 1);
  
          // 判断拖拽按钮的鼠标位置状态
          //if (typeof draggableBtnMouseIn != "undefined" && draggableBtnMouseIn != 1) {
          $layer.show()
          //} else {
          //$layer.hide()
          //}
      }
  };
  /**
   * 移除(使用延时功能)
   * @param moduleId
   */
  ModuleLayer.prototype.remove = function (moduleId) {
  
      var $layer = $("#" + moduleId + "moduleLayer");
      $layer.attr("_mouseIn", 0);
      var cls = this;
      // 使用延时的目的是当鼠标从module移动到 ModuleLayer 上时
      // 让ModuleLayer的mouseenter先执行
      // 以保证ModuleLayer的正确显示与移除
      setTimeout(function () {
          cls._remove(moduleId);
      }, 100)
  
  };
  /**
   * 移除(私有)
   * @param moduleId
   * @private
   */
  ModuleLayer.prototype._remove = function (moduleId) {
      var cls = this;
      var $module = $("#" + moduleId);
      var $row = $module.closest(doms.row);
      var $draggableBtn = $module.find('.draggableBtn');
      var $layer = $("#" + moduleId + "moduleLayer");
      var $shortcutLayer = $("#" + moduleId + "shortcutLayer");
      var $moveFrameLeft = $("#" + moduleId + "moveFrameLeft");
      var $moveFrameRight = $("#" + moduleId + "moveFrameRight");
      var $moveFrameTop = $("#" + moduleId + "moveFrameTop");
      var $moveFrameBottom = $("#" + moduleId + "moveFrameBottom");
      // base.log('ModuleLayer.prototype._remove >>>');
      // base.log('$layer.attr("_mouseIn")='+$layer.attr("_mouseIn"));
      // base.log('$moveFrameLeft.attr("_mouseIn")='+$moveFrameLeft.attr("_mouseIn"));
      // base.log('$moveFrameRight.attr("_mouseIn")='+$moveFrameRight.attr("_mouseIn"));
      // base.log('$moveFrameTop.attr("_mouseIn")='+$moveFrameTop.attr("_mouseIn"));
      // base.log('$moveFrameBottom.attr("_mouseIn")='+$moveFrameBottom.attr("_mouseIn"));
  
      if ($layer.attr("_mouseIn") != 1 &&
          $module.attr("_mouseIn") != 1 &&
          $shortcutLayer.attr("_mouseIn") != 1 &&
          $draggableBtn.attr("_mouseIn") != 1 &&
          $moveFrameLeft.attr("_mouseIn") != 1 &&
          $moveFrameRight.attr("_mouseIn") != 1 &&
          $moveFrameTop.attr("_mouseIn") != 1 &&
          $moveFrameBottom.attr("_mouseIn") != 1) {
  
          // base.log('ModuleLayer start remove...');
          cls.moveFrame.remove(moduleId);
          cls.draggableBtn.remove(moduleId);
          cls.shortcutLayer.remove($row.attr('id'));
          $layer.remove();
      }
  
  };
  
  ModuleLayer.prototype.removeAll = function () {
      $('.moduleLayer').remove();
  };
  
  
  // ModuleLayer.prototype.bindMousewheel = function () {
  //     if (typeof g_bindMousewheel == "undefined") {
  //         window.g_bindMousewheel = 1;
  //         $("body").bind("mousewheel",function() {
  //             Site.removeAllEditLayer();
  //         })
  //     }
  // };
  
  
  ModuleLayer.prototype.test = function () {
  
  };
  base.plugin('moduleLayer', new ModuleLayer());
  
  
  module.exports = ModuleLayer;
  

});

;/*!app/common/module.js*/
define('app/common/module', function(require, exports, module) {

  /**
   * 组件操作类
   * Created by Dzl on 2016-8-9.
   */
  
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  var async = require('node_modules/async/dist/async');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var doms = require('app/common/template-dom-structure');
  require('app/common/draggable-btn');
  require('app/common/module-layer');
  require('app/common/move-frame');
  require('app/common/shortcut-layer');
  var db = require('app/common/db');
  
  var Module = function (options) {
      this.options = $.extend(true, Module.DEFAULTS, options);
      this.draggableBtn = base['draggableBtn'];
      this.moduleLayer = base['moduleLayer'];
      this.moveFrame = base['moveFrame'];
      this.shortcutLayer = base['shortcutLayer'];
  };
  
  
  /**
   * 默认配置
   * @type {Object}
   */
  Module.DEFAULTS = {};
  
  /**
   * 初始化函数
   */
  Module.prototype.init = function () {
      var cls = this;
      if (!base.isDesign)return;
      // 为主题模板中所有的row和module创建id,如果有id则忽略
      cls.autoCreateId().then(function () {
          cls.loadModuleData();
          if(!utils.getPreviewStatus()){
              cls.bindRowModuleEvents();
              cls.sortable();
          }
          utils.log('组件初始化完毕!');
      });
  };
  
  /**
   * 绑定行事件
   */
  Module.prototype.bindRowModuleEvents = function () {
      var cls = this;
      var moduleId, $module, $row, rowId;
      if (!base._enableEditLayer)return;
      var rowTotal = $(doms.row).length;
      $(doms.row).each(function (index) {
          // 绑定行的鼠标事件(移入和移出),以及组件中相关内容的代理事件.
          $(this).off("mouseenter").off("mouseleave").mouseenter(function () {
              rowId = this.id;
              // base.log("mouseenter rowId=" + rowId);
              $row = $(this);
              // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
              $row.attr("_mouseIn", 1);
              // 创建虚框(可利用来改变容器高度)
              cls.moveFrame.create(rowId);
              if($row.attr('_disdel')==1){}else{
                  cls._createRowHandle($row);
                  // 为所在行添加右上角移动操作按钮绑定事件
                  $row.children(".mulColTabSortIcon").on("mouseenter", function () {
                      // 创建右侧操作按钮(删除,上移行,下移行)
                      $(this).attr("_mouseIn", 1).closest(doms.row).attr("_mouseIn", 1);
                      cls.shortcutLayer.create(rowId);
                  }).on('mouseleave', function () {
                      $(this).attr("_mouseIn", 0).closest(doms.row).attr("_mouseIn", 0);
                      // cls.shortcutLayer.remove(rowId);
                  });
              }
  
  
  
          }).mouseleave(function () {
              rowId = this.id;
              $row = $(this);
              // base.log(" mouseleave rowId=" + rowId);
              $row.attr("_mouseIn", 0);
              // 移除相关的操作层和效果层
              cls.clearRowLayer(rowId);
          }).delegate(doms.module, 'mouseenter', function () {
              moduleId = this.id;
              $module = $(this);
              var disedit = $module.attr('_disedit');
              var disdel = $module.attr('_disdel');
              $row = $module.closest(doms.row);
              var $col = $module.closest(doms.col);
              // 是否为多个组件
              var isMultiModule = false;
              // 判断是否为通栏(采用YUI3栅格化样式)
              if (!$col.hasClass("col-1") && !$col.hasClass("col-24-24") && !$col.hasClass('col-1-1') && !$col.hasClass('col-5-5')) {
                  isMultiModule = true;
              }
              var items = [{
                  text: "设置组件",
                  moduleId: moduleId,
                  type: "setting"
              }];
              if (disdel == '1') {
  
              } else {
                  items.push({
                      text: "删除组件",
                      moduleId: moduleId,
                      type: "delete"
                  })
              }
  
              // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
              $row.attr("_mouseIn", 1);
              $module.attr("_mouseIn", 1);
  
              // 創建提示效果
              var colWidth = $module.parent(doms.col).width() - utils.getIntegerFixPX($(doms.module).css('margin-right'));
              var whTips = "组件宽度: " + colWidth + "px; 高度: " + $module.parent(doms.col).height() + "px;";
              $module.attr({'title': whTips});
  
              // 创建虚框(可利用来改变容器高度)
              cls.moveFrame.create(moduleId);
  
              if (!base.isMobile) {
                  if (disdel != '1') {
                      // 创建拖拽按钮
                      cls.draggableBtn.create(moduleId);
                      // 处理通栏组件
                      // 显示组件的拖动按钮
                      cls.draggableBtn.show($module);
                  }
              }
              if (disedit != 1) {
                  // 创建组件操作菜单
                  cls.moduleLayer.create(moduleId, items);
              }
  
  
          }).delegate(doms.module, 'mouseleave', function () {
              moduleId = this.id;
              $module = $(this);
              $row = $module.closest(doms.row);
              $row.attr("_mouseIn", 0);
              // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
              $module.attr("_mouseIn", 0);
              //$module.attr('title','');
              // 移除相关的操作层和效果层
              cls.clearModuleLayer(moduleId);
  
          });
          //.delegate('.draggableBtn', 'mouseenter', function () {
          //     // base.log('draggableBtn mouseenter');
          //     $(this).attr("_mouseIn", 1).stop(true).show();
          //     // 定义内部元素的事件代理
          // }).delegate('.draggableBtn', 'mouseleave', function () {
          //     // 定义内部元素的事件代理
          //     $(this).attr("_mouseIn", 0);
          //
          // });
  
      });
  
  };
  
  /**
   * 加载组件演示数据
   */
  Module.prototype.loadModuleData = function () {
      var cls = this;
  
      $(doms.col).each(function () {
          var $el = $(this);
           // utils.log('Module.prototype.loadModuleData $el.find(doms.module).length: ',$el.find(doms.module).length)
           // utils.log('Module.prototype.loadModuleData $el.find(\'.addNewModule\').length: ',$el.find('.addNewModule').length)
          if ($el.find(doms.module).length == 0 && $el.find('.addNewModule').length == 0) {
              $el.html(base.addNewModuleHtml);
          }
      });
  
  
      var queue = async.queue(function (task, callback) {
          // utils.log('worker is processing task: ', task.name);
          task.run(callback);
      }, 200);
      var arr = [];
      $(doms.module).each(function () {
          var moduleId = this.id,
              $module = $(this),
              confString = $module.attr('data-conf'),
              labelString = $module.attr('data-label');
          // var conf = $.parseJSON(confString),
          // label = $.parseJSON(labelString);
          var autoload = $module.attr('_autoload');
          var moduleType = $module.attr('data-type');
          if (autoload == '1') {
              if (utils.isNul(confString) || utils.isNul(labelString)) {
                  //alert('组件属性配置不存在');
                  return true; // 继续下一个迭代
              }
              if (utils.getDevelopStatus()) {
                  queue.push({
                      name: moduleId, run: function (callback) {
                          cls.autoCreateData($module, moduleId, moduleType, callback);
                      }
                  });
              } else {
                  try {
                      cls.autoCreateData($module, moduleId, moduleType);
                  } catch (e) {
                      utils.log(e);
                  }
              }
          }
      });
  
  
  
  };
  /**
   * 刷新组件
   */
  Module.prototype.refreshRowModule = function () {
      base.log('Module.prototype.refreshRowModule >>>');
      var cls = this;
      base.removeAllEditLayer();
      cls.bindRowModuleEvents();
      cls.sortable();
  };
  
  /**
   * 清除行的虚线标记层
   * @param id
   */
  Module.prototype.clearRowLayer = function (id) {
      var cls = this;
      setTimeout(function () {
          cls.moveFrame.remove(id);
          cls.shortcutLayer.remove(id);
  
      }, 100)
  
  };
  /**
   * 清除组件辅助层
   * @param id
   */
  Module.prototype.clearModuleLayer = function (id) {
      var cls = this;
      cls.moveFrame.remove(id);
      cls.moduleLayer.remove(id);
      cls.draggableBtn.remove(id);
  };
  
  /**
   * 清除所有用于组件操作动态产生的 HTML
   * @param id
   * @param isMultiModule
   */
  Module.prototype.removeAllEditLayer = function (id, isMultiModule) {
      var cls = this;
      cls.moduleLayer.remove(id);
      cls.moveFrame.remove(id);
      cls.shortcutLayer.remove(id);
  };
  
  /**
   * 创建 行的操作事件
   * @param $row
   * @private
   */
  Module.prototype._createRowHandle = function ($row) {
  
      if ($row.find(".J_multiHandle").length < 1) {
          // 为所在行添加右上角移动操作按钮
          $row.append('<div class="J_multiHandle mulColTabSortIcon rowHandle" title="按住鼠标，可随意拖动组件列布局。"></div>');
      }
  
      // 设置行右上角移动操作按钮的z-index值
      var thisIndex = $row.css("z-index");
      // utils.log('row z-index: ' + thisIndex);
      if (thisIndex && thisIndex != "auto" && _.isNumber(thisIndex)) {
          $row.find(".mulColTabSortIcon").css("z-index", parseInt(thisIndex) + 1)
      } else {
          $row.find(".mulColTabSortIcon").css("z-index", 99999)
      }
      // 显示行右上角移动操作按钮
      if (!base.isMobile) {
          $row.children(".mulColTabSortIcon").removeAttr("style").css({right: '10px'}).show();
      } else {
          $row.children(".mulColTabSortIcon").removeAttr("style").css({right: '0'}).show();
      }
  
  };
  
  /**
   * 创建组件的移动效果
   */
  Module.prototype.sortable = function () {
      var cls = this;
      //$(".col").sortable("destroy");
      // 处理行的拖拽效果
      $(doms.container).sortable({
          // connectWith: doms.col,
          cancel: 'input, textarea, select, embed[type="application/x-shockwave-flash"], object[type="application/x-shockwave-flash"], .addNewModule',
          // cancel: 'input, textarea, select, embed[type="application/x-shockwave-flash"], object[type="application/x-shockwave-flash"]',
          distance: 3,
          axis: 'y',
          items: doms.row,
          handle: ".rowHandle,.fullColHandle",
          placeholder: "g_middlePlaceholder",
          tolerance: "pointer",
          zIndex: 30,
          dropOnEmpty: true,
          scrollSensitivity: 100,
          beforeStart: function (event, ui) {
              // base.log('beforeStart');
              utils.log('--------------------- $(doms.container).sortable beforeStart -----------------------');
              base.disableEditLayer();
              $("body").disableSelection();
              $(doms.col + ' ' + doms.module).each(function () {
                  var $el = $(this);
                  $el.css({"filter": "filter: alpha(opacity=80)", "opacity": "0.8"});
  
              });
          },
          start: function (event, ui) {
              utils.log('--------------------- $(doms.container).sortable start -----------------------');
              // base.log('start');
              $("body").disableSelection();
          },
          sort: function (event, ui) {
              utils.log('--------------------- $(doms.container).sortable sort -----------------------');
              // base.log('sort');
              var $g_middlePlaceholder = $(".g_middlePlaceholder");
              var lineHeight = $g_middlePlaceholder.height() || 26;
              $g_middlePlaceholder.css({
                  lineHeight: lineHeight + "px"
              });
              $g_middlePlaceholder.html("放在这里");
  
          },
          beforeStop: function (event, ui) {
              utils.log('--------------------- $(doms.container).sortable beforeStop -----------------------');
          },
          receive: function (event, ui) {
              utils.log('--------------------- $(doms.container).sortable receive -----------------------');
          },
          update: function (event, ui) {
              utils.log('--------------------- $(doms.container).sortable update -----------------------');
          },
          stop: function (event, ui) {
              utils.log('--------------------- $(doms.container).sortable stop -----------------------');
              base.disableEditLayer();
              $('.rowHandle').remove();
              $("body").enableSelection();
              $(doms.container).sortable("refreshPositions");
  
          }
      });
  
      // 处理组件列的拖拽效果
      $(doms.col).sortable({
          connectWith: doms.col+'[_dismovein!="1"]',  // 排除属性为 _dismovein=1 的组件容器
          cancel: 'input, textarea, select, .formUnsortable, embed[type="application/x-shockwave-flash"], object[type="application/x-shockwave-flash"], .addNewModule',
          // cancel: 'input, textarea, select, .formUnsortable, embed[type="application/x-shockwave-flash"], object[type="application/x-shockwave-flash"]',
          distance: 3,
          items: doms.module,
          handle: ".dragHandle",
          placeholder: "g_middlePlaceholder",
          tolerance: "pointer",
          zIndex: 30,
          dropOnEmpty: true,
          scrollSensitivity: 100,
          // 当排序动作开始时触发此事件
          start: function (event, ui) {
              utils.log('------------------ $(doms.col).sortable start --------------------------');
              utils.log('Module.prototype.sortable start event.target >>>');
              utils.log(event.target);
              utils.log('Module.prototype.sortable start ui >>>');
              utils.log(ui);
              utils.log('');
              utils.log('Module.prototype.sortable start  base.IS_DRAGGABLE_NEW_MODULE >>>', base.IS_DRAGGABLE_NEW_MODULE);
              base.disableEditLayer();
              $("body").disableSelection();
              base.$SAVETEMPLATE_WRAPER_CLONE = $(doms.wraper).clone(); // 预先保存当前的html,用于在排序操作结束后保存到历史记录中
              base.SORTABLE_SOURCE_HTML = '';
              base.IS_SORTABLE = true;
              $(doms.col + ' ' + doms.module).addClass('opacity');
              // var $target = $(event.target);
              // base.SORTABLE_SOURCE_HTML = $target.html();
              // utils.log('Module.prototype.sortable receive base.SORTABLE_SOURCE_HTML >>> ',base.SORTABLE_SOURCE_HTML);
  
          },
          activate: function (event, ui) {
              base.disableEditLayer();
              utils.log('------------------- $(doms.col).sortable  activate -------------------------');
              // utils.log('Module.prototype.sortable activate event.target >>>');
              // utils.log(event.target);
              // utils.log('');
              // var $target = $(event.target);
              // utils.log('Module.prototype.sortable activate base.SORTABLE_SOURCE_HTML >>> ',$target.html());
  
  
          },
          over: function (event, ui) {
              base.disableEditLayer();
              utils.log('------------------- $(doms.col).sortable over -------------------------');
              // utils.log('Module.prototype.sortable activate over.target >>>');
              // utils.log(event.target);
              // utils.log('');
              var $target = $(event.target);
              base.SORTABLE_SOURCE_HTML = $target.html();
              base.SORTABLE_SOURCE_WIDTH = $target.width() - utils.getIntegerFixPX($(doms.module).css('margin-right'));
              base.SORTABLE_SOURCE_HEIGHT = $target.height();
              // utils.log('Module.prototype.sortable over base.SORTABLE_SOURCE_HTML >>> ', $target.html());
              utils.log('Module.prototype.sortable over base.SORTABLE_SOURCE_WIDTH >>> ', base.SORTABLE_SOURCE_WIDTH);
              utils.log('Module.prototype.sortable over base.SORTABLE_SOURCE_HEIGHT >>> ', base.SORTABLE_SOURCE_HEIGHT);
  
          },
          sort: function (event, ui) {
              utils.log('------------------- $(doms.col).sortable sort -------------------------');
              // base.log('sort');
              // utils.log('Module.prototype.sortable sort event.target >>>');
              // utils.log(event.target);
              // utils.log('Module.prototype.sortable sort ui >>>');
              // utils.log(ui);
              base.disableEditLayer();
              var $g_middlePlaceholder = $(".g_middlePlaceholder");
              var lineHeight = $g_middlePlaceholder.height() || 26;
              $g_middlePlaceholder.css({
                  lineHeight: lineHeight + "px",
                  position: 'absolute',
                  width: base.SORTABLE_SOURCE_WIDTH,
                  // height: base.SORTABLE_SOURCE_HEIGHT,
                  top: 0,
                  left: 0,
                  'z-index': 999
  
              });
              $g_middlePlaceholder.html("放在这里");
  
  
          },
          change: function (event, ui) {
              base.disableEditLayer();
              utils.log('------------------- $(doms.col).sortable change -------------------------');
              // utils.log('Module.prototype.sortable change event.target >>>');
              // utils.log(event.target);
              // utils.log('');
              // var $target = $(event.target);
              // $target.empty();
  
  
          },
          beforeStop: function (event, ui) {
              utils.log('--------------------- $(doms.col).sortable beforeStop -----------------------');
              // utils.log('Module.prototype.sortable beforeStop event.target >>>');
              // utils.log(event.target);
              // utils.log('');
          },
          receive: function (event, ui) {
              utils.log('---------------------  $(doms.col).sortable receive -----------------------');
              // utils.log('Module.prototype.sortable receive event.target >>>');
              // utils.log(event.target);
              // utils.log('Module.prototype.sortable receive ui >>>');
              // utils.log(ui);
              // utils.log('Module.prototype.sortable receive  base.IS_DRAGGABLE_NEW_MODULE >>>', base.IS_DRAGGABLE_NEW_MODULE);
              // utils.log('');
              var $target = $(event.target);
              // 保存历史记录
              utils.log('$(doms.col).sortable receive base.$SAVETEMPLATE_WRAPER_CLONE >>>', base.$SAVETEMPLATE_WRAPER_CLONE);
              parent.$.Site['db'].saveHistory(base.$SAVETEMPLATE_WRAPER_CLONE);
              if (!base.IS_DRAGGABLE_NEW_MODULE) {
                  var moduleType = ui.item.attr('data-type');
                  var moduleId = ui.item[0].id;
                  utils.log('$(doms.col).sortable receive moduleType >>>', moduleType, moduleId);
                  ui.item.find('.panel').remove();
                  var width = $target.outerWidth(true) - utils.getIntegerFixPX($(doms.module).css('margin-right'));
                  utils.log('$(doms.col).sortable receive width >>>', width);
                  var _conf = ui.item.attr('data-conf');
                  var conf = utils.parseOptions(_conf);
                  conf.width = width;
                  ui.item.attr('data-conf', utils.jsonStringify(conf));
                  var targetHtml = ui.item[0].outerHTML;
                  //if ($target.find('.addNewModule').length > 0) {
                  $target.html(targetHtml);
                  var $module = $('#' + moduleId);
                  utils.log('$(doms.col).sortable receive moduleType >>>', $module);
                  if (base[moduleType] && base[moduleType].render) {
                      base[moduleType].render(moduleId);
                  }
                  // }
                  // base.log('receive');
              } else {
                  // 新建对象
                  utils.log('$(doms.col).sortable receive is new module ');
                  var $src = $(ui.helper);
                  var moduleType = $src.attr('data-type');
                  if (!base[moduleType] || !$.isFunction(base[moduleType].create)) {
                      if ($(doms.container).find("li.panelModuleIconContent").length > 0) {
                          $(doms.container).find("li.panelModuleIconContent").remove();
                      }
                      //base.error('亲,让您白点一下,组件['+moduleType+']功能尚未实现');
                      return false;
                  } else {
                      if ($target.find(doms.module).length > 0) {
                          if (!base.IS_SORTABLE) {
                              utils.tipError('目标位置已存在组件了, 请删除模板后再添加', 3);
                          }
                      } else {
                          if ($target.hasClass(doms.col.substring(1))) {
                              // 调用组件的创建方法
                              base[moduleType].create($target);
                              //cls.module.sortable();
                              $(doms.container).find(".panelContentContainer").remove();
                          }
  
                      }
                  }
                  // 防止事件传播
                  return false;
              }
          },
          update: function (event, ui) {
              utils.log('--------------------  $(doms.col).sortable update ------------------------');
              // utils.log('Module.prototype.sortable update event.target >>>');
              // utils.log(event.target);
              // utils.log('');
          },
          stop: function (event, ui) {
              utils.log('--------------------  $(doms.col).sortable stop ------------------------');
              // utils.log('Module.prototype.sortable stop event.target >>>');
              // utils.log(event.target);
              // utils.log('Module.prototype.sortable stop ui >>>');
              // utils.log(ui);
              // utils.log('');
              utils.log('Module.prototype.sortable stop  base.IS_DRAGGABLE_NEW_MODULE >>>', base.IS_DRAGGABLE_NEW_MODULE);
  
              var $target = $(event.target);
              if (!base.IS_DRAGGABLE_NEW_MODULE) {
                  utils.log('Module.prototype.sortable stop  base.IS_DRAGGABLE_NEW_MODULE is undefined');
                  var $html = $('<div>'+base.SORTABLE_SOURCE_HTML+'</div>').remove('.ui-sortable-placeholder');
                  var $srcModule = $html.find(doms.module);
                  utils.log('Module.prototype.sortable stop $html: ',$html);
                  if ($srcModule.length > 0) {
                      utils.log('Module.prototype.sortable stop  $html is module');
                      var moduleType = $srcModule.attr('data-type');
                      var moduleId = $srcModule[0].id;
                      utils.log('Module.prototype.sortable stop moduleType >>>', moduleType, moduleId);
                      $srcModule.find('.panel').remove();
                      var width = $target.outerWidth(true) - utils.getIntegerFixPX($(doms.module).css('margin-right'));
                      utils.log('Module.prototype.sortable stop width >>>', width);
                      var _conf = $srcModule.attr('data-conf');
                      utils.log('Module.prototype.sortable stop _conf >>>', _conf);
                      var conf = utils.parseOptions(_conf);
                      conf.width = width;
                      $srcModule.attr('data-conf', utils.jsonStringify(conf));
                      var targetHtml = $srcModule[0].outerHTML;
                      utils.log('Module.prototype.sortable stop targetHtml >>>', targetHtml);
                      $target.html(targetHtml);
                      var $module = $('#' + moduleId);
                      if (base[moduleType] && base[moduleType].render) {
                          utils.log('Module.prototype.sortable stop base[moduleType].render >>>', moduleType);
                          base[moduleType].render(moduleId);
                      }
  
                  } else {
                      utils.log('Module.prototype.sortable stop  $html is not module');
                      $target.html(base.SORTABLE_SOURCE_HTML);
                  }
  
                  $('.g_middlePlaceholder').remove();
                  base.disableEditLayer();
  
              } else {
                  // 新建对象后续处理
                  // utils.log('Module.prototype.sortable receive $(doms.container).find(".panelContentContainer") >>>', $(doms.container).find(".panelContentContainer"));
                  $(doms.container).find(".panelContentContainer").remove();
                  $(doms.container).find("li.panelModuleIconContent").remove();
                  $(doms.col).removeClass('ui-state-hover1');
                  base.enableEditLayer();
                  $("body").enableSelection();
                  cls.refreshRowModule();
              }
              $(doms.col + ' ' + doms.module).removeAttr('style').removeClass('opacity');
              base.IS_SORTABLE = false;
  
  
          }
      });
  
  
  };
  
  /**
   * 生成不重复的 ID
   * @param prefix 要添加到 ID 前缀的值
   * @param id 已经存在 ID
   * @param arr 页面中相同前缀值(同一类型的)的所有已存在的 ID 集合数组
   * @returns {String} 返回一个当前页面唯一的ID
   */
  Module.prototype.createUniqueId = function (prefix, id, arr) {
      var cls = this, uniqueId = _.uniqueId(prefix);
      // 在 arr 数据中找,是否存在这个 ID, 如果存在, 重新创建
      if (_(arr).indexOf(id) > -1) {
          // 如果存在
          // 递归调用自己,直到生成不重复的 ID 为止
          cls.createUniqueId(prefix, id, arr);
      } else {
          // 不存在
          return uniqueId;
      }
  };
  
  /**
   * 为当前页面中的 .row 和 .module 如果没有ID, 则自动创建ID
   * @returns {*}
   */
  Module.prototype.autoCreateId = function () {
      var cls = this, dtd = Q.defer();
      $(doms.row).each(function () {
          var id = this.id;
          if (!id) {
              id = _.uniqueId('row');
              $(this).attr('id', utils.createUniqueId('row', id, utils.getRowIDS()));
          }
      });
  
      // 统一处理moduleId
      $(doms.module).each(function () {
          var id = this.id;
          if (!id) {
              id = _.uniqueId('module');
              $(this).attr('id', utils.createUniqueId('module', id, utils.getModuleIDS()));
          }
      });
      dtd.resolve();
      return dtd.promise;
  
  };
  /**
   * 根据组件类型 动态创建演示数据
   * @param $module 被填充的组件对象
   * @param moduleId 被填充的组件 ID
   * @param moduleType 组件类型
   */
  Module.prototype.autoCreateData = function ($module, moduleId, moduleType) {
      // base.log('Module.prototype.autoCreateData moduleId: ' + moduleId + ', moduleType: ' + moduleType);
      if (base[moduleType] && base[moduleType].render) {
          base[moduleType].render(moduleId);
      }
  
  };
  
  Module.prototype.test = function () {
  
  };
  
  base.plugin('module', new Module());
  
  module.exports = Module;
  

});

;/*!app/common/global.js*/
define('app/common/global', function(require, exports, module) {

  /**
   * 全局类
   * Created by Dzl on 2016-8-9.
   */
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var db = require('app/common/db');
  var config = require('app/common/config');
  require('app/common/module');
  var doms = require('app/common/template-dom-structure');
  
  /**
   * 全局的DOM结构和相关变量
   * @param options
   * @constructor
   */
  var Global = function (options) {
      this.options = $.extend(true, Global.DEFAULTS, options);
  
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Global.DEFAULTS = {
      /**
       * 本身窗口变量
       */
      winSelf: window,
      /**
       * 得到本身的document对象。
       */
      winDocum: $(document),
      /**
       * 主要显示区域iframe，用来存放网站的iframe
       */
      wIframe: null,
      /**
       * 主要显示区域iframeDom，用来存放网站的iframeDom
       */
      wIframeDom: null,
      /**
       * 主要显示区域iframeWin，用来存放网站的iframe的window对象，用它可以访问框架内的变量
       */
      wIframeWin: null,
      /**
       * 是否有更改变量，如果有更改那么赋值为TRUE
       */
      saveVar: false,
      /**
       * 是否有更改页面大小变量，如果有更改那么赋值为TRUE
       */
      zoomSaveVar: false,
      /**
       * 设计模式变量
       */
      designMode: true,
      domid: {
          mainIframe: doms.iframe
      }
  };
  
  Global.prototype.test = function () {
      // base.log("Global test success!");
  };
  
  
  /**
   * 用于在模板中初始化的方法
   */
  Global.prototype.initInTemplate = function (callback) {
      base.log("Global initInTemplate success!");
      var t = base.getQueryString('specialDesign');
      var skin = base.getQueryString('skin');
      if (t == 1) {
          /**
           * 为主题模板的body加上design样式
           */
          base.log('parent.$.Site.CURSKINCLASS: ' + parent.$.Site.CURSKINCLASS);
          if (!utils.getDevelopStatus()) {
              $('body').attr('class', 'design ' + parent.$.Site.CURSKINCLASS);
  
              //页面背景
              db.ajaxGet(config.rpc.getPageBackground,{
                  specialId: utils.getSpecialId()
              },function (data) {
                  $('body').find("#wraper").attr('style',data);
              })
  
          } else {
              $('body').addClass('design').addClass(skin);
  
              parent.$.Site.SITE_LIST = base.SITE_LIST = [];
          }
  
          base.isDesign = true;
          /**
           * 禁用在设计模式下主题模板库中所有链接的点击
           */
          $(document).on("click.ls.design", "a", function () {
              //utils.alert('当前为设计模式,列表数据为模拟数据,所有链接点击禁用');
              return false;
          });
  
          if(!utils.getDevelopStatus()){
              //获取所有站点信息
              $.ajax({
                  type: 'post',
                  url: config.rpc.getSiteTree,
                  cache: false,
                  dataType: 'json',
                  success: function (data) {
                      if(!_.isEmpty(data)&&_.isArray(data)) {
                          var arr = [];
                          for(var i=0;i<data.length;i++) {
                              arr.push({siteId: data[i].indicatorId,uri:data[i].uri});
                          }
                          parent.$.Site.SITE_LIST = base.SITE_LIST = arr;
  
                      }else {
                          utils.alert("服务端出现异常,请与管理员联系");
                      }
  
                      if (_.isFunction(callback)) {
                          callback.call(this);
                      }
                  },
                  error: function (e) {
                      utils.alert('服务端出现异常,请与管理员联系');
                  }
  
              });
  
          }else {
              if (_.isFunction(callback)) {
                  callback.call(this);
              }
          }
  
  
      } else {
          $('body').removeClass('design');
          if (_.isFunction(callback)) {
              callback.call(this);
          }
      }
  
  };
  Global.prototype.goTpl = function (tplId, pagename, skin) {
      tplId = tplId || '1';
      pagename = pagename || 'index';
      try {
          //在iframe销毁前清理掉iframe中的内容（特别是flash）
          if (base.mainIframeContentWindow) {
              $(base.mainIframeContentWindow.content.document.body).empty();
          }
  
          base.mainIframe[0].src = "about:blank";
          base.mainIframe[0].contentWindow.document.write('');
          base.mainIframe[0].contentWindow.close();
          if (typeof CollectGarbage == "function") {
              CollectGarbage();
          }
  
      } catch (e) {
      }
  
      // var tplUrl = base.rootPath + 'page/web' + tplId + '/' + pagename + '-dev.html?specialDesign=1&tplId=0';
      var tplUrl = base.rootPath + 'page/web' + tplId + '/page/template/' + pagename + '-dev.html?specialDesign=1&tplId=0';
      if (!utils.isNul(skin)) {
          tplUrl += '&skin=' + skin;
      }
      base.mainIframe.attr('src', tplUrl);
  };
  Global.prototype.goTheme = function (themeName) {
      // base.log('Global.prototype.goTheme >>>');
      //var themeFromCookie = utils.cookie.get('theme');
      // base.log('themeFromCookie=' + themeFromCookie);
      base.log('themeName=' + themeName);
      var mthemeName = themeName + '-m';
  
      if (themeName == base.themeName || mthemeName == base.themeName) {
          return;
      } else {
          try {
              //在iframe销毁前清理掉iframe中的内容（特别是flash）
              if (base.mainIframeContentWindow) {
                  $(base.mainIframeContentWindow.content.document.body).empty();
              }
  
              base.mainIframe[0].src = "about:blank";
              base.mainIframe[0].contentWindow.document.write('');
              base.mainIframe[0].contentWindow.close();
              if (typeof CollectGarbage == "function") {
                  CollectGarbage();
              }
  
          } catch (e) {
          }
  
          themeName = themeName.replace(/-m/g, '');
          //alert(themeName.replace(new RegExp(/(-m)/g),''));
          if (base.isMobile && themeName.indexOf('-m') == -1) {
              themeName = themeName + '-m'
          }
  
          var themeUrl = base.rootPath + 'page/' + themeName + '/index.html?specialDesign=1&tplId=0';
          // themeUrl = __uri(themeUrl);
          base.log('themeUrl=' + themeUrl);
          base.log(base.mainIframe);
          base.mainIframe.attr('src', themeUrl);
          base.themeName = themeName;
          utils.cookie.set('theme', themeName);
      }
  
  
  };
  
  Global.prototype.initInRoot = function (options) {
      //  base['skin'] 为挂载到 app/common/base.js 基类上的 app/common/skin.js 实例对象
      var cls = this, specialId = utils.getSpecialId();
      base['skin'] && base['skin'].init(specialId).then(function (skinsList) {
          utils.log('Global.prototype.initInRoot skinsList: ', skinsList);
          // 获取默认皮肤
          var curSkinObj = _.filter(skinsList, {'defaults': 1});
          utils.log('Global.prototype.initInRoot curSkinObj: ', curSkinObj);
          base.CURSKINCLASS = curSkinObj.length > 0 && !utils.isNul(curSkinObj[0].path) ? curSkinObj[0].path.replace('.css', '') : '';
          cls.__initInRoot(options);
  
      });
  };
  /**
   * root 父页面初始化入口函数
   */
  Global.prototype.__initInRoot = function (options) {
      var cls = this;
      var conf = this.options;
      /**
       * 获取模板iframe
       * @type {any}
       */
      base.mainIframe = $(conf.domid.mainIframe);
      utils.log('developStatus is false');
      var specialId = utils.getSpecialId();
      var tplId = base.getQueryString('tplId');
      var columnId = base.getQueryString('columnId');
      var pagename = base.getQueryString('pagename');
      var themeFromCookie = utils.cookie.get('theme');
      var themeName  = skin = base.getQueryString('skin');
      base.GLOBALVAR = {};
      base.GLOBALVAR.specialId = specialId;
      base.GLOBALVAR.tplId = tplId;
      base.GLOBALVAR.columnId = columnId;
      base.GLOBALVAR.pagename = specialId;
      base.GLOBALVAR.themeName = themeName;
  
      if (!utils.getDevelopStatus()) {
          if (utils.isNul(tplId)) {
              utils.alert('tplId参数错误');
              return;
          }
          // 将获取到的 url 变量存储到本地存储中
          utils.data.set('SPECIALID', specialId);
          utils.data.set('TPLID', tplId);
          utils.data.set('ROOTTPLID', tplId);
          utils.data.set('COLUMNID', columnId);
          db.SAVETPLID = tplId;
  
          // 如果本地存储中的模板的 URL 为空,则构造默认的 URL
          var indexUrl = config.rpc.getTplContentById + '?specialDesign=1&specialId=' + specialId + '&rootTplId=' + tplId + '&columnId=' + columnId + '&tplId=' + tplId;
          utils.log('indexUrl: ', indexUrl);
  
          // 取得当前专题的栏目页和阅读页
          base.PAGES = [{tplId: tplId, name: '首页', href: indexUrl, isIndex: true}];
          // 构造 ajax 队列
          var ajaxQueue = [];
          ajaxQueue.push(db.getPages(specialId, 'column'));
          ajaxQueue.push(db.getPages(specialId, 'content'));
          // 使用 Q.js 创建 ajax 访问队列,默认只返回一个参数
          // 使用 .spread 可依次返回每个 ajax 请求的参数
          Q.all(ajaxQueue).spread(function (navs, news) {
              base.log('load pages >>>');
              base.log('navs: ' + JSON.stringify(navs));
              base.log('news: ' + JSON.stringify(news));
              for (var i = 0, l = navs.length; i < l; i++) {
                  var el = navs[i];
                  base.PAGES.push({
                      specialId: specialId,
                      columnId: columnId,
                      rootTplId: tplId,
                      tplId: el.id,
                      name: el.name,
                      href: config.rpc.getTplContentById + '?specialDesign=1&specialId=' + specialId + '&rootTplId=' + tplId + '&columnId=' + columnId + '&tplId=' + el.id
                  })
              }
              for (var i = 0, l = news.length; i < l; i++) {
                  var el = news[i];
                  base.PAGES.push({
                      specialId: specialId,
                      columnId: columnId,
                      rootTplId: tplId,
                      tplId: el.id,
                      name: el.name,
                      href: config.rpc.getTplContentById + '?specialDesign=1&specialId=' + specialId + '&rootTplId=' + tplId + '&columnId=' + columnId + '&tplId=' + el.id
                  })
              }
  
              // 数组根据tplId去重
              base.PAGES = _.unionBy(base.PAGES, 'tplId');
  
              new Vue({
                  el: '#ztPages',
                  data: {menus: base.PAGES},
                  methods: {
                      // vo-on:click="goTemplate(item)" 绑定
                      goTemplate: function (item) {
                          if (confirm('正在切换页面，请确保当前页面已经保存。')) {
                              utils.data.set('SPECIALID', item.specialId);
                              utils.data.set('TPLID', item.tplId);
                              utils.data.set('COLUMNID', item.columnId);
                              utils.data.set('ROOTTPLID', item.rootTplId);
                              utils.data.set('ISINDEX', item.isIndex);
                              utils.log('goTemplate: url:', item.href);
                              db.SAVETPLID = item.tplId;
                              base.mainIframe.attr('src', item.href);
                          }
                      }
                  },
                  mounted: function () {
                      // `this` 指向 vm 实例
                      utils.log('vue mounted >>>');
                      $('#ztPages .dropdown-toggle').dropdown({trigger: "hover"});
                  }
              });
          });
          utils.data.set('ISINDEX', true);
          base.mainIframe.attr('src', indexUrl);
      } else {
          utils.log('developStatus is true,themeName:' + themeName);
          if (utils.isNul(themeName)) {
              if (utils.isNul(themeFromCookie)) {
                  themeName = 'web1';
                  utils.log("themeName:", themeName);
                  utils.cookie.set('theme', themeName);
              } else {
                  themeName = themeFromCookie;
              }
  
          } else {
              utils.cookie.set('theme', themeName);
          }
  
          if (config.developTplId) {
              themeName = 'web' + (config.developTplId ? config.developTplId : 1);
          }
          if(utils.isNul(pagename)) pagename = 'index';
          cls.goTpl(tplId, pagename, skin);
      }
  
  
      /**
       * 当模板内容加载完毕后执行
       */
      base.mainIframe.load(function () {
  
          base.log('模板内容加载完毕后执行 >>>');
          /**
           * 取得主题模板的所有子节点(包括文本节点、注释节点等)
           * 并以jQuery对象的形式返回
           * @type {any} jQuery对象
           */
          base.mainIframeDom = $(this).contents();
          //base.log('base.mainIframeDom >>>');
          //base.log(base.mainIframeDom);
          /**
           * contentWindow属性是指指定的frame或者iframe所在的window对象
           * @type {Window}
           */
          base.mainIframeContentWindow = $(this)[0].contentWindow;
          /**
           * 为主题模板中所有节点对象绑定事件
           */
          base.mainIframeDom.click(function () {
              // base.log("base.mainIframe click")
          });
  
          // base.log('base.mainIframeContentWindow >>>');
          // base.log(base.mainIframeContentWindow);
          base.templateWindow = base.mainIframeContentWindow;
  
          // 为base.mainIframeContentWindow中注入父页面的对象
          if (base.mainIframeContentWindow && base.mainIframeContentWindow.$ &&
              base.mainIframeContentWindow.$.Site) {
              base.mainIframeContentWindow.$.Site.rootApp = $.Site;
              base.mainIframeContentWindow.$.Site.rootWindow = window;
              base.templateApp = base.mainIframeContentWindow.$.Site;
              utils.log('base.templateApp >>>  ',base.templateApp);
  
  
          }
  
  
      })
  
  };
  
  /**
   * 从当前模板页面中获取可用组件列表,去重,合并公共组件列表,并将结果以数组形式返回
   */
  Global.prototype.__getComponentListFromPage = function () {
      var cls = this,list = [];
      $(doms.module).each(function () {
          var $el = $(this),
              type = $el.attr('data-type');
          if(!cls.isNul(type)){
              list.push(type);
          }
      });
      if(list.length > 0){
          // 合并公共组件列表,并去重
          list = _.union(list,config.COMMON_COMPONENT_LIST)
      }else{
          list = config.COMMON_COMPONENT_LIST;
      }
      utils.log('Global.prototype.__getComponentListFromPage list:',list);
      return list;
  };
  
  base.getTemplateWindow = function () {
      return base.mainIframeContentWindow;
  };
  
  base.plugin('global', new Global());
  
  module.exports = Global;
  

});

;/*!app/common/skin.js*/
define('app/common/skin', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var db = require('app/common/db');
  var template = require('app/common/arttemplate');
  
  /**
   * 皮肤操作类
   * @param options
   * @constructor
   * 运行位置: 顶级父页面
   * 1. init
   *      检查当前模板的 body 中是否存在皮肤样式
   *      有: 作为当前皮肤参数初始化皮肤选择框
   *      没有: 取主题模板的默认皮肤值作为参数初始化皮肤选择框
   */
  
  var Skin = function (options) {
      this.options = $.extend(true, Skin.DEFAULTS, options);
      /**
       * 取得由模板引擎编译后的内容，强依赖 artTemplate.js
       */
      this.toolTipTemplateCompile = template.compile("\r\n<!-- 皮肤选择的模板 HTML -->\r\n<!-- 使用 artTemplate.js 引擎渲染 -->\r\n<!-- 详细参见: https://github.com/aui/artTemplate -->\r\n<div class=\"tooltip-inner\" style=\"width:150px; text-align: center \">\r\n    <ul id=\"themeColorsTooltip\" class=\"themeColors1\">\r\n        {{each list as el i}}\r\n        <li>\r\n            <a class=\"themeColors1-a skin-{{el.path}}\"\r\n               style=\"background-color:{{el.color}};\" _skin=\"{{el.path}}\">\r\n                {{if el.defaults}}\r\n                <img src=\"/assets/design/static/css/imgs/themesColorCheck.png\" alt=\"\">\r\n                {{/if}}\r\n            </a>\r\n        </li>\r\n        {{/each}}\r\n    </ul>\r\n</div> <!-- tooltip-inner -->");
  
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Skin.DEFAULTS = {
      skin: 'red'  // 默认皮肤值
  };
  
  /**
   * 从模板页面中获取皮肤样式数组
   * @returns {Array}
   * @deprecated
   */
  Skin.prototype.getSkinByPageBody = function () {
      // base.log("Skin.prototype.getSkinByPageBody");
      var cls = this;
      var skinArr = [];
      if (base.mainIframeContentWindow && base.mainIframeContentWindow.$) {
          var $tplBody = base.mainIframeContentWindow.$('body');
          var skinClass = $tplBody.attr('class');
          // base.log('主题模板的样式为: ' + skinClass);
          if (!_.isEmpty(skinClass)) {
              // skinClass 可能存在多个值
              // 将多个值转换为数组
              skinArr = skinClass.split(' ');
          }
      } else {
          throw new Error('获取模板对象的 window 失败');
      }
      return skinArr;
  
  
  };
  
  /**
   * 从远程获取皮肤样式数组
   * @returns {Object} Promise 对象
   */
  Skin.prototype.getSkinByRemote = function (specialId) {
      // base.log('[skin.js] getSkinByRemote ');
      return db.getSkins(specialId);
  };
  
  /**
   * 更新默认皮肤样式
   * @param specialId 专题ID
   * @param skins 皮肤值
   */
  Skin.prototype.updateDefaultSkins = function (specialId, skins) {
      // base.log('[skin.js] updateDefaultSkins ');
      return db.updateDefaultSkins(specialId, skins);
  };
  
  /**
   * 初始化皮肤选择
   * @param specialIdId 专题 ID
   */
  Skin.prototype.init = function (specialId) {
      var dtd = Q.defer();
      // base.log('[skin.js] init ');
      var cls = this;
      // if (!utils.isNul(skinsData)) {
      //     // 从本地存储中取值，减少远程获取的频次
      //     data = JSON.parse(skinsData);
      //     cls.__render(specialId, data);
      //     dtd.resolve(data);
      // } else {
      // 从远程服务器取值
      cls.getSkinByRemote(specialId).then(function (data) {
          //base.log('[skin.js] 从远程服务器获取的值：' + JSON.stringify(data));
          cls.__render(specialId, data);
          dtd.resolve(data);
      });
      // }
      return dtd.promise;
  };
  
  Skin.prototype.__render = function (specialId, data) {
      // base.log('[skin.js] __render ');
      var cls = this;
      var html = cls.__parseSkinsTemplate(specialId, data);
      cls.__initSUITooltip(html);
  };
  
  
  /**
   * 构造 SUI 的 tooltip
   * 参见:  http://sui.taobao.org/sui/docs/tooltip.html
   * @param html tooltip里的内容
   * @private
   */
  Skin.prototype.__initSUITooltip = function (html) {
      // base.log('[skin.js] __initSUITooltip ');
      $('#topIcon_theme').tooltip({
          title: function () {
              return html;
          }
      });
  };
  
  /**
   * 处理皮肤数组数据
   * @param specialId * 专题 ID
   * @param skinsArray * 皮肤数组
   * @param skin 已选 skin 值
   * @returns {String} 返回经模板引擎渲染后的 html
   * @private
   */
  Skin.prototype.__parseSkinsTemplate = function (specialId, skinsArray, skin) {
      // base.log('[skin.js] __parseSkinsTemplate ');
      var cls = this;
      _(skinsArray).forEach(function (item) {
          item.path = item.path.replace('.css', '');
          // 如果 skin 存在，且属于当前迭代的项目的 path
          if (skin && item.path.indexOf(skin) > -1) {
              item.defaults = 1; // 设置为已选
  
          }
      });
      // 将值存入到本地存储
      utils.data.set('SKINS_' + specialId, JSON.stringify(skinsArray));
      // base.log('[skin.js] skinsArray: ' + JSON.stringify(skinsArray));
      var html = cls.toolTipTemplateCompile({list: skinsArray});
      // base.log('[skin.js] html: ' + html);
      return html;
  };
  
  /**
   * 选择皮肤后修正缓存数据
   * @param specialId 主题模板ID
   * @param skin 选中的皮肤
   * @returns {Array} 返回修正后数据
   * @private
   */
  Skin.prototype.__updateCacheSkinsData = function (specialId, skin) {
      // base.log('[skin.js] __parseSkinsData ');
      var cls = this,
          skinsArray = [],
          skinsArrayJsonStr = utils.data.get('SKINS_' + specialId);
      if (!utils.isNul(skinsArrayJsonStr)) {
          skinsArray = JSON.parse(skinsArrayJsonStr);
          _.forEach(skinsArray, function (item) {
              item.path = item.path.replace('.css', '');
              // 如果 skin 存在，且属于当前迭代的项目的 path
              if (skin && item.path.indexOf(skin) > -1) {
                  item.defaults = 1; // 设置为已选
              } else {
                  item.defaults = 0;
              }
          });
      }
  
      // 将值存入到本地存储
      utils.data.set('SKINS_' + specialId, JSON.stringify(skinsArray));
      // base.log('[skin.js] skinsArray: ' + JSON.stringify(skinsArray));
      return skinsArray;
  };
  
  /**
   * 选择应用皮肤
   * @param specialId 主题 ID
   * @param skin 已选 skin 值
   */
  Skin.prototype.applySkin = function (specialId, skin) {
      // base.log('[skin.js] applySkin ');
      if (utils.isNul(skin)) return;
      var cls = this;
      skin = skin.replace('.css', '');
      //保存历史记录
      db.saveHistory();
      base.mainIframeContentWindow.$('body').removeAttr('class').addClass('design ' + skin);
      $('.themeColors1-a').empty();
      // TODO: 此处有局限性，只能设置预设的几个皮肤名称
      $('.skin-' + skin).html('<img src="' + '../page/imgs/themesColorCheck.png' + '" alt="">');
  
      // 更新缓存数据
      var newData = cls.__updateCacheSkinsData(specialId, skin);
      // 销毁 tooltip 实例
      $('#topIcon_theme').tooltip('destroy');
      // 重新绑定 tooltip 实例
      cls.__render(specialId, newData);
      // 将选择应用的皮肤值保存到服务器
      cls.updateDefaultSkins(specialId, skin);
  };
  
  Skin.prototype.test = function () {
      // base.log("Skin test success!");
  };
  
  /**
   * 将 Skin 类实例化后注入到 base.plugin 对象
   * 属 单例模式
   */
  base.plugin('skin', new Skin());
  
  module.exports = Skin;
  

});

;/*!app/components/info-tabs/index.js*/
define('app/components/info-tabs/index', function(require, exports, module) {

  /**
   * 选项卡组件
   * Created by Dzl on 2017-3-1.
   */
  
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  var labels = require('app/common/labels');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var InfoTabs = function (options) {
      this.options = utils.assignClone(InfoTabs.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      // this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'infoTabs',
          conf: {
              style: 'default',
              isTitle: true,
              isMore: true,
              more: '更多+',
              moreId: null,
              moreUrl:null,
              num: 8,
              panelPadding: null,
              target: '_blank',
              width: null,  // module 的宽度
              height: 310, // module 的高度
              toggle: 'mouse', // tab触发事件, `tab` 鼠标点击  `mouse` 鼠标滑动
              textLen: null,
              isDate: true,
              dateFormat: 'MM-dd',
              tabs: [
                  //     {
                  //     name: '新Tab',
                  //     dataUrl: '#',
                  //     dataMore: 'tab1',  // jquery 选择器
                  //     dataId: 'tab1', // jquery 选择器
                  //     active: true
                  // }
                  // , {
                  //     name: '页签2',
                  //     dataUrl: '#',
                  //     dataMore: 'tab2',  // jquery 选择器
                  //     dataId: 'tab2', // jquery 选择器
                  //     active: false
                  // }
              ]
          },
          label: {
              // tab1: labels.docList,
              // tab2: labels.docList
          }
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n"
      };
  
      this.dataList = mockData.getInfoList(8, 20).data;
      //this.dataList = [];
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{ conf.isTitle | displayFilter }}\">\r\n        <div class=\"title\">\r\n            <ul class=\"clearfix\">\r\n                {{each conf.tabs as el index}}\r\n                <li class=\"{{el.active | activeFilter }}\">\r\n                    <a href=\"{{ if conf.toggle == 'mouse'}} {{ el.dataUrl }} {{else}} javascript:void(0) {{/if}}\" id=\"#{{ el.dataId }}\" data-id=\"#{{ el.dataId }}\"\r\n                       data-toggle=\"{{ conf.toggle }}\"\r\n                       data-url=\"{{ el.dataUrl }}\"\r\n                       data-more=\"#{{ el.dataMore }}\">\r\n                        {{ el.name }}\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.moreUrl}}\" target=\"_blank\" id=\"{{ conf.moreId }}\">{{conf.more}}</a>\r\n        </div>\r\n        {{ /if }}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {{each conf.tabs as el index}}\r\n        <ul class=\"tab-panel list {{el.active | activeFilter }} clearfix\" id=\"{{ el.dataId }}\">\r\n            {{each dataList as info index}}\r\n            <li class=\"clearfix\">\r\n                <a href=\"{{info.href}}\" target=\"{{conf.target}}\">{{info.title}}</a>\r\n                <span class=\"date right\">{{info.createDate}}</span>\r\n            </li>\r\n            {{/each}}\r\n        </ul>\r\n        {{/each}}\r\n\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" ' +
          'data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      template.helper('infoTabsDataIdFilter', function (target) {
          if (_.isEmpty(target))return '';
          return target.substring(1);
      });
      template.helper('activeFilter', function (target) {
          return target ? 'active' : '';
      });
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  InfoTabs.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/info-tabs/form.html',
          width: 780,
          height: 480
      },
      type: 'infoTabs'
  };
  
  InfoTabs.prototype.__addTab4Vue = function (vueData, moduleId, ids, name, url, moreId, isActive, siteId) {
      // utils.log('InfoTabs.prototype.__addTab4Vue >>> conf');
      // utils.log(vueData);
      // utils.log('moduleId: ', moduleId);
      // utils.log('ids: ', ids);
      // utils.log('name: ', name);
      // utils.log('url: ', url);
      // utils.log('moreId: ', moreId);
      // utils.log('isActive: ', isActive);
  
      // var tabId = _.uniqueId(moduleId + '_tab');
      var tabIds = [];
      $.each(vueData.conf.tabs, function (key,val) {
          tabIds.push(val.dataId);
      })
      var tabId = utils.createUniqueId(moduleId + '_tab', _.uniqueId(moduleId + '_tab'), tabIds);
  
      isActive = isActive || false;
      var tab = {
          name: name,
          dataUrl: url,
          dataMore: moreId,  // jquery 选择器
          dataId: tabId, // jquery 选择器
          active: isActive
      };
      var label = _.cloneDeep(labels.docList);
      label.id = ids;
      label.siteId = siteId || "";
      vueData.conf.tabs.push(tab);
      vueData.label[tabId] = label;
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  InfoTabs.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  InfoTabs.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      // // utils.log('InfoTabs.prototype.formSumbit >>>');
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var formPostData = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(formPostData.moduleId, formPostData);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  InfoTabs.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
      // 根据容器的宽度自动计算字符长度
      if (utils.isNul(data.conf.textLen)) {
          data.conf.textLen = utils.getFontLength(data.conf.width);
      }
  
      // 处理 moreId 变量
      //if (utils.isNul(data.conf.moreId)) {
          data.conf.moreId = moduleId + '_more';
      //}
      // utils.log('InfoTabs.prototype.getData moduleId:',moduleId);
      // utils.log('InfoTabs.prototype.getData data.conf.moreId:',data.conf.moreId);
      // var labelObj = {};
      // var i = 0;
      // // 自动处理tabid
      // _.forEach(data.conf.tabs, function (value) {
      //     value.dataMore = data.conf.moreId;
      //     // 先取得对应的标签
      //     if (data.label[value.dataId]) {
      //         data.label[value.dataId]['length'] = data.conf.textLen;
      //         data.label[value.dataId]['num'] = data.conf.num;
      //         // 重新定义 tabid
      //         var newDataId = moduleId + '_tab'+i;
      //         labelObj[newDataId] = data.label[value.dataId];
      //         value.dataId = newDataId;
      //         i++;
      //     }
      // });
      // // 解决由于模板中多个 tab 设置了相同ID时出现的 BUG
      // data.label = labelObj;
  
  
      // 新组件
      if (isModule) {
          // 创建 ID
          data.moduleId = utils.createModuleUniqueId();
          data.conf.moreId = data.moduleId + '_more';
          // 创建默认 TAB
          var tabIds = [];
          $.each(data.conf.tabs, function (key,val) {
              tabIds.push(val.dataId);
          })
          var tabId = utils.createUniqueId(data.moduleId + '_tab', _.uniqueId(data.moduleId + '_tab'), tabIds);
          // var tabId = _.uniqueId(data.moduleId + '_tab');
          var tab = {
              name: '新tab',
              dataUrl: '#',
              dataMore: data.conf.moreId,  // jquery 选择器
              dataId: tabId, // jquery 选择器
              active: true
          };
          var label = {};
          label[tabId] = _.cloneDeep(labels.docList);
          label[tabId].length = utils.getFontLength(data.conf.width);
          if (!_.isArray(data.conf.tabs)) {
              data.conf.tabs = [];
          }
          if (!_.isArray(data.label)) {
              data.label = [];
          }
          data.conf.tabs.push(tab);
          data.label = label;
          // utils.log(' data.moduleId: ' + data.moduleId);
      }
  
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.conf.textLen = utils.getFontLength(data.conf.width);
      }
      // 是否挂载演示数据
      if (!excludeListData) {
          // utils.log('InfoTabs.prototype.getData  base.IS_SORTABLE:', base.IS_SORTABLE);
          // utils.log('InfoTabs.prototype.getData  data.conf.width:', data.conf.width);
          // utils.log('InfoTabs.prototype.getData  data.conf.textLen:', data.conf.textLen);
          // 挂载演示数据
          data.dataList = mockData.getInfoList(data.conf.num, data.conf.textLen, data.conf.dateFormat).data;
      }
  
      // 构造标题更多链接
      _.forEach(data.conf.tabs,function (val) {
          if(val.active){
              var siteId = data.label[val.dataId].siteId;
              if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
                  data.conf.moreUrl = config.getOtherTitleHref(data.label[val.dataId].id, siteId)
              }else {
                  data.conf.moreUrl = config.getTitleHref(data.label[val.dataId].id);
              }
          }
      })
  
      return data;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  
  InfoTabs.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
  
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
  
      var _compile = template.compile(cls.moduleTpl);
      // utils.log('InfoTabs.prototype.getHtmlAndModuleId >>> data: ');
      // utils.log(data);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  InfoTabs.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // utils.log('InfoTabs.prototype.getModuleAttrData:data>>>', data);
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  InfoTabs.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  InfoTabs.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      // 检测 label
      _.forEach(data.conf.tabs, function (tab) {
          if (!data.label[tab.dataId]) {
              data.label[tab.dataId] = _.cloneDeep(labels.docList);
          }
      });
  
  
      Vue.filter('labelIdFilter', function (label_id) {
          return utils.isNul(label_id) ? true : false;
      });
  
      // 清除演示数据,因为在表单绑定时不需要
      if (data.dataList) delete data.dataList;
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.conf.target = value;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.conf.dateFormat = value;
          },
          add: function () {
              var vueData = this;
              cls.__addTab4Vue(vueData, curEditModuleId, null, '新tab', '#', this.conf.moreId, false);
          },
          // 向上移动
          moveUp: function (index) {
              // utils.log('moveUp: ' + index);
              if (index == 0) {
                  return;
              }
              this.conf.tabs[index] = this.conf.tabs.splice((index - 1), 1, this.conf.tabs[index])[0];
  
          },
          moveDown: function (index) {
              // utils.log('moveDown: ' + index);
              if (index == this.conf.tabs.length - 1) {
                  return;
              }
              this.conf.tabs[index] = this.conf.tabs.splice((index + 1), 1, this.conf.tabs[index])[0];
              // utils.swapItems(this.conf.tabs, index, index + 1);
          },
          remove: function (index) {
              var isDelDefault = false;
              if(this.conf.tabs[index]['active'] == true) {
                  isDelDefault = true;
              }
              this.conf.tabs.splice(index, 1);
              if(isDelDefault) {//若删除的是默认选中项，则重新设置第一个tab为默认选中项
                  this.conf.tabs[0]['active'] = true;
              }
  
          },
          // 关联栏目
          associateNode: function (index) {
              // utils.log('InfoTabs.prototype.initForm associateNode index: ', index);
              var vueData = this, conf = this.conf, label = this.label;
              // utils.log('InfoTabs.prototype.initForm associateNode conf.tabs: ', JSON.stringify(conf.tabs));
              // utils.log('InfoTabs.prototype.initForm associateNode label: ', JSON.stringify(label));
              if (this.conf.tabs.length > 4) {
                  Ls.tipsErr('tab组件最多只能关联5个栏目');
                  return;
              }
              var curTab = "",tabId="";
              if(index>-1) {
                  curTab = conf.tabs[index];
                  tabId = curTab.dataId;
              }
  
              utils.selectColumn({
                  configType: cls.contentModuleType,
                  chkStyle: 'radio',
                  tabId: tabId
              }, function (data) {
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      var url = isOtherSite ? config.getOtherTitleHref(ids.join(','),data[0].siteId) :config.getTitleHref(ids.join(','));
  
                      if (index > -1) {
                          // utils.log('InfoTabs.prototype.initForm associateNode curTab: ', JSON.stringify(curTab));
                          if (curTab && label[curTab.dataId]) {
                              conf.tabs[index].name = data[0].name;
                              label[curTab.dataId].id = ids.join(',');
                              label[curTab.dataId].siteId = isOtherSite ? data[0].siteId : "";
                          }
                      } else {
                          var siteId = isOtherSite ? data[0].siteId : null;
                          cls.__addTab4Vue(vueData, curEditModuleId, ids, data[0].name, url, conf.moreId, false, siteId);
                      }
  
                  }
              });
  
  
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  InfoTabs.prototype.open = function () {
      var options = this.options;
      var id = 'infoTabs';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  InfoTabs.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
  
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(data);
      var $panelHtml = $(panelHtml);
  
      // 解析标签
      var labelStr = '', label = '', isValid = true;
      _.forEach(data.conf.tabs, function (tab) {
          label = data.label[tab.dataId];
          if (utils.isNul(label.id)) {
              isValid = false;
              return false;
          }
          labelStr = utils.parseLabel(label);
          $panelHtml.find('#' + tab.dataId).html(labelStr);
      });
  
  
      // 验证标签关联 id 非空
      // utils.isNul(0)
  
      // 验证标签关联不通过 return null;
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  InfoTabs.prototype.render = function (moduleId) {
      // utils.log('InfoTabs.prototype.render moduleId: ', moduleId);
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  InfoTabs.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  
  };
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  InfoTabs.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  InfoTabs.prototype.setModuleAttrData = function (moduleId, formPostData) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(formPostData)) {
  
          // 处理label
          _.forEach(formPostData.conf.tabs, function (value) {
              value.dataMore = formPostData.conf.moreId;
              if (formPostData.label[value.dataId]) {
                  var siteId = formPostData.label[value.dataId].siteId;
                  formPostData.label[value.dataId]['length'] = formPostData.conf.textLen;
  
                  if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) { //非此站点栏目
                      value.dataUrl = config.getOtherTitleHref(formPostData.label[value.dataId].id, siteId);
                  }else {
                      value.dataUrl = config.getTitleHref(formPostData.label[value.dataId].id);
                  }
  
                  formPostData.label[value.dataId].num = formPostData.conf.num;
                  formPostData.label[value.dataId].target = formPostData.conf.target;
              }
          });
  
          $module.attr('data-label', utils.jsonStringify(formPostData.label));
          $module.attr('data-conf', utils.jsonStringify(formPostData.conf));
      }
  
      cls.formSubmitStatus = true;
      // 重新渲染
      var data = cls.getData(formPostData);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  InfoTabs.prototype.test = function () {
      // utils.log('InfoTabs test success!');
  };
  
  
  base.plugin('infoTabs', new InfoTabs());
  
  module.exports = InfoTabs;
  

});

;/*!app/components/page-header/logo.js*/
define('app/components/page-header/logo', function(require, exports, module) {

  /**
   * logo 操作类
   * Created by Dzl on 2016-8-25.
   */
  
  'use strict';
  
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var doms = require('app/common/template-dom-structure');
  var labels = require('app/common/labels');
  var db = require('app/common/db');
  
  require('app/common/artdialog');
  require('app/common/module-layer');
  require('app/common/move-frame');
  
  var Logo = function (options) {
      this.options = $.extend(true, Logo.DEFAULTS, options);
      // this.config = base['config'];
      this.win = base['artdialog'];
      this.moduleLayer = base['moduleLayer'];
      this.moveFrame = base['moveFrame'];
      this.id = doms.logoId;
      this.editJSON = [{
          text: "编辑标题",
          moduleId: 'logo',
          type: "setting"
      }];
      this.moduleSetting = {
          type: 'logo',
          conf: {
              type: 'image',
              imgLogoSrc: "/assets/design/static/css/imgs/logo/logo1.jpg",
              fontFamily: 'Microsoft YaHei',
              fontSize: 32,
              fontColor: '#000000',
              logotext: 'LOGO文字'
          }
      };
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
  
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Logo.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '编辑标题',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/page-header/form-logo.html',
          width: 600,
          height: 480
      },
      type: 'logo',
      borderColors: ["000000", "434343", "666666", "999999", "B7B7B7", "CCCCCC", "D9D9D9", "EFEFEF", "F3F3F3", "FFFFFF", "980000", "FF0000", "FF9900", "FFFF00", "00FF00", "00FFFF", "4A86E8", "0000FF", "9900FF", "FF00FF", "E6B8AF", "F4CCCC", "FCE5CD", "FFF2CC", "D9EAD3", "D0E0E3", "C9DAF8", "CFE2F3", "D9D2E9", "EAD1DC", "DD7E6B", "EA9999", "F9CB9C", "FFE599", "B6D7A8", "A2C4C9", "A4C2F4", "9FC5E8", "B4A7D6", "D5A6BD", "CC4125", "E06666", "F6B26B", "FFD966", "93C47D", "76A5AF", "6D9EEB", "6FA8DC", "8E7CC3", "C27BA0", "A61C00", "CC0000", "E69138", "F1C232", "6AA84F", "45818E", "3C78D8", "3D85C6", "674EA7", "A64D79", "85200C", "990000", "B45F06", "BF9000", "38761D", "134F5C", "1155CC", "0B5394", "351C75", "741B47", "5B0F00", "660000", "783F04", "7F6000", "274E13", "0C343D", "1C4587", "073763", "20124D", "4C1130"]
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  Logo.prototype.formSumbit = function () {
      var cls = this;
      utils.log("Logo.prototype.formSumbit >>>");
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
      var tplwin = base.templateWindow;
      var $logo = tplwin.$('#' + doms.logoId);
      var $img = $logo.find('img');
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(cls.id, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  Logo.prototype.getModuleAttrData = function (moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf');
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.assign({}, cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
          cls.moduleSetting.conf.imgLogoSrc = $module.find('img').attr('src');
      }
      return cls.moduleSetting;
  };
  
  Logo.prototype.init = function () {
      // utils.log("Logo.prototype.init");
      var cls = this;
      //给top绑定事件
      // utils.log(cls.id);
      $('#' + doms.logoId).mouseover(function () {
          cls.mover($(this));
      }).mouseleave(function () {
          cls.mleave($(this));
      });
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  Logo.prototype.initForm = function () {
      var cls = this;
      // var options = this.config.options;
      // utils.log('Logo.prototype.initForm >>>');
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var tplwin = base.templateWindow;
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(cls.id);
      // utils.log(JSON.stringify(data));
  
      //初始化过滤器
      Vue.filter('textTypeShowFilter', function (value) {
          return value == 'text' ? '' : 'dn';
      });
      Vue.filter('imageTypeShowFilter', function (value) {
          return value == 'image' ? '' : 'dn';
      });
  
      Vue.filter('imageTypeFilter', function (value) {
          return value == 'image' ? 'checked' : '';
      });
      Vue.filter('textTypeFilter', function (value) {
          return value == 'text' ? 'checked' : '';
      });
  
  
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          computed: {
              isShowLogoYes: function () {
                  return this.isShowLogo === 'YES' ? 'checked' : '';
              }
          },
          methods: {
              downloadFile: function (ev) {
                  db.ajaxGet('/design/checkFile', {
                      specialId: utils.getSpecialId(),
                      filename: "logo.psd"
                  }, function (resp) {
                      $("#logoImg").attr("src", "/design/downFile?specialId=" + utils.getSpecialId() + "&filename=logo.psd");
                  })
              }
          }
      });
  
      // 初始化颜色选择器
      utils.colorPicker("#fontColor", data.conf.fontColor, cls.options.borderColors, function (id, value) {
          base.vm.conf.fontColor = value
      });
  
  
      $('#addLogoBtn').on('click', function () {
          $.Site.showUploader(function (filePathArr) {
              if (filePathArr && filePathArr.length > 0) {
                  var file = filePathArr[0];
                  utils.log(filePathArr);
                  if ((file.fileName).indexOf('.') != -1) {
                      $.Site.vm.conf.imgLogoSrc = config.getFileServerNamePath() + file.fileName;
                  } else {
                      $.Site.vm.conf.imgLogoSrc = config.getFileServerPath() + file.mongoId;
                  }
              }
          });
      });
  
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 鼠标离开后的效果
   * @param moduleId
   */
  Logo.prototype.mleave = function (moduleId) {
      // utils.log("Logo.prototype.mleave");
      var cls = this;
      var $module = $('#' + moduleId);
      // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
      $module.attr({"_mouseIn": 0, "title": ""}).css("cursor", "default");
      // 移除相关的操作层和效果层
      cls.moduleLayer.remove(moduleId);
      cls.moveFrame.remove(moduleId);
  };
  
  /**
   * 鼠标移入时的效果
   * @param moduleId
   */
  Logo.prototype.mover = function (moduleId) {
      var cls = this;
      var $module = $('#' + moduleId);
      // utils.log("Logo.prototype.mover");
      // utils.log(this.$module);
      // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
      $module.attr("_mouseIn", 1);
      // 创建虚框(可利用来改变容器高度)
      cls.moveFrame.create(this.id);
      // 创建组件操作菜单
      cls.moduleLayer.create(this.id, this.editJSON, 0);
      $module.css("cursor", "move");
      $module.attr("title", "按住鼠标，可随意拖动。");
      // 绑定移动事件
      $module.draggable({
          beforeStart: function () {
              // var c, d = cls.$module;
              // var top = cls.$module.offset().top - cls.$module.parent().offset().top;
              // var left = cls.$module.offset().left - cls.$module.parent().offset().left;
              // d.css({
              //     position: "",
              //     top: top + "px",
              //     left: left + "px"
              // })
              // $module.css({ 'width': 'auto', 'height': 'auto' });
  
          },
          start: function () {
              cls.moveFrame.removeAll();
              cls.moduleLayer.removeAll();
          },
          stop: function () {
              // $module.css({ 'width': 'auto', 'height': 'auto' });
              //     if (cls.$module.offset().top < 22) {
              //         cls.$module.offset({
              //             top: 22,
              //             left: cls.$module.offset().left
              //         })
              //     }
              //     if (cls.$module.offset().left < 0) {
              //         cls.$module.offset({
              //             top: cls.$module.offset().top,
              //             left: 0
              //         })
              //     }
              //     var b = document.documentElement.clientWidth - cls.$module.width();
              //     if (cls.$module.offset().left > b) {
              //         cls.$module.offset({
              //             top: cls.$module.offset().top,
              //             left: b
              //         })
              //     }
              //     // Fai.top._titleData.t = cls.$module.position().top;
              //     // Fai.top._titleData.l = cls.$module.position().left;
              //     // if (_useTemplateTitle) {
              //     //     Fai.top._templateTitleData.t = cls.$module.position().top;
              //     //     Fai.top._templateTitleData.l = cls.$module.position().left
              //     // }
              //     // if (top._titlePositionFixTop) {
              //     //     cls.$module.removeClass("titlefixtop");
              //     //     Site.onTitlePositionFixTop()
              //     // }
              //     // Fai.top._titleChanged++;
              //     // Site.styleChanged();
              //     // Site.setRefreshInfo("moduleDrag", true)
  
          },
          containment: 'parent',
          distance: 1
      })
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  Logo.prototype.open = function () {
      var options = this.options;
      var id = 'logo';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  Logo.prototype.renderAfter = function (data) {
      var cls = this;
  
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  Logo.prototype.setModuleAttrData = function (moduleId, options) {
      // utils.log('Logo.prototype.setModuleAttrData >>>');
  
      var cls = this;
      var $module = $('#' + moduleId);
      var $img = $module.find('img');
      var data = _.defaultsDeep(cls.moduleSetting, options);
      // utils.log(JSON.stringify(data));
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      if (data.conf.type == 'image') {
          if (data.conf.imgLogoSrc == "") {
              base.alert("请上传LOGO图片");
              return false;
          }
          if ($img.length > 0) {
              $img.attr('src', data.conf.imgLogoSrc);
          } else {
              $module.html('<img src="' + data.conf.imgLogoSrc + '">');
          }
  
      } else {
          if (data.conf.logotext == "") {
              base.alert("专题标题不能为空");
              return false;
          }
          $module.text(data.conf.logotext);
      }
      // var style = { 'width': 'auto', 'height': 'auto' };
      var style = {'width': 'auto'};
  
  
      // 处理字体
      if (!utils.isNul(data.conf.fontFamily)) {
          style['font-family'] = data.conf.fontFamily;
      }
      // 处理字体大小
      if (!utils.isNul(data.conf.fontSize)) {
          style['font-size'] = data.conf.fontSize + 'px';
      }
      // 处理字体颜色
      if (!utils.isNul(data.conf.fontColor)) {
          style['color'] = data.conf.fontColor;
      }
  
      $module.css(style);
      cls.renderAfter(data);
  };
  
  Logo.prototype.test = function () {
      // utils.log("Logo test success!");
  };
  
  base.plugin('logo', new Logo());
  
  module.exports = Logo;
  

});

;/*!app/mock-data/background.js*/
define('app/mock-data/background', function(require, exports, module) {

  /**
   * 用于本地测试的背景数据对象
   * Created by Dzl on 2017-2-25.
   */
  
  module.exports = [
      {
          'src': '/assets/design/static/css/imgs/header/b1.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b2.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b3.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b4.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b5.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b6.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b7.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b8.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b9.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b10.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b11.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b12.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b13.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b14.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b15.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b16.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b17.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b18.jpg'
      }, {
          'src': '/assets/design/static/css/imgs/header/b19.jpg'
      }
  ];

});

;/*!app/components/headerbg-list/index.js*/
define('app/components/headerbg-list/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var URI = require('node_modules/urijs/src/URI');
  
  /**
   * 组件列表窗口类
   * @param options
   * @constructor
   */
  var HeaderbgList = function (options) {
      this.options = utils.assignClone(HeaderbgList.DEFAULTS, options);
      this.win = base['artdialog'];
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  HeaderbgList.DEFAULTS = {
      id: '#winmodulesetting',
      propWin: {
          id: 'headerbgList',
          title: '头部背景',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/headerbg-list/form.html',
          width: 530,
          height: 300
      },
      type: 'headerbgList'
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  HeaderbgList.prototype.initForm = function () {
      var cls = this;
      var list = require('app/mock-data/background');
      // parent.$.Site['utils'].placeholderRender('addHeaderBgBtn');
      // utils.log('HeaderbgList.prototype.initForm >>> ' ,$('#addHeaderBgBtn'));
      // utils.log('HeaderbgList.prototype.initForm >>> ' ,);
      utils.placeholderRender('addHeaderBgBtn');
      // 获取当前的头部背景图片的地址
      var headerbgUrl = base.templateWindow.$('#' + doms.pageHeaderId).css("backgroundImage").replace('url(', '').replace(')', '').replace(/['"]/g, '');
      utils.log('AddHeaderbg.prototype.initForm headerbg: ', headerbgUrl);
      var imgSrc = new URI(headerbgUrl).pathname();
      utils.log('AddHeaderbg.prototype.initForm imgSrc: ', imgSrc);
      cls.IMGSRC = imgSrc;
  
      base.vm = new Vue({
          el: '#attrForm',
          data: {
              list: list
          },
          watch: {},
          methods: {
              setBg: function (item) {
                  utils.log('setBg item: ', item);
                  base.templateApp['pageHeader'].setBg(item.src);
              }
          },
          computed: {},
          mounted: function () {
  
          }
      });
      $('#addHeaderBgBtn').on('click.ls.design',function () {
          base.WINS['headerbgList'] && base.WINS['headerbgList'].close();
          base['addHeaderbg'].open();
      });
      //cls.$SAVETEMPLATE_HTML_CLONE = base.templateWindow.$(doms.wraper).clone();
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  HeaderbgList.prototype.formSumbit = function () {
      var cls = this;
      utils.log("HeaderbgList.prototype.formSumbit >>>");
      // 保存历史记录
      //parent.$.Site['db'].saveHistory(cls.$SAVETEMPLATE_HTML_CLONE);
      return true;
  };
  
  HeaderbgList.prototype.setModuleAttrData = function () {
      var cls = this;
      utils.log("HeaderbgList.prototype.afterSubmit >>>");
  };
  
  
  
  HeaderbgList.prototype.afterCancel = function () {
      var cls = this;
      utils.log("AddHeaderbg.prototype.afterCancel >>> base.WIN_SUBMIT: ", base.WINSUBMIT[cls.options.propWin.id]);
      utils.log("AddHeaderbg.prototype.afterCancel >>> cls.IMGSRC: ", cls.IMGSRC);
      if (base.WINSUBMIT[cls.options.propWin.id] !== 1) {
          utils.log("AddHeaderbg.prototype.afterCancel >>> 恢复背景 cls.IMGSRC: ", cls.IMGSRC);
          try {
              base.templateApp['pageHeader'].setBg(cls.IMGSRC);
          } catch (e) {
          }
      } else {
  
      }
      return true;
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  HeaderbgList.prototype.open = function () {
      var options = this.options;
      var id = options.propWin.id;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title, false);
  };
  
  HeaderbgList.prototype.test = function () {
      // utils.log("HeaderbgList test success!");
  };
  
  base.plugin('headerbgList', new HeaderbgList());
  module.exports = HeaderbgList;
  

});

;/*!app/components/page-header/index.js*/
define('app/components/page-header/index', function(require, exports, module) {

  
  /**
   * 模板头部操作类
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var labels = require('app/common/labels');
  
  require('app/components/page-header/logo');
  require('app/common/artdialog');
  require('app/common/module-layer');
  require('app/common/move-frame');
  require('app/components/headerbg-list/index')
  
  
  var PageHeader = function (options) {
      this.options = utils.assignClone(PageHeader.DEFAULTS, options);
      // this.config = base['config'];
      this.win = base['artdialog'];
      this.moduleLayer = base['moduleLayer'];
      this.moveFrame = base['moveFrame'];
      this.logo = base['logo'];
      this.id = doms.pageHeaderId;
  
      this.editJSON = [{
          text: "设置背景",
          moduleId:'pageHeader',
          type:"setting"
      }];
      this.$form = $("#attrForm");
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
  
  };
  
  
  /**
   * 默认配置
   * @type {Object}
   */
  PageHeader.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '设置背景',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/page-header/form.html',
          width: 800,
          height:480
      },
      type: 'pageHeader'
  };
  
  
  /**
   * 初始化函数
   * 在 app/entry/iframe-index.js 中显式调用
   */
  PageHeader.prototype.init = function () {
      // utils.log("PageHeader.prototype.init");
      var cls = this, id = cls.id, logoId = doms.logoId;
      //给top绑定事件
      // utils.log(cls.id);
      // $(doms.pageHeaderInner).mouseover(function () {
      //     cls.mover(id);
      // }).mouseleave(function () {
      //     cls.mleave(id);
      // }).delegate('#'+logoId,'mouseover',function () {
      //     $(this).attr("_mouseIn", 1).stop(true).show();
      //     cls.logo.mover(logoId);
      // }).delegate('#'+logoId, 'mouseleave', function () {
      //     // 定义内部元素的事件代理
      //     $(this).attr("_mouseIn", 0);
      //     cls.logo.mleave(logoId);
      // });
  
      $(doms.pageHeaderInner).mouseover(function () {
          cls.mover(id);
      }).mouseleave(function () {
          cls.mleave(id);
      });
  
      $(doms.logo).mouseover(function () {
          $(this).attr("_mouseIn", 1).stop(true).show();
          cls.logo.mover(logoId);
      }).mouseleave(function () {
          // 定义内部元素的事件代理
          $(this).attr("_mouseIn", 0);
          cls.logo.mleave(logoId);
      });
  
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  PageHeader.prototype.open = function () {
      // var options = this.options;
      // var id = 'pageHeader';
      // var url = options.propWin.url;
      // var type = options.type;
      // var width = options.propWin.width;
      // var height = options.propWin.height;
      // var title = options.propWin.title;
      // this.win.open(id,url, type, width, height, title);
      // $.Site.templateApp['floatPanel'].openTab(2);
      parent.$.Site['headerbgList'].open();
  
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  PageHeader.prototype.initForm = function () {
      var cls = this;
      // var options = this.config.options;
      // utils.log('PageHeader.prototype.initForm >>>');
  
      if(cls.$form ){
          cls.$form = $("#attrForm");
      }
  
      $('#attrForm').find('.headerbg').on('click.ls.design',function () {
          $('#attrForm').find('.headerbg').removeClass('selected');
          $(this).addClass('selected');
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      // base.vm = new Vue({
      //     el:'#attrForm',
      //     data:{
      //
      //     }
      // });
      // 绑定验证表单
      // cls.$form.validate({
      //     success:function () {
      //         utils.log('form validate success!');
      //         base.attrFormValidateState=true;
      //         return false;
      //     },
      //     fail:function () {
      //         utils.log('form validate fail!');
      //         base.attrFormValidateState=false;
      //         return false;
      //     }
      // });
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  PageHeader.prototype.formSumbit = function () {
      var cls = this, validateState=false;
      // utils.log("PageHeader.prototype.formSumbit >>>");
  
      //
      // // 将操作前的内容放到操作历史记录中
      // cls.db.saveToHistory(function () {
      //     var seltd = base.$table.find('td.ui-selected');
      //     seltd.empty();
      //     base.$current_ctrl.appendTo(seltd);
      // });
  
      // if(!base.vm){
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      if(cls.$form ){
          cls.$form = $("#attrForm");
      }
      // JS方式提交表单
      //cls.$form.submit();
      //utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      //if(base.attrFormValidateState){
          // var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(data);
          var bg =  $('#attrForm').find('.selected');
          if(bg.length<0){
              base.alert('请选择背景图片');return false;
          }
          var bgImg = bg.find('img').attr('src');
          // utils.log(bgImg);
          if(base.templateWindow){
              base.templateWindow.$("#pageHeader").css({"background":"url("+ bgImg +")","background-size":"100% 100%"});
              return  true;
          }
      //}
      //return base.attrFormValidateState;
  };
  
  /**
   * 设置背景
   * @param imgSrc
   */
  PageHeader.prototype.setBg = function (imgSrc) {
      // utils.log('PageHeader.prototype.setBg');
      var cls = this;
      $(doms.pageHeaderInner).css({"background":"url("+ imgSrc +")","background-size":"100% 100%"});
  };
  
  PageHeader.prototype.setPageBg = function (imgSrc) {
      // utils.log('PageHeader.prototype.setBg');
      var cls = this;
      $('.common-header').css({"background":"url("+ imgSrc +")","background-size":"100% 100%"});
  };
  
  /**
   * 鼠标移入时的效果
   * @param moduleId
   */
  PageHeader.prototype.mover = function (moduleId) {
      // utils.log("PageHeader.prototype.mover");
      var $module = $('#' + moduleId);
      // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
      $module.attr("_mouseIn", 1);
      // 创建虚框(可利用来改变容器高度)
      this.moveFrame.create(moduleId);
      // 创建组件操作菜单
      this.moduleLayer.create(moduleId, this.editJSON, 0);
  
  };
  
  /**
   * 鼠标离开后的效果
   * @param moduleId
   */
  PageHeader.prototype.mleave = function (moduleId) {
      // utils.log("PageHeader.prototype.mleave");
      var $module = $('#' + moduleId);
      // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
      $module.attr("_mouseIn", 0);
      // 移除相关的操作层和效果层
      this.moduleLayer.remove(moduleId);
      this.moveFrame.remove(moduleId);
  };
  
  
  PageHeader.prototype.test = function () {
      // utils.log("PageHeader test success!");
  };
  
  
  base.plugin('pageHeader', new PageHeader());
  
  module.exports = PageHeader;
  

});

;/*!app/components/navigation/index.js*/
define('app/components/navigation/index', function(require, exports, module) {

  /**
   * 主导航操作类
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  
  var _ = require('node_modules/lodash/lodash');
  var async = require('node_modules/async/dist/async');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var labels = require('app/common/labels');
  require('app/common/artdialog');
  require('app/common/module-layer');
  require('app/common/move-frame');
  var db = require('app/common/db');
  
  
  var Navigation = function (options) {
      this.options = utils.assignClone(Navigation.DEFAULTS, options);
      // this.config = base['config'];
      this.win = base['artdialog'];
      this.moduleLayer = base['moduleLayer'];
      this.moveFrame = base['moveFrame'];
      this.moduleId = doms.navigationId;
  
      this.navOpMenus = [{
          text: "设置导航",
          moduleId: this.moduleId,
          type: "setting"
      }];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
  
      this.moduleSetting = {
          type: this.options.type,
          isMobile: false,
          moduelId: this.moduleId,
          conf: {}
      };
  
      this.menuEl = {
          id: null,
          parentId: utils.getQueryString('columnId'),
          name: null,
          href: null,
          target: '_blank',
          root: 0,
          isShow: true
      };
  
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Navigation.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '设置导航',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/navigation/form.html',
          width: 800,
          height: 480
      },
      type: 'navigation'
  };
  
  /**
   * 初始化函数
   * 在 app/entry/iframe-index.js 中显式调用
   */
  Navigation.prototype.init = function () {
      utils.log("Navigation.prototype.init");
      var cls = this, id = doms.navigationId;
      //var navMoveHandleHtml = '<div class="navMoveHandle"><div class="draggableBtn faiDraggableHandle navMoveEdit"></div></div>';
      $('#' + id).mouseenter(function () {
          // utils.log("Navigation mouseenter");
          cls.mover(id);
      }).mouseleave(function () {
          cls.mleave(id);
      }).find('li>a[root="1"]').attr('href', config.getIndexHref());
  
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  Navigation.prototype.open = function () {
      // utils.log("Navigation.prototype.open");
      var options = this.options;
      var id = 'navigation';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  Navigation.prototype.initForm = function () {
      var cls = this, moduleId = cls.moduleId;
      // var options = this.config.options;
      // utils.log('Navigation.prototype.initForm >>>');
      var $module = base.templateWindow.$('#' + moduleId);
      var menusStr = $module.attr('data-items');
      var menus = [];
      var columnId = utils.getQueryString('columnId');
      // utils.log('menusStr: ' + menusStr);
  
      // if (utils.isNul(menusStr)) {
      menus = base.templateApp[cls.moduleSetting.type].getModuleAttrData(moduleId);
      // } else {
      //      menus = utils.parseOptions(menusStr);
      //  }
      // utils.log(menus);
  
      _(menus).forEach(function (el) {
          if (el.root) {
              if(el.unEdit) {
                  el.href = config.getIndexHref();
                  el.parentId = columnId;
              }
          }
      });
  
      //初始化过滤器
      Vue.filter('targetTxt', function (value) {
          return value == '_blank' ? '新窗口' : '当前页';
      });
  
      Vue.filter('isShowFilter', function (value) {
          return value ? 'checked' : '';
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: {
              menus: menus
          },
          watch: {
              // menus:{
              //     //注意：当观察的数据为对象或数组时，newval 和 oldval 是相等的，因为这两个形参指向的是同一个数据对象
              //     handler: function (newval, oldval) {
              //         // Return the object that changed
              //         // console.log('before: ', JSON.stringify(before));
              //         // console.log('after: ', JSON.stringify(after));
              //         // var changed = after.filter( function( p, idx ) {
              //         //     return _.keys(p).some( function( prop ) {
              //         //         return p[prop] !== before[idx][prop];
              //         //     })
              //         // });
              //         // Log it
              //         // console.log(changed)
              //         for(var i = 0; i < newval.length; i++){
              //             console.log('new ' + i + ' element name', newval[i].name );
              //             console.log('old ' + i + ' element name', this.$data.default_menus[i].name)
              //         }
              //     },
              //     deep: true
              // }
          },
          methods: {
              add: function () {
                  this.menus.push({
                      id: '',
                      name: '',
                      href: '#',
                      target: '_self',
                      isShow: true
                  });
              },
              remove: function (index) {
                  this.menus.splice(index, 1);
              },
              // 关联栏目
              associateNode: function () {
                  var columnId = utils.getQueryString('columnId');
                  var selectNodeWinUrl = '/special/specialSelectColumn?configType=articleNews&columnId=' + columnId;
                  Ls.openWin(selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function (data) {
                              // utils.log(data);
                              if (data && data.length > 0) {
                                  for (var i = 0; i < data.length; i++) {
                                      var el = data[i];
                                      var isValid = true;
                                      $.each(base.vm.menus, function (i,e) {
                                          if(e.id==el.indicatorId) {
                                              isValid = false;
                                              Ls.tipsErr('该栏目已被绑定，不可重复绑定！');
                                              return false;
                                          }
                                      })
  
                                      if(!isValid) {
                                          break;
                                      }
  
                                      base.vm.menus.push({
                                          name: el.name,
                                          id: el.indicatorId,
                                          href: config.getTitleHref(el.indicatorId),
                                          target: '_self',
                                          isShow: true,
                                          unEdit: true,
                                          unRelated: false
                                      })
                                  }
                              }
                          }
                      });
              }
          }
  
      });
  
      // base.vm.$watch('menus', function (value, mutation) {
      //     console.log('value: ', JSON.stringify(value));
      //     if (mutation) {
      //         console.log(mutation) // e.g. 'push'
      //         mutation.method // e.g. 'push'
      //         mutation.args // raw arguments to the mutation method
      //         mutation.result // return value
      //         mutation.inserted // new, inserted elements
      //         mutation.removed // removed elements
      //     }
      // },{deep:true});
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
      var fixHelper = function (e, ui) {
          ui.children('td').each(function () {
              //在拖动时，拖动行的cell（单元格）宽度会发生改变。在这里做了处理就没问题了
              $(this).width($(this).width());
          });
          return ui;
      };
      // 设置tbody中的tr可以调整前后顺序
      $('#attrFormTBody').sortable({
          helper: fixHelper,
          containment: 'parent',
          axis: "y",
          handle: ".movehandler",
          placeholder: 'ui-state-highlight',
          start: function (e, ui) {
              //拖动时的行，要用ui.helper
              ui.helper.css({"background": "#FCF2D1"});
              return ui;
          },
          stop: function (e, ui) {
              //ui.helper.css({"background":"#FFFFFF"}) ;
              ui.item.css({"background": "#FFFFFF"});
              var data = base.vm.$data;
              var newData = [];
              $('#attrFormTBody > tr').each(function () {
                  var el = $(this);
                  var id = this.id;
                  var arrIndex = id.substring(3);
                  var nd = data.menus[arrIndex];
                  if (!utils.isNul(nd))
                      newData.push(nd);
              });
              //utils.log(JSON.stringify(newData));
              base.vm.menus = newData;
              //utils.log(JSON.stringify(base.vm.$data.menus));
              return ui;
          },
          change: function (event, ui) {
  
  
          }
      }).disableSelection();
  
  
  };
  
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  Navigation.prototype.formSumbit = function () {
      var cls = this;
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(cls.moduleId, data);
  
      }
      return base.attrFormValidateState;
  };
  
  
  /**
   * 从模板中获取主导航数据
   * @returns {Array}
   * @private
   */
  Navigation.prototype.getModuleAttrData = function (moduleId) {
      // utils.log('Navigation.prototype.getModuleAttrData >>>');
      var cls = this,
          // $module = $('#' + moduleId),
          // _data = utils.initModuleData(moduleId, cls.moduleSetting),
          // data = cls.getData(_data, false, true),
          items = [];
      // var $module = $('#' + moduleId);
  
      $('#' + moduleId + ' > li > a').each(function () {
          var el = $(this);
          //utils.log(el);
          var href = el.attr('href');
          // if (href && _.startsWith(href, '/content/column/')) {
          //     el.id = href.replace('/content/column/', '');
          // } else {
          //     el.id = null;
          // }
          if(!utils.isNul(el.attr("data-id"))) {
              el.id = el.attr("data-id");
          }else {
              el.id = null;
          }
          var menu = {};
          menu.name = _.trim(el.text());
          menu.id = el.id || '';
          menu.unRelated = el.id ? false : true;
          menu.href = el.attr('href');
          menu.root = el.attr('root') == 1;
          menu.target = el.attr('target') || '_self';
          menu.isShow = el.css('display') == 'none' ? false : true;
          //menu.unEdit = el.id || el.hasClass("j-specialIndexUrl") ? true : false;
          menu.unEdit = !menu.unRelated || menu.root ? true : false;
          items.push(menu);
      });
      // utils.log('Navigation.prototype.getModuleAttrData >>> ', JSON.stringify(items));
      return items;
  };
  
  Navigation.prototype.updateProxy = function (oldMenus, newMenus) {
      // 首先根据 name 将数据转换为对象
      var oldMenusMap = _.keyBy(oldMenus, function (o) {
          return o.name;
      });
      // 比对进行构造 URL
      _.forEach(newMenus, function (value) {
          if (oldMenusMap[value.columnName])
              if(utils.isNul(value.href)) {
                  oldMenusMap[value.columnName].href = '/content/column/' + value.columnId;
              }
      });
      //
      var results = [];
      _.map(oldMenusMap, function (val) {
          results.push(val);
      })
      return results;
  };
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  Navigation.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var menus = options.menus;
      // utils.log('Navigation.prototype.setModuleAttrData >>> options', options);
      var parentId = utils.getQueryString('columnId');
      // 构造用于远程保存的JSON对象
      var saveJson = [], addJson = [], updateJson = [];
      _.forEach(menus, function (value) {
          if (!value.root) {
              // if (utils.isNul(value.id)) {
              //     addJson.push({
              //         parentId: parentId,
              //         columnName: value.name,
              //         href: value.href
              //     })
              // } else {
              //     updateJson.push({
              //         columnName: value.name,
              //         columnId: value.id,
              //         href: value.href
              //     })
              // }
              // saveJson.push({
              //     parentId: parentId,
              //     columnName: value.name,
              //     columnId: value.id || '',
              //     href: value.href
              // });
              if(!utils.isNul(value.id)) {
                  updateJson.push({
                      columnName: value.name,
                      columnId: value.id,
                      href: value.href
                  })
              }
          }
      });
      // utils.log('Navigation.prototype.setModuleAttrData >>> addJson: ', JSON.stringify(addJson));
      // utils.log('Navigation.prototype.setModuleAttrData >>> updateJson: ', JSON.stringify(updateJson));
      if (!utils.getDevelopStatus()) {
          var postData = JSON.stringify(saveJson);
          var postAddData = JSON.stringify(addJson);
          var postUpdateData = JSON.stringify(updateJson);
          var query = {};
          // if(addJson.length>0){
          //     query.add = function (callback) {
          //         db.saveNode({mapList: postAddData}).then(function (newMenus) {
          //             callback(null, newMenus);
          //         })
          //     }
          // }
          // if(updateJson.length>0){
          //     query.update = function (callback) {
          //         db.saveNode({mapList: postUpdateData}).then(function (updateMenus) {
          //             callback(null, updateMenus);
          //         })
          //     }
          // }
  
          async.parallel(query, function (err, results) {
              // utils.log('Navigation.prototype.setModuleAttrData >>> menus ', JSON.stringify(menus));
              // utils.log('Navigation.prototype.setModuleAttrData >>> results.add ', JSON.stringify(results.add));
              // utils.log('Navigation.prototype.setModuleAttrData >>> results.update ', JSON.stringify(results.update));
              var newMenus = cls.updateProxy(menus, results.add);
              newMenus = cls.updateProxy(menus, results.update);
              // utils.log('Navigation.prototype.setModuleAttrData >>> newMenus ', JSON.stringify(newMenus));
              cls.__menusToPage(moduleId, newMenus);
          });
      } else {
          // utils.log('Navigation.prototype.setModuleAttrData >>> db.saveNode success: menus ', JSON.stringify(menus));
          cls.__menusToPage(moduleId, menus);
      }
      cls.renderAfter(moduleId);
  };
  
  Navigation.prototype.__menusToPage = function (moduleId, menus) {
      var str = '', nMenus = [];
  
      for (var i = 0,l=menus.length; i < l; i++) {
          var el = menus[i];
  
              var style = el.isShow ? '' : ' style="display:none" ';
              var root = el.root ? 1 : 0;
              if(i == 0){
                  // 第一个节点
                  str += '<li class="firstLi">';
              }else if(i == l-1){
                  // 最后一个节点
                  str += '<li class="lastLi">';
              }else{
                  // 中间节点
                  str += '<li>';
              }
              str += '<a href="' + el.href + '" data-id="'+el.id+'" target="' + el.target + '" ' + style + ' root="' + root + '">' + el.name + '</a></li>';
              nMenus.push(el);
      }
      $('#' + moduleId).attr('data-items', utils.jsonStringify(nMenus)).html(str);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  Navigation.prototype.renderAfter = function (moduleId) {
      var cls = this;
  };
  
  
  /**
   * 鼠标移入时的效果
   * @param moduleId
   */
  Navigation.prototype.mover = function (moduleId) {
      // utils.log("Navigation.prototype.mover");
      var $module = $('#' + moduleId);
      // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
      $module.attr("_mouseIn", 1);
      // 创建虚框(可利用来改变容器高度)
      this.moveFrame.create(moduleId);
      // 创建组件操作菜单
      this.moduleLayer.create(moduleId, this.navOpMenus, 0);
  };
  
  /**
   * 鼠标离开后的效果
   * @param moduleId
   */
  Navigation.prototype.mleave = function (moduleId) {
      // utils.log("Navigation.prototype.mleave");
      var cls = this;
      var $module = $('#' + moduleId);
      // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
      $module.attr("_mouseIn", 0);
      // 移除相关的操作层和效果层
      //setTimeout(function () {
      cls.moduleLayer.remove(moduleId);
      cls.moveFrame.remove(moduleId);
      //},100);
  
  };
  
  Navigation.prototype.test = function () {
      // utils.log("Navigation test success!");
  };
  
  
  base.plugin('navigation', new Navigation());
  
  module.exports = Navigation;
  

});

;/*!app/components/page-footer/index.js*/
define('app/components/page-footer/index', function(require, exports, module) {

  /**
   * 模板页面底部操作类
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var labels = require('app/common/labels');
  
  require('app/common/artdialog');
  require('app/common/module-layer');
  require('app/common/move-frame');
  
  
  var PageFooter = function (options) {
      this.options = utils.assignClone(PageFooter.DEFAULTS, options);
      this.win = base['artdialog'];
      this.moduleLayer = base['moduleLayer'];
      this.moveFrame = base['moveFrame'];
      this.id = doms.pageFooter.substring(1);
      this.editJSON = [{
          text: "设置内容",
          moduleId: 'pageFooter',
          type: "setting"
      }];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
  
  };
  
  
  /**
   * 默认配置
   * @type {Object}
   */
  PageFooter.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '设置内容',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/page-footer/form.html',
          width: 680,
          height: 480
      },
      type: 'pageFooter'
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  PageFooter.prototype.formSumbit = function () {
      var cls = this, validateState = false;
      // if(!base.vm){
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
  
      // JS方式提交表单
      $("#attrForm").submit();
  
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          //var data = base.vm.$data;
          base.templateWindow.$(doms.pageFooterInner).html(cls.editor.html());
          //UM.getEditor('footerContext').destroy();
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 初始化函数
   * 在 app/entry/iframe-index.js 中显式调用
   */
  PageFooter.prototype.init = function () {
      // utils.log("PageFooter.prototype.init");
      var cls = this;
      //给top绑定事件
      // utils.log(cls.id);
      $("#" + cls.id).mouseenter(function () {
          // utils.log("PageFooter.prototype.mover");
          // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
          $(this).attr("_mouseIn", 1);
          // 创建虚框(可利用来改变容器高度)
          cls.moveFrame.create(cls.id);
          // 创建组件操作菜单
          cls.moduleLayer.create(cls.id, cls.editJSON, 0);
      }).mouseleave(function () {
          // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
          $(this).attr("_mouseIn", 0);
          // 移除相关的操作层和效果层
          cls.moduleLayer.remove(cls.id);
          cls.moveFrame.remove(cls.id);
      });
  
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  PageFooter.prototype.initForm = function () {
      var cls = this;
      var tw = base.templateWindow;
      if (!tw) {
          base.alert('模板不存在，请检查配置！');
          return false;
      }
      var $footer = tw.$(doms.pageFooter);
      if ($footer.length == 0) {
          base.alert('模板底部对象不存在，请检查！');
          return false;
      }
  
  
      var footerContext = utils.trim(tw.$(doms.pageFooterInner).html());
      utils.log('PageFooter.prototype.initForm footerContext:', footerContext);
      utils.log('PageFooter.prototype.initForm KindEditor:', KindEditor);
  
      cls.editor = KindEditor.create('#footerContext', {
          resizeType: 1,
          allowPreviewEmoticons: false,
          allowImageUpload: false,
          items: [
              'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',
              'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'link']
      });
      cls.editor.html(footerContext);
  
  
      // 初始化UMEditor编辑器
      // base.umeditor = UM.getEditor('footerContext', {
      //     //这里可以选择自己需要的工具按钮名称,此处仅选择如下七个
      //     toolbar: ['fullscreen source undo redo bold italic underline'],
      //     //focus时自动清空初始化时的内容
      //     autoClearinitialContent: true,
      //     //关闭字数统计
      //     wordCount: false,
      //     //关闭elementPath
      //     elementPathEnabled: false
      //     //给编辑器内部引入一个css文件
      //     // iframeCssUrl:
      //     //默认的编辑区域高度
      //     //initialFrameHeight:300
      //     //更多其他参数，请参考umeditor.config.js中的配置项
      // });
      // //对编辑器的操作最好在编辑器ready之后再做
      // base.umeditor.ready(function () {
      //     //设置编辑器的内容
      //     base.umeditor.setContent(footerContext);
      //     // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      //     // 销毁对象使用base.vm.$destroy()
      //     // base.vm = new Vue({
      //     //     el: '#attrForm',
      //     //     data: {
      //     //         footerContext: footerContext
      //     //     },
      //     //     methods: {
      //     //
      //     //     }
      //     // });
      //
      // });
  
      // 绑定验证表单
      $("#attrForm").validate({
          success: function () {
              // utils.log('form validate success!');
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              // utils.log('form validate fail!');
              base.attrFormValidateState = false;
              return false;
          }
      });
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  PageFooter.prototype.open = function () {
      var options = this.options;
      var cls = this;
      var id = cls.id;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  PageFooter.prototype.test = function () {
      // utils.log("PageFooter test success!");
  };
  
  
  base.plugin('pageFooter', new PageFooter());
  
  module.exports = PageFooter;
  

});

;/*!app/mock-data/carousel.js*/
define('app/mock-data/carousel', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-2-26.
   */
  module.exports = [
      {
          title: '演示数据演示数据演示数据演示数据演示数据',
          //desc: Mock.Random.ctitle(10, 30),
          imgSrc: '/assets/design/static/css/imgs/s.png'
      }, {
          title: '演示数据演示数据演示数据演示数据',
          //desc: Mock.Random.ctitle(10, 30),
          imgSrc: '/assets/design/static/css/imgs/s.png'
      }, {
          title: '演示数据演示数据演示数据',
          //desc: Mock.Random.ctitle(10, 30),
          imgSrc: '/assets/design/static/css/imgs/s.png'
      }, {
          title: '演示数据演示数据演示数据演示数据演示数据演示数据',
          // desc: Mock.Random.ctitle(10, 30),
          imgSrc: '/assets/design/static/css/imgs/s.png'
      }, {
          title: '演示数据演示数据演示数据演示数据演示数据',
          // desc: Mock.Random.ctitle(10, 30),
          imgSrc: '/assets/design/static/css/imgs/s.png'
      }, {
          title: '演示数据演示数据演示数据演示数据演示数据',
          // desc: Mock.Random.ctitle(10, 30),
          imgSrc: '/assets/design/static/css/imgs/s.png'
      }
  ];

});

;/*!app/components/carousel/index.js*/
define('app/components/carousel/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var Carousel = function (options) {
      this.options = utils.assignClone(Carousel.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'carousel',
          isMobile: false,
          moduleId: 0,
          conf: {
              title: '焦点图片',
              isTitle: false,
              more: '更多+',
              pattern: 'mF_sohusports',
              width: null,
              height: 390,
              panelPadding: null,
              style: 'default'
          },
          label: require('app/common/labels').docImgList,
          interval: 4000
  
      };
  
  // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
  // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .mF_sohusports_wrap, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li a, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li a img{\r\n  width:<%= conf.imgWidth  %>px!important;height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt,\r\n .<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt li{ width:<%= conf.imgWidth  %>px;}\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt li a{width:<%=  conf.panelWidth - 120 %>px!important;}\r\n\r\n\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap{\r\n padding: 0;border: 0;\r\n}\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb\r\n{\r\n  width:<%= conf.panelWidth  %>px!important; height:<%=  conf.panelHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb .prev-2{left:<%= conf.imgWidth - 60  %>px!important;}\r\n.<%= moduleId %>_panel .mF_pithy_tb .next-2{left:<%= conf.imgWidth - 30 %>px!important;}\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic, \r\n/*.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul, */\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li, \r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li a, \r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li a img{\r\n  width:<%= conf.imgWidth  %>px!important; height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul\r\n{\r\n  width:138px!important; height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul li,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul li a,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul li a img{\r\n\t width:138px!important;\r\n}\r\n\r\n",
          'mF_sohusports': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .mF_sohusports_wrap, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li a, \r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li a img{\r\n  width:<%= conf.imgWidth  %>px!important;height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt,\r\n .<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt li{ width:<%= conf.imgWidth  %>px;}\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt li a{width:<%=  conf.width - (conf.panelPadding * 2) - 120 %>px!important;}\r\n\r\n\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap{\r\n padding: 0;border: 0;\r\n}\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb\r\n{\r\n  width:<%= conf.width  %>px!important; height:<%=  conf.height  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb .prev-2{left:<%= conf.imgWidth - 60  %>px!important;}\r\n.<%= moduleId %>_panel .mF_pithy_tb .next-2{left:<%= conf.imgWidth - 30 %>px!important;}\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic, \r\n/*.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul, */\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li, \r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li a, \r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li a img{\r\n  width:<%= conf.imgWidth  %>px!important; height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul\r\n{\r\n  width:138px!important; height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul li,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul li a,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .thumb ul li a img{\r\n\t width:138px!important;\r\n}\r\n\r\n",
          'mF_pithy_tb': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li a,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic ul li a img{width:<%= conf.imgWidth  %>px;height:<%=  conf.imgHeight  %>px}\r\n\r\n\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .txt li,\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .pic img{width:<%=  conf.imgWidth  %>px!important}\r\n.<%= moduleId %>_panel .mF_pithy_tb_wrap .mF_pithy_tb .txt li a{width:<%=  conf.width - (conf.panelPadding * 2) -92 %>px!important}"
      };
  
      this.listData = require('app/mock-data/carousel');
  
      // 定义组件的HTML,使用 artTemplate 编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-body\" id=\"{{moduleId}}_carousel\">\r\n        <div class=\"pic\">\r\n            <ul class=\"ls-label\">\r\n                {{each list as el index}}\r\n                <li><a href=\"javascript:void(0)\"><img src=\"{{el.imgSrc}}\" thumb=\"\" alt=\"{{el.title}}\" text=\"{{el.desc}}\"/></a></li>\r\n                {{/each}}\r\n            </ul>\r\n            <script type=\"text/js\">\r\n                myFocus.set({id: \"{{moduleId}}_carousel\",pattern: \"{{conf.pattern}}\",height:{{conf.height}},width:{{ conf.width}}});\r\n\r\n            </script>\r\n        </div> <!-- carousel -->\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | dataConfLabelFilter}}" ' +
          'data-label="{{#label | dataConfLabelFilter}}" > ' + this.panelTpl + '</div>';
  
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Carousel.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/carousel/form.html',
          width: 600,
          height: 480
      },
      type: 'carousel'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  Carousel.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  Carousel.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      // // utils.log("Carousel.prototype.formSumbit >>>");
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // utils.log('form submit data >>>');
      //     // utils.log(JSON.stringify(data));
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  Carousel.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
  
      data.isMobile = base.isMobile;
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.label['length'] = utils.getFontLength(data.conf.width);
          data.conf.imgWidth = data.conf.width - ( data.conf.panelPadding * 2);
          data.conf.imgHeight = data.conf.height - ( data.conf.panelPadding * 2);
      }
  
      if (utils.isNul(data.conf.imgWidth) || utils.isNul(data.conf.imgHeight)) {
          data.conf.imgWidth = data.conf.width - ( data.conf.panelPadding * 2);
          data.conf.imgHeight = data.conf.height - ( data.conf.panelPadding * 2);
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = cls.listData;
      }
  
      // 构造标题更多链接
      cls.createMoreHref(data);
  
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  Carousel.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模块使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  
  Carousel.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
  
      var _compile = template.compile(cls.moduleTpl);
      // utils.log('Carousel.prototype.getHtmlAndModuleId >>> data: ' + JSON.stringify(data));
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  Carousel.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      return data;
  };
  
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  Carousel.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  Carousel.prototype.initForm = function () {
      var cls = this;
      // var options = this.config.options;
      // utils.log('Carousel.prototype.initForm >>>');
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 动态取得其 warpPadding 的值
      var $module = base.templateWindow.$('#' + curEditModuleId);
  
      // 如果没有设置组件的宽高,则动态计算
      if (utils.isNul(data.conf.width) || utils.isNul(data.conf.height)) {
          data.conf.width = $module.width();
          data.conf.height = $module.height();
      }
      // 如果没有设置 panel 的 padding,则动态计算
      if (utils.isNul(data.conf.panelPadding)) {
          data.conf.panelPadding = utils.getIntegerFixPX($module.find('.panel').css('padding'));
      }
  
      Vue.filter('targetFilter', function (value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
      Vue.filter('labelIdFilter', function (label_id) {
          return utils.isNul(label_id) ? true : false;
      });
  
      utils.log('Carousel.prototype.initForm data: ', data);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
  
      var _methods = {
          onPatternChange: function (value) {
              this.conf.pattern = value;
          },
          onTargetChange2: function (value) {
              this.label.target = value;
          },
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
  // utils.log('initForm >>>');
  // utils.log(JSON.stringify(base.vm.$data));
  
  // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  }
  ;
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  Carousel.prototype.open = function () {
      var options = this.options;
      var id = 'carousel';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  Carousel.prototype.parseSave = function (options) {
      var cls = this;
      // utils.log('Carousel.prototype.parseSave: cls.moduleSetting ',cls.moduleSetting);
      var data = utils.assignClone1(cls.moduleSetting, options);
      // utils.log('Carousel.prototype.parseSave: options ',options);
      // 1. 取得panel的html内容
      // utils.log('Carousel.prototype.parseSave: data ',data);
      // utils.log('Carousel.prototype.parseSave: cls.moduleSetting ',cls.moduleSetting);
      var panelHtml = cls.getPanelHtml(data);
      //utils.log('Carousel.prototype.parseSave: panelHtml ',panelHtml);
      var $panelHtml = $(panelHtml);
  
      // 验证标签关联 id 非空
      // utils.isNul(0)
      // 验证标签关联不通过 return null;
  
      // 解析标签
      var labelStr = '', isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          // 解析标签
          labelStr = utils.parseLabel(data.label);
          // 将解析后的标签回写到 panel 中
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  
  };
  
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  Carousel.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          // utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
  
      //utils.log(JSON.stringify(data));
      //var compileTpl = template.compile(cls.panelTpl);
      var html = cls.compileTpl(data);
      //utils.log('Carousel.prototype.render: html ',html);
      $module.html(html);
      //
      //utils.log('cls.carouselId=' + cls.carouselId);
      cls.renderAfter(moduleId);
  };
  
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  Carousel.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      if (!myFocus) {
          alert('myFocus对象不存在,请引入相应的JS文件');
          return;
      }
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  
      // utils.log('Carousel.prototype.renderAfter data: ',data);
  
      var myFocusOption = {
          id: moduleId + '_carousel',
          pattern: data.conf.pattern,
          width: data.conf.width,
          height: data.conf.height
      };
      //轮播1
      myFocus.set(myFocusOption);
  
  };
  
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  Carousel.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  Carousel.prototype.setModuleAttrData = function (moduleId, options) {
      utils.log('Carousel.prototype.setModuleAttrData moduleId: ',moduleId);
      utils.log('Carousel.prototype.setModuleAttrData options: ',options);
      var cls = this;
      var $module = $('#' + moduleId);
  
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  
  Carousel.prototype.test = function () {
      // utils.log("Carousel test success!");
  };
  
  
  base.plugin('carousel', new Carousel());
  
  module.exports = Carousel;
  

});

;/*!app/components/scroll-images/index.js*/
define('app/components/scroll-images/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var labels = require('app/common/labels');
  var vueCommon = require('app/common/vue-common');
  require('app/common/artdialog');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var ScrollImages = function (options) {
      this.options = utils.assignClone(ScrollImages.DEFAULTS, options);
      // this.config = base['config'];
      // this.win = new Artdialog();
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'scrollImages',
          isMobile: false,
          moduleId: 0,
          conf: {
              title: '组件标题',
              isTitle: true,
              titleHref: '#',
              isMore: true,
              more: '更多+',
              speed: 3,
              autoScroll: true,
              panelPadding: 0,
              style: 'default',
              height: 230
          },
          label: labels.docImgList
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .scroll-wrap{ width: <%= conf.width - (conf.panelPadding * 2) - 100 %>px; overflow:hidden; position:relative;}\r\n.<%= moduleId %>_panel ul li,\r\n.<%= moduleId %>_panel ul li a,\r\n.<%= moduleId %>_panel ul li a img{width:<%=  conf.imgWidth %>px!important;height:<%= conf.imgHeight %>px!important;overflow: hidden;}\r\n.<%= moduleId %>_panel ul li a .title{width:<%=  conf.imgWidth %>px!important;}\r\n.<%= moduleId %>_panel ul li a .title-inner{width:<%=  conf.imgWidth - 20 %>px; text-align: center}"
      };
  
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\" id=\"{{moduleId}}_scroll\">\r\n        <div class=\"ls-scroll clearfix\">\r\n            <span class=\"prev\"></span>\r\n            <span class=\"next\"></span>\r\n            <div class=\"scroll-wrap\">\r\n                <ul class=\"scroll-body clearfix ls-label\">\r\n                    {{each list as el index}}\r\n                    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                        <a href=\"{{el.href}}\">\r\n                            <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"  alt=\"{{el.title}}\"/>\r\n                            <span class=\"title\">{{el.title}}</span>\r\n                        </a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}"  > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  ScrollImages.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 多图滚动',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/scroll-images/form.html',
          width: 600,
          height: 480
      },
      type: 'scrollImages'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  ScrollImages.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  ScrollImages.prototype.formSumbit = function () {
      // var cls = this,
      //     validateState = false;
      // // utils.log("ScrollImages.prototype.formSumbit >>>");
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // utils.log('form submit data >>>');
      //     // utils.log(JSON.stringify(data));
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取供模板渲染的数据
   * @param options
   * @param isModule
   */
  ScrollImages.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          moduleId = options.moduleId,
          $module = $('#' + moduleId),
          data = utils.assignClone(cls.moduleSetting, options);
  
      // 附加演示数据
      data.isMobile = base.isMobile;
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
  
      // 适配
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.label['length'] = utils.getFontLength(data.conf.width);
      }
      // 动态计算图片的宽高
      if (utils.isNul(data.conf.imgWidth) ) {
          data.conf.imgWidth = (data.conf.width / 4) - 30 ;
      }
      if (utils.isNul(data.conf.imgHeight)) {
          data.conf.imgHeight = data.conf.height - 80 ;
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
          // 构造图片占位符代码
          data.placeholderOpt = 'size='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&text='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
      }
  
      // 构造标题更多链接
      cls.createMoreHref(data);
      // utils.log('ScrollImages.prototype.getData data: ', data);
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  ScrollImages.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  ScrollImages.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      //utils.log('ScrollImages.prototype.getHtmlAndModuleId >>> data: ' + JSON.stringify(data));
  
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  /**
   * 表单初始化时,调用此方法获取数据值
   * @param moduleId
   * @returns {{type: string, isMobile: boolean, moduleId: number, conf: {title: string, isTitle: boolean, titleHref: string, more: string, speed: number, autoScroll: boolean, moduleWidth: number, moduleHeight: number, panelPadding: number, styleType: string}, label: {labelName: string, id: string, num: number, isChild: boolean, width: number, height: number, length: number}, interval: number}|*}
   */
  ScrollImages.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      return data;
  };
  
  /**
   * 获取panel 的 html
   * @param options
   * @returns {*}
   */
  ScrollImages.prototype.getPanelHtml = function (options) {
      var cls = this;
      // utils.log('ScrollImages.prototype.getPanelHtml >>> options: ',options);
      var data = cls.getData(options);
      // utils.log('ScrollImages.prototype.getPanelHtml >>> data: '+ JSON.stringify(data));
      var html = cls.compileTpl(data);
      //utils.log('ScrollImages.prototype.getPanelHtml >>> html: '+ html);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  ScrollImages.prototype.initForm = function () {
      var cls = this;
      // var options = this.config.options;
      // utils.log('ScrollImages.prototype.initForm >>>');
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      cls.formSubmitStatus = false;
  
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange2: function (value) {
              this.label.target = value;
          },
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px', {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  ScrollImages.prototype.open = function () {
      var options = this.options;
      var id = 'scrollImages';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 模板保存前的处理, 根据 data-label 动态构造标签,并填充到合适区域
   *
   * @param options
   * @returns {string}
   */
  ScrollImages.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
      // utils.log("PeerOrChildList test success!");
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(data);
      var $panelHtml = $(panelHtml);
  
      // 解析标签
      var labelStr = '', isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          // 解析标签
          labelStr = utils.parseLabel(data.label);
          // 将解析后的标签回写到 panel 中
          $panelHtml.find('.panel-body ul').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  ScrollImages.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      // 渲染 module
      cls.renderPanel(moduleId, data);
  };
  
  /**
   * 当构造的 html 渲染到页后后执行此方法
   * @param moduleId
   */
  ScrollImages.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
      setTimeout(function () {
          Ls.www.scroll();
      }, 1000)
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  ScrollImages.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      // 获取 panel 的 html
      // utils.log('ScrollImages.prototype.renderPanel 开始编译模板 >>>');
      var html = cls.getPanelHtml(options);
      var $module = $('#' + moduleId);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 表单提交后执行此方法
   * @param moduleId
   * @param options
   */
  ScrollImages.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
      cls.formSubmitStatus = true;
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  ScrollImages.prototype.test = function () {
      // utils.log("ScrollImages test success!");
  };
  
  base.plugin('scrollImages', new ScrollImages());
  
  module.exports = ScrollImages;
  

});

;/*!app/components/nav-page/peerOrChildList.js*/
define('app/components/nav-page/peerOrChildList', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  var PeerOrChildList = function(options) {
      this.options = utils.assignClone(PeerOrChildList.DEFAULTS, options);
      // this.config = base['config'];
      // this.win = new Artdialog();
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'peerOrChildList',
          isMobile: false,
          conf: {
              title: '演示栏目'
          },
          label: {
              curColumn: labels.curColumn,
              peerOrChildList: labels.peerOrChildList
          }
      };
      this.listData = [{ name: '演示栏目一', isActive: true }, { name: '演示栏目二', isActive: false }, { name: '演示栏目三', isActive: false }, { name: '演示栏目四', isActive: false }];
  
      this.tpl = "<div class=\"panel\">\r\n    <div class=\"panel-heading clearfix \">\r\n        <div class=\"title\">\r\n            <span class=\"curcolumn\">\r\n               {{conf.title}}\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <!--panel-heading-->\r\n    <div class=\"panel-body\">\r\n        <ul class=\"list\">\r\n            {{each list as el i}}\r\n            <li class=\"{{el.isActive | activeFilter}}\"><a href=\"#\">{{el.name}}</a></li>\r\n            {{/each}}\r\n        </ul>\r\n    </div>\r\n    <!--panel-body-->\r\n    <div class=\"panel-footer\"></div>\r\n</div>\r\n<!--panel-->";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"    data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  PeerOrChildList.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- ',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/nav-page/form.html',
          width: 600,
          height: 480
      },
      type: 'peerOrChildList'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  PeerOrChildList.prototype.open = function() {
      var options = this.options;
      var id = 'peerOrChildList';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  PeerOrChildList.prototype.initForm = function() {
      var cls = this;
      // var options = this.config.options;
      // utils.log('PeerOrChildList.prototype.initForm >>>');
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              // utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  PeerOrChildList.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
      // utils.log("PeerOrChildList.prototype.formSumbit >>>");
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  PeerOrChildList.prototype.render = function(moduleId) {
      // utils.log('PeerOrChildList moduleId: ' + moduleId);
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      var data = cls.getModuleAttrData(moduleId);
      //var data = _.cloneDeep(cls.moduleSetting);
      data.list = cls.listData;
      //utils.log('PeerOrChildList data: ' + JSON.stringify(data));
  
      var html = cls.compileTpl(data);
      //utils.log('PeerOrChildList html: ' + html);
      $module.html(html);
      // utils.log('cls.peerOrChildListId=' + cls.peerOrChildListId);
      // cls.renderAfter(moduleId);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  PeerOrChildList.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  PeerOrChildList.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  PeerOrChildList.prototype.setModuleAttrData = function(moduleId, data) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(data)) {
          $module.attr('data-label', utils.jsonStringify(data.label));
          $module.attr('data-conf', utils.jsonStringify(data.conf));
      }
  
      // 重新渲染
      var _data = utils.assignClone(cls.moduleSetting,data);
      _data.list = cls.listData;
      _data.isMobile = base.isMobile;
      // 构造标题更多链接
      _data.conf.titleHref = config.getTitleHref(_data.label.id);
      var html = cls.compileTpl(_data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  PeerOrChildList.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  PeerOrChildList.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  PeerOrChildList.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  PeerOrChildList.prototype.parseSave = function(options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting,options);
      // utils.log("PeerOrChildList test success!");
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(options);
  
      var curColumnLabel = utils.parseLabel(data.label.curColumn);
      var peerOrChildListLabel = utils.parseLabel(data.label.peerOrChildList);
  
      // utils.log('curColumnLabel: ' + curColumnLabel);
      // utils.log('peerOrChildListLabel: ' + peerOrChildListLabel);
  
      var $panelHtml = $(panelHtml);
      $panelHtml.find('.curcolumn').html(curColumnLabel);
      $panelHtml.find('.list').html(peerOrChildListLabel);
      // utils.log('PeerOrChildList.prototype.saveBefore >>>');
      // utils.log($panelHtml[0].outerHTML);
      //$module.html($panelHtml[0].outerHTML);
      return $panelHtml[0].outerHTML;
  };
  
  PeerOrChildList.prototype.test = function() {
      // utils.log("PeerOrChildList test success!");
  };
  
  base.plugin('peerOrChildList', new PeerOrChildList());
  
  module.exports = PeerOrChildList;

});

;/*!app/components/nav-page/columnNav.js*/
define('app/components/nav-page/columnNav', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var doms = require('app/common/template-dom-structure');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  var labels =  require('app/common/labels');
  
  var ColumnNav = function(options) {
      this.options = utils.assignClone(ColumnNav.DEFAULTS, options);
      // this.config = base['config'];
      // this.win = new Artdialog();
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType='+ this.contentModuleType +'&chkStyle=radio&columnId='+ utils.getColumnId();
  
      this.moduleSetting = {
          type: 'columnNav',
          isMobile: false,
          conf: {
              title: '演示栏目'
          },
          label: {
              nav: labels.nav,
              columnNav: labels.columnNav
  
          }
      };
      // 模拟数据
      this.listData = mockData.getInfoList(24,34,'yyyy-MM-dd').data;
  
      this.tpl = "<div class=\"panel\">\r\n    <div class=\"panel-heading clearfix \">\r\n        <div class=\"position\">您当前的位置：<a href=\"#\">首页</a> &gt; <a title=\"演示专题\" href=\"#\">演示专题</a> &gt; <a title=\"演示栏目\" href=\"#\">演示栏目</a></div>\r\n    </div>\r\n    <!--panel-heading-->\r\n    <div class=\"panel-body\">\r\n        <ul class=\"list\">\r\n\r\n            <ul class=\"doc_list list-4138066\">\r\n                {{each list as el i}}\r\n                <li class=\"{{i|rowIFilter}}\">\r\n                    <a href=\"javascript:;\" target=\"_blank\" title=\"{{el.title}}\" class=\"left\">\r\n                        <span>{{el.title}}</span>\r\n                    </a>\r\n                    <span class=\"right date\">{{el.createDate}}</span> </li>\r\n\r\n                {{/each}}\r\n\r\n            </ul>\r\n        </ul>\r\n    </div>\r\n    <!--panel-body-->\r\n    <div class=\"panel-footer\"></div>\r\n    <!--panel-->\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
  
      template.helper('rowIFilter', function(i) {
          return i % 2 == 0 ? 'odd' : 'even';
      });
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  ColumnNav.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/nav-page/form.html',
          width: 600,
          height: 480
      },
      type: 'columnNav'
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  ColumnNav.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
      // utils.log("ColumnNav.prototype.formSumbit >>>");
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  ColumnNav.prototype.initForm = function() {
      var cls = this;
      // var options = this.config.options;
      // utils.log('ColumnNav.prototype.initForm >>>');
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              // utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  ColumnNav.prototype.open = function() {
      var options = this.options;
      var id = 'ColumnNav';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  ColumnNav.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = utils.assignClone(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = utils.assignClone(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  ColumnNav.prototype.getData = function(options,isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
  
      data.isMobile = base.isMobile;
      if(isModule){
          data.moduleId = utils.createModuleUniqueId();
      }
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = cls.listData;
      }
      return data;
  };
  
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  ColumnNav.prototype.parseSave = function(options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting,options);
      // utils.log("PeerOrChildList test success!");
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(options);
  
      var navLabel = utils.parseLabel(data.label.nav);
      var columnNavLabel = utils.parseLabel(data.label.columnNav);
      var $panelHtml = $(panelHtml);
      $panelHtml.find('.position').html('您当前的位置：<a href="#{specialIndexUrl}" class="j-specialIndexUrl">首页</a> &gt; ' + navLabel);
      $panelHtml.find('.list').html(columnNavLabel);
      // utils.log('PeerOrChildList.prototype.saveBefore >>>');
      // utils.log($panelHtml[0].outerHTML);
      //$module.html($panelHtml[0].outerHTML);
      return $panelHtml[0].outerHTML;
  };
  
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  ColumnNav.prototype.render = function(moduleId) {
      // utils.log('ColumnNav moduleId: ' + moduleId);
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      var data = cls.getModuleAttrData(moduleId);
      cls.renderPanel(moduleId,data)
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  ColumnNav.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  ColumnNav.prototype.renderAfter = function(moduleId) {
      // var cls = this;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  ColumnNav.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data = cls.getData(options);
      // utils.log('ColumnNav.prototype.getPanelHtml data:',JSON.stringify(data));
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  ColumnNav.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
      // 重新渲染
      cls.renderPanel(moduleId,options)
  };
  
  
  ColumnNav.prototype.test = function() {
      // utils.log("ColumnNav test success!");
  };
  
  
  base.plugin('columnNav', new ColumnNav());
  
  module.exports = ColumnNav;
  

});

;/*!app/components/detail-page/articleNewsDetail.js*/
define('app/components/detail-page/articleNewsDetail', function(require, exports, module) {

  /**
   * 文章详细页 类对象
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  require('app/common/artdialog');
  
  var ArticleNewsDetail = function(options) {
      this.options = utils.assignClone(ArticleNewsDetail.DEFAULTS, options);
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'articleNewsDetail',
          isMobile: false,
          conf: {
              title: '栏目名称'
          },
          label: {
              nav: labels.nav,
              articleNewsDetail: labels.articleNewsDetail
          }
      };
  
      this.tpl = "<div class=\"secnr panel articleNews-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a>首页</a> &gt; {ls:nav isHtml=\"false\"}{/ls:nav}</div>\r\n    </div>\r\n    <div id=\"wenzhang\" class=\"panel-body articleNews\">\r\n        <h1 class=\"title\">[ls:title ]</h1>\r\n        #if(\"[ls:subTitle]\"!=\"\")\r\n        <h2 class=\"subTitle\">[ls:subTitle ]</h2> #end\r\n        <div class=\"info\">\r\n            <span class='author'>#if(\"[ls:author]\"!=\"\")作者：<span class='author-txt'>[ls:author]</span>#end</span>\r\n\r\n            <span class='publishDate'>发表时间：<span\r\n                    class=\"publishDate-txt\">[ls:publishDate format=\"yyyy-MM-dd\"]</span></span>\r\n\r\n            <span class='resources'>#if(\"[ls:resources]\"!=\"\")信息来源：<span class='resources-txt'>[ls:resources]</span>#end</span>\r\n\r\n            <span class='hit'>阅读人次：\r\n              <span class='hit-txt'>\r\n               <script type=\"text/js\" src=\"/content/hit/[ls:id]\"></script>\r\n              </span>\r\n            </span>\r\n\r\n            <span class='fontSize'>\r\n                  文字大小：\r\n                <span class=\"fontSize-txt\">\r\n                    [ <a class=\"j-fontBig\">大</a> <a class=\"j-fontNormal\">中</a> <a\r\n                        class=\"j-fontSmall\">小</a> ]\r\n                </span>\r\n            </span>\r\n\r\n\r\n        </div>\r\n        <div class=\"content fontContent\">[ls:article]\r\n            <div class=\"clear\"></div>\r\n        </div>\r\n        <div class=\"shareNav\">\r\n            <div class=\"bdsharebuttonbox\">\r\n                <a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\r\n                <a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\"></a>\r\n                <a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\r\n                <a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\"></a>\r\n                <a href=\"#\" class=\"bds_tqq\" data-cmd=\"tqq\" title=\"分享到腾讯微博\"></a>\r\n                <a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\"></a>\r\n                <a href=\"#\" class=\"bds_sqq\" data-cmd=\"sqq\" title=\"分享到QQ好友\"></a>\r\n            </div>\r\n            <script type=\"text/js\">\r\n                window._bd_share_config = {\"common\": {\"bdSnsKey\": {},\"bdText\": \"\",\"bdMini\": \"2\",\"bdMiniList\": false,\"bdPic\": \"\",\"bdStyle\": \"0\",\"bdSize\": \"24\"},\"share\": { },\"a\":\"\"};with(document) 0[(getElementsByTagName(\"head\")[0] || body).appendChild(createElement(\"script\")).src = \"http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=\" + ~(-new Date() / 36e5)];\r\n\r\n            </script>\r\n            <ul class=\"fxd_close\">\r\n                <a href=\"javascript:void(0)\" onClick=\"javascript:window.print()\" class=\"print_btn\">打印本页</a>\r\n                <a href=\"javascript:window.close();\" class=\"close_btn\">关闭窗口</a>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <!-- panel-body -->\r\n</div>";
      this.tplRender =  "<div class=\"secnr panel articleNews-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：\r\n            <a href=\"#\">首页</a> &gt; <a title=\"web1\"\r\n                                       href=\"http://www.5397068.cn/content/column/4177288\">web1</a>\r\n            &gt; <a title=\"新闻中心\" href=\"http://www.5397068.cn/content/column/4177293\">新闻中心</a></div>\r\n    </div>\r\n    <div class=\"panel-body articleNews\">\r\n        <h1 class=\"title\">中办印发《方案》 在全体党员中开展“两学一做”学习教育</h1>\r\n        <div class=\"info\">\r\n            <span class=\"author\">作者：<span class=\"author-txt\">TT</span></span> <span class=\"publishDate\">发表时间：<span\r\n                class=\"publishDate-txt\">2017-03-31</span></span>\r\n            <span class=\"resources\">信息来源：<span class=\"resources-txt\">中国合肥</span></span> <span class=\"hit\">阅读人次：<span\r\n                class=\"hit-txt\"><script src=\"/content/hit/4178316\"></script>1</span></span>\r\n            <span class=\"fontSize\">\r\n                                        文字大小：\r\n                                        <span class=\"fontSize-txt\">\r\n                                            [ <a class=\"j-fontBig\">大</a> <a class=\"j-fontNormal\">中</a> <a\r\n                                                class=\"j-fontSmall\">小</a> ]\r\n                                        </span>\r\n                                    </span>\r\n        </div>\r\n        <div class=\"content fontContent\">\r\n            <p style=\"text-indent:2em;\">\r\n                近日，中共中央办公厅印发了《关于在全体党员中开展“学党章党规、学系列讲话，做合格党员”学习教育方案》，并发出通知，要求各地区各部门认真贯彻执行。\r\n            </p>\r\n            <p style=\"text-indent:2em;\">\r\n                通知指出，开展“学党章党规、学系列讲话，做合格党员”学习教育（以下简称“两学一做”学习教育），是面向全体党员深化党内教育的重要实践，是推动党内教育从“关键少数”向广大党员拓展、从集中性教育向经常性教育延伸的重要举措。各地区各部门各单位党委（党组）要充分认识开展“两学一做”学习教育对于推动全面从严治党向基层延伸、保持发展党的先进性和纯洁性的重大意义，作为一项重大政治任务，尽好责、抓到位、见实效。要把思想建设放在首位，教育引导党员尊崇党章、遵守党规，以习近平总书记系列重要讲话精神武装头脑、指导实践、推动工作，着力解决党员队伍在思想、组织、作风、纪律等方面存在的问题，努力使广大党员进一步增强政治意识、大局意识、核心意识、看齐意识，坚定理想信念、保持对党忠诚、树立清风正气、勇于担当作为，充分发挥先锋模范作用。\r\n            </p>\r\n            <p style=\"text-indent:2em;\">\r\n                通知强调，“两学一做”学习教育不是一次活动，要突出正常教育，区分层次，有针对性地解决问题，依托“三会一课”等党的组织生活制度，发挥党支部自我净化、自我提高的主动性，真正把党的思想政治建设抓在日常、严在经常。各地区各部门各单位要结合实际确定学习方式，为基层留出空间。要紧紧围绕党的中心工作和全党工作大局开展学习教育，坚持两手抓，防止“两张皮”。要进一步严密党的组织体系、严肃党的组织生活、严格党员教育管理、严明党建工作责任制，激励基层党组织和广大党员干事创业、开拓进取，为协调推进“四个全面”战略布局、贯彻落实五大发展理念提供坚强组织保证。\r\n            </p>\r\n            <p style=\"text-indent:2em;\">\r\n                通知要求，各地区各部门各单位党委（党组）要根据方案要求，结合实际制定具体实施方案。开展“两学一做”学习教育的情况，要及时报告党中央。\r\n            </p>\r\n            <p>\r\n                <br>\r\n            </p>\r\n            <p>\r\n                来源：新华社 &nbsp;发布时间：2016年2月28日\r\n            </p>\r\n            <div class=\"clear\"></div>\r\n        </div>\r\n        <div class=\"shareNav\">\r\n            <div class=\"bdsharebuttonbox bdshare-button-style0-24\" data-bd-bind=\"1491016726704\">\r\n                <a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\r\n                <a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\"></a>\r\n                <a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\r\n                <a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\"></a>\r\n                <a href=\"#\" class=\"bds_tqq\" data-cmd=\"tqq\" title=\"分享到腾讯微博\"></a>\r\n                <a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\"></a>\r\n                <a href=\"#\" class=\"bds_sqq\" data-cmd=\"sqq\" title=\"分享到QQ好友\"></a>\r\n            </div>\r\n            <script>\r\n                window._bd_share_config = {\r\n                    \"common\": {\r\n                        \"bdSnsKey\": {},\r\n                        \"bdText\": \"\",\r\n                        \"bdMini\": \"2\",\r\n                        \"bdMiniList\": false,\r\n                        \"bdPic\": \"\",\r\n                        \"bdStyle\": \"0\",\r\n                        \"bdSize\": \"24\"\r\n                    }, \"share\": {}\r\n                };\r\n                with (document) 0[(getElementsByTagName(\"head\")[0] || body).appendChild(createElement(\"script\")).src = \"http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=\" + ~(-new Date() / 36e5)];\r\n            </script>\r\n            <ul class=\"fxd_close\">\r\n                <a href=\"javascript:void(0)\" onclick=\"javascript:window.print()\" class=\"print_btn\">打印本页</a>\r\n                <a href=\"javascript:window.close();\" class=\"close_btn\">关闭窗口</a>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <!-- panel-body -->\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"  data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      //this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  ArticleNewsDetail.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/detail-page/form.html',
          width: 600,
          height: 480
      },
      type: 'articleNewsDetail'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  ArticleNewsDetail.prototype.open = function() {
      var options = this.options;
      var id = 'articleNewsDetail';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  ArticleNewsDetail.prototype.initForm = function() {
      var cls = this;
      // var options = this.config.options;
      // utils.log('ArticleNewsDetail.prototype.initForm >>>');
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  ArticleNewsDetail.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
      // utils.log("ArticleNewsDetail.prototype.formSumbit >>>");
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  ArticleNewsDetail.prototype.render = function(moduleId) {
      // utils.log('ArticleNewsDetail moduleId: ' + moduleId);
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
  
      $module.html(cls.tplRender);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  ArticleNewsDetail.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  ArticleNewsDetail.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  ArticleNewsDetail.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  ArticleNewsDetail.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  ArticleNewsDetail.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  ArticleNewsDetail.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  ArticleNewsDetail.prototype.parseSave = function(options) {
      utils.log('ArticleNewsDetail.prototype.parseSave  >>>');
      var cls = this;
      var compile = template.compile(cls.tpl);
      var html = compile({indexUrl:config.getIndexHref()});
      return html;
      // var $tpl = $(cls.tpl);
      // $tpl.find('#hitScript').replaceWith(cls.hitScript);
      // $tpl.find('#shareScript').html(cls.shareScript);
      // utils.log($tpl[0].outerHTML);
      // return $tpl[0].outerHTML;
  };
  
  ArticleNewsDetail.prototype.test = function() {
      // utils.log("ArticleNewsDetail test success!");
  };
  
  base.plugin('articleNewsDetail', new ArticleNewsDetail());
  
  module.exports = ArticleNewsDetail;

});

;/*!app/common/layout.js*/
define('app/common/layout', function(require, exports, module) {

  /**
   * 布局操作类
   * Created by Dzl on 2016-10-3.
   */
  
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  require('app/common/module');
  require('app/common/move-frame');
  require('app/common/module-layer');
  var doms = require('app/common/template-dom-structure');
  
  
  var Layout = function (options) {
      this.options = $.extend(true, Layout.DEFAULTS, options);
      this.module = base['module'];
      this.moveFrame = base['moveFrame'];
      this.moduleLayer = base['moduleLayer'];
  
      // 添加组件的HTML
      this.addNewModuleHtml = base.addNewModuleHtml;
  
      // 相关布局模板
      this.colHtml = {};
      this.colClassName = doms.col.substring(1);
      this.rowClassName = doms.row.substring(1);
  
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Layout.DEFAULTS = {};
  
  Layout.prototype.getRowHtmlByType = function (type) {
      utils.log('Layout.prototype.getRowHtmlByType >>> type: ', type);
      var cols = type.substring(3); // 7-8-9
      utils.log('Layout.prototype.getRowHtmlByType >>> cols: ', cols);
      var colArr = cols.split('-');
      var html = [];
      var cls = this;
      _.forEach(colArr, function (value) {
          var colClass = 'col-' + value + '-24';
          html.push('<div class="' + doms.col.substring(1) + ' ' + colClass + '">' + cls.addNewModuleHtml + '</div>')
      });
      utils.log('Layout.prototype.getRowHtmlByType >>> cols: ', cols);
      return html.join('');
  };
  /**
   * 创建行
   * @param type
   * @param $row
   */
  Layout.prototype.createRow = function (type, $row) {
      var cls = this;
      var objId = _.uniqueId('row');
      var rowHtml = '<div id="' + objId + '" class="' + cls.rowClassName + '">';
      type = type || 'col24-24';
      if (type && cls.colHtml[type]) {
          rowHtml += cls.colHtml[type];
          rowHtml += '</div>';
          if (!$row) {
  
              $(doms.containerInner).append(rowHtml);
              cls.bindMouseEvent(objId);
              //base.info('布局添加成功!');
          } else {
  
          }
      }
  
  };
  
  Layout.prototype.bindMouseEvent = function (objId) {
      var cls = this;
      $('#' + objId).mouseenter(function () {
          cls.mover(objId);
      }).mouseleave(function () {
          cls.mleaver(objId);
      });
  
      $('.addNewModule').off('click.ls.design.addNewModule').on('click.ls.design.addNewModule', function () {
          $.Site.templateApp['floatPanel'].openTab(0);
      })
  };
  
  Layout.prototype.mover = function (objId) {
      var cls = this;
      var $obj = $("#" + objId);
  
  
  };
  
  Layout.prototype.mleaver = function (objId) {
      var cls = this;
      var $obj = $("#" + objId);
  };
  
  
  /**
   *
   */
  Layout.prototype.test = function () {
      var cls = this;
  };
  
  
  base.plugin('layout', new Layout());
  
  module.exports = Layout;
  

});

;/*!app/components/custom-layout/index.js*/
define('app/components/custom-layout/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-4-17.
   */
  
  
  
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  require('app/common/layout');
  var utils = require('app/common/utils');
  
  
  var CustomLayout = function (options) {
      this.options = utils.assignClone(CustomLayout.DEFAULTS, options);
      this.win = base['artdialog'];
      this.moduleSetting = {
          type: 'customLayout'
      }
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  CustomLayout.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '自定义布局',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/custom-layout/form.html',
          width: 600,
          height: 480
      },
      type: 'customLayout'
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  CustomLayout.prototype.formSumbit = function () {
      var cls = this, validateState = false;
      // utils.log("CustomLayout.prototype.formSumbit >>>");
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
  
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  CustomLayout.prototype.initForm = function () {
      var cls = this;
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {};
      var _computed = {
          colCount: function () {
              var _count = 0;
              _.forEach(this.layoutItems, function (val) {
                  _count += _.toInteger(val.col);
              });
              return _count;
          },
          errMessage: function () {
              if (this.colCount < 24) {
                  return '还差 ' + (24 - this.colCount) + ' 列';
              } else if (this.colCount > 24) {
                  return '多了 ' + (this.colCount - 24) + ' 列';
              } else {
                  return '';
              }
          },
          isValidCol: function () {
              this.isValid = this.colCount != 24;
              return this.isValid;
          }
      };
      base.vm = new Vue({
          el: '#attrForm',
          data: {
              isValid: true,
              moduleId: curEditModuleId,
              layoutCount: 1,
              layoutItems: [{
                  col: 24
              }]
          },
          watch: {
              layoutCount: function (val, oldVal) {
                  console.log('new: %s, old: %s', val, oldVal);
                  var _layoutItems = [];
                  if (val > 0) {
                      var col = parseInt(24 / val);
                      var lastCol = 24 - parseInt(col * (val - 1));
                      utils.log('col: ', col);
                      utils.log('lastCol: ', lastCol);
                      for (var i = 0; i < val; i++) {
                          if (i == (val - 1)) {
                              _layoutItems.push({col: lastCol, isLast: true});
                          } else {
                              _layoutItems.push({col: col});
                          }
                      }
                      utils.log('_layoutItems: ', _layoutItems);
                      this.layoutItems = _layoutItems
                  }
              },
              layoutItems: {
                  handler: function (val, oldVal) {
                      utils.log('new: %s, old: %s', val, oldVal);
                      console.log(val);
                      console.log(oldVal);
                      // 从右边开始裁剪数组中的 N 个数组，返回剩余的部分
                      var arr = _.dropRight(val, 1);
                      utils.log(JSON.stringify(arr));
                      var sumCol = 0;
                      _.forEach(arr, function (item) {
                          sumCol += _.toNumber(item.col);
                      });
                      var lastCol = 24 - sumCol;
                      _.last(val).col = lastCol;
                      utils.log('sumCol: ', sumCol);
                  },
                  deep: true
              }
          },
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      utils.log($('#attrForm'));
      $('#attrForm').validate({
          success: function () {
              if (base.vm.$data.isValid) {
                  base.attrFormValidateState = false;
              } else {
                  base.attrFormValidateState = true;
              }
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  CustomLayout.prototype.open = function () {
      var options = this.options;
      var id = 'customLayout';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  CustomLayout.prototype.setModuleAttrData = function (moduleId, data) {
      var cls = this;
      var $target = $('#' + moduleId);
      var cols = _.map(data.layoutItems, 'col');
      var colClass = 'col' + cols.join('-');
      utils.log('CustomLayout.prototype.setModuleAttrData colClass: ', colClass);
      var colHtml = base['layout'].getRowHtmlByType(colClass);
      $target.html(colHtml);
  };
  
  base.plugin('customLayout', new CustomLayout());
  
  module.exports = CustomLayout;
  

});

;/*!app/components/detail-page/surveyInfoDetail.js*/
define('app/components/detail-page/surveyInfoDetail', function(require, exports, module) {

  /**
   * 文章详细页 类对象
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  require('app/common/artdialog');
  
  var SurveyInfoDetail = function(options) {
      this.options = utils.assignClone(SurveyInfoDetail.DEFAULTS, options);
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'survey';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'SurveyInfoDetail',
          isMobile: false,
          conf: {
              title: '栏目名称'
          },
          label: {
              nav: labels.nav,
              surveyInfo: labels.surveyInfo
          }
      };
  
      this.tpl = "<div class=\"panel surveyInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a> &gt; {ls:nav isHtml=\"false\"}{/ls:nav}</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {ls:surveyInfo id=\"\" isCount=\"true\" length=\"20\" isDate=\"true\" dateFormat=\"yyyy-MM-dd HH:mm\" target=\"_blank\" }{/ls:surveyInfo}\r\n    </div>\r\n</div>";
      this.tplRender =  "<div class=\"panel surveyInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#\" class=\"j-specialIndexUrl\">首页</a> &gt; 民意调查</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n\r\n        <h1 class=\"newstitle\">\r\n            垃圾分类你怎么看？\r\n        </h1>\r\n        <div class=\"newsinfo myinfo voteinfo\">\r\n        <span>调查时间：\r\n            [ 2017-02-21 ] 至 [ 2017-04-15 ]\r\n        </span>\r\n            <span>状态：\r\n            <i class=\"over\">已结束</i>\r\n       </span>\r\n        </div>\r\n        <div class=\"vote-info\">\r\n            垃圾分类在国内外并不少见，合肥市也设立了不少垃圾分类试点，然而模式不成熟、垃圾分类处理体系的不完善，加上好习惯建立的不易，\r\n            成了阻碍垃圾分类推广的肠梗阻。最近，市蜀山区尝试引入一种新的智慧垃圾分类系统，试点成熟后，或将在更大范围内推开。\r\n        </div>\r\n        <script>\r\n            var questionIds = [];\r\n            var questionType = [];\r\n            var velocityCounts = [];\r\n        </script>\r\n        <div class=\"vote-main\">\r\n            <script>\r\n                questionIds.push(\"09061\");\r\n                questionType.push(\"1\");\r\n                velocityCounts.push(\"2\")\r\n            </script>\r\n            <div class=\"vote-lsit\">\r\n                <div class=\"title\">1、你日常的生活垃圾主要包括哪几类？(多选)</div>\r\n                <ul>\r\n                    <li>\r\n                        <input id=\"op_01\"  name=\"option_09061\"\r\n                               value=\"01\" type=\"checkbox\" >纸张\r\n                    </li>\r\n                    <li>\r\n                        <input id=\"op_02\" name=\"option_09061\"\r\n                               value=\"02\" type=\"checkbox\" >塑料\r\n                    </li>\r\n\r\n                </ul>\r\n            </div>\r\n\r\n            <script>\r\n                questionIds.push(\"09062\");\r\n                questionType.push(\"1\");\r\n                velocityCounts.push(\"1\")\r\n            </script>\r\n            <div class=\"vote-lsit\">\r\n                <div class=\"title\">2、你有没有主动去了解过垃圾分类？</div>\r\n                <ul>\r\n                    <li>\r\n                        <input id=\"op_03\" name=\"option_09062\"\r\n                               value=\"01\" type=\"radio\" >有\r\n                    </li>\r\n                    <li>\r\n                        <input id=\"op_04\" name=\"option_09062\"\r\n                               value=\"02\" type=\"radio\" >没有\r\n                    </li>\r\n\r\n                </ul>\r\n            </div>\r\n\r\n            <script>\r\n                questionIds.push(\"09063\");\r\n                questionType.push(\"1\");\r\n                velocityCounts.push(\"1\")\r\n            </script>\r\n            <div class=\"vote-lsit\">\r\n                <div class=\"title\">3、垃圾分类的好处有哪些？</div>\r\n                <ul>\r\n                    <li class=\"vote-textarea\"><textarea id=\"content_09063\"></textarea></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"vote-code\">\r\n            <span class=\"text-code\"><span style=\"color:#f00; padding-right:5px;\">*</span>验<span class=\"s01\"></span>证<span class=\"s02\"></span>码：</span>\r\n            <input class=\"verification\" id=\"checkimg\" size=\"6\" maxlength=\"4\" type=\"text\">\r\n            <img id=\"imgCode\" class=\"img-code\" src=\"/member/getCode\" width=\"82\" height=\"31\" title=\"看不清楚，换个图片\" align=\"absmiddle\">\r\n        </div>\r\n        <div class=\"vote-btn\">\r\n            <button class=\"btn-submit\" type=\"button\">提交</button>\r\n            <button class=\"btn-review\" type=\"button\">查看</button>\r\n        </div>\r\n\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"  data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      //this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  SurveyInfoDetail.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/detail-page/form.html',
          width: 600,
          height: 480
      },
      type: 'surveyInfoDetail'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  SurveyInfoDetail.prototype.open = function() {
      var options = this.options;
      var id = 'surveyInfoDetail';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  SurveyInfoDetail.prototype.initForm = function() {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  SurveyInfoDetail.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  SurveyInfoDetail.prototype.render = function(moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
  
      $module.html(cls.tplRender);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  SurveyInfoDetail.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  SurveyInfoDetail.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  SurveyInfoDetail.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  SurveyInfoDetail.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  SurveyInfoDetail.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  SurveyInfoDetail.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  SurveyInfoDetail.prototype.parseSave = function(options) {
      var cls = this;
      var compile = template.compile(cls.tpl);
      var html = compile({indexUrl:config.getIndexHref()});
      return html;
      // var $tpl = $(cls.tpl);
      // $tpl.find('#hitScript').replaceWith(cls.hitScript);
      // $tpl.find('#shareScript').html(cls.shareScript);
      // utils.log($tpl[0].outerHTML);
      // return $tpl[0].outerHTML;
  };
  
  SurveyInfoDetail.prototype.test = function() {
  };
  
  base.plugin('surveyInfoDetail', new SurveyInfoDetail());
  
  module.exports = SurveyInfoDetail;

});

;/*!app/components/detail-page/collectInfoDetail.js*/
define('app/components/detail-page/collectInfoDetail', function(require, exports, module) {

  /**
   * 文章详细页 类对象
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  require('app/common/artdialog');
  
  var CollectInfoDetail = function(options) {
      this.options = utils.assignClone(CollectInfoDetail.DEFAULTS, options);
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'collectInfo';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'CollectInfoDetail',
          isMobile: false,
          conf: {
              title: '栏目名称'
          },
          label: {
              nav: labels.nav,
              collectInfo: labels.collectInfo
          }
      };
  
      this.tpl = "<div class=\"panel collectInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a> &gt; {ls:nav isHtml=\"false\"}{/ls:nav}</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <h1 class=\"newstitle\">[ls:title ]</h1>\r\n        <div class=\"newsinfo\">\r\n            <span>征集时间：[ [ls:startTime format=\"yyyy-MM-dd\"] ] 至 [ [ls:endTime format=\"yyyy-MM-dd\"] ]</span>状态：#if(\"[ls:isTimeOut]\"==\"1\")<i class=\"nostart\">未开始</i>#elseif(\"[ls:isTimeOut]\"==\"2\")<i class=\"starting\">进行中</i>#else<i class=\"ending\">已过期</i>#end</div>\r\n        <div class=\"newscontnet\" style=\"border-bottom:0 none;\">\r\n            [ls:content ]\r\n            {ls:collectInfo pageSize=\"10\" isDate=\"true\" length=\"50\" dateFormat=\"yyyy/MM/dd HH:mm:ss\" }{/ls:collectInfo}\r\n        </div>\r\n    </div>\r\n</div>";
      this.tplRender =  "<div class=\"panel collectInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#\" class=\"j-specialIndexUrl\">首页</a> &gt; 民意征集</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <h1 class=\"newstitle\">“中国梦 劳动美”长丰县书画小品展征稿启事</h1>\r\n        <div class=\"newsinfo\">\r\n            <span>征集时间：[ 2017-03-15 ] 至 [ 2017-04-10 ] </span>状态：<i class=\"ending\">已过期</i></div>\r\n        <div class=\"newscontnet\" style=\"border-bottom:0 none;\">\r\n            为热烈庆祝“五一”国际劳动节，全面贯彻落实中央和省市关于文化强省、文化强市的战略部署和目标要求，充分发挥工会组织和广大职工在文化建设中的重要作用，丰富全县职工文化生活，提升职工文化内涵和艺术修养，进一步促进和谐长丰、魅力长丰、文化长丰建设，倡导“劳动者最美”的社会风尚，展示长丰跨越发展的新形象，特举办此次展览。\r\n            现将征稿有关事项公布如下：\r\n            一、主办单位：长丰县总工会\r\n            承办单位：长丰县书法家协会\r\n            二、征稿范围：\r\n            年满16周岁的长丰县内和在长丰工作过的具有一定创作能力的书画家和书画爱好者。\r\n            三、征稿要求：\r\n            1.内容：健康向上的古今诗词、联、赋、格言等均可，提倡创作与“中国梦”、“庆五一”、“劳动美”相关的书画作品。\r\n            2.规格：限书法、国画作品投稿，每人投稿件数限2件；作品尺寸不超过四尺对开的竖幅作品，斗方、扇面等形式不限，超尺寸作品一律取消入展资格。\r\n            3.每件作品背面右下角需用铅笔注明作者姓名、性别、年龄、详细通讯地址及电话，草书、篆书作品请附释文。\r\n            四、评选原则及办法：\r\n            1.由长丰县书协组织专家进行评审；因人力所限，未入选作者的投稿作品不退件。\r\n            2.评出优秀作品70件左右参展。\r\n            五、截稿日期：2017年4月10日\r\n            六、作品展览：\r\n            1.参展作品统一装裱，将于“五一”期间在长丰县总工会大楼展出，展览结束后作品退还作者。\r\n            2.出版《“中国梦 劳动美”长丰县书画小品展作品集》，凡入展者每人赠送两册。\r\n            3.来稿须符合征稿启事要求，否则不予评选。\r\n            4.凡投稿参赛者均视为确认并同意征稿启事的规定。\r\n            七、经费：本次展览经费由主办单位承担。\r\n            八、收稿地址：\r\n            地  址：231100 安徽长丰县城步行街三友画廊（嘉友广告公司）\r\n            收稿人：李家友 电 话：66671646 13905609421 13865986058\r\n\r\n            “中国梦 劳动美”长丰县书画小品展组委会\r\n            二0一七年三月十五日\r\n\r\n            <div class=\"collection-theme\">\r\n                <div id=\"ideaPageDiv\" class=\"collection-theme-list\">\r\n                    <h3 class=\"collectit\">网友意见</h3>\r\n                    <ul id=\"idea_page\">\r\n                        <li>\r\n                            <div class=\"collection-body\">\r\n                                <div class=\"collection-tit\">\r\n                                    <span class=\"collection-username\">3535</span>\r\n                                    <span class=\"collection-datetime\">( 2017/09/05 17:34:24 )</span>\r\n                                </div>\r\n                                <div class=\"collection-info\">方式2342525</div>\r\n                            </div>\r\n                        </li>\r\n                        <li>\r\n                            <div class=\"collection-body\">\r\n                                <div class=\"collection-tit\">\r\n                                    <span class=\"collection-username\">abc</span>\r\n                                    <span class=\"collection-datetime\">( 2017/09/05 11:55:52 )</span>\r\n                                </div>\r\n                                <div class=\"collection-info\">515252525</div>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div id=\"collectionpage\" class=\"pagination\"></div>\r\n\r\n                <form method=\"post\" name=\"collect_form\" id=\"collect_form\">\r\n                    <div class=\"poll_collect\">\r\n                        <h3>发表意见</h3>\r\n                        <ul>\r\n                            <li>\r\n                                <p class=\"poll_txt\"><span class=\"red\">*</span>您的姓名：</p>\r\n                                <p class=\"poll_input\"><input id=\"c_title\" name=\"c_title\" type=\"text\" maxlength=\"5\"></p>\r\n                            </li>\r\n                            <li>\r\n                                <p class=\"poll_txt\"><span class=\"red\">*</span>联系方式：</p>\r\n                                <p class=\"poll_input\"><input id=\"c_tel\" name=\"c_tel\" type=\"text\" maxlength=\"13\"></p>\r\n                            </li>\r\n                            <li class=\"poll_area\">\r\n                                <p class=\"poll_con\"><span class=\"red\">*</span>您的意见：</p>\r\n                                <p class=\"poll_conts\"><textarea id=\"c_contents\"  name=\"c_contents\" rows=\"5\" maxlength=\"1000\" placeholder=\"最多允许输入1000汉字，多余汉字将被截去\"></textarea></p>\r\n                            </li>\r\n                            <li>\r\n                                <p class=\"poll_txt\"><span class=\"red\">*</span>验证码：</p>\r\n                                <p class=\"poll_yzm\">\r\n                                    <input class=\"verification\" name=\"checkCode\" id=\"checkimg\" size=\"6\" maxlength=\"4\" type=\"text\">\r\n                                    <img id=\"imgCode\" class=\"hand\" src=\"/member/getCode\" width=\"82\" height=\"31\" title=\"看不清楚，换个图片\" align=\"absmiddle\">\r\n                                </p>\r\n                            </li>\r\n                            <li class=\"btn-group\"><input id=\"btn_submit\" name=\"submit\" class=\"btn btn-submit\" type=\"button\" accesskey=\"S\" value=\"提交\"></li>\r\n                        </ul>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"  data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      //this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  CollectInfoDetail.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/detail-page/form.html',
          width: 600,
          height: 480
      },
      type: 'collectInfoDetail'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  CollectInfoDetail.prototype.open = function() {
      var options = this.options;
      var id = 'collectInfoDetail';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  CollectInfoDetail.prototype.initForm = function() {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  CollectInfoDetail.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  CollectInfoDetail.prototype.render = function(moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
  
      $module.html(cls.tplRender);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  CollectInfoDetail.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  CollectInfoDetail.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  CollectInfoDetail.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  CollectInfoDetail.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  CollectInfoDetail.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  CollectInfoDetail.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  CollectInfoDetail.prototype.parseSave = function(options) {
      var cls = this;
      var compile = template.compile(cls.tpl);
      var html = compile({indexUrl:config.getIndexHref()});
      return html;
      // var $tpl = $(cls.tpl);
      // $tpl.find('#hitScript').replaceWith(cls.hitScript);
      // $tpl.find('#shareScript').html(cls.shareScript);
      // utils.log($tpl[0].outerHTML);
      // return $tpl[0].outerHTML;
  };
  
  
  
  base.plugin('collectInfoDetail', new CollectInfoDetail());
  
  module.exports = CollectInfoDetail;

});

;/*!app/components/detail-page/videoNewsDetail.js*/
define('app/components/detail-page/videoNewsDetail', function(require, exports, module) {

  /**
   * 文章详细页 类对象
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  require('app/common/artdialog');
  
  var VideoNewsDetail = function(options) {
      this.options = utils.assignClone(VideoNewsDetail.DEFAULTS, options);
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'video';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'VideoNewsDetail',
          isMobile: false,
          conf: {
              title: '栏目名称'
          },
          label: {
              nav: labels.nav,
              videoInfo: labels.videoNewsInfo
          }
      };
  
      this.tpl = "<div class=\"panel videoNewsDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a> &gt; {ls:nav isHtml=\"false\"}{/ls:nav}</div>\r\n    </div>\r\n    <div class=\"panel-body\" id=\"color_printsssss\">\r\n        <h1 class=\"newstitle\" style=\"color:[ls:titleColor]; #if(\"[ls:isBold]\"==\"1\")font-weight:bold;#end #if(\"[ls:isTilt]\"==\"1\") font-style:italic;#end #if(\"[ls:isTilt]\"==\"1\")text-decoration:underline;#end\">\r\n        [ls:title ]\r\n        </h1>\r\n        #if(\"[ls:subTitle]\"!=\"\")\r\n        <h2 class=\"newstitlef\">[ls:subTitle ]</h2>\r\n        #end\r\n\r\n        <div class=\"clear14\"></div>\r\n        <div class=\"newsinfo\">日期：[ls:publishDate format=\"yyyy-MM-dd\"]&nbsp;&nbsp;&nbsp;\r\n            作者：[ls:author] #if(\"[ls:resources]\"!=\"\")&nbsp;&nbsp;&nbsp;来源：[ls:resources] #end&nbsp;&nbsp;&nbsp;\r\n            阅读：<script src=\"/content/hit/[ls:id]\"></script> 次&nbsp;&nbsp;&nbsp;\r\n            <span class=\"fontSize\">\r\n                                        字体：\r\n                                        <span class=\"fontSize-txt\">\r\n                                            [ <a class=\"j-fontBig\">大</a> <a class=\"j-fontNormal\">中</a> <a class=\"j-fontSmall\">小</a> ]\r\n                                        </span>\r\n                                </span>&nbsp;&nbsp;&nbsp;\r\n            保护视力色：<input type=\"button\" style=\"background-color:#e6ffff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#e6ffff';\">\r\n            <input type=\"button\" style=\"background-color:#ccffff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#ccffff';\">\r\n            <input type=\"button\" style=\"background-color:#ffffcc;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#ffffcc';\">\r\n            <input type=\"button\" style=\"background-color:#ffccff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#ffccff';\">\r\n            <input type=\"button\" style=\"background-color:#99ccff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#99ccff';\">\r\n            <input type=\"button\" style=\"background-color:#eeeeee;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#eeeeee';\">\r\n            <input type=\"button\" style=\"background-color:#FFFFFF;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#FFFFFF';\">\r\n        </div>\r\n        <div  class=\"newscontnet j-fontContent minh500\">\r\n            <div class=\"video_main_content\">\r\n                <div class=\"video-player\" data-url=\"[ls:videoPath]\"></div>\r\n            </div>\r\n            <div>[ls:article] </div>\r\n        </div>\r\n        <div class=\"clear\"></div>\r\n\r\n        <div class=\"shareNav\">\r\n            <div class=\"bdsharebuttonbox\">\r\n                <a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\r\n                <a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\"></a>\r\n                <a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\r\n                <a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\"></a>\r\n                <a href=\"#\" class=\"bds_tqq\" data-cmd=\"tqq\" title=\"分享到腾讯微博\"></a>\r\n                <a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\"></a>\r\n                <a href=\"#\" class=\"bds_sqq\" data-cmd=\"sqq\" title=\"分享到QQ好友\"></a>\r\n            </div>\r\n            <script type=\"text/js\">\r\n                window._bd_share_config = {\"common\": {\"bdSnsKey\": {},\"bdText\": \"\",\"bdMini\": \"2\",\"bdMiniList\": false,\"bdPic\": \"\",\"bdStyle\": \"0\",\"bdSize\": \"24\"},\"share\": {}};with(document) 0[(getElementsByTagName(\"head\")[0] || body).appendChild(createElement(\"script\")).src = \"http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=\" + ~(-new Date() / 36e5)];\r\n                                    </script>\r\n            <ul class=\"fxd_close\">\r\n                <a href=\"javascript:void(0)\" onclick=\"javascript:window.print()\" class=\"print_btn\">打印本页</a>\r\n                <a href=\"javascript:window.close();\" class=\"close_btn\">关闭窗口</a>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>";
      this.tplRender =  "<div class=\"panel videoNewsDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#\" class=\"j-specialIndexUrl\">首页</a> &gt; 视频新闻</div>\r\n    </div>\r\n    <div class=\"panel-body\" id=\"color_printsssss\">\r\n        <h1 class=\"newstitle\" style=\"color:#000;\">\r\n            好心司机拾金不昧 热心民警帮忙寻主\r\n        </h1>\r\n        <div class=\"clear14\"></div>\r\n        <div class=\"newsinfo\">日期：2017-09-05 08:21&nbsp;&nbsp;&nbsp;\r\n            作者：政府办 来源：办公室&nbsp;&nbsp;&nbsp;\r\n            阅读：24 次&nbsp;&nbsp;&nbsp;\r\n            <span class=\"fontSize\">\r\n                                        字体：\r\n                                        <span class=\"fontSize-txt\">\r\n                                            [ <a class=\"j-fontBig\">大</a> <a class=\"j-fontNormal\">中</a> <a class=\"j-fontSmall\">小</a> ]\r\n                                        </span>\r\n                                </span>&nbsp;&nbsp;&nbsp;\r\n            保护视力色：<input type=\"button\" style=\"background-color:#e6ffff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#e6ffff';\">\r\n            <input type=\"button\" style=\"background-color:#ccffff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#ccffff';\">\r\n            <input type=\"button\" style=\"background-color:#ffffcc;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#ffffcc';\">\r\n            <input type=\"button\" style=\"background-color:#ffccff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#ffccff';\">\r\n            <input type=\"button\" style=\"background-color:#99ccff;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#99ccff';\">\r\n            <input type=\"button\" style=\"background-color:#eeeeee;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#eeeeee';\">\r\n            <input type=\"button\" style=\"background-color:#FFFFFF;\" onClick=\"document.all('color_printsssss').style.backgroundColor='#FFFFFF';\">\r\n        </div>\r\n        <div  class=\"newscontnet j-fontContent minh500\">\r\n            <div class=\"video_main_content\">\r\n                <div class=\"video-player\" data-url=\"http://ex8dev.5397078.cn/mongo/597999bab27a38ba65675b48&c=0\"></div>\r\n            </div>\r\n            <div>好心司机拾金不昧  热心民警帮忙寻主 </div>\r\n        </div>\r\n        <div class=\"clear\"></div>\r\n\r\n        <div class=\"shareNav\">\r\n            <div class=\"bdsharebuttonbox bdshare-button-style0-24\" data-bd-bind=\"1491016726704\">\r\n                <a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\r\n                <a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\" title=\"分享到微信\"></a>\r\n                <a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"></a>\r\n                <a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\" title=\"分享到QQ空间\"></a>\r\n                <a href=\"#\" class=\"bds_tqq\" data-cmd=\"tqq\" title=\"分享到腾讯微博\"></a>\r\n                <a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\" title=\"分享到人人网\"></a>\r\n                <a href=\"#\" class=\"bds_sqq\" data-cmd=\"sqq\" title=\"分享到QQ好友\"></a>\r\n            </div>\r\n            <script>\r\n                window._bd_share_config = {\r\n                    \"common\": {\r\n                        \"bdSnsKey\": {},\r\n                        \"bdText\": \"\",\r\n                        \"bdMini\": \"2\",\r\n                        \"bdMiniList\": false,\r\n                        \"bdPic\": \"\",\r\n                        \"bdStyle\": \"0\",\r\n                        \"bdSize\": \"24\"\r\n                    }, \"share\": {}\r\n                };\r\n                with (document) 0[(getElementsByTagName(\"head\")[0] || body).appendChild(createElement(\"script\")).src = \"http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=\" + ~(-new Date() / 36e5)];\r\n            </script>\r\n            <ul class=\"fxd_close\">\r\n                <a href=\"javascript:void(0)\" onclick=\"javascript:window.print()\" class=\"print_btn\">打印本页</a>\r\n                <a href=\"javascript:window.close();\" class=\"close_btn\">关闭窗口</a>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"  data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      //this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  VideoNewsDetail.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/detail-page/form.html',
          width: 600,
          height: 480
      },
      type: 'videoNewsDetail'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  VideoNewsDetail.prototype.open = function() {
      var options = this.options;
      var id = 'videoNewsDetail';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  VideoNewsDetail.prototype.initForm = function() {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  VideoNewsDetail.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  VideoNewsDetail.prototype.render = function(moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
  
      $module.html(cls.tplRender);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  VideoNewsDetail.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  VideoNewsDetail.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  VideoNewsDetail.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  VideoNewsDetail.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  VideoNewsDetail.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  VideoNewsDetail.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  VideoNewsDetail.prototype.parseSave = function(options) {
      var cls = this;
      var compile = template.compile(cls.tpl);
      var html = compile({indexUrl:config.getIndexHref()});
      return html;
      // var $tpl = $(cls.tpl);
      // $tpl.find('#hitScript').replaceWith(cls.hitScript);
      // $tpl.find('#shareScript').html(cls.shareScript);
      // utils.log($tpl[0].outerHTML);
      // return $tpl[0].outerHTML;
  };
  
  VideoNewsDetail.prototype.test = function() {
  };
  
  base.plugin('videoNewsDetail', new VideoNewsDetail());
  
  module.exports = VideoNewsDetail;

});

;/*!app/components/detail-page/interviewInfoDetail.js*/
define('app/components/detail-page/interviewInfoDetail', function(require, exports, module) {

  /**
   * 文章详细页 类对象
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  require('app/common/artdialog');
  
  var InterviewInfoDetail = function(options) {
      this.options = utils.assignClone(InterviewInfoDetail.DEFAULTS, options);
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'interviewInfo';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'InterviewInfoDetail',
          isMobile: false,
          conf: {
              title: '栏目名称'
          },
          label: {
              nav: labels.nav,
              interviewInfo: labels.interviewInfo
          }
      };
  
      this.tpl = "<div class=\"panel interviewInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a> &gt; {ls:nav isHtml=\"false\"}{/ls:nav}</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {ls:interviewInfo pageSize=\"5\" length=\"40\" isOpen=\"0\" isDate=\"true\" dateFormat=\"yyyy/MM/dd HH:mm:ss\"}{/ls:interviewInfo}\r\n    </div>\r\n</div>";
      this.tplRender =  "<div class=\"panel interviewInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a> &gt; 在线访谈</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"interview-detail\">\r\n\r\n            <div class=\"interview-title\">\r\n                访谈节目一\r\n            </div>\r\n            <div class=\"interview-info\">\r\n                <div class=\"in-img\">\r\n                    <a title=\"访谈节目一\">\r\n                        <img src=\"\" >\r\n                    </a>\r\n                </div>\r\n                <div class=\"in-info\">\r\n                    <p class=\"p1\"><span>时&nbsp;间：</span>2017-9-30</p>\r\n                    <p class=\"p2\"><span>嘉&nbsp;宾：</span><span class=\"interview-names\" id=\"userNames_4667484\"><a>小王</a><a>小李</a></span></p>\r\n                    <p class=\"in-note p3\">\r\n                        <span>摘&nbsp;要：</span>\r\n                        <span class=\"note-content\">访谈摘要内容</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"interview-desc\">\r\n                <div class=\"interview-desc-title\">\r\n                    <span>访谈详情</span>\r\n                </div>\r\n                <div class=\"desc\">\r\n                    访谈详情内容\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"questionPageDiv\" style=\"display:none;\" class=\"interview-info-list\">\r\n                <ul id=\"question_page\">\r\n                    <li>\r\n                        <div class=\"interview-body\">\r\n                            <span class=\"interview-username\">[liuliu]</span>\r\n                            <span class=\"interview-infonr\">2342525absbsoi0sefasognaoifa09fuagagnaignagag哈哈哈哈或或或</span>\r\n                            <span class=\"interview-datetime\">[2017/09/06 11:53:21]</span>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n                <div id=\"interviewpage\" class=\"pagination\"></div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"  data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      //this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  InterviewInfoDetail.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/detail-page/form.html',
          width: 600,
          height: 480
      },
      type: 'interviewInfoDetail'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  InterviewInfoDetail.prototype.open = function() {
      var options = this.options;
      var id = 'interviewInfoDetail';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  InterviewInfoDetail.prototype.initForm = function() {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  InterviewInfoDetail.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  InterviewInfoDetail.prototype.render = function(moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
  
      $module.html(cls.tplRender);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  InterviewInfoDetail.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  InterviewInfoDetail.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  InterviewInfoDetail.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  InterviewInfoDetail.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  InterviewInfoDetail.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  InterviewInfoDetail.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  InterviewInfoDetail.prototype.parseSave = function(options) {
      var cls = this;
      var compile = template.compile(cls.tpl);
      var html = compile({indexUrl:config.getIndexHref()});
      return html;
      // var $tpl = $(cls.tpl);
      // $tpl.find('#hitScript').replaceWith(cls.hitScript);
      // $tpl.find('#shareScript').html(cls.shareScript);
      // utils.log($tpl[0].outerHTML);
      // return $tpl[0].outerHTML;
  };
  
  
  
  base.plugin('interviewInfoDetail', new InterviewInfoDetail());
  
  module.exports = InterviewInfoDetail;

});

;/*!app/components/detail-page/messageInfoDetail.js*/
define('app/components/detail-page/messageInfoDetail', function(require, exports, module) {

  /**
   * 文章详细页 类对象
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var labels =  require('app/common/labels');
  var doms = require('app/common/template-dom-structure');
  
  require('app/common/artdialog');
  
  var MessageInfoDetail = function(options) {
      this.options = utils.assignClone(MessageInfoDetail.DEFAULTS, options);
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'messageBoard';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio';
  
      this.moduleSetting = {
          type: 'MessageInfoDetail',
          isMobile: false,
          conf: {
              title: '栏目名称'
          },
          label: {
              nav: labels.nav,
              messageBoard: labels.messageBoard
          }
      };
  
      this.tpl = "<div class=\"panel messageInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#{specialIndexUrl}\" class=\"j-specialIndexUrl\">首页</a> &gt; {ls:nav isHtml=\"false\"}{/ls:nav}</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {ls:messageBoardPageList pageSize=\"15\" file=\"messageBoardPageList-mgs-01\"  isDate=\"4\" isHit=\"false\" result=\"暂无相关信息\" length=\"35\" dateFormat=\"yyyy-MM-dd\" action=\"detail\" }{/ls:messageBoardPageList}\r\n    </div>\r\n</div>";
      this.tplRender =  "<div class=\"panel messageInfoDetail-wrap\">\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"position\">您当前的位置：<a href=\"#\" class=\"j-specialIndexUrl\">首页</a> &gt; 留言</div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <span class=\"hide\" style=\"display: none;\"><script src=\"/content/hit/4672923\"></script>1</span>\r\n        <h1 class=\"newstitle\">演示数据</h1>\r\n        <div class=\"newscontnet minh500\">\r\n            <div class=\"lyzhuti\"><span class=\"mesny_name\"><font color=\"#333\">[留言]</font>&nbsp;小明：</span><span class=\"mesny_date\">2017-09-13</span>\r\n                <div class=\"clear\"></div>\r\n                <div class=\"zhuticon\">测试<span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span><span>测试</span></div>\r\n            </div>\r\n            <span style=\"color:#f00\">暂未回复</span>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>";
  
      this.moduleTpl = '<div class="'+ doms.module +' {{type}}" data-type="{{type}}" _autoload="1"  data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.tpl + '</div>';
  
      template.helper('activeFilter', function(isActive) {
          // utils.log('activeFilter isActive: ' + activeFilter)
          return isActive == true ? 'active' : '';
      });
  
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      //this.compileTpl = template.compile(this.tpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  MessageInfoDetail.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 -- 焦点图片',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/detail-page/form.html',
          width: 600,
          height: 480
      },
      type: 'messageInfoDetail'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  MessageInfoDetail.prototype.open = function() {
      var options = this.options;
      var id = 'messageInfoDetail';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  MessageInfoDetail.prototype.initForm = function() {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      //data.moduleId = curEditModuleId;
      //utils.log(JSON.stringify(data));
  
      Vue.filter('targetFilter', function(value) {
          return value === '_blank' ? "新窗口" : "当前页";
      });
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          methods: {
              // 关联栏目
              associateNode: function() {
                  Ls.openWin(cls.selectNodeWinUrl,
                      '400px',
                      '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function(data) {
                              utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                              }
                          }
                      });
              }
          }
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function() {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function() {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  MessageInfoDetail.prototype.formSumbit = function() {
      var cls = this,
          validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // utils.log('form submit data >>>');
          // utils.log(JSON.stringify(data));
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  MessageInfoDetail.prototype.render = function(moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
  
      $module.html(cls.tplRender);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  MessageInfoDetail.prototype.getModuleAttrData = function(moduleId) {
      var $module = $('#' + moduleId),
          cls = this,
          _conf = $module.attr('data-conf'),
          _label = $module.attr('data-label');
  
      cls.moduleSetting.moduleId = moduleId;
  
      // 从dom节点属性中取得配置值
      if (!utils.isNul(_conf)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.conf = _.defaultsDeep(cls.moduleSetting.conf, utils.parseOptions(_conf));
      } else {
  
      }
      if (!utils.isNul(_label)) {
          // 如果模板标签对象存在,则将此对象的值与默认值混合
          cls.moduleSetting.label = _.defaultsDeep(cls.moduleSetting.label, utils.parseOptions(_label));
      } else {}
  
      return cls.moduleSetting;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  MessageInfoDetail.prototype.getData = function(options,isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting,options);
      data.list = cls.listData;
      data.isMobile = base.isMobile;
      if(isModule){
          data.id = _.uniqueId('module');
      }
      return data;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  MessageInfoDetail.prototype.setModuleAttrData = function(moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  MessageInfoDetail.prototype.renderPanel = function(moduleId,options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  MessageInfoDetail.prototype.getPanelHtml = function(options) {
      var cls = this;
      var data =  cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  MessageInfoDetail.prototype.renderAfter = function(moduleId) {
      var cls = this;
  
  };
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  MessageInfoDetail.prototype.parseSave = function(options) {
      var cls = this;
      var compile = template.compile(cls.tpl);
      var html = compile({indexUrl:config.getIndexHref()});
      return html;
      // var $tpl = $(cls.tpl);
      // $tpl.find('#hitScript').replaceWith(cls.hitScript);
      // $tpl.find('#shareScript').html(cls.shareScript);
      // utils.log($tpl[0].outerHTML);
      // return $tpl[0].outerHTML;
  };
  
  
  
  base.plugin('messageInfoDetail', new MessageInfoDetail());
  
  module.exports = MessageInfoDetail;

});

;/*!app/components/page-edit/index.js*/
define('app/components/page-edit/index', function(require, exports, module) {

  /**
   * 模板页面底部操作类
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var labels = require('app/common/labels');
  
  require('app/common/artdialog');
  require('app/common/module-layer');
  require('app/common/move-frame');
  
  
  var PageEdit = function (options) {
      this.options = utils.assignClone(PageEdit.DEFAULTS, options);
      this.win = base['artdialog'];
      this.moduleLayer = base['moduleLayer'];
      this.moveFrame = base['moveFrame'];
      this.draggableBtn = base['draggableBtn'];
      this.className = doms.pageEdit.substring(1);
      this.editJSON = [{
          text: "设置内容",
          moduleId: 'pageEdit',
          type: "setting"
      }];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
  
  };
  
  
  /**
   * 默认配置
   * @type {Object}
   */
  PageEdit.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '设置内容',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/page-edit/form.html',
          width: 680,
          height: 480
      },
      type: 'pageEdit'
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  PageEdit.prototype.formSumbit = function (id) {
      var cls = this, validateState = false;
      // if(!base.vm){
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
  
      // JS方式提交表单
      $("#attrForm").submit();
  
      // utils.log(base.attrFormValidateState,'base.attrFormValidateState');
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          //var data = base.vm.$data;
          base.templateWindow.$("#"+id).html(cls.editor.html());
          //UM.getEditor('footerContext').destroy();
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 初始化函数
   * 在 app/entry/iframe-index.js 中显式调用
   */
  PageEdit.prototype.init = function () {
      var cls = this;
      //给top绑定事件
      // utils.log(cls.id);
      cls.createEditId().then(function () {
          $(doms.pageEdit).each(function () {
              var $this = $(this),
              disdel = $this.attr("_disdel");
  
              $this.mouseenter(function () {
  
                  // utils.log("PageFooter.prototype.mover");
                  // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
                  $this.attr("_mouseIn", 1);
                  // 创建虚框(可利用来改变容器高度)
                  cls.moveFrame.create(this.id);
                  // 创建组件操作菜单
                  cls.moduleLayer.create(this.id, cls.editJSON, 0);
  
                  if(disdel == "0") {
                      $this.css("cursor", "move");
                      $this.attr("title", "按住鼠标，可随意拖动。");
                      // 绑定移动事件
                      $this.draggable({
                          beforeStart: function() {
  
                          },
                          start: function() {
                              cls.moveFrame.removeAll();
                              cls.moduleLayer.removeAll();
                          },
                          stop: function() {
  
                          },
                          containment: 'parent',
                          distance: 1
                      });
                  }
  
  
              }).mouseleave(function () {
                  // 设置鼠标的状态,此状态值用于当鼠标移出组件区,进入操作菜单区域时对相关内容的显示控制
                  $this.attr({"_mouseIn":0,"title":""}).css("cursor","default");
                  // 移除相关的操作层和效果层
                  cls.moduleLayer.remove(this.id);
                  cls.moveFrame.remove(this.id);
                  cls.draggableBtn.remove(this.id);
              });
          });
      });
  };
  
  /**
   *  生成可编辑区id
   */
  PageEdit.prototype.createEditId = function () {
      var cls = this, dtd = Q.defer();
  
      $(doms.pageEdit).each(function () {
          var id = this.id;
          if (!id) {
              id = _.uniqueId('edit');
              $(this).attr('id', utils.createUniqueId('edit', id, cls.getEditIds()));
          }
      });
  
      dtd.resolve();
      return dtd.promise;
  };
  
  PageEdit.prototype.getEditIds = function () {
      var ids = [];
      $(doms.pageEdit).each(function () {
          if (this.id) {
              ids.push(this.id);
          }
      });
      return ids;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  PageEdit.prototype.initForm = function (id) {
      var cls = this;
      var tw = base.templateWindow;
      if (!tw) {
          base.alert('模板不存在，请检查配置！');
          return false;
      }
      var $edit = tw.$("#"+id);
      if ($edit.length == 0) {
          base.alert('模板编辑区对象不存在，请检查！');
          return false;
      }
  
  
      var editContext = utils.trim(tw.$("#"+id).html());
      utils.log('PageEdit.prototype.initForm editContext:', editContext);
      utils.log('PageEdit.prototype.initForm KindEditor:', KindEditor);
  
      cls.editor = KindEditor.create('#editContext', {
          resizeType: 1,
          allowPreviewEmoticons: false,
          allowImageUpload: false,
          items: [
              'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',
              'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'link']
      });
      cls.editor.html(editContext);
  
  
      // 初始化UMEditor编辑器
      // base.umeditor = UM.getEditor('footerContext', {
      //     //这里可以选择自己需要的工具按钮名称,此处仅选择如下七个
      //     toolbar: ['fullscreen source undo redo bold italic underline'],
      //     //focus时自动清空初始化时的内容
      //     autoClearinitialContent: true,
      //     //关闭字数统计
      //     wordCount: false,
      //     //关闭elementPath
      //     elementPathEnabled: false
      //     //给编辑器内部引入一个css文件
      //     // iframeCssUrl:
      //     //默认的编辑区域高度
      //     //initialFrameHeight:300
      //     //更多其他参数，请参考umeditor.config.js中的配置项
      // });
      // //对编辑器的操作最好在编辑器ready之后再做
      // base.umeditor.ready(function () {
      //     //设置编辑器的内容
      //     base.umeditor.setContent(footerContext);
      //     // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      //     // 销毁对象使用base.vm.$destroy()
      //     // base.vm = new Vue({
      //     //     el: '#attrForm',
      //     //     data: {
      //     //         footerContext: footerContext
      //     //     },
      //     //     methods: {
      //     //
      //     //     }
      //     // });
      //
      // });
  
      // 绑定验证表单
      $("#attrForm").validate({
          success: function () {
              // utils.log('form validate success!');
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              // utils.log('form validate fail!');
              base.attrFormValidateState = false;
              return false;
          }
      });
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  PageEdit.prototype.open = function (id) {
      var options = this.options;
      var cls = this;
      // var id = cls.id;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  PageEdit.prototype.test = function () {
  
  };
  
  
  base.plugin('pageEdit', new PageEdit());
  
  module.exports = PageEdit;
  

});

;/*!app/components/link-list-img/index.js*/
define('app/components/link-list-img/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var LinklistImg = function (options) {
      this.options = $.extend(true, LinklistImg.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'linksMgr';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'linkListImg',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: true,
              isMore: true,
              more: '更多+',
              imgHeight: 50,
              height: ''
          },
          label: require('app/common/labels').linkList
      };
  
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .list-images img{ width:<%= conf.imgWidth %>px; height: <%= conf.imgHeight %>px; }"
      };
  
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            <ul class=\"list-images ls-label clearfix\">\r\n                {{each list as el index}}\r\n                <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                    <a href=\"{{el.href}}\">\r\n                        <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"\r\n                             alt=\"{{el.title}}\"/>\r\n                        {{if el.isTitle}}\r\n                        <span class=\"img-title\">{{el.title}}</span>\r\n                        {{/if}}\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  LinklistImg.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/link-list-img/form.html',
          width: 600,
          height: 480
      },
      type: 'linkListImg'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  LinklistImg.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  LinklistImg.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  LinklistImg.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
      data.isMobile = base.isMobile;
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
          data.label.num = 4;
      }
      // 适配
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.label['length'] = utils.getFontLength(data.conf.width);
  
      }
      // 动态计算图片的宽高
      if (utils.isNul(data.conf.imgWidth)) {
          data.conf.imgWidth = data.conf.width - (data.conf.panelPadding * 2);
      }
  
      if (!excludeListData) {
          data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
          // 构造图片占位符代码
          var placeholderOpt = 'size=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&text=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
          if (data.conf.className == cls.moduleSetting.type) {
              data.placeholderOpt = placeholderOpt;
              data.placeholderClass = 'placeholder';
          } else {
              data.placeholderOpt = '';
              data.placeholderClass = '';
          }
      }
  
      // 构造标题更多链接
      if(!data.conf.isCustomMore) {
          cls.createMoreHref(data);
      }
  
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  LinklistImg.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  LinklistImg.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      // utils.log('LinklistImg.prototype.getHtmlAndModuleId:data>>>' + JSON.stringify(data.label));
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  LinklistImg.prototype.getModuleAttrData = function (moduleId) {
  
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // data.conf.wrapWidth = (data.conf.imgWidth + data.conf.paddingTop + data.conf.paddingLeft + data.conf.paddingBottom + data.conf.paddingRight) * (data.label.num * 2);
      // // 构造标题更多链接
      // data.conf.titleHref = config.getTitleHref(data.label.id);
  
      return data;
  };
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  LinklistImg.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  LinklistImg.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
  
      utils.log('LinklistImg LinklistImg.prototype.initForm  data: ',data);
  
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  LinklistImg.prototype.open = function () {
      var options = this.options;
      var id = 'linkListImg';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  LinklistImg.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var labelStr = utils.parseLabel(data.label);
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  LinklistImg.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  LinklistImg.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  LinklistImg.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  LinklistImg.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
  
      if(!options.conf.isCustomMore) {
          cls.createMoreHref(options);
      }
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      cls.formSubmitStatus = true;
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  LinklistImg.prototype.test = function () {
      // utils.log("LinklistImg test success!");
  };
  
  base.plugin('linkListImg', new LinklistImg());
  
  module.exports = LinklistImg;
  

});

;/*!app/components/link-list-text/index.js*/
define('app/components/link-list-text/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var LinklistText = function (options) {
      this.options = $.extend(true, LinklistText.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'linksMgr';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'linkListText',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: false,
              isMore: true,
              more: '更多+',
              paddingTop: 0,
              paddingLeft: 0,
              paddingBottom: 0,
              paddingRight: 0,
              titleHref:'#',
              isCustomMore: true
          },
          label: require('app/common/labels').linkList
  
      };
  
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
      }
  
      this.styleFixWidth = {
          'default': 82
      }
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n\r\n        <div class=\"list clearfix ls-label\">\r\n            <ul class=\"clearfix\">\r\n                {{each list as el index}}\r\n                <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                    <a href=\"{{el.href}}\">\r\n                        {{if conf.linkType=='img'}}\r\n                            <img src=\"{{el.imageLink}}\" alt=\"{{el.title}}\"/>\r\n                        {{/if}}\r\n                        <span class=\"img-title\">{{el.title}}</span>\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  LinklistText.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/link-list-text/form.html',
          width: 600,
          height: 480
      },
      type: 'linkListText'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  LinklistText.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  LinklistText.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 动态取得其 warpPadding 的值
      var $module = base.templateWindow.$('#' + curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  LinklistText.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  LinklistText.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length === 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
  
  
  
      cls.renderPanel(moduleId, data);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  LinklistText.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          data = utils.initModuleData(moduleId, cls.moduleSetting);
  
      // 构造标题更多链接
      //data.conf.titleHref = config.getTitleHref(data.label.id);
      return data;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  LinklistText.prototype.getData = function (options, isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
      data.list = mockData.getInfoList(data.label.num, data.label.length, data.label.dateFormat).data;
      data.isMobile = base.isMobile;
      if (isModule) {
          // 根据容器的宽度自动计算字符长度
          data.label.length = utils.getFontLength(data.conf.width);
          data.moduleId = utils.createModuleUniqueId();
      }
  
      // 构造标题更多链接
      if(!data.conf.isCustomMore) {
          cls.createMoreHref(data);
  
      }
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  LinklistText.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  LinklistText.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if(!options.conf.isCustomMore) {
          cls.createMoreHref(options);
      }
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  LinklistText.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  
  LinklistText.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  LinklistText.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  LinklistText.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  LinklistText.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          data = utils.initModuleData(moduleId, cls.moduleSetting);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  LinklistText.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var labelStr = utils.parseLabel(data.label);
          $panelHtml.find('.list>ul').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  LinklistText.prototype.test = function () {
      // utils.log("LinklistText test success!");
  };
  
  
  base.plugin('linkListText', new LinklistText());
  
  module.exports = LinklistText;
  

});

;/*!app/components/link-list-img-scroll/index.js*/
define('app/components/link-list-img-scroll/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var LinklistImgScroll = function (options) {
      this.options = $.extend(true, LinklistImgScroll.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'linksMgr';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'linkListImgScroll',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: false,
              more: '更多+',
              linkType: 'img',
              wrapWidth: null,
              height: 90,
              width: null,
              imgHeight: 60
          },
          label: require('app/common/labels').linkList
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-heading, .<%= moduleId %>_panel .panel-heading .title{ height:<%= conf.height %>px;}\r\n.<%= moduleId %>_panel .panel-body{ width: <%= conf.panelBodyWidth %>px;  height:<%= conf.height - 2 %>px;border-left-width: <%= conf.paenlBodyBorderLeftWidth %>px;}\r\n.<%= moduleId %>_panel .panel-body .ls-scroll{ height:<%= conf.height - 2 %>px;}\r\n.<%= moduleId %>_panel .panel-body .ls-scroll .scroll-wrap{  width: <%= conf.scrollWrapWidth %>px;height:<%= conf.height - 2 %>px;}\r\n.<%= moduleId %>_panel .panel-body .ls-scroll .scroll-body{ width: <%= conf.width * 2 %>px;}\r\n.<%= moduleId %>_panel .panel-body .ls-scroll .scroll-body li a img{ width: <%= conf.imgWidth - 8 %>px; height:<%= conf.imgHeight %>px; }"
      };
  
      // 样式处理适配处理方法
      this.styleAdapter = {
          'default': {
              init: function (data) {
                  data.conf.panelBodyWidth = data.conf.isTitle ? data.conf.width - 83 : data.conf.width - 4;
                  data.conf.scrollWrapWidth = data.conf.isTitle ? data.conf.width - 152 : data.conf.width - 70;
                  data.conf.paenlBodyBorderLeftWidth = data.conf.isTitle ? 0 : 1;
                  return data;
              }
          }
      };
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n    </div> <!--panel-heading-->\r\n    <div class=\"panel-body\" id=\"{{moduleId}}_linkList\">\r\n        <div class=\"ls-scroll clearfix\">\r\n            <span class=\"prev\"></span>\r\n            <span class=\"next\"></span>\r\n            <div class=\"scroll-wrap\">\r\n                <ul class=\"scroll-body clearfix ls-label\">\r\n                    {{each list as el index}}\r\n                    <li class=\"num{{index}}\">\r\n                        <a href=\"{{el.href}}\">\r\n                            <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"  alt=\"{{el.title}}\"/>\r\n                            <span class=\"img-title\">{{el.title}}</span>\r\n                        </a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 模板预编译
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  LinklistImgScroll.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/link-list-img-scroll/form.html',
          width: 600,
          height: 480
      },
      type: 'linkListImgScroll'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  LinklistImgScroll.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  LinklistImgScroll.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  LinklistImgScroll.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
      // 新组件
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.conf.textLen = utils.getFontLength(data.conf.width);
      }
  
      // 动态计算 panel-body 的宽度
      _.assign(data, cls.styleAdapter[data.conf.style].init(data));
  
      data.conf.panelBodyHeight = data.conf.height; // 修正高度
      if (utils.isNul(data.conf.imgWidth) ) {
          data.conf.imgWidth = parseInt((data.conf.scrollWrapWidth - 10) / 2) ;
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
          // 构造图片占位符代码
          data.placeholderOpt = 'size='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&text='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
      }
  
      // 构造标题更多链接
      if(!data.conf.isCustomMore) {
          cls.createMoreHref(data);
      }
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  LinklistImgScroll.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  LinklistImgScroll.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  LinklistImgScroll.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  LinklistImgScroll.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  LinklistImgScroll.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      utils.log('LinklistImgScroll LinklistImgScroll.prototype.initForm  data: ',data);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  LinklistImgScroll.prototype.open = function () {
      var options = this.options;
      var id = 'linkListImgScroll';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  LinklistImgScroll.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var labelStr = utils.parseLabel(data.label);
          $panelHtml.find('.scroll-body').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  LinklistImgScroll.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
  
  
  
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  LinklistImgScroll.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
      setTimeout(function () {
          Ls.www.scroll();
      }, 1000)
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  LinklistImgScroll.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  LinklistImgScroll.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if(!options.conf.isCustomMore) {
          cls.createMoreHref(options);
      }
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      cls.formSubmitStatus = true;
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  LinklistImgScroll.prototype.test = function () {
      // utils.log("LinklistImgScroll test success!");
  };
  
  base.plugin('linkListImgScroll', new LinklistImgScroll());
  
  module.exports = LinklistImgScroll;
  

});

;/*!app/components/info-headline-list/index.js*/
define('app/components/info-headline-list/index', function(require, exports, module) {

  /**
   * 文章信息列表
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var InfoHeadlineList = function (options) {
      this.options = $.extend({}, InfoHeadlineList.DEFAULTS, options);
      // this.config = base['config'];
      // this.win = new Artdialog();
      this.win = base['artdialog'];
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'infoHeadlineList',
          moduleId: 0,
          isMobile: false,
          list: {},
          conf: {
              isTitle: true,
              title: '组件标题',
              titleHref: '#',
              isMore:true,
              more: '更多+',
              style: 'default',
              height: 330
          },
          label: {
              label1: require('app/common/labels').docHeadlines,
              label2: require('app/common/labels').docList
          }
  
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
      };
  
      // 用于从控件中拖动到布局中 构造主体内容使用
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            {{each list.list1 as el index}}\r\n            <ul class=\"list1 clearfix ls-label1\">\r\n                <h2><a href=\"{{el.href}}\">{{el.title}}</a></h2>\r\n                {{if label.label1.isDetailed}}\r\n                <p class=\"remarks\">\r\n                    {{el.note}}\r\n                    {{if label.label1.isDetailed}}\r\n                    <a href=\"{{el.href}}\">{{label.label1.detailed}}</a>\r\n                    {{/if}}\r\n                </p>\r\n                {{/if}}\r\n            </ul>\r\n            {{/each}}\r\n            <ul class=\"list2 clearfix ls-label2\">\r\n                {{each list.list2 as el index}}\r\n                <li>\r\n                    <span class=\"date {{label.label2.isDate | displayFilter}}\">{{el.createDate}}</span>\r\n                    <a href=\"{{el.href}}\" target=\"{{el.target}}\">{{el.title}}</a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 用于从控件中拖动到布局中 构造module使用
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 编译模板,后面直接使用, 提高执行效率
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  InfoHeadlineList.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/info-headline-list/form.html',
          width: 600,
          height: 480
      },
      type: 'infoHeadlineList'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  InfoHeadlineList.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      // utils.log('InfoHeadlineList.prototype.create:obj>>>', obj);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  InfoHeadlineList.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          var tplWin = base.templateWindow;
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
  
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  InfoHeadlineList.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          data = utils.assignClone(cls.moduleSetting, options),
          label1 = data.label.label1,
          label2 = data.label.label2;
  
      if (isModule) {
          // 新组件
          data.moduleId = utils.createModuleUniqueId();
          data.label.label1['noteLength'] = 26;
          data.label.label2['num'] = 5;
      }
  
      if (isModule || base.IS_SORTABLE === true) {
          // 根据容器的宽度自动计算字符长度
          data.label.label1['length'] = utils.getFontLength(data.conf.width);
          data.label.label2['length'] = utils.getFontLength(data.conf.width);
      }
      // 是否挂载演示数据
      if (!excludeListData) {
          var mockList1 = mockData.getInfoList(label1.num, label1['length'], label1.dateFormat, label1.noteLength).data;
          if (!$.isArray(mockList1)) {
              mockList1 = [mockList1];
          }
          data.list.list1 = mockList1;
          data.list.list2 = mockData.getInfoList(label2.num, label2['length'], label2.dateFormat).data;
      }
  
      data.isMobile = base.isMobile;
  
      // 构造标题更多链接
      // data.conf.titleHref = config.getTitleHref(data.label.label2.id);
      cls.createMoreHref(data);
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  InfoHeadlineList.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  InfoHeadlineList.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  /**
   * 从html中获取相关内容来替换默认值,修改moduleSetting的值
   * @param  {[type]} moduleId [description]
   */
  InfoHeadlineList.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // utils.log('InfoHeadlineList.prototype.getModuleAttrData:data>>>', JSON.stringify(data));
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  InfoHeadlineList.prototype.getPanelHtml = function (options) {
      var cls = this;
      // utils.log('InfoHeadlineList.prototype.getPanelHtml.options', JSON.stringify(options));
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  InfoHeadlineList.prototype.initForm = function () {
      var cls = this, conf = cls.moduleSetting.conf;
      // var options = this.config.options;
      // utils.log('InfoHeadlineList.prototype.initForm >>>');
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      var tplWin = base.templateWindow;
  
      // 取得模板中的组件对象并解析相关属性值
      var $module = tplWin.$('#' + curEditModuleId);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange1: function (value) {
              this.label.label1.target = value;
          },
          onTargetChange2: function (value) {
              this.label.label2.target = value;
          },
          onStyleChange: function (value) {
              this.conf.style = value;
          },
          onDateFormatChange: function (value) {
              this.label.label2.dateFormat = value;
          },
          // 关联栏目
          associateNode: function () {
              // utils.log('cls.selectNodeWinUrl: ' + cls.selectNodeWinUrl);
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log("associateNode>>>", data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label["label1"].id = ids.join(',');
                              base.vm.label["label2"].id = ids.join(',');
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          isRelation1: function () {
              return utils.isNul(this.label.label1.id) || this.label.label1.id == 0;
          },
          isRelation2: function () {
              return utils.isNul(this.label.label2.id) || this.label.label2.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  InfoHeadlineList.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  InfoHeadlineList.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.label1.id) || utils.isNul(data.label.label2.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var label1 = utils.parseLabel(data.label.label1);
          var label2 = utils.parseLabel(data.label.label2);
          $panelHtml.find('.list1').replaceWith(label1);
          $panelHtml.find('.list2').html(label2);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染组件
   * @param  {[type]} moduleId [description]
   * @param  {[type]} num      [description]
   * @return {[type]}          [description]
   */
  InfoHeadlineList.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
  
  
  
      cls.renderPanel(moduleId, data)
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  InfoHeadlineList.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  InfoHeadlineList.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  InfoHeadlineList.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  InfoHeadlineList.prototype.test = function () {
  };
  
  base.plugin('infoHeadlineList', new InfoHeadlineList());
  
  module.exports = InfoHeadlineList;
  

});

;/*!app/components/info-img-list/index.js*/
define('app/components/info-img-list/index', function(require, exports, module) {

  /**
   * 内容图片+信息列表
   * Created by doocal on 2017-3-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var InfoImgList = function (options) {
      this.options = $.extend({}, InfoImgList.DEFAULTS, options);
      this.win = base['artdialog'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'infoImgList',
          moduleId: 0,
          isMobile: false,
          list: {},
          conf: {
              style: 'default',
              isTitle: true,
              title: '标题',
              titleHref: '#',
              isMore:true,
              more: '更多+',
              height: 356,
              imgWidth: 100,
              imgHeight: 80
          },
          label: {
              label1: require('app/common/labels').docImgNote,
              label2: require('app/common/labels').docList
          }
      };
  // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body .list1 { height:<%= conf.imgHeight %>px; }\r\n.<%= moduleId %>_panel .panel-body .list1 li a img{ width: <%= conf.imgWidth%>px; height:<%= conf.imgHeight %>px; }\r\n.<%= moduleId %>_panel .panel-body .list2 {  }"
      };
  
      // 用于从控件中拖动到布局中 构造主体内容使用
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body clearfix\">\r\n        <div class=\"panel-body-inner\">\r\n            <ul class=\"list1 clearfix ls-label1\">\r\n                {{each list.docList1 as el index}}\r\n                <li>\r\n                    <a href=\"#\" class=\"img\">\r\n                        <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"\r\n                             alt=\"{{el.title}}\">\r\n                    </a>\r\n                    <h4 class=\"title\"><a href=\"#\">{{el.title}}</a></h4>\r\n                    <p class=\"note\">{{el.note}}</p>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n\r\n            <ul class=\"list2 clearfix ls-label2\">\r\n                {{each list.docList2 as el index}}\r\n                <li><span class=\"date right {{label.label2.isDate | displayShow}}\">{{el.createDate}}</span>\r\n                    <a href=\"{{el.href}}\" target=\"{{label.label2.target}}\">{{el.title}}</a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 用于从控件中拖动到布局中 构造module使用
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 编译模板,后面直接使用, 提高执行效率
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  InfoImgList.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/info-img-list/form.html',
          width: 600,
          height: 480
      },
      type: 'infoImgList'
  };
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  InfoImgList.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  InfoImgList.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     var tplWin = base.templateWindow;
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      //
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  InfoImgList.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
      var label1 = data.label.label1,
          label2 = data.label.label2;
  
      if (isModule) {
          label1.num = 1;
          label2.num = 5;
          data.moduleId = utils.createModuleUniqueId();
      }
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          label1['length'] = utils.getFontLength(data.conf.width - (data.conf.width / 4));
          // 图片大小适配
          //label1.width = parseInt(data.conf.width / 4);
          // label1.height = parseInt(data.conf.width / 4);
          label2['length'] = utils.getFontLength(data.conf.width);
      }
      // 动态计算图片的宽高
      if (utils.isNul(data.conf.imgWidth) ) {
          data.conf.imgWidth = 80 ;
      }
      // 是否挂载演示数据
      if (!excludeListData) {
          var mockList1 = mockData.getInfoList(label1.num, label1['length'], label1.dateFormat, label1.noteLength).data;
          if (!$.isArray(mockList1)) {
              mockList1 = [mockList1];
          }
          data.list.docList1 = mockList1;
          data.list.docList2 = mockData.getInfoList(label2.num, label2['length'], label2.dateFormat).data;
          // 构造图片占位符代码
          data.placeholderOpt = 'size='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&text='+data.conf.imgWidth+'x'+data.conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
      }
  
      data.isMobile = base.isMobile;
  
      // 构造标题更多链接
      cls.createMoreHref(data);
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  InfoImgList.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  
  InfoImgList.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
  
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  
  /**
   * 从html中获取相关内容来替换默认值,修改moduleSetting的值
   * @param  {[type]} moduleId [description]
   */
  InfoImgList.prototype.getModuleAttrData = function (moduleId) {
  
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      return data;
  };
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  InfoImgList.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  InfoImgList.prototype.initForm = function () {
      var cls = this, conf = cls.moduleSetting.conf;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      var tplWin = base.templateWindow;
  
      // 取得模板中的组件对象并解析相关属性值
      var $module = tplWin.$('#' + curEditModuleId);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange1: function (value) {
              this.label.label1.target = value;
          },
          onTargetChange2: function (value) {
              this.label.label2.target = value;
          },
          onStyleChange: function (value) {
              this.conf.style = value;
          },
          onDateFormatChange: function (value) {
              this.label.label2.dateFormat = value;
          },
          // 关联栏目
          associateNode: function (type) {
              // utils.log('cls.selectNodeWinUrl: ' + cls.selectNodeWinUrl);
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log("associateNode>>>", data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
  
                              base.vm.label["label1"].id = ids.join(',');
                              base.vm.label["label2"].id = ids.join(',');
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          isRelation1: function () {
              return utils.isNul(this.label.label1.id) || this.label.label1.id == 0;
          },
          isRelation2: function () {
              return utils.isNul(this.label.label2.id) || this.label.label2.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  InfoImgList.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  InfoImgList.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.label1.id) || utils.isNul(data.label.label2.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var label1 = utils.parseLabel(data.label.label1);
          var label2 = utils.parseLabel(data.label.label2);
          $panelHtml.find('.list1').html(label1);
          $panelHtml.find('.list2').html(label2);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染组件
   * @param  {[type]} moduleId [description]
   * @param  {[type]} num      [description]
   * @return {[type]}          [description]
   */
  InfoImgList.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
  
  
  
      cls.renderPanel(moduleId, data);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  InfoImgList.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  InfoImgList.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  InfoImgList.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  InfoImgList.prototype.test = function () {
  };
  
  base.plugin('infoImgList', new InfoImgList());
  
  module.exports = InfoImgList;

});

;/*!app/components/info-img-note/index.js*/
define('app/components/info-img-note/index', function(require, exports, module) {

  /**
   * 文章信息列表
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var InfoImgNote = function (options) {
      this.options = $.extend({}, InfoImgNote.DEFAULTS, options);
      this.win = base['artdialog'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'infoImgNote',
          moduleId: 0,
          isMobile: false,
          list: [],
          conf: {
              style: 'default',
              isTitle: true,
              title: '组件标题',
              titleHref: '#',
              isMore: true,
              more: '更多+',
              imgHeight: 105,
              height: 310
          },
          label: require('app/common/labels').docImgNote
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body .list-images {}\r\n.<%= moduleId %>_panel .panel-body li { margin-left: 15px; }\r\n.<%= moduleId %>_panel .panel-body li:first-child { margin-left: 0; }\r\n.<%= moduleId %>_panel .panel-body li .title a{ width: <%= conf.imgWidth %>px; display: block; }\r\n.<%= moduleId %>_panel .panel-body li .note { width: <%= conf.imgWidth %>px ; }\r\n.<%= moduleId %>_panel .panel-body li img { width: <%= conf.imgWidth %>px ; height: <%= conf.imgHeight %>px; }"
      };
  
      // 用于从控件中拖动到布局中 构造主体内容使用
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            <ul class=\"list-images clearfix ls-label\">\r\n                {{each list as el index}}\r\n                <li>\r\n                    <a href=\"#\" class=\"img\">\r\n                        <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"\r\n                             alt=\"{{el.title}}\">\r\n                    </a>\r\n                    <h4 class=\"title\"><a href=\"#\">{{el.title}}</a></h4>\r\n                    <p class=\"note\">{{el.note}}</p>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 用于从控件中拖动到布局中 构造module使用
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 编译模板,后面直接使用, 提高执行效率
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  InfoImgNote.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/info-img-note/form.html',
          width: 600,
          height: 480
      },
      type: 'infoImgNote'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  InfoImgNote.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  InfoImgNote.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     var tplWin = base.templateWindow;
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      //
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @param excludeListData 排除 演示数据
   * @returns {*}
   */
  InfoImgNote.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          // $module = $('#' + moduleId),
          data = utils.assignClone(cls.moduleSetting, options);
  
      data.isMobile = base.isMobile;
      // 新组件
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
          data.label.num = 4;
      }
  
      // 新组件 或 拖动位置发生变化时
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          // data.label['length'] = 12;
          // data.label.noteLength = 26;
      }
  
      // 动态计算图片的宽高
      if (utils.isNul(data.conf.imgWidth)) {
          data.conf.imgWidth = parseInt((data.conf.width - (data.conf.panelPadding * 2 ) - 45) / 4);
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat, data.label.noteLength).data;
          // 构造图片占位符代码
          data.placeholderOpt = 'size=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&text=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
      }
  
      // 构造标题更多链接
      cls.createMoreHref(data);
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  InfoImgNote.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  InfoImgNote.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  /**
   * 图片宽度计算公式,默认3张图片计算：模板宽度-(li margin-left(15px)*2 + (3 * li padding(20)) + (panelPadding*2)) / 3 张图片
   * 图片高度计算公式:根据宽度计算黄金分割点 ((Math.sqrt(5)-1)/2) * imgWidth
   */
  InfoImgNote.prototype.getImgWidth = function (num, data) {
      if (!utils.isNul(data)) {
          num = utils.isNul(num) ? num : 3;
          // utils.log('data.conf.panelPadding>>>', (data.conf.width - 2 - (data.conf.panelPadding + (num * 15))) / num)
          var _imgWidth = ((data.conf.width - 2 - (data.conf.panelPadding + ((num - 1) * 15))) / num) >> 0,
              _imgHeight = (((Math.sqrt(5) - 1) / 2) * _imgWidth).toFixed(1);
          return [_imgWidth, _imgHeight];
      }
      return [0, 0];
  };
  
  /**
   * 从html中获取相关内容来替换默认值,修改moduleSetting的值
   * @param  {[type]} moduleId [description]
   */
  InfoImgNote.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  InfoImgNote.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      // var compileTpl1 = template.compile(cls.panelTpl);
      // var html1 = compileTpl1(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  InfoImgNote.prototype.initForm = function () {
      var cls = this, conf = cls.moduleSetting.conf;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      var tplWin = base.templateWindow;
  
      // 取得模板中的组件对象并解析相关属性值
      var $module = tplWin.$('#' + curEditModuleId);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange: function (value) {
              this.label.target = value;
          },
          onDateFormatChange: function (value) {
              this.label.dateFormat = value;
          },
          // 关联栏目
          associateNode: function () {
              // utils.log('cls.selectNodeWinUrl: ' + cls.selectNodeWinUrl);
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  InfoImgNote.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  InfoImgNote.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var labelStr = utils.parseLabel(data.label);
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染组件
   * @param  {[type]} moduleId [description]
   * @param  {[type]} num      [description]
   * @return {[type]}          [description]
   */
  InfoImgNote.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
  
  
      cls.renderPanel(moduleId, data);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  InfoImgNote.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
      Ls.www.scroll();
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  InfoImgNote.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  InfoImgNote.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      cls.createMoreHref(options);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  InfoImgNote.prototype.test = function () {
  };
  
  base.plugin('infoImgNote', new InfoImgNote());
  
  module.exports = InfoImgNote;
  

});

;/*!app/components/img-list/index.js*/
define('app/components/img-list/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  
  var ImgList = function (options) {
      this.options = $.extend(true, ImgList.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'imgList',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: false,
              target: '_blank',
              isMore: true,
              more: '更多+',
              width: null,
              height: 260,
              panelPadding: null,
              wrapWidth: '',
              imgWidth: null,
              imgHeight: 160
          },
          list: [],
          label: require('app/common/labels').docImgList
  
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n\r\n.<%= moduleId %>_panel .panel-body .scroll-wrap{ width: <%= conf.width - (conf.panelPadding * 2) %>px; overflow:hidden; position:relative;}\r\n.<%= moduleId %>_panel .panel-body .scroll-body{ width: <%= (conf.imgWidth + 30) * (conf.num) %>px;}\r\n.<%= moduleId %>_panel .panel-body .scroll-body li a .title{  width: <%= conf.imgWidth %>px;}\r\n.<%= moduleId %>_panel .panel-body ul li a img{  width: <%= conf.imgWidth %>px; height: <%= conf.imgHeight %>px}"
      };
  
      this.styleFixWidth = {
          default: 0
      };
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"ls-scroll clearfix\" data-setting=\"{autoScroll:{{conf.isScroll?'true':'false'}}}\">\r\n            <span class=\"prev\"></span>\r\n            <span class=\"next\"></span>\r\n            <div class=\"scroll-wrap\">\r\n                <ul class=\"scroll-body clearfix ls-label list-images\">\r\n                    {{each list as el index}}\r\n                    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                        <a href=\"{{el.href}}\">\r\n                            <img src=\"{{el.imageLink}}\"  options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\" alt=\"{{el.title}}\"/>\r\n                            <span class=\"title\">{{el.title}}</span>\r\n                        </a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 模板预编译
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  ImgList.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/img-list/form.html',
          width: 600,
          height: 480
      },
      type: 'imgList'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  ImgList.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  ImgList.prototype.formSumbit = function () {
      var cls = this, validateState = false;
      // utils.log("ImgList.prototype.formSumbit >>>");
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @param excludeListData 排除 演示数据
   * @returns {*}
   */
  ImgList.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          moduleId = options.moduleId,
          $module = $('#' + moduleId),
          data = utils.assignClone(cls.moduleSetting, options);
  
      //
      data.isMobile = base.isMobile;
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
      // 适配
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.label['length'] = utils.getFontLength(data.conf.width);
      }
      if (utils.isNul(data.conf.imgWidth)) {
          data.conf.imgWidth = parseInt((data.conf.width - (data.conf.panelPadding * 2 ) - 45) / 4);
      }
  
      data.conf.num = data.label.num; // 记录数量,用于 css 的计算
      // 是否挂载演示数据
      if (!excludeListData) {
          data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
          // 构造图片占位符代码
          var placeholderOpt = 'size=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&text=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&bgcolor=#F3F3F3&color=#cccccc';
          //
          if (data.conf.className == 'imgList') {
              data.placeholderOpt = placeholderOpt;
              data.placeholderClass = 'placeholder';
          }else{
              data.placeholderOpt = '';
              data.placeholderClass = '';
          }
  
  
      }
  
      // 构造标题更多链接
      cls.createMoreHref(data);
  
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  ImgList.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  ImgList.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  ImgList.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  ImgList.prototype.getPanelHtml = function (options) {
  
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  ImgList.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 动态取得其 warpPadding 的值
      var $module = base.templateWindow.$('#' + curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange: function (value) {
              this.label.target = value;
          },
          onStyleChange: function (value) {
              this.conf.style = value;
          },
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  ImgList.prototype.open = function () {
      var options = this.options;
      var id = 'imgList';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  ImgList.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var labelStr = utils.parseLabel(data.label);
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  ImgList.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
      //提取自定义组件样式
      utils.addCustomStyleList(base, data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  ImgList.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
      setTimeout(function () {
          Ls.www.scroll();
      }, 1000)
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  ImgList.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  ImgList.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
  
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      cls.formSubmitStatus = true;
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  ImgList.prototype.test = function () {
      // utils.log("ImgList test success!");
  };
  
  base.plugin('imgList', new ImgList());
  
  module.exports = ImgList;
  

});

;/*!app/components/html-edit/index.js*/
define('app/components/html-edit/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var HtmlEdit = function (options) {
      this.options = utils.assignClone(HtmlEdit.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'linksMgr';
      this.columnId = utils.getQueryString('columnId');
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'htmlEdit',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: true,
              more: '更多+',
              fontSize: 14,
              lineHeight: 150,
              isShowDetail: true,
              detailText: '查看详细',
              detailUrl: '',
              titleHref:'#'
          },
          label: {}
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body .html-body{ line-height:<%= conf.lineHeight %>%; font-size:<%= conf.fontSize %>px;  }"
      };
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"html-body\">\r\n            <span class=\"htmledit\">{{#html}} </span>{{ if conf.isShowDetail }}<a href=\"{{ conf.detailUrl}}\" target=\"_blank\" class=\"detail\">{{\r\n            conf.detailText}} </a>{{/if}}\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          ' > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  HtmlEdit.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 - 自定义内容',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/html-edit/form.html',
          width: 660,
          height: 480
      },
      type: 'htmlEdit'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  HtmlEdit.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  HtmlEdit.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  HtmlEdit.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
  
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
  
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          //data.label['length'] = utils.getFontLength(data.conf.width);
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          // data.html = mockData.getPageInfo(data.conf.length).data;
          var length = data.conf["length"];
          data.html = mockData.getPageInfo(length ? length : 160).data;
      }
  
      return data;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  HtmlEdit.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  HtmlEdit.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      var html = $('#' + moduleId).find(".htmledit").html();
      data.html = (html + "").replace(/<br\s*\/?>/gi, "\n").replace(/&ensp;/g, " ");
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  HtmlEdit.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  HtmlEdit.prototype.initForm = function () {
      var cls = this;
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
  
      var _methods = {};
      var _computed = {
          // a computed getter
          isRelation: function () {
              // return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  HtmlEdit.prototype.open = function () {
      var options = this.options;
      var id = 'htmlEdit';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  // HtmlEdit.prototype.parseSave = function (options) {
  //     var cls = this;
  //     var data = utils.assignClone1(cls.moduleSetting, options);
  //     // 1. 取得panel的html内容
  //     var panelHtml = cls.getPanelHtml(options);
  //     var $panelHtml = $(panelHtml);
  //     // 解析标签
  //     var labelStr = utils.parseLabel(data.label);
  //     // 将解析后的标签回写到 panel 中
  //     $panelHtml.find('ul').html(labelStr);
  //     //$module.html($panelHtml[0].outerHTML);
  //     // 返回 panel 的 HTML
  //     return $panelHtml[0].outerHTML;
  // };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  HtmlEdit.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
  
  
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  HtmlEdit.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  HtmlEdit.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  HtmlEdit.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          // $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      data.html = options.html.replace(/(\r)*\n/g, "<br/>").replace(/\s/g, "&ensp;");
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
      cls.formSubmitStatus = true;
  };
  
  
  HtmlEdit.prototype.test = function () {
      // utils.log("HtmlEdit test success!");
  };
  
  base.plugin('htmlEdit', new HtmlEdit());
  
  module.exports = HtmlEdit;
  

});

;/*!app/components/html-link-edit/index.js*/
define('app/components/html-link-edit/index', function(require, exports, module) {

  /**
   * 自定义链接
   * Created by doocal on 2017-3-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var HtmlLinkEdit = function (options) {
      this.options = $.extend({}, HtmlLinkEdit.DEFAULTS, options);
      this.win = base['artdialog'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'htmlLinkEdit',
          moduleId: 0,
          isMobile: false,
          list: {},
          conf: {
              style: 'default',
              isTitle: false,
              isMore: false,
              title: '组件标题',
              titleHref: '#',
              more: '更多+'
          },
          label: {
              num: 5,
              length: 10
          }
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
      }
  
      // 用于从控件中拖动到布局中 构造主体内容使用
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n\r\n        <div class=\"list clearfix\">\r\n            <ul class=\"clearfix ls-label \">\r\n                {{each conf.list as el index}}\r\n                <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                    <a href=\"{{el.href}}\" target=\"{{el.target}}\">\r\n                        {{if conf.linkType=='img'}}\r\n                            <img src=\"{{el.imageLink}}\" alt=\"{{el.name}}\"/>\r\n                        {{/if}}\r\n                        <span class=\"img-title\">{{el.name}}</span>\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 用于从控件中拖动到布局中 构造module使用
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      // 编译模板,后面直接使用, 提高执行效率
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  HtmlLinkEdit.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源
          url: '/assets/design/form/app/components/html-link-edit/form.html',
          width: 800,
          height: 480
      },
      type: 'htmlLinkEdit'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  HtmlLinkEdit.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  HtmlLinkEdit.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
  
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  HtmlLinkEdit.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          moduleId = options.moduleId,
          // $module = $('#' + moduleId),
          data = utils.assignClone(cls.moduleSetting, options);
  
      var conf = data.conf;
      data.isMobile = base.isMobile;
      // 适配
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          conf['length'] = utils.getFontLength(conf.width - (conf.width / 4));
      }
      if (isModule) {
          // 新组件
          data.moduleId = utils.createModuleUniqueId();
          data.conf.list = mockData.getMenuList(conf.num, conf['length']).data;
      } else {
          // 不是新组件
          if (utils.isNul(data.conf.list)) {
              // 从页面上取
              // utils.log('HtmlLinkEdit.prototype.getData get data by html');
              if ($('li>a', '#' + moduleId).length > 0) {
                  data.conf.list = [];
                  $('li>a', '#' + moduleId).each(function () {
                      var el = $(this);
                      var menu = {};
                      menu.name = _.trim(el.text());
                      menu.href = el.attr('href');
                      menu.target = el.attr('target') || '_blank';
                      menu.isShow = el.css('display') == 'none' ? false : true;
                      data.conf.list.push(menu);
                  });
              } else {
                  data.conf.list = mockData.getMenuList(conf.num, conf['length']).data;
                  // utils.log('HtmlLinkEdit.prototype.getData data.conf.list',data.conf.list);
              }
  
          }
      }
  
      return data;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  HtmlLinkEdit.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  
  /**
   * 从html中获取相关内容来替换默认值,修改moduleSetting的值
   * @param  {[type]} moduleId [description]
   */
  HtmlLinkEdit.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  HtmlLinkEdit.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  HtmlLinkEdit.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      // utils.log('HtmlLinkEdit.prototype.initForm data',data);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          add: function () {
              this.conf.list.push({
                  name: '',
                  href: '#',
                  target: '_self',
                  isShow: true
              });
          },
          remove: function (index) {
              this.conf.list.splice(index, 1);
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              // return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
      var fixHelper = function (e, ui) {
          ui.children('td').each(function () {
              //在拖动时，拖动行的cell（单元格）宽度会发生改变。在这里做了处理就没问题了
              $(this).width($(this).width());
          });
          return ui;
      };
  
      // 设置tbody中的tr可以调整前后顺序
      $('#attrFormTBody').sortable({
          helper: fixHelper,
          containment: 'parent',
          axis: "y",
          handle: ".movehandler",
          placeholder: 'ui-state-highlight',
          start: function (e, ui) {
              //拖动时的行，要用ui.helper
              ui.helper.css({"background": "#FCF2D1"});
              return ui;
          },
          stop: function (e, ui) {
              ui.item.css({"background": "#FFFFFF"});
              var data = base.vm.$data;
              var newData = [];
              $('#attrFormTBody > tr').each(function () {
                  var el = $(this);
                  var id = this.id;
                  var arrIndex = id.substring(3);
                  var nd = data.conf.list[arrIndex];
                  if (!utils.isNul(nd))
                      newData.push(nd);
              });
              base.vm.conf.list = newData;
              return ui;
          },
          change: function (event, ui) {
  
  
          }
      }).disableSelection();
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  HtmlLinkEdit.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  // HtmlLinkEdit.prototype.parseSave = function (options) {
  //     var cls = this;
  //
  //     // var data = utils.assignClone1(cls.moduleSetting, options);
  //
  //     // 1. 取得panel的html内容
  //     var panelHtml = cls.getPanelHtml(data);
  //
  //     var $panelHtml = $(panelHtml);
  //     var docList1 = utils.parseLabel(data.label.label1);
  //     $panelHtml.find('.list1').html(docList1);
  //
  //     return $panelHtml[0].outerHTML;
  // };
  
  /**
   * 渲染组件
   * @param  {[type]} moduleId [description]
   * @param  {[type]} num      [description]
   * @return {[type]}          [description]
   */
  HtmlLinkEdit.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      cls.renderPanel(moduleId, data)
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  HtmlLinkEdit.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  HtmlLinkEdit.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  HtmlLinkEdit.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this,
          $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  HtmlLinkEdit.prototype.test = function () {
  };
  
  base.plugin('htmlLinkEdit', new HtmlLinkEdit());
  
  module.exports = HtmlLinkEdit;
  

});

;/*!app/components/friendship-link/index.js*/
define('app/components/friendship-link/index', function(require, exports, module) {

  /**
   * Created by doocal on 2017-5-4.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var FriendshipLink = function (options) {
      this.options = $.extend(true, FriendshipLink.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'linksMgr';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'friendshipLink',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: false,
              isMore: true,
              more: '更多+',
              paddingTop: 0,
              paddingLeft: 0,
              paddingBottom: 0,
              paddingRight: 0
          },
          label: require('app/common/labels').linkList
  
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({}, commonModuleSetting, this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .friendship-link dl dt {width: <%=conf.width%>px;height: <%=conf.height%>px;}"
      };
  
      this.styleFixWidth = {
          'default': 82
      }
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n\r\n        <div class=\"friendship-link clearfix myLinks\">\r\n            <dl class=\"select\">\r\n                <dt>{{conf.linkTitle}}</dt>\r\n                <dd>\r\n                    <ul class=\"ls-label\">\r\n                        {{each list as el index}}\r\n                        <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                            <a href=\"{{el.href}}\">\r\n                                <span class=\"img-title\">{{el.title}}</span>\r\n                            </a>\r\n                        </li>\r\n                        {{/each}}\r\n                    </ul>\r\n                </dd>\r\n            </dl>\r\n            <div class=\"clear\"></div>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  FriendshipLink.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/friendship-link/form.html',
          width: 600,
          height: 480
      },
      type: 'friendshipLink'
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  FriendshipLink.prototype.open = function () {
      var options = this.options;
      var id = this.moduleSetting.conf.type;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  FriendshipLink.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 动态取得其 warpPadding 的值
      var $module = base.templateWindow.$('#' + curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
  
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  FriendshipLink.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  FriendshipLink.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length === 0) {
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
  
  
      cls.renderPanel(moduleId, data);
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  FriendshipLink.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          data = utils.initModuleData(moduleId, cls.moduleSetting);
  
      // 构造标题更多链接
      //data.conf.titleHref = config.getTitleHref(data.label.id);
      return data;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  FriendshipLink.prototype.getData = function (options, isModule) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
      // utils.log('FriendshipLink.prototype.getData:', data)
      data.list = mockData.getInfoList(data.label.num, data.label.length, data.label.dateFormat).data;
      data.isMobile = base.isMobile;
      if (isModule) {
          // 根据容器的宽度自动计算字符长度
          data.label.length = utils.getFontLength(data.conf.width);
          data.moduleId = utils.createModuleUniqueId();
      }
  
      // 构造标题更多链接
      cls.createMoreHref(data);
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  FriendshipLink.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  FriendshipLink.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      cls.createMoreHref(options);
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      cls.renderPanel(moduleId, options);
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  FriendshipLink.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  
  FriendshipLink.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,
          moduleId: data.moduleId
      };
  };
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  FriendshipLink.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  FriendshipLink.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  FriendshipLink.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          data = utils.initModuleData(moduleId, cls.moduleSetting);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  
      setTimeout(function () {
          Ls.www.myLinks();
      },100)
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  FriendshipLink.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var labelStr = utils.parseLabel(data.label);
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  FriendshipLink.prototype.test = function () {
      // utils.log("FriendshipLink test success!");
  };
  
  
  base.plugin('friendshipLink', new FriendshipLink());
  
  module.exports = FriendshipLink;
  

});

;/*!app/components/module-list/moduleList.js*/
define('app/components/module-list/moduleList', function(require, exports, module) {

  
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  module.exports = {
      moduleLibs: [{
          name: '文章列表',
          className: 'moduleIcon moduleIcon-infoList',
          img:'',
          type:'infoList',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '头条信息',
          className: 'moduleIcon moduleIcon-infoHeadlineList',
          img:'',
          type:'infoHeadlineList',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '图文列表',
          className: 'moduleIcon moduleIcon-infoImgList',
          img:'',
          type:'infoImgList',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '单幅图片',
          className: 'moduleIcon moduleIcon-singleImage',
          img:'',
          type:'singleImage',
          active:false,
          preview:'',
          category: 'CATE_IMG'
      },{
          name: '图片列表',
          className: 'moduleIcon moduleIcon-imgList',
          img:'',
          type:'imgList',
          active:false,
          preview:'',
          category: 'CATE_IMG'
      },{
          name: '图片摘要',
          className: 'moduleIcon moduleIcon-infoImgNote',
          img:'',
          type:'infoImgNote',
          active:false,
          preview:'',
          category: 'CATE_IMG'
      },{
          name: '焦点图片',
          className: 'moduleIcon moduleIcon-carousel',
          img:'',
          type:'carousel',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '滚动图片',
          className: 'moduleIcon moduleIcon-scrollImages',
          img:'',
          type:'scrollImages',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '文字链接',
          className: 'moduleIcon moduleIcon-linkListText',
          img:'',
          type:'linkListText',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '图片链接',
          className: 'moduleIcon moduleIcon-linkListImg',
          img:'',
          type:'linkListImg',
          active:false,
          preview:'',
          category: 'CATE_IMG'
      },{
          name: '滚动链图',
          className: 'moduleIcon moduleIcon-linkListImgScroll',
          img:'',
          type:'linkListImgScroll',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '水平选项卡',
          className: 'moduleIcon moduleIcon-infoTabs',
          img:'',
          type:'infoTabs',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '自定义链接',
          className: 'moduleIcon moduleIcon-htmlLinkEdit',
          img:'',
          type:'htmlLinkEdit',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '自定义内容',
          className: 'moduleIcon moduleIcon-htmlEdit',
          img:'',
          type:'htmlEdit',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '调查列表',
          className: 'moduleIcon moduleIcon-vote',
          img:'',
          type:'vote',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '视频列表',
          className: 'moduleIcon moduleIcon-videoPlay',
          img:'',
          type:'videoPlay',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '竖直选项卡',
          className: 'moduleIcon moduleIcon-tabsContent',
          img:'',
          type:'tabsContent',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '选项卡+大标题',
          className: 'moduleIcon moduleIcon-infoTabsHeadline',
          img:'',
          type:'infoTabsHeadline',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '选项卡+摘要',
          className: 'moduleIcon moduleIcon-docHeadlinesTabs',
          img:'',
          type:'docHeadlinesTabs',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '图片无缝滚动',
          className: 'moduleIcon moduleIcon-imgListMarquee',
          img:'',
          type:'imgListMarquee',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '下载列表',
          className: 'moduleIcon moduleIcon-fileDownloadList',
          img:'',
          type:'fileDownloadList',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '文字滚动',
          className: 'moduleIcon moduleIcon-flipScreenMarquee',
          img:'',
          type:'flipScreenMarquee',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '图片切换+文字列表',
          className: 'moduleIcon moduleIcon-imgDocList',
          img:'',
          type:'imgDocList',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '调查列表+链接',
          className: 'moduleIcon moduleIcon-linkSurvey',
          img:'',
          type:'linkSurvey',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '办事指南',
          className: 'moduleIcon moduleIcon-onlineNavItem',
          img:'',
          type:'onlineNavItem',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '视频+文字列表',
          className: 'moduleIcon moduleIcon-videoCarousel',
          img:'',
          type:'videoCarousel',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '链图无缝滚动',
          className: 'moduleIcon moduleIcon-linkImgMarquee',
          img:'',
          type:'linkImgMarquee',
          active:false,
          preview:'',
          category: 'OTHER'
      },{
          name: '链接摘要',
          className: 'moduleIcon moduleIcon-linkNote',
          img:'',
          type:'linkNote',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '民意征集+链接',
          className: 'moduleIcon moduleIcon-linkCollect',
          img:'',
          type:'linkCollect',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '文字列表+链接',
          className: 'moduleIcon moduleIcon-linkDocList',
          img:'',
          type:'linkDocList',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      },{
          name: '通用广告位',
          className: 'moduleIcon moduleIcon-linkList',
          img:'',
          type:'linkList',
          active:false,
          preview:'',
          category: 'CATE_TEXT'
      }],
      /**
       * 获取当前模板可用的组件对象数据
       */
      getAvailableComponents: function (options) {
          // 用于本地单元测试使用
          if(options && options.test === true){
              base.AVAILABLE_COMPONENT_LIST = ['infoList','carousel','infoTabs']
          }
          // 1.取出当前可用组件列表数组
          var avaComp = base.AVAILABLE_COMPONENT_LIST;
          var cls = this;
          var avaCompArr = {};
          var TEXT = [],IMG=[],OTHER=[];
          if(avaComp && avaComp.length > 0){
              _.forEach(avaComp,function (value) {
                  var item = _.filter(cls.moduleLibs,{type:value});
                  if(item && _.isObject(item[0])){
                      if(item[0].category=='CATE_TEXT') {
                          TEXT.push(item[0]);
                      }else if(item[0].category=='CATE_IMG') {
                          IMG.push(item[0]);
                      }else if(item[0].category=='OTHER') {
                          OTHER.push(item[0]);
                      }
  
                      // avaCompArr.push(item[0]);
                  }
              });
              utils.log('文字类：',TEXT);
              utils.log('图片类：',IMG);
              utils.log('其他类：',OTHER);
  
              avaCompArr = {
                  TEXT: TEXT,
                  IMG: IMG,
                  OTHER: OTHER
              };
          }else{
              _.forEach(cls.moduleLibs,function (item) {
                  if(item.category=='CATE_TEXT') {
                      TEXT.push(item);
                  }else if(item[0].category=='CATE_IMG') {
                      IMG.push(item);
                  }else if(item.category=='OTHER') {
                      OTHER.push(item);
                  }
              });
              avaCompArr = {
                  TEXT: TEXT,
                  IMG: IMG,
                  OTHER: OTHER
              };
              //avaCompArr = cls.moduleLibs;
          }
          return avaCompArr;
  
      }
  };

});

;/*!app/components/module-list/index.js*/
define('app/components/module-list/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  var db = require('app/common/db');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var Q = require('node_modules/q/q');
  var moduleListObj = require('app/components/module-list/moduleList');
  
  /**
   * 组件列表窗口类
   * @param options
   * @constructor
   */
  var ModuleList = function (options) {
      this.options = utils.assignClone(ModuleList.DEFAULTS, options);
      this.win = base['artdialog'];
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  ModuleList.DEFAULTS = {
      id: '#winmodulesetting',
      propWin: {
          title: '组件列表',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/module-list/form.html',
          width: 800,
          height: 500
      },
      type: 'moduleList'
  };
  
  /**
   * 获取可用组件列表
   * @param specialId
   */
  ModuleList.prototype.getComponentList = function (specialId) {
      // 本地开发环境
      var dtd = Q.defer();
      db.getComponentList(specialId).then(function(componentList){
  
      });
      dtd.resolve(data);
      return dtd.promise;
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  ModuleList.prototype.initForm = function () {
      var cls = this;
      utils.log('ModuleList.prototype.initForm: base.addNewModuleTarget ', base.addNewModuleTarget);
      var $target = base.addNewModuleTarget;
      //cls.$SAVETEMPLATE_HTML_CLONE = base.templateWindow.$(doms.wraper).clone();
  
      // $('#addNewModuleUL').on('click', 'li', function () {
      //     var $el = $(this),
      //         type = $el.find('a').attr('data-type');
      //     utils.log('ModuleList.prototype.initForm: type ', type);
      //     if (base.templateApp && base.templateApp[type] && base.templateApp[type].create) {
      //         $('#addNewModuleUL>li').removeClass('active');
      //         $el.addClass('active');
      //         base.templateApp[type].create($target);
      //     }
      // });
  
      // if (base.winObject) {
      //     base.winObject
      // }
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          selected: function (item) {
              var type = item.type;
  
              _.forEach(base.vm.moduleList['TEXT'],function (el) {
                  el.active = false;
              });
              _.forEach(base.vm.moduleList['IMG'],function (el) {
                  el.active = false;
              });
              _.forEach(base.vm.moduleList['OTHER'],function (el) {
                  el.active = false;
              });
              item.active = true;
              if (base.templateApp && base.templateApp[type] && base.templateApp[type].create) {
                  base.templateApp[type].create($target);
              }
          }
      };
      var _computed = {
  
      };
      var _watch = {};
      var _moduleList = _.cloneDeep(moduleListObj.getAvailableComponents());
      utils.log('moduleListObj.getAvailableComponents(): ',_moduleList);
      base.vm = new Vue({
          el: '#attrForm',
          data: {
              moduleList: _moduleList
          },
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
      utils.log('base.vm.$data: ',base.vm.$data);
  
  
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  ModuleList.prototype.formSumbit = function () {
      var cls = this;
      utils.log("ModuleList.prototype.formSumbit >>>");
      // 保存历史记录
      //db.saveHistory(cls.$SAVETEMPLATE_HTML_CLONE);
      return true;
  };
  
  ModuleList.prototype.afterSubmit = function () {
      var cls = this;
      utils.log("ModuleList.prototype.afterSubmit >>>");
      utils.log('ModuleList.prototype.afterCancel: base.addNewModuleTarget ', base.addNewModuleTarget);
      var $target = base.addNewModuleTarget;
      var $module = $target.find(doms.module);
      if ($module.length > 0) {
          utils.data.set("CUR_EDIT_MODULE_ID", $module.attr('id'));
          var moduleType = $module.attr('data-type');
          base.templateApp.removeAllEditLayer();
          base[moduleType].open();
      }
  
  };
  
  ModuleList.prototype.afterCancel = function () {
      var cls = this;
      utils.log("ModuleList.prototype.afterCancel >>>");
      utils.log('ModuleList.prototype.afterCancel: base.addNewModuleTarget ', base.addNewModuleTarget);
      utils.log('ModuleList.prototype.afterCancel: base.WIN_SUBMIT ', base.WIN_SUBMIT);
      var $target = base.addNewModuleTarget;
      if (base.WIN_SUBMIT !== 1) {
          $target.html(base.addNewModuleHtml);
      } else {
  
      }
      return true;
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  ModuleList.prototype.open = function () {
      var options = this.options;
      var id = 'moduleList';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title, false);
  };
  
  ModuleList.prototype.test = function () {
      // utils.log("ModuleList test success!");
  };
  
  base.plugin('moduleList', new ModuleList());
  module.exports = ModuleList;
  

});

;/*!app/components/test-data-import/local-data.js*/
define('app/components/test-data-import/local-data', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-5-1.
   */
  module.exports = [{"active":null,"checked":false,"childs":null,"columnConfigId":null,"columnStrId":null,"columnTypeCode":"articleNews","commentNum":null,"content":"{\"isAssess\":0,\"isComment\":0,\"isComplaint\":0,\"isConsole\":0,\"isDeclaration\":0,\"isEasyWord\":0,\"isEnableBeauty\":0,\"isHotWord\":0,\"isLocalUnit\":0,\"isLoginGuest\":0,\"isLogo\":0,\"isRedYellow\":0,\"isSensitiveWord\":0,\"isVisit\":0,\"isWater\":0,\"num\":0,\"turn\":0}","contentModelCode":"1492742331172","contentModelName":null,"count":0,"createDate":"2017-04-21 10:38:51","description":null,"firstColumnId":null,"functions":null,"genePageIds":null,"genePageNames":null,"height":null,"indicatorId":4185383,"isCount":0,"isHave":false,"isLogo":0,"isParent":0,"isShow":1,"isStartUrl":0,"isSubmit":1,"keyWords":null,"lev":null,"linkCode":null,"name":"志愿快播","num":0,"opt":"super","parentId":4185378,"parentStrId":null,"recordStatus":"Normal","relId":null,"shortName":null,"siteId":null,"sortNum":2,"synColumnIds":null,"synColumnNames":null,"transUrl":null,"transWindow":0,"type":"CMS_Section","unitIds":null,"unitNames":null,"uri":null,"width":null},{"active":null,"checked":false,"childs":null,"columnConfigId":null,"columnStrId":null,"columnTypeCode":"articleNews","commentNum":null,"content":"{\"isAssess\":0,\"isComment\":0,\"isComplaint\":0,\"isConsole\":0,\"isDeclaration\":0,\"isEasyWord\":0,\"isEnableBeauty\":0,\"isHotWord\":0,\"isLocalUnit\":0,\"isLoginGuest\":0,\"isLogo\":0,\"isRedYellow\":0,\"isSensitiveWord\":0,\"isVisit\":0,\"isWater\":0,\"num\":0,\"turn\":0}","contentModelCode":"1492742331172","contentModelName":null,"count":0,"createDate":"2017-04-21 10:38:51","description":null,"firstColumnId":null,"functions":null,"genePageIds":null,"genePageNames":null,"height":null,"indicatorId":4185387,"isCount":0,"isHave":false,"isLogo":0,"isParent":0,"isShow":1,"isStartUrl":0,"isSubmit":1,"keyWords":null,"lev":null,"linkCode":null,"name":"志愿者活动","num":0,"opt":"super","parentId":4185378,"parentStrId":null,"recordStatus":"Normal","relId":null,"shortName":null,"siteId":null,"sortNum":4,"synColumnIds":null,"synColumnNames":null,"transUrl":null,"transWindow":0,"type":"CMS_Section","unitIds":null,"unitNames":null,"uri":null,"width":null},{"active":null,"checked":false,"childs":null,"columnConfigId":null,"columnStrId":null,"columnTypeCode":"articleNews","commentNum":null,"content":"{\"isAssess\":0,\"isComment\":0,\"isComplaint\":0,\"isConsole\":0,\"isDeclaration\":0,\"isEasyWord\":0,\"isEnableBeauty\":0,\"isHotWord\":0,\"isLocalUnit\":0,\"isLoginGuest\":0,\"isLogo\":0,\"isRedYellow\":0,\"isSensitiveWord\":0,\"isVisit\":0,\"isWater\":0,\"num\":0,\"turn\":0}","contentModelCode":"1492742331172","contentModelName":null,"count":0,"createDate":"2017-04-21 10:38:51","description":null,"firstColumnId":null,"functions":null,"genePageIds":null,"genePageNames":null,"height":null,"indicatorId":4185391,"isCount":0,"isHave":false,"isLogo":0,"isParent":0,"isShow":1,"isStartUrl":0,"isSubmit":1,"keyWords":null,"lev":null,"linkCode":null,"name":"微志愿","num":0,"opt":"super","parentId":4185378,"parentStrId":null,"recordStatus":"Normal","relId":null,"shortName":null,"siteId":null,"sortNum":6,"synColumnIds":null,"synColumnNames":null,"transUrl":null,"transWindow":0,"type":"CMS_Section","unitIds":null,"unitNames":null,"uri":null,"width":null},{"active":null,"checked":false,"childs":null,"columnConfigId":null,"columnStrId":null,"columnTypeCode":"articleNews","commentNum":null,"content":"{\"isAssess\":0,\"isComment\":0,\"isComplaint\":0,\"isConsole\":0,\"isDeclaration\":0,\"isEasyWord\":0,\"isEnableBeauty\":0,\"isHotWord\":0,\"isLocalUnit\":0,\"isLoginGuest\":0,\"isLogo\":0,\"isRedYellow\":0,\"isSensitiveWord\":0,\"isVisit\":0,\"isWater\":0,\"num\":0,\"turn\":0}","contentModelCode":"1492742331172","contentModelName":null,"count":0,"createDate":"2017-04-21 10:38:51","description":null,"firstColumnId":null,"functions":null,"genePageIds":null,"genePageNames":null,"height":null,"indicatorId":4185395,"isCount":0,"isHave":false,"isLogo":0,"isParent":0,"isShow":1,"isStartUrl":0,"isSubmit":1,"keyWords":null,"lev":null,"linkCode":null,"name":"媒体报道","num":0,"opt":"super","parentId":4185378,"parentStrId":null,"recordStatus":"Normal","relId":null,"shortName":null,"siteId":null,"sortNum":8,"synColumnIds":null,"synColumnNames":null,"transUrl":null,"transWindow":0,"type":"CMS_Section","unitIds":null,"unitNames":null,"uri":null,"width":null},{"active":null,"checked":false,"childs":null,"columnConfigId":null,"columnStrId":null,"columnTypeCode":"articleNews","commentNum":null,"content":"{\"isAssess\":0,\"isComment\":0,\"isComplaint\":0,\"isConsole\":0,\"isDeclaration\":0,\"isEasyWord\":0,\"isEnableBeauty\":0,\"isHotWord\":0,\"isLocalUnit\":0,\"isLoginGuest\":0,\"isLogo\":0,\"isRedYellow\":0,\"isSensitiveWord\":0,\"isVisit\":0,\"isWater\":0,\"num\":0,\"turn\":0}","contentModelCode":"1492742331172","contentModelName":null,"count":0,"createDate":"2017-04-21 10:38:51","description":null,"firstColumnId":null,"functions":null,"genePageIds":null,"genePageNames":null,"height":null,"indicatorId":4185399,"isCount":0,"isHave":false,"isLogo":0,"isParent":0,"isShow":1,"isStartUrl":0,"isSubmit":1,"keyWords":null,"lev":null,"linkCode":null,"name":"志愿明星","num":0,"opt":"super","parentId":4185378,"parentStrId":null,"recordStatus":"Normal","relId":null,"shortName":null,"siteId":null,"sortNum":10,"synColumnIds":null,"synColumnNames":null,"transUrl":null,"transWindow":0,"type":"CMS_Section","unitIds":null,"unitNames":null,"uri":null,"width":null},{"active":null,"checked":false,"childs":null,"columnConfigId":null,"columnStrId":null,"columnTypeCode":"articleNews","commentNum":null,"content":"{\"isAssess\":0,\"isComment\":0,\"isComplaint\":0,\"isConsole\":0,\"isDeclaration\":0,\"isEasyWord\":0,\"isEnableBeauty\":0,\"isHotWord\":0,\"isLocalUnit\":0,\"isLoginGuest\":0,\"isLogo\":0,\"isRedYellow\":0,\"isSensitiveWord\":0,\"isVisit\":0,\"isWater\":0,\"num\":0,\"turn\":0}","contentModelCode":"1492742331172","contentModelName":null,"count":0,"createDate":"2017-04-21 10:38:51","description":null,"firstColumnId":null,"functions":null,"genePageIds":null,"genePageNames":null,"height":null,"indicatorId":4185403,"isCount":0,"isHave":false,"isLogo":0,"isParent":0,"isShow":1,"isStartUrl":0,"isSubmit":1,"keyWords":null,"lev":null,"linkCode":null,"name":"志愿观察","num":0,"opt":"super","parentId":4185378,"parentStrId":null,"recordStatus":"Normal","relId":null,"shortName":null,"siteId":null,"sortNum":12,"synColumnIds":null,"synColumnNames":null,"transUrl":null,"transWindow":0,"type":"CMS_Section","unitIds":null,"unitNames":null,"uri":null,"width":null}]

});

;/*!app/components/test-data-import/index.js*/
define('app/components/test-data-import/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  
  var base = require('app/common/base');
  var db = require('app/common/db');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  
  
  var TestDataImport = function (options) {
      this.options = utils.assignClone(TestDataImport.DEFAULTS, options);
      this.win = base['artdialog'];
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  TestDataImport.DEFAULTS = {
      id: '#winmodulesetting',
      propWin: {
          title: '组件列表',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/test-data-import/form.html',
          width: 800,
          height: 600
      },
      type: 'testDataImport'
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  TestDataImport.prototype.initForm = function () {
      var cls = this;
  
      var dataNodes = [{
          name: '政务要闻',
          value: '4198147,4198141,4198136,4198131,4198126,4198121,4198116,4198111,4198106,4198101,4198096,4198091'
      }, {
          name: '地方新闻',
          value: '4198210,4198204,4198198,4198192,4198187,4198182,4198177,4198172,4198167,4198162,4198157,4198152'
      }, {
          name: '通知公告',
          value: '4198260,4198255,4198250,4198245,4198240,4198235,4198230,4198225,4198220,4198215'
      }, {
          name: '媒体聚焦',
          value: '4198311,4198306,4198301,4198296,4198291,4198286,4198281,4198276,4198271,4198266'
      }, {
          name: '中央精神',
          value: '4198363,4198357,4198352,4198347,4198342,4198337,4198332,4198327,4198322,4198316'
      }, {
          name: '地市行动',
          value: '4198411,4198406,4198401,4198396,4198391,4198386,4198381,4198376,4198368'
      }, {
          name: '重要评论',
          value: '4198451,4198446,4198441,4198436,4198431,4198426,4198421,4198416'
      }, {
          name: '图片新闻',
          value: '4198505,4198499,4198493,4198487,4198481,4198475,4198469,4198463,4198457'
      }];
  
      _.forEach(dataNodes, function (value) {
          value.count = value.value.split(',').length;
      });
  
  
      // 取得当前模板的栏目数据
      var navs = [];
  
      cls.__getNavs().then(function (data) {
          utils.log('TestDataImport.prototype.initForm  getColumnTreeBySite: ', data);
          _.forEach(data, function (value) {
              navs.push({
                  name: value.name,
                  id: value.indicatorId,
                  nodeIds:[]
              });
          });
  
          base.vm = new Vue({
              el: '#attrForm',
              data: {
                  items: navs,
                  dataNodes: dataNodes
              },
              methods: {
                  copyRefer: function (item) {
                      utils.log('TestDataImport.prototype.initForm vm copyRefer  copyRefer: ', item);
                      var sourceIds = item.nodeIds.join(',');
                      utils.log('TestDataImport.prototype.initForm vm copyRefer  sourceIds: ', sourceIds);
                      utils.log('TestDataImport.prototype.initForm vm copyRefer  id: ', item.id);
                      utils.log('TestDataImport.prototype.initForm vm copyRefer  name: ', item.name);
                      var synColumnIds = item.id + '_' + GLOBAL_SITEID;
                      var synColumnNames = item.name + '(发布)';
                      cls.__copyRefer(synColumnIds,synColumnNames,sourceIds).then(function () {
                          Ls.tipsOk('演示数据复制成功!')
                      });
  
                  }
              }
          })
      });
  
  };
  // url: /content/copyRefer?IsAjax=1&dataType=JSON
  //     params:
  // source:1
  // synColumnIds:4200662_53310
  // synColumnNames:学习资料(发布)
  // synColumnIsPublishs:1
  // contentId:4198147,4198141,4198136,4198131,4198126,4198121,4198116,4198111,4198106,4198101
  // type:1
  TestDataImport.prototype.__copyRefer = function (synColumnIds,synColumnNames,contentId) {
      var cls = this;
      utils.log("TestDataImport.prototype.getNavs >>>");
      var url = '/content/copyRefer?IsAjax=1&dataType=JSON';
      if (utils.getDevelopStatus()) {
          return Q.resolve('');
      } else {
          return db.ajaxPost(url, {
              source:1,
              synColumnIds:synColumnIds,
              synColumnNames:synColumnNames,
              synColumnIsPublishs:1,
              contentId:contentId,
              type:1
          });
      }
  
  };
  
  
  
  TestDataImport.prototype.__getNavs = function () {
      var cls = this;
      var url = '/siteMain/getColumnTreeBySite';
      utils.log("TestDataImport.prototype.getNavs >>>");
      if (utils.getDevelopStatus()) {
          return Q.resolve(require('app/components/test-data-import/local-data'));
      } else {
          return db.ajaxGet(url, {
              indicatorId: base.getQueryString('columnId')
          });
      }
  
  };
  
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  TestDataImport.prototype.formSumbit = function () {
      var cls = this;
      utils.log("TestDataImport.prototype.formSumbit >>>");
      return true;
  };
  
  TestDataImport.prototype.afterSubmit = function () {
      var cls = this;
      utils.log("TestDataImport.prototype.afterSubmit >>>");
  
  };
  
  TestDataImport.prototype.afterCancel = function () {
      var cls = this;
      utils.log("TestDataImport.prototype.afterCancel >>>");
      if (base.WIN_SUBMIT !== 1) {
  
      } else {
  
      }
      return true;
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  TestDataImport.prototype.open = function () {
      var options = this.options;
      var id = 'testDataImport';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title, false);
  };
  
  TestDataImport.prototype.test = function () {
      // utils.log("TestDataImport test success!");
  };
  
  base.plugin('testDataImport', new TestDataImport());
  module.exports = TestDataImport;
  

});

;/*!app/components/add-headerbg/index.js*/
define('app/components/add-headerbg/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var URI = require('node_modules/urijs/src/URI');
  
  /**
   * 组件列表窗口类
   * @param options
   * @constructor
   */
  var AddHeaderbg = function (options) {
      this.options = utils.assignClone(AddHeaderbg.DEFAULTS, options);
      this.win = base['artdialog'];
      this.moduleSetting = {
          type: this.options.type
      }
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  AddHeaderbg.DEFAULTS = {
      id: '#winmodulesetting',
      propWin: {
          title: '上传头部背景',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/add-headerbg/form.html',
          width: 600,
          height:480
      },
      type: 'addHeaderbg'
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  AddHeaderbg.prototype.initForm = function () {
      var cls = this;
      // 获取当前的头部背景图片的地址
      var headerbgUrl = base.templateWindow.$('#' + doms.pageHeaderId).css("backgroundImage").replace('url(', '').replace(')', '').replace(/['"]/g, '');
      utils.log('AddHeaderbg.prototype.initForm headerbg: ', headerbgUrl);
      var imgSrc = new URI(headerbgUrl).pathname();
      utils.log('AddHeaderbg.prototype.initForm imgSrc: ', imgSrc);
      cls.IMGSRC = imgSrc;
  
      var headerPageBgSrc = base.templateWindow.$('.common-header').css("backgroundImage").replace('url(', '').replace(')', '').replace(/['"]/g, '');
      var pageBgSrc = new URI(headerPageBgSrc).pathname();
      cls.PAGEBGSRC = headerPageBgSrc;
  
      var data = {
          src: imgSrc,
          headerbgUrl: headerbgUrl,
          pageBgSrc: pageBgSrc,
          headerPageBgSrc: headerPageBgSrc
      };
      var _computed = {};
      var _methods = {};
      var _watch = {};
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
      $('#addImageBtn').on('click', function () {
          $.Site.showUploader(function (filePathArr) {
              if (filePathArr && filePathArr.length > 0) {
                  var file = filePathArr[0];
                  utils.log(file);
                  $.Site.vm.headerbgUrl = config.getFileServerPath() + file.mongoId;
                  $.Site.vm.src = config.getFileServerPath() + file.mongoId;
              }
          });
      });
  
      $('#addPageBgBtn').on('click', function () {
          $.Site.showUploader(function (filePathArr) {
              if (filePathArr && filePathArr.length > 0) {
                  var file = filePathArr[0];
                  utils.log(file);
                  $.Site.vm.pageBgSrc = config.getFileServerPath() + file.mongoId;
                  $.Site.vm.headerPageBgSrc = config.getFileServerPath() + file.mongoId;
              }
          });
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  AddHeaderbg.prototype.formSumbit = function () {
      var cls = this;
      utils.log("AddHeaderbg.prototype.afterSubmit >>>");
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(doms.pageHeaderId, data);
      }
      return base.attrFormValidateState;
  };
  
  AddHeaderbg.prototype.afterSubmit = function () {
      var cls = this;
      utils.log("AddHeaderbg.prototype.afterSubmit >>>");
  
  };
  
  AddHeaderbg.prototype.setModuleAttrData = function (moduleId, data) {
      var cls = this;
      base['pageHeader'].setBg(data.src);
      base['pageHeader'].setPageBg(data.pageBgSrc);
  };
  
  AddHeaderbg.prototype.afterCancel = function () {
      var cls = this;
      utils.log("AddHeaderbg.prototype.afterCancel >>> base.WIN_SUBMIT: ", base.WIN_SUBMIT);
      utils.log("AddHeaderbg.prototype.afterCancel >>> cls.IMGSRC: ", cls.IMGSRC);
  
      if (base.WIN_SUBMIT !== 1) {
          utils.log("AddHeaderbg.prototype.afterCancel >>> 恢复背景 cls.IMGSRC: ", cls.IMGSRC);
          try {
              parent.$.Site['pageHeader'].setBg(cls.IMGSRC);
              parent.$.Site['pageHeader'].setPageBg(cls.PAGEBGSRC);
  
          } catch (e) {
          }
      } else {
  
      }
      return true;
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  AddHeaderbg.prototype.open = function () {
      var options = this.options;
      var id = 'addHeaderbg';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  AddHeaderbg.prototype.test = function () {
      // utils.log("AddHeaderbg test success!");
  };
  
  base.plugin('addHeaderbg', new AddHeaderbg());
  module.exports = AddHeaderbg;
  

});

;/*!app/components/page-background/index.js*/
define('app/components/page-background/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var db = require('app/common/db');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var URI = require('node_modules/urijs/src/URI');
  
  
  /**
   * 组件列表窗口类
   * @param options
   * @constructor
   */
  var PageBackground = function (options) {
      this.options = utils.assignClone(PageBackground.DEFAULTS, options);
      this.win = base['artdialog'];
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  PageBackground.DEFAULTS = {
      id: '#winmodulesetting',
      propWin: {
          id: 'pageBackground',
          title: '设置页面背景',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/page-background/form.html',
          width: 600,
          height: 480
      },
      type: 'pageBackground'
  };
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  PageBackground.prototype.initForm = function () {
      var cls = this;
  
      // 获取当前的头部背景图片的地址
      var $wraper = base.templateWindow.$(doms.wraper);
      var backgroundImage = $wraper.css("backgroundImage");
      var pagebgUrl = 'none';
      if(!utils.isNul(backgroundImage)){
          pagebgUrl = backgroundImage.replace('url(', '').replace(')', '').replace(/['"]/g, '');
      }
      var backgroundRepeat = $wraper.css("backgroundRepeat");
      //var fileServerPath = config.getFileServerPath();
      utils.log('PageBackground.prototype.initForm base.templateWindow.$(doms.wraper).css("backgroundImage"): ',$wraper.css("backgroundImage"));
      utils.log('PageBackground.prototype.initForm base.templateWindow.$(doms.wraper).css("backgroundRepeat"): ',$wraper.css("backgroundRepeat"));
      utils.log('PageBackground.prototype.initForm pagebgUrl: ', pagebgUrl);
      //var imgSrc = new URI(pagebgUrl).pathname();
      var imgSrc = pagebgUrl == 'none' ? '' : pagebgUrl;
      utils.log('PageBackground.prototype.initForm imgSrc: ', imgSrc);
      // 定义基于实例的变量,便于其它类通过实例进行调用,用于记录运行时变量
      cls.PAGEBGIMGSRC = {
          imgSrc: imgSrc,
          backgroundRepeat: backgroundRepeat
      };
      base.vm = new Vue({
          el: '#attrForm',
          data: {
              imgSrc: imgSrc,
              placeholder: 'size=500x100&text=暂无页面背景&bgcolor=#F3F3F3&color=#cccccc',
              backgroundRepeat: backgroundRepeat == 'none' ? 'no-repeat' : backgroundRepeat,
              backgroundColor: 'none',
              backgroundPosition: '0% 0%'
          },
          watch: {},
          methods: {
              onBackgroundRepeatChange: function (value) {
                  this.backgroundRepeat = value;
              },
              setPageBackgroundNone: function () {
                  // 移除页面背景
                  $wraper.removeAttr('style');
                  this.imgSrc = null;
                  $("#pageBackgroundImgSrcDiv img").attr("placeholder-rendered","");
                  // utils.placeholderRender('pageBackgroundImgSrcDiv');
              },
              downloadFile: function () {
                  db.ajaxGet('/design/checkFile',{
                      specialId: utils.getSpecialId(),
                      filename: "page_bg.psd"
                  },function (resp) {
                      $("#logoImg").attr("src","/design/downFile?specialId="+utils.getSpecialId()+"&filename=page_bg.psd");
                  })
              }
          },
          computed: {
              isHaveImg: function () {
                  return !utils.isNul(this.imgSrc);
              },
              isShowHaveImgMsg: function () {
                  return utils.isNul(this.imgSrc);
              },
              placeholderClass: function () {
                  return utils.isNul(this.imgSrc) ? 'placeholder' : '';
              }
          },
          mounted: function () {
              if (!this.isHaveImg) {
                  utils.log('mounted ... 没有页面背景');
                  utils.placeholderRender('pageBackgroundImgSrcDiv');
              }
          },
          updated: function () {
              this.$nextTick(function () {
                  if (!this.isHaveImg) {
                      utils.placeholderRender('pageBackgroundImgSrcDiv');
                  }
              })
          }
      });
  
      $('#addPageBackgroundBtn').on('click', function () {
          $.Site.showUploader(function (filePathArr) {
              if (filePathArr && filePathArr.length > 0) {
                  var file = filePathArr[0];
                  // utils.log(file);
                  $.Site.vm.imgSrc = config.getFileServerPath() + file.mongoId;
              }
          });
      });
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  PageBackground.prototype.formSumbit = function () {
      utils.log("PageBackground.prototype.formSumbit >>>");
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
      var data = base.vm.$data;
      // 用于记录表单验证状态的变量
      //cls.attrFormValidateState = false;
      // 表单验证通过后的处理事件
      //if (!utils.isNul(data.imgSrc)) {
          cls.attrFormValidateState = true;
          // 保存历史记录
          //parent.$.Site['db'].saveHistory(cls.$SAVETEMPLATE_HTML_CLONE);
          // 注意此处是修改iframe中的对象
          // 调用iframe模板页面中的实例化方法处理
          base.templateApp['pageBackground'].setPageBackground(data);
      //}
      return cls.attrFormValidateState;
  };
  
  /**
   * 表单确定提交后的处理事件
   */
  PageBackground.prototype.afterSubmit = function () {
      // var cls = this;
      utils.log("PageBackground.prototype.afterSubmit >>>");
  
  };
  
  /**
   * 设置页面背景
   * @param src 图片地址
   */
  PageBackground.prototype.setPageBackground = function (options) {
      var cls = this;
      utils.log("PageBackground.prototype.setPageBackground >>>",options);
      if (!utils.isNul(options.imgSrc)) {
          // 添加页面背景
          $(doms.wraper).css({
              'background-image': 'url(' + options.imgSrc + ')',
              'background-repeat':options.backgroundRepeat
              // 'background-color': options.backgroundColor,
              // 'background-position': options.backgroundPosition
          });
      } else {
          // 移除页面背景
          $(doms.wraper).removeAttr('style');
      }
      var specialId = utils.getSpecialId();
      if(!utils.isNul(specialId)){
          var imgSrc = options.imgSrc;
          var fileServerPath = config.getFileServerPath();
          utils.log("PageBackground.prototype.setPageBackground >>> imgSrc: ",imgSrc);
          utils.log("PageBackground.prototype.setPageBackground >>> fileServerPath: ",fileServerPath);
          if(!utils.isNul(imgSrc)){
              // 去除文件服务器地址
              utils.log("PageBackground.prototype.setPageBackground >>> 去除文件服务器地址: ");
              imgSrc = _.replace(imgSrc,fileServerPath,'');
          }
          utils.log("PageBackground.prototype.setPageBackground >>> specialId: ",specialId);
          utils.log("PageBackground.prototype.setPageBackground >>> imgSrc: ",imgSrc);
          // 将用户上传的背景图片地址保存到服务端
          //db.savePageBackground(specialId,imgSrc);
          var bgStyle = "background-image: url('"+options.imgSrc+"'); background-repeat: "+options.backgroundRepeat+";";
          if(utils.isNul(options.imgSrc)) {
              bgStyle = "";
          }
          db.savePageBackground(specialId,bgStyle);
      }
  };
  /**
   * 属性表单窗口去消按钮或非提交按钮事件的处理
   * @returns {boolean}
   */
  PageBackground.prototype.afterCancel = function () {
      var cls = this;
      utils.log("PageBackground.prototype.afterCancel >>> base.WIN_SUBMIT: ", base.WINSUBMIT[cls.options.propWin.id]);
      utils.log("PageBackground.prototype.afterCancel >>> cls.PAGEBGIMGSRC: ", cls.PAGEBGIMGSRC);
      // 通过全局变量来确定当前窗口事件的类型, 1 表示确定提交按钮事件  0 表示其他关闭事件
      if (base.WINSUBMIT[cls.options.propWin.id] !== 1) {
          utils.log("PageBackground.prototype.afterCancel >>> 恢复背景 cls.PAGEBGIMGSRC: ", cls.PAGEBGIMGSRC);
          try {
              // 当前窗口处页处理顶层页面, 要操作iframe中模板内容必须调用 模板中的实例化对象 base.templateApp
              base.templateApp['pageBackground'].setPageBackground(cls.PAGEBGIMGSRC);
          } catch (e) {
          }
      } else {
  
      }
      return true;
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  PageBackground.prototype.open = function () {
      var options = this.options;
      var id = options.propWin.id;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      // 最后一个参数 isApplyBtn false 不显示应用按钮, 无此参数或true均为显示应用按钮
      this.win.open(id, url, type, width, height, title, true);
  };
  
  PageBackground.prototype.test = function () {
      // utils.log("PageBackground test success!");
  };
  
  base.plugin('pageBackground', new PageBackground());
  module.exports = PageBackground;
  

});

;/*!app/components/info-tabs-headline/index.js*/
define('app/components/info-tabs-headline/index', function(require, exports, module) {

  /**
   * 选项卡组件
   * Created by Dzl on 2017-3-1.
   */
  
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  var labels = require('app/common/labels');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var infoTabsHeadline = function (options) {
      this.options = utils.assignClone(infoTabsHeadline.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'articleNews';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'infoTabsHeadline',
          list: {},
          conf: {
              style: 'default',
              isTitle: true,
              isMore: true,
              more: '更多+',
              moreId: null,
              moreUrl:null,
              num: 5,
              target: '_blank',
              width: null,  // module 的宽度
              height: 300, // module 的高度
              toggle: 'mouse', // tab触发事件, `tab` 鼠标点击  `mouse` 鼠标滑动
              textLen: null,
              isDate: true,
              dateFormat: 'MM-dd',
              tabs: [],
              headline: {
                  num: 1, // 调用条数
                  length: 20, //标题字数
                  showType: 0,   // 0、调用摘要。1、调用内容
                  noteLength: 16, //摘要/内容截取字数
                  target: '_blank', //是否新窗口
                  detailed: '【详细】',   //为空不显示【详细】按扭，可自定义
                  isDetailed: false  // true 是显示，false 是不显示
              }
          },
          label: {
  
          }
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n"
      };
  
      this.dataList = mockData.getInfoList(8, 20).data;
      //this.dataList = [];
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{ conf.isTitle | displayFilter }}\">\r\n        <div class=\"title\">\r\n            <ul class=\"clearfix\">\r\n                {{each conf.tabs as el index}}\r\n                <li class=\"{{el.active | activeFilter }}\">\r\n                    <a href=\"{{ if conf.toggle == 'mouse'}} {{ el.dataUrl }} {{else}} javascript:void(0) {{/if}}\" id=\"#{{ el.dataId }}\" data-id=\"#{{ el.dataId }}\"\r\n                       data-toggle=\"{{ conf.toggle }}\"\r\n                       data-url=\"{{ el.dataUrl }}\"\r\n                       data-more=\"#{{ el.dataMore }}\">\r\n                        {{ el.name }}\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.moreUrl}}\" target=\"_blank\" id=\"{{ conf.moreId }}\">{{conf.more}}</a>\r\n        </div>\r\n        {{ /if }}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {{each conf.tabs as el index}}\r\n        <div class=\"tab-panel list {{el.active | activeFilter }} clearfix\" id=\"{{ el.dataId }}\">\r\n            {{each list.list1 as ele index}}\r\n            <ul class=\"list1 clearfix ls-label1\">\r\n                <h2><a href=\"{{el.href}}\">{{ele.title}}</a></h2>\r\n                {{if label[el.dataId].label1.isDetailed}}\r\n                <p class=\"remarks\">\r\n                    {{ele.note}}\r\n                    {{if label[el.dataId].label1.isDetailed}}\r\n                    <a href=\"{{ele.href}}\">{{label[el.dataId].label1.detailed}}</a>\r\n                    {{/if}}\r\n                </p>\r\n                {{/if}}\r\n            </ul>\r\n            {{/each}}\r\n            <ul class=\"list2 clearfix ls-label2\">\r\n                {{each list.list2 as ele index}}\r\n                <li>\r\n                    <span class=\"date {{label[el.dataId].label2.isDate | displayFilter}}\">{{ele.createDate}}</span>\r\n                    <a href=\"{{ele.href}}\" target=\"{{ele.target}}\">{{ele.title}}</a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n        {{/each}}\r\n\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" ' +
          'data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      template.helper('infoTabsDataIdFilter', function (target) {
          if (_.isEmpty(target))return '';
          return target.substring(1);
      });
      template.helper('activeFilter', function (target) {
          return target ? 'active' : '';
      });
      // 模板预编译
      // <!-- 使用 arttemplate.js 引擎渲染 -->
      // <!-- 详细参见: https://github.com/aui/artTemplate -->
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  infoTabsHeadline.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/info-tabs-headline/form.html',
          width: 780,
          height: 480
      },
      type: 'infoTabsHeadline'
  };
  
  infoTabsHeadline.prototype.__addTab4Vue = function (vueData, moduleId, ids, name, url, moreId, isActive, siteId) {
  
      // var tabId = _.uniqueId(moduleId + '_tab');
      var tabIds = [];
      $.each(vueData.conf.tabs, function (key,val) {
          tabIds.push(val.dataId);
      });
      var tabId = utils.createUniqueId(moduleId + '_tab', _.uniqueId(moduleId + '_tab'), tabIds);
  
      isActive = isActive || false;
      var tab = {
          name: name,
          dataUrl: url,
          dataMore: moreId,  // jquery 选择器
          dataId: tabId, // jquery 选择器
          active: isActive
      };
      var label = {
          label1: _.cloneDeep(labels.docHeadlines),
          label2: _.cloneDeep(labels.docList)
      };
  
      label.label1 = utils.assignClone(label.label1,vueData.conf.headline);
      label.label1['length'] = utils.getFontLength(vueData.conf.width);
  
      label.label2['num'] = vueData.conf.num;
      label.label2['length'] = utils.getFontLength(vueData.conf.width);
  
      label.label1.id = ids ? ids.join(',') : "";
      label.label2.id = ids ? ids.join(',') : "";
      label.id = ids ? ids.join(',') : "";
      label.siteId = siteId || "";
      vueData.conf.tabs.push(tab);
      vueData.label[tabId] = label;
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  infoTabsHeadline.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  infoTabsHeadline.prototype.formSumbit = function () {
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  infoTabsHeadline.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options),
          label1 = _.cloneDeep(labels.docHeadlines),
          label2 = _.cloneDeep(labels.docList);
  
      // 根据容器的宽度自动计算字符长度
      if (utils.isNul(data.conf.textLen)) {
          data.conf.textLen = utils.getFontLength(data.conf.width);
      }
  
  
      // 新组件
      if (isModule) {
          // 创建 ID
          data.moduleId = utils.createModuleUniqueId();
          data.conf.moreId = data.moduleId + '_more';
          // 创建默认 TAB
          // var tabId = _.uniqueId(data.moduleId + '_tab');
          var tabIds = [];
          $.each(data.conf.tabs, function (key,val) {
              tabIds.push(val.dataId);
          });
          var tabId = utils.createUniqueId(data.moduleId + '_tab', _.uniqueId(data.moduleId + '_tab'), tabIds);
          var tab = {
              name: '新tab',
              dataUrl: '#',
              dataMore: data.conf.moreId,  // jquery 选择器
              dataId: tabId, // jquery 选择器
              active: true
          };
  
  
          label1 = utils.assignClone(label1, data.conf.headline);
          label1['length'] = utils.getFontLength(data.conf.width);
  
          label2['num'] = data.conf.num;
          label2['length'] = utils.getFontLength(data.conf.width);
  
          var label = {};
          label[tabId] = {
              label1: label1,
              label2: label2
          };
  
  
  
          if (!_.isArray(data.conf.tabs)) {
              data.conf.tabs = [];
          }
          if (!_.isArray(data.label)) {
              data.label = [];
          }
          data.conf.tabs.push(tab);
          data.label = label;
          // utils.log(' data.moduleId: ' + data.moduleId);
      }
  
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.conf.textLen = utils.getFontLength(data.conf.width);
      }
      // 是否挂载演示数据
      if (!excludeListData) {
  
          // 挂载演示数据
  
          var mockList1 = mockData.getInfoList(data.conf.headline.num, data.conf.headline.length, data.conf.headline.dateFormat,data.conf.headline.noteLength).data;
          if (!$.isArray(mockList1)) {
              mockList1 = [mockList1];
          }
          data.list.list1 = mockList1;
          data.list.list2 = mockData.getInfoList(data.conf.num, data.conf.textLen, data.conf.dateFormat).data;
      }
  
      // 构造标题更多链接
      _.forEach(data.conf.tabs,function (val) {
          if(val.active){
              var siteId = data.label[val.dataId].siteId;
              if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
                  data.conf.moreUrl = config.getOtherTitleHref(data.label[val.dataId].id, siteId)
              }else {
                  data.conf.moreUrl = config.getTitleHref(data.label[val.dataId].id);
              }
          }
      })
  
      return data;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  
  infoTabsHeadline.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
  
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
  
      var _compile = template.compile(cls.moduleTpl);
  
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  infoTabsHeadline.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  infoTabsHeadline.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  infoTabsHeadline.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
      // 检测 label
      _.forEach(data.conf.tabs, function (tab) {
          if (!data.label[tab.dataId]) {
              var label = {
                  label1: _.cloneDeep(labels.docHeadlines),
                  label2: _.cloneDeep(labels.docList)
              };
              label.label1 = utils.assignClone(label.label1,data.conf.headline);
              label.label1['length'] = utils.getFontLength(data.conf.width);
  
              label.label2['num'] = data.conf.num;
              label.label2['length'] = utils.getFontLength(data.conf.width);
  
              data.label[tab.dataId] = label;
          }
      });
  
  
      Vue.filter('labelIdFilter', function (label_id) {
          return utils.isNul(label_id) ? true : false;
      });
  
      // 清除演示数据,因为在表单绑定时不需要
      if (data.dataList) delete data.dataList;
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          onTargetChange1: function (value) {
              this.conf.headline.target = value;
          },
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.conf.target = value;
          },
          // onDateFormatChange: function (value) {
          //     // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
          //     this.conf.dateFormat = value;
          // },
          add: function () {
              var vueData = this;
              cls.__addTab4Vue(vueData, curEditModuleId, null, '新tab', '#', this.conf.moreId, false);
          },
          // 向上移动
          moveUp: function (index) {
              // utils.log('moveUp: ' + index);
              if (index == 0) {
                  return;
              }
              this.conf.tabs[index] = this.conf.tabs.splice((index - 1), 1, this.conf.tabs[index])[0];
  
          },
          moveDown: function (index) {
              // utils.log('moveDown: ' + index);
              if (index == this.conf.tabs.length - 1) {
                  return;
              }
              this.conf.tabs[index] = this.conf.tabs.splice((index + 1), 1, this.conf.tabs[index])[0];
              // utils.swapItems(this.conf.tabs, index, index + 1);
          },
          remove: function (index) {
              var isDelDefault = false;
              if(this.conf.tabs[index]['active'] == true) {
                  isDelDefault = true;
              }
              this.conf.tabs.splice(index, 1);
              if(isDelDefault) {//若删除的是默认选中项，则重新设置第一个tab为默认选中项
                  this.conf.tabs[0]['active'] = true;
              }
          },
          // 关联栏目
          associateNode: function (index) {
              var vueData = this, conf = this.conf, label = this.label;
  
              if (this.conf.tabs.length > 4) {
                  Ls.tipsErr('tab组件最多只能关联5个栏目');
                  return;
              }
              var curTab = "",tabId="";
              if(index>-1) {
                  curTab = conf.tabs[index];
                  tabId = curTab.dataId;
              }
  
              utils.selectColumn({
                  configType: cls.contentModuleType,
                  chkStyle: 'radio',
                  tabId: tabId
              }, function (data) {
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      // base.vm.label.id = ids.join(',');
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      var url = isOtherSite ? config.getOtherTitleHref(ids.join(','),data[0].siteId) :config.getTitleHref(ids.join(','));
                      if (index > -1) {
                          if (curTab && label[curTab.dataId]) {
                              conf.tabs[index].name = data[0].name;
                              label[curTab.dataId].label1.id = ids.join(',');
                              label[curTab.dataId].label2.id = ids.join(',');
                              label[curTab.dataId].id = ids.join(',');
                              label[curTab.dataId].siteId = isOtherSite ? data[0].siteId : "";
                          }
                      } else {
                          var siteId = isOtherSite ? data[0].siteId : null;
                          cls.__addTab4Vue(vueData, curEditModuleId, ids, data[0].name, url, conf.moreId, false, siteId);
                      }
  
                  }
              });
  
  
          }
      };
      var _computed = {
         // a computed getter
         //  isRelation: function () {
         //      return utils.isNul(this.label.id) || this.label.id == 0;
         //  }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // utils.log('initForm >>>');
      // utils.log(JSON.stringify(base.vm.$data));
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  infoTabsHeadline.prototype.open = function () {
      var options = this.options;
      var id = 'infoTabsHeadline';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  infoTabsHeadline.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
  
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(data);
      var $panelHtml = $(panelHtml);
  
      // 解析标签
      var label1Str = '',label2Str = '', label = '', isValid = true;
      _.forEach(data.conf.tabs, function (tab) {
          label = data.label[tab.dataId];
          if (utils.isNul(label.label1.id) || utils.isNul(label.label2.id)) {
              isValid = false;
              return false;
          }
          label1Str = utils.parseLabel(label.label1);
          label2Str = utils.parseLabel(label.label2);
          var tabModule = $panelHtml.find('#' + tab.dataId);
          tabModule.find('.list1').replaceWith(label1Str);
          tabModule.find('.list2').html(label2Str);
      });
  
  
      // 验证标签关联 id 非空
      // utils.isNul(0)
  
      // 验证标签关联不通过 return null;
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  infoTabsHeadline.prototype.render = function (moduleId) {
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  infoTabsHeadline.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  
  };
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  infoTabsHeadline.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  infoTabsHeadline.prototype.setModuleAttrData = function (moduleId, formPostData) {
      var cls = this;
      var $module = $('#' + moduleId);
      if ($module.length > 0 && !utils.isNul(formPostData)) {
  
          // 处理label
          _.forEach(formPostData.conf.tabs, function (value) {
              value.dataMore = formPostData.conf.moreId;
              if (formPostData.label[value.dataId]) {
                  //列表
                  var siteId = formPostData.label[value.dataId].siteId;
                  formPostData.label[value.dataId].label2.length = formPostData.conf.textLen;
  
                  if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) { //非此站点栏目
                      value.dataUrl = config.getOtherTitleHref(formPostData.label[value.dataId].id, siteId);
                  }else {
                      value.dataUrl = config.getTitleHref(formPostData.label[value.dataId].id);
                  }
  
                  formPostData.label[value.dataId].label2.num = formPostData.conf.num;
                  formPostData.label[value.dataId].label2.target = formPostData.conf.target;
  
                  //头条
                  formPostData.label[value.dataId].label1 = utils.assignClone(formPostData.label[value.dataId].label1,formPostData.conf.headline);
  
              }
          });
  
          $module.attr('data-label', utils.jsonStringify(formPostData.label));
          $module.attr('data-conf', utils.jsonStringify(formPostData.conf));
      }
  
      cls.formSubmitStatus = true;
      // 重新渲染
      var data = cls.getData(formPostData);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  
  base.plugin('infoTabsHeadline', new infoTabsHeadline());
  
  module.exports = infoTabsHeadline;
  

});

;/*!app/common/class.js*/
define('app/common/class', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-22.
   */
  
  //https://johnresig.com/blog/simple-javascript-inheritance/
  var initializing = false, fnTest = /xyz/.test(function () {
      xyz;
  }) ? /\b_super\b/ : /.*/;
  
  // The base Class implementation (does nothing)
  var Class = function () {
  };
  
  // Create a new Class that inherits from this class
  Class.extend = function (prop) {
      var _super = this.prototype;
  
      // Instantiate a base class (but only create the instance,
      // don’t run the init constructor)
      initializing = true;
      var prototype = new this();
      initializing = false;
  
      // Copy the properties over onto the new prototype
      for (var name in prop) {
          // Check if we’re overwriting an existing function
          prototype[name] = typeof prop[name] == "function" &&
          typeof _super[name] == "function" &&
          fnTest.test(prop[name]) ?
              (function (name, fn) {
                  return function () {
                      var tmp = this._super;
  
                      // Add a new ._super() method that is the same method
                      // but on the super-class
                      this._super = _super[name];
  
                      // The method only need to be bound temporarily, so we
                      // remove it when we’re done executing
                      var ret = fn.apply(this, arguments);
                      this._super = tmp;
  
                      return ret;
                  };
              })(name, prop[name]) :
              prop[name];
      }
  
      // The dummy class constructor
      function Class() {
          // All construction is actually done in the init method
          if (!initializing && this.init)
              this.init.apply(this, arguments);
      }
  
      // Populate our constructed prototype object
      Class.prototype = prototype;
  
      // Enforce the constructor to be what we expect
      Class.prototype.constructor = Class;
  
      // And make this class extendable
      Class.extend = arguments.callee;
  
      return Class;
  };
  
  
  module.exports = Class;

});

;/*!app/common/components.js*/
define('app/common/components', function(require, exports, module) {

  /**
   * 文章信息列表
   * Created by DOOCAL on 2017-7-18.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Q = require('node_modules/q/q');
  
  var base = require('app/common/base');
  var Class = require('app/common/class');
  var artDialog = require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  // VM 对象
  // base.vm = {};
  
  var defaults = {
      // 模块ID
      moduleId: '',
      // 模块类型
      type: '',
      // 模块属性配置
      conf: _.merge({}, commonModuleSetting, {
          conf: {
              className: '',
              style: 'default',
              isTitle: true,
              isMore: true,
              title: '组件标题',
              titleHref: '#',
              more: '更多+',
              height: 330,
              panelPadding: 0,
              target: '_blank'
              // isStyleList: true,
              // styleList: ''
          }
      }).conf,
      // 模拟数据
      data: {},
      // 绑定标签的名称
      bindLabelName: '',
      // 对应标签的内容项
      label: {},
      // 相关模板
      tpl: {
          panelTpl: '',
          panelDataTpl: '',
          moduleTpl: '<div id="{{moduleId}}" class="module {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" data-label="{{#label | jsonStr}}" ></div>',
          styleTpl: {}
      },
      // 弹窗设置项
      open: {
          conf: {
              title: '组件设置',
              width: 600,
              height: 400
          },
          win: base['artdialog']
      }
  }
  
  var Component = Class.extend({
      init: function (options) {
          this.setOption(options || defaults);
      },
      /**
       * 参数合并
       */
      setOption: function (a) {
          var cls = this;
          if (a) {
              cls.options = _.merge({}, cls.options, a)
          }
          return cls;
      },
      /**
       * 首次进入时渲染前调用
       * @param moduleId  模板dom ID
       */
      beforeRender: function () {
          var cls = this;
          cls.setMergeModuleAttr();
          return cls;
      },
      /**
       * 因为是单例模式，设置或打开前要重置当前对象的 moduleId 和 $module
       */
      setModuleID: function (moduleId) {
          var cls = this;
  
          // 模块ID
          cls.options.moduleId = moduleId;
  
          // 模块对象
          cls.options.$module = $('#' + cls.options.moduleId);
  
          if (cls.options.$module.length == 0) {
              throw "moduleId 不存在"
          }
  
          return cls;
      },
      /**
       * 首次进入渲染方法
       * @param moduleId 模板DOM ID
       *
       * 渲染流程：设置当前渲染的模块ID》获取模块的配置项》根据配置项计算模块的宽度+间距等信息》根据配置项构建模拟数据》创建panel》创建模块样式style》添加模块样式名
       *
       */
      render: function (moduleId) {
  
          var cls = this;
  
          // 渲染前
          cls.setModuleID(moduleId).beforeRender();
  
          // 获取模拟数据，创建panel，计算模块高度，渲染模块
          cls.calculatedModuleHeight().getSimulationData().createPanel().calculatedPanel().renderAfter();
  
          return cls
      },
      /**
       * 渲染后执行方法
       * @returns {Component}
       */
      renderAfter: function () {
  
          var cls = this;
  
          // 动态创建样式，渲染模拟数据，过滤模块样式
          cls.createStyle().filterClassName(cls.options.pageIsFristLoad);
  
          cls.options.pageIsFristLoad = false;
  
          cls.options.isCreate = false;
  
          return cls;
      },
      /**
       * 创建组件样式
       * @param moduleId
       * @param conf
       */
      createStyle: function () {
          var cls = this;
  
          var option = cls.getModuleData(),
              conf = option.conf,
              tpl = option.tpl;
  
          if (!utils.isNul(conf.width) && !utils.isNul(conf.height)) {
              if (tpl.styleTpl && tpl.styleTpl[conf.style]) {
  
                  // 在组件渲染时,在 wraper 区动态创建一个 style
                  utils.createStyleInWrapById(option.moduleId);
  
                  // 装载CSS文件
                  var styleCompiled = _.template(tpl.styleTpl[conf.style]);
  
                  // 根据参数解析文件内容变量
                  var style = styleCompiled(option);
  
                  $('#' + option.moduleId + '_style').html(style);
              }
          }
  
          return this;
      },
      /**
       * 新建模块时根据默认配置创建html
       * @param $target
       * @param data
       * @returns {Component}
       */
      createModule: function ($target, data) {
          var cls = this,
              option = _.merge({}, cls.options, data),
              html = cls.moduleTplCompile(option)
          utils.log('option:', $target, html)
          $target.html(html);
          return cls;
      },
      /**
       * 创建 panel
       */
      createPanel: function () {
          var cls = this,
              html = cls.getPanelHtml();
          cls.options.$module.html(html);
  
          return cls;
      },
      /**
       * 获取 module 的 html
       * @param options
       */
      getModuleHtml: function () {
          var cls = this,
              data = cls.getModuleData(),
              html = cls.moduleTplCompile(data);
          return html;
      },
      /**
       * 获取 panel 的 html
       * @param options
       */
      getPanelHtml: function () {
          var cls = this,
              data = cls.getModuleData(),
              html = cls.panelTplCompile(data);
          return html;
      },
      /**
       * 获取 module + panel 模块完整的 HTML
       */
      getModulePanelHtml: function () {
          var cls = this,
              moduleHtml = cls.getModuleHtml();
          var html = $(moduleHtml).append(cls.getPanelHtml()).prop('outerHTML');
          return html;
      },
      /**
       * 返回模块的模板对象
       * @returns {html}
       */
      moduleTplCompile: function (data) {
          var cls = this;
          return template.compile(cls.options.tpl.moduleTpl)(data);
      },
      /**
       * 返回panel的模板对象
       * @returns {html}
       */
      panelTplCompile: function (data) {
          var cls = this,
              panelTpl = cls.options.tpl.panelTpl;
  
          if (utils.isNul(panelTpl)) {
              throw "panelTpl 不能为空！"
          }
  
          return template.compile(cls.options.tpl.panelTpl)(data);
      },
      /**
       * 获取模拟数据
       * @param options 公共配置
       * @returns {*}
       */
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls.createMoreHref(option);
  
  
          //如果是新建模块，测要计算字符串长度
          if (option.isCreate || base.IS_SORTABLE) {
              cls.setCalculateFontLength();
          }
  
          // 构建模拟数据
          option.data.list = mockData.getInfoList(option.label.num, option.label['length'], option.label.dateFormat).data;
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      },
      /**
       * 根据窗口宽度计算字符串长度
       * @returns {Component}
       */
      setCalculateFontLength: function () {
          var cls = this,
              option = cls.getModuleData();
  
          // TODO 根据容器的宽度自动计算字符长度
          option.label['length'] = utils.getFontLength(option.conf.width);
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      },
      /**
       * 创建模板更多链接
       */
      createMoreHref: function (option) {
          // TODO 多个标签时更多绑定的问题
          var cls = this;
          //option = cls.options;
  
          // option.conf.titleHref = config.getTitleHref(option.label.id);
          var siteId = option.label.siteId;
          if (!utils.getDevelopStatus() && siteId && siteId != top.window.GLOBAL_SITEID) {
              option.conf.titleHref = config.getOtherTitleHref(option.label.id, siteId);
          } else {
              option.conf.titleHref = config.getTitleHref(option.label.id);
          }
  
          return cls;
      },
      /**
       * 设置模块配置的参数
       * @returns {Component}
       */
      setMergeModuleAttr: function (options) {
          var cls = this,
              option = cls.options,
              $module = option.$module;
  
          var data = _.merge({}, cls.options, {
              conf: utils.parseOptions($module.attr('data-conf')),
              label: utils.parseOptions($module.attr('data-label'))
          });
  
          if (!data.conf.className) {
              data.conf.className = data.type;
          }
  
          data.styleList = $.Site['STYLELIST'] && $.Site['STYLELIST'][data.type] ? JSON.stringify($.Site['STYLELIST'][data.type]) : "";
  
          var _data = _.merge(data, options);
  
          cls.setModuleData(_data);
  
          return cls;
      },
      /**
       * 写入模块处理后的属性
       * @param data
       * @returns {Component}
       */
      setModuleData: function (data) {
          var cls = this,
              option = cls.options,
              $module = option.$module;
          var _data = _.cloneDeep(data);
          $module.data("option", _data);
          $module.attr('data-label', utils.jsonStringify(data.label));
          $module.attr('data-conf', utils.jsonStringify(data.conf));
  
          return cls;
      },
      /**
       * 获取模块处理后的属性
       * @param moduleId
       * @returns option
       */
      getModuleData: function (moduleId) {
  
          var cls = this,
              option = {};
  
          if (moduleId) {
              option = $("#" + moduleId).data("option");
          } else {
              option = cls.options.$module.data("option");
          }
  
          return option || {};
      },
      /**
       * 计算 module 的宽度,高度和 panel 的 padding 值，方法要执行在 createPanel 后
       * @param $target
       * @param conf
       * @returns {Component}
       */
      calculatedModuleHeight: function ($module) {
          var cls = this,
              width = 0,
              $module = $module ? $module : cls.options.$module,
              $panel = $module.find('.panel'),
              option = cls.getModuleData(),
              conf = option.conf;
  
          // 计算 组件 宽度
          if (utils.isNul(conf.width)) {
              width = $module.hasClass(doms.module.substring(1)) ? $module.parent(doms.col).innerWidth() : $module.innerWidth();
              conf.width = width - utils.getIntegerFixPX($(doms.module).css('margin-right'));
          }
          // cls.log('id: ' + $module[0].id + ',panelPadding: ' + conf.panelPadding + ',outerWidth: ' + width + ', innerWidth: ' + $module.innerWidth() + ', width: ' + $module.width() + ',borderLeftWidth: ' + conf.borderLeftWidth + ',borderRightWidth: ' + conf.borderRightWidth + ',borderTopWidth: ' + conf.borderTopWidth + ',borderBottomWidth: ' + conf.borderBottomWidth);
          // 计算 组件 高度
          if (utils.isNul(conf.height)) {
              conf.height = $module.innerHeight();
          }
  
  
          //合并参数
          cls.setModuleData(utils.assignClone(option, {
              conf: conf
          }));
  
          return cls;
      },
      /**
       * 计算 panel 的宽度,高度和  padding 值，方法要执行在 createPanel 后
       * @param conf
       * @returns {Component}
       */
      calculatedPanel: function ($module) {
          var cls = this,
              width = 0,
              $module = $module ? $module : cls.options.$module,
              $panel = $module.find('.panel'),
              option = cls.getModuleData(),
              conf = option.conf;
  
          // 计算 panel 的 padding 值
          if (_.isUndefined(conf.panelPadding) || conf.panelPadding == null) {
              conf.panelPadding = utils.getIntegerFixPX($panel.css('padding'));
          }
  
          // 计算 panel 的 border 值
          if (_.isUndefined(conf.borderLeftWidth) || conf.borderLeftWidth == null) {
              conf.borderLeftWidth = utils.getIntegerFixPX($panel.css('border-left-width'));
          }
          if (_.isUndefined(conf.borderRightWidth) || conf.borderRightWidth == null) {
              conf.borderRightWidth = utils.getIntegerFixPX($panel.css('border-right-width'));
          }
          if (_.isUndefined(conf.borderTopWidth) || conf.borderTopWidth == null) {
              conf.borderTopWidth = utils.getIntegerFixPX($panel.css('border-top-width'));
          }
          if (_.isUndefined(conf.borderBottomWidth) || conf.borderBottomWidth == null) {
              conf.borderBottomWidth = utils.getIntegerFixPX($panel.css('border-bottom-width'));
          }
  
          conf.panelWidth = conf.width - (conf.panelPadding * 2) - conf.borderLeftWidth - conf.borderRightWidth;
          conf.panelHeight = conf.height - (conf.panelPadding * 2) - conf.borderTopWidth - conf.borderBottomWidth;
  
          // 计算 组件  panel-heading 高度
          var $panelHeading = $module.find('.panel-heading');
          if ($panelHeading.length > 0) {
              if (!conf.panelHeadingHeight || conf.panelHeadingHeight == null) {
                  conf.panelHeadingHeight = !$panelHeading.hasClass('dn') ? $module.find('.panel-heading').outerHeight() : 0;
                  // utils.log('conf.panelHeadingHeight: ', conf.panelHeadingHeight);
              }
              // 计算 组件 panel-body 高度
              if (utils.isNul(conf.panelBodyHeight)) {
                  conf.panelBodyHeight = $panelHeading.hasClass('dn') ? conf.height - 2 : conf.height - conf.panelHeadingHeight - 2;
              }
  
          } else {
              conf.panelHeadingHeight = 0;
              conf.panelBodyHeight = conf.height - 2;
          }
  
          //合并参数
          cls.setModuleData(utils.assignClone(option, {
              conf: conf
          }));
  
          return cls;
      },
      /**
       * 标签设置窗口
       */
      open: function () {
  
          var cls = this,
              option = cls.options,
              openConf = option.open.conf,
              // 弹窗配置
              type = option.type,
              url = openConf.url,
              width = openConf.width,
              height = openConf.height,
              title = openConf.title;
  
          option.open.win.open(type, url, type, width, height, title);
  
      },
      /**
       * 初始化组件设置表单
       * @param vueConf
       * @returns {Component}
       */
      initForm: function (vueConf) {
  
          var cls = this;
  
          // 使用本地存储功能取得当前编辑的组件ID
          var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
          if (!curEditModuleId) {
              alert('控件对象不存在!');
              return;
          }
  
          // 取得主题模板中的窗口对象
          // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
          // 隶属两个窗口对象,在使用时切勿混淆
          var tplWin = base.templateWindow;
  
          var $module = tplWin.$('#' + curEditModuleId);
  
          utils.log('$module:', JSON.stringify($module.data("option")))
  
          // 父窗口取子父窗体对象
          var data = _.cloneDeep($module.data("option"));//base.templateApp[cls.options.type].setMergeModuleAttr(curEditModuleId).options;
  
          // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
          // 销毁对象使用base.vm.$destroy()
          var _methods = {
              onTargetChange: function (value) {
                  // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
                  this.label.target = value;
              },
              onDateFormatChange: function (value) {
                  // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
                  this.label.dateFormat = value;
              },
              // 关联栏目
              associateNode: function () {
                  //  utils.log('cls.selectNodeWinUrl: ' + cls.selectNodeWinUrl);
                  Ls.openWin(cls.selectNodeWinUrl, '400px', '400px', {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId && data[0].siteId != top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              if (isOtherSite) {
                                  base.vm.label.siteId = data[0].siteId;
                              }
  
                          }
                      }
                  });
              }
          };
  
          var _computed = {
              // a computed getter
              isRelation: function () {
                  return utils.isNul(this.label.id) || this.label.id == 0;
              }
          };
  
          var _watch = {};
  
          _.assign(_methods, vueCommon.methods);
          _.assign(_computed, vueCommon.computed);
          _.assign(_watch, vueCommon.watch);
  
          utils.log('initForm.data:', data);
  
          var _defaults = _.merge({
              el: '#attrForm',
              data: data,
              watch: _watch,
              methods: _methods,
              computed: _computed
          }, vueConf);
  
          utils.log('_defaults:', _defaults)
  
          base.vm = new Vue(_defaults);
  
          // 绑定验证表单
          $('#attrForm').validate({
              success: function () {
                  base.attrFormValidateState = true;
                  return false;
              },
              fail: function () {
                  base.attrFormValidateState = false;
                  return false;
              }
          });
  
          return cls;
      },
      /**
       * 设置表单提交
       * @returns {*}
       */
      formSumbit: function () {
          var cls = this;
          return commonModuleFunction.componentCommonFormSubmitFn(cls.options.type, base);
      },
      /**
       * 创建新模块
       * @param $target
       */
      create: function ($target) {
          var cls = this;
  
          // 是否是创建模块
          cls.options.isCreate = true;
  
          // 创建唯一ID
          cls.options.moduleId = utils.createModuleUniqueId();
  
          cls
          // 创建 module
              .createModule($target, cls.options)
              // 创建panel,渲染模拟数据，计算模块高度
              .setModuleID(cls.options.moduleId)
              // 设置模块配置的参数
              .beforeRender()
              // 计算 module 的宽度
              .calculatedModuleHeight($target)
              // 获取模拟数据
              .getSimulationData()
              // 创建 panel
              .createPanel()
              .calculatedPanel()
              // 渲染完成后
              .renderAfter();
  
      },
      /**
       * 过滤模块样式
       * @param pageIsFristLoad
       */
      filterClassName: function (pageIsFristLoad) {
          var cls = this,
              option = cls.options;
  
          var css = option.$module.removeClass(option.type).attr("class"),
              re = new RegExp(option.type + "-(\\w+)", "gi");
  
          //非初始化，清空所有样式
          if (!pageIsFristLoad) {
              option.$module.removeClass();
          }
  
          option.$module.addClass((css + "").replace(re, "") + " " + option.type || "");
  
          return cls;
      },
      /**
       * 保存前解析配置成EX8标签
       * @param options
       * @returns {*}
       */
      parseSave: function (options) {
          var cls = this;
  
          // 1. 取得panel的html内容
          var panelHtml = cls.getPanelHtml(),
              $panelHtml = $(panelHtml);
  
          // 解析标签
          var labelStr = '', isValid = true;
          if (utils.isNul(options.label.id)) {
              isValid = false;
          } else {
  
              // 解析标签
              labelStr = utils.parseLabel(options.label);
  
              // 将解析后的标签回写到 panel 中
              $panelHtml.find('.ls-label').html(labelStr);
          }
  
          // 返回 panel 的 HTML
          return isValid ? $panelHtml.prop('outerHTML') : null;
  
      },
      /**
       * 重新渲染模块
       * @param moduleId
       * @param options
       */
      reRender: function (moduleId, options) {
          var cls = this;
  
          // 重新渲染
          cls.setModuleID(moduleId).setMergeModuleAttr({
              conf: options.conf,
              label: options.label
          }).calculatedModuleHeight().getSimulationData().createPanel().calculatedPanel().renderAfter();
  
          cls.options.isCreate = false;
      },
      setModuleAttrData: function (moduleId, options) {
          return this.reRender(moduleId, options)
      }
  })
  
  base.plugin('component', new Component());
  
  module.exports = Component;
  

});

;/*!app/components/video-play/index.js*/
define('app/components/video-play/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var labels = require('app/common/labels');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _VideoPlay = function () {
  }
  
  _VideoPlay.prototype = {
      init: function () {
  
          var cls = this;
  
          cls._super();
  
          cls.contentModuleType = 'videoNews';
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'videoPlay',
              conf: {
                  height: 230,
                  showType: 'multi',
                  scroll: {
                      speed: 3, //单位秒
                      autoScroll: true
                  }
              },
              open: {
                  conf: {
                      url: '/assets/design/form/app/components/video-play/form.html'
                  }
              },
              label: labels.videoNewsList,
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel {{if conf.showType=='single'}}single{{/if}}\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\" id=\"{{moduleId}}_scroll\">\r\n        {{ if conf.showType == 'single'}}\r\n        <div class=\"video-content\">\r\n            <div class=\"video-player\"  data-setting=\"{width:{{conf.imgWidth}},height:{{conf.imgHeight}},f:'{{conf.url}}'}\"></div>\r\n            <!--http://ex8dev.5397078.cn/mongo/597999bab27a38ba65675b48&c=0-->\r\n        </div>\r\n        {{else}}\r\n        <div class=\"ls-scroll clearfix\" data-setting=\"\">\r\n            <!--<span class=\"prev\"></span>-->\r\n            <!--<span class=\"next\"></span>-->\r\n            <div class=\"scroll-wrap\">\r\n                <ul class=\"scroll-body clearfix ls-label\">\r\n                    {{each data.list as el index}}\r\n                    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                        <a href=\"{{el.href}}\" target=\"{{el.target}}\" title=\"{{el.title}}\" class=\"left\">\r\n                            <img class=\"video-thumb\" border=\"0\" src=\"{{el.imageLink}}\" title=\"{{el.title}}\"/>\r\n                            <span class=\"title\">{{el.title}}</span>\r\n                            <p></p>\r\n                        </a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n/*.<%= moduleId %>_panel .panel-body { height: <%=conf.height%>px; }*/\r\n.<%= moduleId %>_panel .scroll-wrap{ width: <%= conf.width - (conf.panelPadding * 2) %>px; height: <%=conf.imgHeight%>px;overflow:hidden; position:relative;}\r\n.<%= moduleId %>_panel ul li,\r\n.<%= moduleId %>_panel ul li a,\r\n.<%= moduleId %>_panel ul li a img{width:<%=  conf.imgWidth %>px!important;height:<%= conf.imgHeight %>px!important;overflow: hidden;}\r\n.<%= moduleId %>_panel ul li a .title{width:<%=  conf.imgWidth %>px!important;}\r\n.<%= moduleId %>_panel ul li a .title-inner{width:<%=  conf.imgWidth - 20 %>px; text-align: center}"
                  }
              }
          });
  
      },
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls._super();
  
          // 未设置图片宽高或者拖动位置时，动态计算图片的宽高
          if (utils.isNul(option.conf.imgWidth) || base.IS_SORTABLE) {
              if(option.conf.showType == 'single') {
                  option.conf.imgWidth = option.conf.width;
  
              }else {
                  option.conf.imgWidth = (option.conf.width -10) / 2;
              }
          }
          if (utils.isNul(option.conf.imgHeight) || base.IS_SORTABLE) {
              option.conf.imgHeight = option.conf.height - 80;
  
          }
  
          // 构造图片占位符代码
          option.placeholderOpt = 'size='+option.conf.imgWidth+'x'+option.conf.imgHeight+'&text='+option.conf.imgWidth+'x'+option.conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          option.placeholderClass = 'placeholder';
  
          cls.setModuleData(option);
  
          return cls;
      },
      renderAfter: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls._super();
  
          utils.placeholderRender(option.moduleId);
  
          option.$module.find('.ls-scroll').attr("data-setting",utils.jsonStringify(option.conf.scroll));
  
          if(option.conf.showType=='single') {
              setTimeout(function () {
                  Ls.www.swfPlayer();
              }, 1000)
  
          }else {
              setTimeout(function () {
                  Ls.www.scroll();
              }, 1000)
          }
  
  
          return cls;
      },
      initForm: function () {
          var cls = this;
  
          cls._super({
              methods: {
                  onTypeChange: function (value) {
                      Ls.log('ev',value);
                      this.conf.showType = value;
                      if(value == 'single') {
                          this.conf.imgWidth = this.conf.width;
                      }else {
                          this.conf.imgWidth = (this.conf.width -10) / 2;
                      }
                      this.conf.imgHeight = this.conf.height-80;
  
                  },
                  // 关联栏目
                  associateNode: function () {
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio'
                      },function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      })
  
                  }
              }
          });
      }
  
  }
  
  var VideoPlay = components.extend(_VideoPlay.prototype);
  
  base.plugin('videoPlay', new VideoPlay());
  
  module.exports = VideoPlay;
  

});

;/*!app/components/vote/index.js*/
define('app/components/vote/index', function(require, exports, module) {

  /**
   * 文章信息列表
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _Vote = function () {
  }
  
  _Vote.prototype = {
      init: function () {
  
          this._super();
  
          var cls = this;
  
          cls.contentModuleType = 'survey';
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: 'articleNews',
              // 模块类型
              type: 'vote',
              conf: {
                  height: 330
              },
              // 对应标签的内容项
              label: require('app/common/labels').surveyList,
              open: {
                  conf: {
                      url: '/assets/design/form/app/components/vote/form.html'
                  }
              },
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            <ul class=\"list ls-label\">\r\n                {{each data.list as el index}}\r\n                <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                    <a href=\"{{el.href}}\" target=\"{{label.target}}\">{{el.title}}</a>\r\n                    <span class=\"right date {{label.isDate&&label.dateType==1 | displayShow}}\">{{el.createDate}}</span>\r\n                    <span class=\"right date {{label.isDate&&label.dateType==2 | displayShow}}\">{{el.startDate}} - {{el.endDate}}</span>\r\n                    {{if el.isTimeOut == \"1\"}}\r\n                    <span class=\"nostart\">未开始</span>\r\n                    {{/if}}\r\n                    {{if el.isTimeOut == \"2\"}}\r\n                    <span class=\"starting\">进行中</span>\r\n                    {{/if}}\r\n                    {{if el.isTimeOut == \"3\"}}\r\n                    <span class=\"over\">已结束</span>\r\n                    {{/if}}\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
                  }
              }
          });
  
      },
      getSimulationData: function () {
  
          var cls = this,
              option = cls.getModuleData();
  
          cls._super();
  
          option.data.list = mockData.getVoteList(option.label.num, option.label.length, option.label.dateFormat, option.label.dateType).data;
  
          cls.setModuleData(option);
  
          return cls;
      },
      initForm: function () {
          var cls = this;
          cls._super({
              methods: {
                  // 关联栏目
                  associateNode: function () {
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio'
                      },function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      })
  
                  }
              }
          })
      }
  }
  
  var Vote = components.extend(_Vote.prototype);
  
  base.plugin('vote', new Vote());
  
  module.exports = Vote;
  

});

;/*!app/components/tabs-content/index.js*/
define('app/components/tabs-content/index', function(require, exports, module) {

  'use strict';
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var labels = require('app/common/labels');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _TabsContent = function () {
  }
  
  _TabsContent.prototype = {
      init: function () {
  
          var cls = this;
  
          cls._super();
  
          cls.contentModuleType = 'articleNews';
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'tabsContent',
              conf: {
                  num: 8,
                  textLen: 20,
                  titleHref: '#',
                  toggle: 'mouse',
                  layout: 'leftRight',
                  tabs:[]
              },
              open: {
                  conf: {
                      width: 780,
                      height: 480,
                      url: '/assets/design/form/app/components/tabs-content/form.html'
                  }
              },
              label: {},
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\" id=\"{{moduleId}}_scroll\">\r\n        <div class=\"tab-nav {{if conf.layout != 'topBottom'}}lr{{/if}}\">\r\n            <ul class=\"list\">\r\n                {{each conf.tabs as el index}}\r\n                <li class=\"{{el.active | activeFilter }}\">\r\n                    <a href=\"{{ if conf.toggle == 'mouse'}} {{ el.dataUrl }} {{else}} javascript:void(0) {{/if}}\" id=\"#{{el.dataId}}\"\r\n                       data-id=\"#{{el.dataId}}\"\r\n                       data-toggle=\"{{conf.toggle}}\"\r\n                       data-url=\"{{el.dataUrl}}\">\r\n                        <span class=\"tab-title\">{{el.name}}</span>\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n        <div class=\"tab-content {{if conf.layout != 'topBottom'}}lr{{/if}}\">\r\n            {{each conf.tabs as el index}}\r\n            <ul class=\"tab-panel list {{el.active | activeFilter }} clearfix\" id=\"{{ el.dataId }}\">\r\n                {{each data.list as info index}}\r\n                <li class=\"clearfix\">\r\n                    <a href=\"{{info.href}}\" target=\"{{conf.target}}\">{{info.title}}</a>\r\n                    <span class=\"date right\">{{info.createDate}}</span>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n            {{/each}}\r\n        </div>\r\n\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
                  }
              }
          });
  
      },
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls._super();
  
          //若为新建模块
          if (option.isCreate) {
              // var tabId = _.uniqueId(option.moduleId + '_tab');
              var tabIds = [];
              $.each(option.conf.tabs, function (key,val) {
                  tabIds.push(val.dataId);
              });
              var tabId = utils.createUniqueId(option.moduleId + '_tab', _.uniqueId(option.moduleId + '_tab'), tabIds);
              var tab = {
                  name: '新tab',
                  dataUrl: '#',
                  dataMore: option.conf.moreId,  // jquery 选择器
                  dataId: tabId, // jquery 选择器
                  active: true
              };
  
              var label = {};
              label[tabId] = _.cloneDeep(labels.docList);
              label[tabId].length = utils.getFontLength(option.conf.width);
              if (!_.isArray(option.conf.tabs)) {
                  option.conf.tabs = [];
              }
              if (!_.isArray(option.label)) {
                  option.label = [];
              }
              option.conf.tabs.push(tab);
              option.label = label;
  
          }
  
          if (base.IS_SORTABLE) {
              // 根据容器的宽度自动计算字符长度
              option.conf.textLen = utils.getFontLength(option.conf.width);
  
          }
  
          //挂载模拟数据
          option.data.list = mockData.getInfoList(option.conf.num, option.conf.textLen, option.conf.dateFormat).data;
  
          // 构造标题更多链接
          // _.forEach(option.conf.tabs,function (val) {
          //     if(val.active){
          //         option.conf.moreUrl = config.getTitleHref(option.label[val.dataId].id);
          //     }
          // })
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      },
      createMoreHref: function (option) {
          var cls = this;
  
          option.conf.moreId = option.moduleId + '_more';
  
          return cls;
      },
      initForm: function () {
          var cls = this;
          // 使用本地存储功能取得当前编辑的组件ID
          var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
          if (!curEditModuleId) {
              alert('控件对象不存在!');
              return;
          }
  
          cls._super({
              methods: {
                  add: function () {
                      var vueData = this;
                      cls.__addTab4Vue(vueData, curEditModuleId, null, '新tab', '#', this.conf.moreId, false);
                  },
                  // 向上移动
                  moveUp: function (index) {
                      // utils.log('moveUp: ' + index);
                      if (index == 0) {
                          return;
                      }
                      this.conf.tabs[index] = this.conf.tabs.splice((index - 1), 1, this.conf.tabs[index])[0];
  
                  },
                  moveDown: function (index) {
                      // utils.log('moveDown: ' + index);
                      if (index == this.conf.tabs.length - 1) {
                          return;
                      }
                      this.conf.tabs[index] = this.conf.tabs.splice((index + 1), 1, this.conf.tabs[index])[0];
                      // utils.swapItems(this.conf.tabs, index, index + 1);
                  },
                  remove: function (index,dataId) {
                      var isDelDefault = false;
                      if(this.conf.tabs[index]['active'] == true) {
                          isDelDefault = true;
                      }
                      this.conf.tabs.splice(index, 1);
                      if(isDelDefault) {//若删除的是默认选中项，则重新设置第一个tab为默认选中项
                          this.conf.tabs[0]['active'] = true;
                      }
                      utils.log('dataId',dataId);
                  },
                  // 关联栏目
                  associateNode: function (index) {
                      var vueData = this, conf = this.conf, label = this.label;
                      if (this.conf.tabs.length > 4) {
                          Ls.tipsErr('tab组件最多只能关联5个栏目');
                          return;
                      }
                      var curTab = "",tabId="";
                      if(index>-1) {
                          curTab = conf.tabs[index];
                          tabId = curTab.dataId;
                      }
  
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio',
                          tabId: tabId
                      }, function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              // base.vm.conf.title = data[0].name;
                              var ids = [];
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
                              }
                              // base.vm.label.id = ids.join(',');
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              var url = isOtherSite ? config.getOtherTitleHref(ids.join(','),data[0].siteId) :config.getTitleHref(ids.join(','));
                              if (index > -1) {
                                  // utils.log('InfoTabs.prototype.initForm associateNode curTab: ', JSON.stringify(curTab));
                                  if (curTab && label[curTab.dataId]) {
                                      conf.tabs[index].name = data[0].name;
                                      label[curTab.dataId].id = ids.join(',');
                                      label[curTab.dataId].siteId = isOtherSite ? data[0].siteId : "";
                                  }
                              } else {
                                  var siteId = isOtherSite ? data[0].siteId : null;
                                  cls.__addTab4Vue(vueData, curEditModuleId, ids, data[0].name, url, conf.moreId, false, siteId);
                              }
  
                          }
                      });
  
  
                  }
              }
          });
  
  
      },
      __addTab4Vue: function (vueData, moduleId, ids, name, url, moreId, isActive, siteId) {
          // var tabId = _.uniqueId(moduleId + '_tab');
          var tabIds = [];
          $.each(vueData.conf.tabs, function (key,val) {
              tabIds.push(val.dataId);
          });
          var tabId = utils.createUniqueId(moduleId + '_tab', _.uniqueId(moduleId + '_tab'), tabIds);
  
          isActive = isActive || false;
          var tab = {
              name: name,
              dataUrl: url,
              dataMore: moreId,  // jquery 选择器
              dataId: tabId, // jquery 选择器
              active: isActive
          };
          var label = _.cloneDeep(labels.docList);
          label.id = ids ? ids.join(',') : "";
          label.siteId = siteId || "";
          vueData.conf.tabs.push(tab);
          vueData.label[tabId] = label;
      },
      setMergeModuleAttr: function (options) {
          var cls = this,
              option = cls.options,
              $module = option.$module;
  
          var data = _.merge({}, cls.options, {
              conf: utils.parseOptions($module.attr('data-conf')),
              label: utils.parseOptions($module.attr('data-label'))
          });
  
          if (!data.conf.className) {
              data.conf.className = data.type;
          }
  
          data.styleList = $.Site['STYLELIST'] && $.Site['STYLELIST'][data.type] ? JSON.stringify($.Site['STYLELIST'][data.type]) : "";
  
          var _data = _.merge(data, options);
  
          if(options) {
              _data.conf.tabs = _.cloneDeep(options.conf.tabs);
          }
  
          _.forEach(_data.conf.tabs, function (value) {
              value.dataMore = _data.conf.moreId;
              if (_data.label[value.dataId]) {
                  var siteId = _data.label[value.dataId].siteId;
  
                  if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) { //非此站点栏目
                      value.dataUrl = config.getOtherTitleHref(_data.label[value.dataId].id, siteId);
                  }else {
                      value.dataUrl = config.getTitleHref(_data.label[value.dataId].id);
                  }
  
                  _data.label[value.dataId]['length'] = _data.conf.textLen;
                  _data.label[value.dataId].num = _data.conf.num;
              }
          });
  
  
          cls.setModuleData(_data);
  
  
          return cls;
      },
      parseSave: function (options) {
          var cls = this;
  
          // 1. 取得panel的html内容
          var panelHtml = cls.getPanelHtml(),
              $panelHtml = $(panelHtml);
  
          // 解析标签
          var labelStr = '', label = '', isValid = true;
          _.forEach(options.conf.tabs, function (tab) {
              label = options.label[tab.dataId];
              if (utils.isNul(label.id)) {
                  isValid = false;
                  return false;
              }
              labelStr = utils.parseLabel(label);
              $panelHtml.find('#' + tab.dataId).html(labelStr);
          });
  
          // 返回 panel 的 HTML
          return isValid ? $panelHtml.prop('outerHTML') : null;
      }
  
  }
  
  var TabsContent = components.extend(_TabsContent.prototype);
  
  base.plugin('tabsContent', new TabsContent());
  
  module.exports = TabsContent;
  

});

;/*!app/common/class2.js*/
define('app/common/class2', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-19.
   * http://www.alloyteam.com/2015/04/xiang-es6-kao-qi-di-class-js/
   */
  
  
  //所有类的基类
  var Class = function () { };
  
  //基类增加一个extend方法
  Class.extend = function (prop) {
      var _super = this.prototype;
  
      initializing = true;
      var prototype = new this();
      initializing = false;
  
      //父类的实例赋给变量prototype
      var prototype = new this();
      //把要扩展的属性复制到prototype变量上
      for (var name in prop) {
          //下面代码是让ctor里可以直接访问使用this._super访问父类构造函数，除了ctor的其他方法，this._super都是访问父类的实例
          prototype[name] = name == "init" && typeof prop[name] == "function" &&
          typeof _super[name] == "function" ?
              (function (name, fn) {
                  return function () {
                      //备份一下this._super
                      var tmp = this._super;
                      //替换成父类的同名ctor方法
                      this._super = _super[name];
                      //执行，此时fn中的this里面的this._super已经换成了_super[name],即父类的同名方法
                      var ret = fn.apply(this, arguments);
                      //把备份的还原回去
                      this._super = tmp;
                      return ret;
                  };
              })(name, prop[name]) :
              prop[name];
      }
  
      //假的构造函数
      function Class() {
          //执行真正的ctor构造函数
          // this.ctor.apply(this, arguments);
          if (!initializing && this.init)
              this.init.apply(this, arguments);
      }
  
      //继承父类的静态属性
      for (var key in this) {
          if (this.hasOwnProperty(key) && key != "extend")
              Class[key] = this[key];
      }
  
      // 子类的原型指向父类的实例
      Class.prototype = prototype;
  
      //这里一定要用new this
      //不能Class.prototype._super = prototype;（这里明显错误，prototype这时已经被copy进去了新的属性）
      //或者Class.prototype._super = _super;（这里会导致_super instanceof 不准确 ）
      Class.prototype._super = new this();
  
      //覆盖父类的静态属性
      if (prop.statics) {
          for (var name in prop.statics) {
              if (prop.statics.hasOwnProperty(name)) {
                  Class[name] = prop.statics[name];
                  if (name == "init") {
                      Class[name]();
                  }
              }
          }
      }
  
      Class.prototype.constructor = Class;
  
      //原型可扩展
      Class.extendPrototype = function (prop) {
          for (var name in prop) {
              prototype[name] = prop[name];
          }
      };
  
      //任何Class.extend的返回对象都将具备extend方法
      Class.extend = arguments.callee;
  
      return Class;
  };
  
  module.exports = Class;

});

;/*!app/common/vueui/form/control-group.js*/
define('app/common/vueui/form/control-group', function(require, exports, module) {

  /**
   * UI 组件类
   * Created by Dzl on 2017-3-9.
   *
   *  @require 'lib/vue.min.js'
   */
  
  // app/common/vueui/form/control-group.js
  'use strict';
  
  
  Vue.component('SuiControlGroup', {
      props:{
          title: {
              type: String,
              default: ''
          },
      },
      computed: {
          _title:function () {
              return this.title === '' ? '' : this.title + '：';
          }
      },
      template: '<div class="control-group"><label class="control-label" >{{_title}}</label><div class="controls"><slot></slot></div></div> '
  
  });
  

});

;/*!app/common/vueui/emitter.js*/
define('app/common/vueui/emitter', function(require, exports, module) {

  function broadcast(componentName, eventName, params) {
    this.$children.forEach(function (child) {
      var name = child.$options.componentName;
      if (name === componentName) {
        child.$emit.apply(child, [eventName].concat(params));
      } else {
        broadcast.apply(child, [componentName, eventName].concat(params));
      }
    })
  }
  
  module.exports = {
    methods: {
      dispatch: function(componentName, eventName, params) {
        var parent = this.$parent || this.$root;
        var name = parent.$options.componentName;
  
        while (parent && (!name || name !== componentName)) {
          parent = parent.$parent;
  
          if (parent) {
            name = parent.$options.componentName;
          }
        }
        if (parent) {
          parent.$emit.apply(parent, [eventName].concat(params));
        }
      },
      broadcast: function(componentName, eventName, params) {
        broadcast.call(this, componentName, eventName, params);
      }
    }
  };
  

});

;/*!app/common/vueui/form/radio.js*/
define('app/common/vueui/form/radio', function(require, exports, module) {

  /**
   * UI 组件类
   * Created by Dzl on 2017-3-9.
   *
   *  @require 'lib/vue.min.js'
   */
  
  // app/common/vueui/form/radio.js
   'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  
  Vue.component('SuiRadio', {
      props:{
          value: [String, Number],
          label: {
              type: [String, Number],
              required: true
          },
          disabled: Boolean,
          name: String
      },
      template: '<label class="radio-pretty inline" :class="{\'checked\': _value == label}"> ' +
                  '<input :name="name" :value="label" type="radio" v-model="_value" > ' +
                  '<span><slot></slot><template v-if="!$slots.default">{{label}}</template></span> ' +
              '</label> ',
      computed: {
          _value: {
              // getter
              get: function () {
                  return this.value !== undefined ? this.value : this.$parent.value;
              },
              // setter
              set: function (newValue) {
                  if (this.value !== undefined) {
                      this.$emit('input', newValue);
                  } else {
                      this.$parent.$emit('input', newValue);
                  }
              }
          }
      }
  });
  

});

;/*!app/common/vueui/form/radio-group.js*/
define('app/common/vueui/form/radio-group', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-10.
   */
  
  
  // app/common/vueui/form/radio-group.js
  'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  Vue.component('SuiRadioGroup', {
      componentName: 'radio-group',
      props:{
          value: [String, Number],
          title: {
              type: String,
              default: ''
          },
          size: String
      },
      mixins: [emitter],
      watch: {
          value:function(value) {
              this.$emit('change', value);
              this.dispatch('form-item', 'el.form.change', [this.value]);
          }
      },
      template: '<div class="controls"><slot></slot></div> '
  });
  

});

;/*!app/common/vueui/form/checkbox.js*/
define('app/common/vueui/form/checkbox', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-10.
   */
  
  // app/common/vueui/form/checkbox.js
  'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  var utils = require('app/common/utils');
  
  Vue.component('SuiCheckbox', {
  	//  componentName
      componentName: 'SuiCheckbox',
      props:{
          value: {},
          label: String,
          disabled: Boolean,
          checked: Boolean,
          trueLabel: [String, Number],
          falseLabel: [String, Number]
      },
      mixins: [emitter],
      data:function () {
          return {
              focus: false,
              wrapInGroup: this.$parent.$options._componentTag === 'sui-checkbox-group'
          };
      },
      computed: {
          _value: {
              get: function () {
                  // utils.log('checkox computed _value get this.wrapInGroup: ',this.wrapInGroup);
                  // utils.log('checkox computed _value set this.value: ',this.value);
                  // utils.log('checkox computed _value set this.$parent.value: ',this.$parent.value);
                  return !this.wrapInGroup ? this.value : this.$parent.value;
              },
              set: function (newValue) {
                  // utils.log('checkox computed _value set newValue: ',newValue);
                  // utils.log('checkox computed _value set this.wrapInGroup: ',this.wrapInGroup);
                  // utils.log('checkox computed _value set this.$parent: ',this.$parent);
                  if (!this.wrapInGroup) {
                      this.$emit('input', newValue);
                  } else {
                      this.$parent.$emit('input', newValue);
                  }
              }
          },
          isChecked:function () {
              var type = Object.prototype.toString.call(this._value);
              // console.log('checkox computed isChecked this._value: ',this._value);
              // console.log('checkox computed isChecked type: ',type);
              if (type === '[object Boolean]') {
                  return this._value;
              } else if (type === '[object Array]') {
                  return this._value.indexOf(this.label) > -1;
              } else if (type === '[object String]' || type === '[object Number]') {
                  return this._value === this.trueLabel;
              }
          }
      },
      watch: {
          checked: {
              handler:function (value) {
                  // console.log('checkox watch checked handler value: ',value);
                  // console.log('checkox watch checked handler this._value: ',this._value);
                  if (value) {
                      var type = Object.prototype.toString.call(this._value);
                      // console.log('checkox watch checked handler type: ',type);
                      // console.log('checkox watch checked handler type: ',type !== '[object Array]');
                      if (type !== '[object Array]') {
                          this._value = this.trueLabel || true;
                      } else {
                          this.label ? this._value.push(this.label): this._value.push(value);
                      }
                  }
              }
          }
      },
      methods: {
          handleChange:function (ev) {
              // console.log('checkox methods handleChange: ',ev);
              this.$emit('change', ev);
              // this.checked = ev.target.checked;
              // this.value = ev.target.value;
          }
      },
      template: "<label class=\"checkbox-pretty inline\" :class=\"{'checked': isChecked,'disabled':disabled}\">\r\n    <input\r\n            v-if=\"trueLabel || falseLabel\"\r\n            :name=\"name\"\r\n            :value=\"label\"\r\n            type=\"checkbox\"\r\n            v-model=\"_value\"\r\n           :true-value=\"trueLabel\"\r\n           :false-value=\"falseLabel\"\r\n            :disabled=\"disabled\"\r\n            @change=\"handleChange\"\r\n            ref=\"checkbox\">\r\n    <input\r\n            v-else\r\n            :name=\"name\"\r\n            :value=\"label\"\r\n            type=\"checkbox\"\r\n            v-model=\"_value\"\r\n            :disabled=\"disabled\"\r\n           @change=\"handleChange\">\r\n    <span>\r\n        <slot></slot>\r\n        <template v-if=\"!$slots.default\">{{label}}</template>\r\n    </span>\r\n</label>"
  });
  

});

;/*!app/common/vueui/form/checkbox-group.js*/
define('app/common/vueui/form/checkbox-group', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-10.
   */
  
  
  // app/common/vueui/form/checkbox-group.js
  'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  var utils = require('app/common/utils');
  
  Vue.component('SuiCheckboxGroup', {
  	// 事件传播依赖 componentName
      componentName: 'SuiCheckboxGroup',
      props:{
          value: {}
      },
      mixins: [emitter],
      watch: {
          value:function(value) {
              utils.log('checkbox-group watch value: ',value);
              this.$emit('change', value);
              this.dispatch('form-item', 'el.form.change', [value]);
          }
      },
      template: '<div class="sui-checkbox-group"><slot></slot></div> '
  });
  

});

;/*!app/common/vueui/form/input.js*/
define('app/common/vueui/form/input', function(require, exports, module) {

  /**
   * UI 组件类 - input
   * Created by Dzl on 2017-3-9.
   *
   *  @require 'lib/vue.min.js'
   */
  
  // app/common/vueui/input/index.js
  'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  
  Vue.component('SuiInput', {
      mixins: [emitter],
      template:"<input v-if=\"type !== 'textarea'\"\r\n       class=\"input-default\"\r\n       :class=\"[ size ? 'input-' + size : '',{'uneditable-input':disabled}]\"\r\n       :type=\"type\"\r\n       :name=\"name\"\r\n       :data-rules=\"rules\"\r\n       :data-error-msg=\"errmsg\"\r\n       :data-empty-msg=\"emptymsg\"\r\n       :placeholder=\"placeholder\"\r\n       :disabled=\"disabled\"\r\n       :readonly=\"readonly\"\r\n       :maxlength=\"maxlength\"\r\n       :minlength=\"minlength\"\r\n       :autofocus=\"autofocus\"\r\n       :form=\"form\"\r\n       :value=\"value\"\r\n       ref=\"input\"\r\n       @input=\"handleInput\"\r\n       @focus=\"handleFocus\"\r\n       @blur=\"handleBlur\"\r\n>",
      props: {
          title: {
              type: String,
              default: ''
          },
          value: [String, Number],
          placeholder: String,
          size: String,
          errmsg:String,
          emptymsg:String,
          readonly: Boolean,
          autofocus: Boolean,
          disabled: Boolean,
          rules:String,
          type: {
              type: String,
              default: 'text'
          },
          name: String,
          autosize: {
              type: [Boolean, Object],
              default: false
          },
          form: String,
          maxlength: Number,
          minlength: Number
      },
  
      methods: {
          handleBlur: function (event) {
              this.$emit('blur', this.currentValue);
              this.dispatch('form-item', 'el.form.blur', [this.currentValue]);
          },
          inputSelect: function() {
              this.$refs.input.select();
          },
          handleFocus: function(ev) {
              this.$emit('focus', ev);
          },
          handleInput: function(ev) {
              this.currentValue = ev.target.value;
          },
          handleIconClick: function(ev) {
              this.$emit('click', ev);
          }
      },
      data:function () {
        return {
            currentValue: this.value
        }
      },
      created:function() {
          this.$on('inputSelect', this.inputSelect);
      },
  
      computed: {
          validating:function () {
              return this.$parent.validating;
          }
      },
      watch: {
          'value':function(val, oldValue) {
              this.currentValue = val;
          },
          'currentValue':function(val) {
              this.$emit('input', val);
              this.$emit('change', val);
              this.dispatch('form-item', 'el.form.change', [val]);
          }
      }
  });
  

});

;/*!app/common/vueui/form/dropdown.js*/
define('app/common/vueui/form/dropdown', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-10.
   */
  
  // app/common/vueui/form/dropdown.js
  'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  var _ = require('node_modules/lodash/lodash');
  var utils = require('app/common/utils');
  
  Vue.component('SuiDropdownItem', {
      props:{
          value: [String, Number]
      },
      mixins: [emitter],
      methods: {
          handleClick:function (ev) {
              // this.dispatch('SuiDropdownMenu', 'visible', [false]);
          }
      },
      template: '<li role="presentation"><a role="menuitem" tabindex="-1" href="javascript:void(0);" :value="value"><slot></slot></a></li>'
  });
  Vue.component('SuiDropdownMenu', {
       mixins: [emitter],
      created:function () {
          // this.$on('visible',function (val) {
          //     this.showPopper = val;
          // });
      },
      mounted:function () {
          // this.$parent.popperElm = this.popperElm = this.$el;
          // this.referenceElm = this.$parent.$el;
      },
      methods: {
      },
      template: '<ul role="menu" class="sui-dropdown-menu"><slot></slot></ul>'
  });
  
  Vue.component('SuiDropdownSelectItem', {
      props:{
          value: [String, Number],
          toggle: {
              type:String,
              default: 'dropdown'
          },
          label: String
      },
      computed: {
          _value: {
              // getter
              get: function () {
                  return this.value !== undefined ? this.value : this.$parent.value;
              },
              // setter
              set: function (newValue) {
                  if (this.value !== undefined) {
                      this.$emit('input', newValue);
                  } else {
                      this.$parent.$emit('input', newValue);
                  }
              }
          }
      },
      template: '<a href="javascript:void(0);" :data-toggle="toggle" class="dropdown-toggle">' +
      '<input v-model="_value" :value="value" type="hidden" ref="input">' +
      '<i class="caret"></i><span>{{label}}</span></a>' +
      '<slot></slot>'
  });
  
  Vue.component('SuiDropdown', {
      props:{
          value: [String, Number],
          label: String,
          toggle: {
              type:String,
              default: 'dropdown'
          },
          items: String,
          disabled: Boolean,
          checked: Boolean
      },
      mixins: [emitter],
      data:function () {
          return {
              target: this.value
          };
      },
      computed: {
          _label:function () {
                  console.log('computed _label this.items:');
                  console.log(this.items);
                  if(_.isEmpty(this.items))return '';
                  var items = utils.parseOptions(this.items);
                  var cur = _.filter(items,{value:this.value});
  
                  return cur.length>0 ? cur[0].text : '';
          },
          _items:function () {
              if(_.isEmpty(this.items))return [];
              var items = utils.parseOptions(this.items);
              return items;
          }
      },
      watch: {
          value:function(value) {
               this.target = value;
          },
          target: function (value) {
              //③组件内对myResult变更后向外部发送事件通知
              this.$emit("on-target-change",value);
          }
      },
      methods: {
          itemClick: function (ev) {
              // 参考: http://www.cnblogs.com/xxcanghai/p/6124699.html
              var val = $(ev.target).attr('value');
              this.value = val;
              this.$emit("on-target-change",val);
          }
      },
      template: '<span class="sui-dropdown dropdown-bordered select">' +
      '<span class="dropdown-inner">' +
      '<sui-dropdown-select-item v-model="target" :label="_label">' +
      '</sui-dropdown-select-item>' +
      '' +
      '' +
      '<ul role="menu" class="sui-dropdown-menu">' +
      '<li role="presentation" v-for="item in _items" v-on:click="itemClick"><a role="menuitem" tabindex="-1" href="javascript:void(0);" :value="item.value">{{ item.text }}</a></li>' +
      '' +
      '' +
      '</ul>' +
      // '<slot></slot>' +
      '</span></span>'
  });
  

});

;/*!app/common/vueui/form/dropdown1.js*/
define('app/common/vueui/form/dropdown1', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-10.
   */
  
  // app/common/vueui/form/dropdown.js
  'use strict';
  
  var emitter = require('app/common/vueui/emitter');
  var _ = require('node_modules/lodash/lodash');
  var utils = require('app/common/utils');
  Vue.component('SuiDropdown1', {
      props: {
          value: [String, Number],
          label: String,
          toggle: {
              type: String,
              default: 'dropdown'
          },
          items: String,
          disabled: Boolean,
          checked: Boolean
      },
      mixins: [emitter],
      data: function () {
          return {
              target: this.value
          };
      },
      computed: {
          _label: function () {
              if (_.isEmpty(this.items))return '';
              var items = utils.parseOptions(JSON.stringify(this.items));
              var cur = '';
              var curValue = this.value;
              _.forEach(items, function (key) {
                  if (curValue == key.value) {
                      cur = key.name;
                      return true;
                  }
              });
              return !utils.isNul(cur) ? cur : '';
          },
          _items: function () {
              if (_.isEmpty(this.items))return [];
              var items = utils.parseOptions(JSON.stringify(this.items));
              return items;
          }
      },
      watch: {
          value: function (value) {
              this.target = value;
          },
          target: function (value) {
              //③组件内对myResult变更后向外部发送事件通知
              this.$emit("on-target-change", value);
          }
      },
      methods: {
          itemClick: function (ev) {
              // 参考: http://www.cnblogs.com/xxcanghai/p/6124699.html
              var val = $(ev.target).attr('value');
              this.value = val;
              this.$emit("on-target-change", val);
          }
      },
      template: '<span class="sui-dropdown dropdown-bordered select">' +
      '<span class="dropdown-inner">' +
      '<sui-dropdown-select-item v-model="target" :label="_label">' +
      '</sui-dropdown-select-item>' +
      '<ul role="menu" class="sui-dropdown-menu">' +
      '<li role="presentation" v-for="item in _items" v-on:click="itemClick"><a role="menuitem" tabindex="-1" href="javascript:void(0);" :value="item.value">{{ item.name }}</a></li>' +
      '</ul>' +
      // '<slot></slot>' +
      '</span></span>'
  });
  

});

;/*!app/common/vueui/form/index.js*/
define('app/common/vueui/form/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-10.
   */
  
  
  require('app/common/vueui/form/control-group');
  require('app/common/vueui/form/radio');
  require('app/common/vueui/form/radio-group');
  require('app/common/vueui/form/checkbox');
  require('app/common/vueui/form/checkbox-group');
  require('app/common/vueui/form/input');
  require('app/common/vueui/form/dropdown');
  require('app/common/vueui/form/dropdown1');
  
  

});

;/*!app/common/vueui/index.js*/
define('app/common/vueui/index', function(require, exports, module) {

  /**
   * VUE 组件入口
   * Created by Dzl on 2017-3-9.
   *
   * @require 'lib/vue.min.js'
   */
  
  require('app/common/vueui/form/index');
  

});

;/*!app/labels/baseLabel.js*/
define('app/labels/baseLabel', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  var _ = require('node_modules/lodash/lodash');
  var Class = require('app/common/class2');
  var utils = require('app/common/utils');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  
  require('app/common/vueui/index');
  
  var BaseLabel =  Class.extend({
      init:function (options) {
          utils.log('app/labels/baseLabel.js init >>>');
          /**
           * 属性配置,继承子类必须实现
           */
          this.conf = {};
          /**
           * 用于渲染的HTML模板,继承子类必须实现
           */
          this.tpl = '';
          /**
           * 模板引擎对象
           */
          this.template = template;
          // 编译模板,后面直接使用, 提高执行效率
          utils.templateHelpers(template);
  
      } ,
      statics:{
  
      },
      /**
       * 加载表单
       * @param vm VUE 实例化VM对象
       * @param optins 用户的标签配置
       * @param $el 用于填充的容器jQuery对象
       */
      loadForm: function (vm, $id, options) {
          utils.log('BaseLabel loadForm >>> $id: ',$id);
          utils.log('BaseLabel loadForm options >>>', options);
          var defLabelConf = this.conf;
          var cls = this;
          var data = options = options || {};
          options.label = _.merge(defLabelConf, options.label);
          options.label.labelName = this.conf.labelName;
          //options.label.targetId = $id.substring(1);
          if($id == "#mainLabelHtml") {
              options.label.targetId = "";
          }else {
              var index = $id.indexOf("LabelFormHtml");
              options.label.targetId = $id.substring(1,index);
          }
  
          // 实例化 Vue 组件并挂载
          var vueComp = new this.VueComp({
              data: function () {
                  return options.label
              }
          }).$mount();
          utils.log('BaseLabel loadForm vueComp >>>', vueComp);
          utils.log('BaseLabel loadForm vueComp.$el >>>', vueComp.$el);
          utils.log('BaseLabel loadForm $($id) >>>', $($id));
          $($id).html(vueComp.$el);
      },
      /**
       * 返回用于展现的演示HTML
       * @param selector 预设的容器ID,jquery选择符
       * @param options 标签配置
       */
      getRenderHtml: function (selector,options) {
          var cls = this;
          var label = _.merge(cls.conf,options);
          var data = {
              selector:selector,
              label:label
          };
          data.list = cls.getDemoData(label);
          var html = cls.compileTpl(data);
          return html;
      },
      /**
       * 获取演示数据
       * @param options
       */
      getDemoData: function (options) {
          var cls = this;
          var mockDataConf = _.merge(cls.conf,options);
          utils.log('mockDataConf: ',mockDataConf);
          var data =  mockData.getInfoList2(mockDataConf).data;
          utils.log(cls.conf.labelName + ' 的演示数据: ' + JSON.stringify(data));
          return data;
      }
  });
  module.exports = BaseLabel;
  
  

});

;/*!app/labels/docList/vuecomp.js*/
define('app/labels/docList/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-doclist',
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n    <sui-control-group title=\"链接打开方式\">\r\n        <sui-dropdown v-model=\"target\" @on-target-change=\"onTargetChange\"\r\n                      items=\"[{text:'新窗口',value:'_blank'},{text:'当前页',value:'_self'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isDate\">显示日期</sui-checkbox>\r\n        <div class=\"sui-msg msg-info\">\r\n            <div class=\"msg-con\">修改日期格式，您需要同步修改显示字数，以保证最佳浏览效果</div>\r\n            <s class=\"msg-icon\"></s>\r\n        </div>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"日期格式\" v-if=\"isDate\">\r\n        <sui-dropdown v-model=\"dateFormat\" @on-target-change=\"onDateFormatChange\"\r\n                      items=\"[{text:'MM-dd',value:'MM-dd'},{text:'yyyy-MM-dd',value:'yyyy-MM-dd'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isChild\">调用下级分类信息</sui-checkbox>\r\n    </sui-control-group>\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.target = value;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.dateFormat = value;
          },
          /**
           * 关联节点事件
           */
          associateNode: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.methods.associateNode >>>');
              var cls = this;
              utils.selectColumn({
                  configType: 'articleNews',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              },function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          }
      }
  });

});

;/*!app/labels/docList/index.js*/
define('app/labels/docList/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/docList/vuecomp');
  
  /**
   * docList标签对象
   */
  var DocListLabel = BaseLabel.extend({
      init: function (options) {
          utils.log('app/labels/docList/index.js init >>>');
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              /**
               * 标签名称,必须
               */
              labelName: 'docList',
              id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
              num: 8, // 调用条数
              isChild: false, // 是否调用下级分类信息
              isHit: false, // 是否显示点击数
              length: 20, // 标题字数
              isDate: true, //  是否显示日期
              dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
              target: '_blank', // 打开窗口方式
              isColumn: false, // 是否显示栏目名称，需要自定义标签实现
              where: '', // 自定义条件，例如调用标题新闻：isTilt=1
              result: '暂无相关信息',
              exceptTitle: 1,//是否启用去重功能，当两个标签同时调用时，去掉后代标签重复的信息
              exceptNum: 1, //默认去重的数量
              siteId: ''  //站点ID
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          this.tpl = "<ul class=\"list {{selector}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <span class=\"right date {{label.isDate | displayShow}}\">{{el.createDate}}</span>\r\n        <a href=\"{{el.href}}\" target=\"{{label.target}}\">{{el.title}}</a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
          this.compileTpl = this.template.compile(this.tpl);
          /**
           * 当前标签的 VUE 表单组件
           */
          this.VueComp = VueComp;
  
      }
  });
  
  module.exports = DocListLabel;

});

;/*!app/labels/linkList/vuecomp.js*/
define('app/labels/linkList/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-linklist',
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n    <sui-control-group title=\"图片大小\" v-if=\"tplType=='linkNote'&&linkType=='IMG'\">\r\n        宽\r\n        <sui-input size=\"mini\" v-model=\"imgWidth\" rules=\"required|digits|gt=0|lt=2001\"\r\n                   errmsg=\"大于0且小于2000的整数\"></sui-input>\r\n        - 高\r\n        <sui-input size=\"mini\" v-model=\"imgHeight\" rules=\"required|digits|gt=0|lt=2001\"\r\n                   errmsg=\"大于0且小于2000的整数\"></sui-input>\r\n        <span class=\"sui-msg msg-info\">(单位:像素)</span>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"摘要字数\" v-if=\"tplType=='linkNote'\">\r\n        <sui-input size=\"mini\" v-model=\"noteLength\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用类型\">\r\n        <sui-radio-group v-model=\"linkType\">\r\n            <sui-radio label=\"TEXT\">文字链接</sui-radio>\r\n            <sui-radio label=\"IMG\">图片链接</sui-radio>\r\n        </sui-radio-group>\r\n    </sui-control-group>\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
  
          /**
           * 关联节点事件
           */
          associateNode: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.methods.associateNode >>>');
              var cls = this;
              utils.selectColumn({
                  configType: 'linksMgr',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              },function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          }
      }
  });

});

;/*!app/labels/linkList/index.js*/
define('app/labels/linkList/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var mockData = require('app/mock-data/index');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/linkList/vuecomp');
  /**
   * docList标签对象
   */
  var LinkListLabel = BaseLabel.extend({
      init: function (options) {
          utils.log('LinkListLabel init >>>');
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'linkList',
              id: '',
              length: 15,
              noteLength: 20,
              num: '5',
              order: 'desc',
              siteId: '',
              linkType: 'TEXT',
              tplType: '',
              siteId: ''  //站点ID
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          if(options) {
              var tplType = options.tplType;
              if(tplType=='linkNote') {
                  this.tpl = "<ul class=\"list-note clearfix {{selector}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"#\" class=\"img {{label.linkType=='IMG' | displayShow}}\">\r\n            <img src=\"{{el.src}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\">\r\n        </a>\r\n        <h4 class=\"title\"><a href=\"#\">{{el.title}}</a></h4>\r\n        <p class=\"remark\">{{el.remarks}}</p>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }else {
                  this.tpl = "<ul class=\"clearfix {{selector}} {{if label.linkType=='IMG'}}{{label.labelName+'Img'}} {{else}} {{label.labelName}}{{/if}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\">\r\n            {{if label.linkType=='IMG'}}\r\n            <img src=\"{{el.imageLink}}\" alt=\"{{el.title}}\"/>\r\n            {{else}}\r\n            <span class=\"img-title\">{{el.title}}</span>\r\n            {{/if}}\r\n        </a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }
          }else {
              this.tpl = "<ul class=\"clearfix {{selector}} {{if label.linkType=='IMG'}}{{label.labelName+'Img'}} {{else}} {{label.labelName}}{{/if}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\">\r\n            {{if label.linkType=='IMG'}}\r\n            <img src=\"{{el.imageLink}}\" alt=\"{{el.title}}\"/>\r\n            {{else}}\r\n            <span class=\"img-title\">{{el.title}}</span>\r\n            {{/if}}\r\n        </a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
  
          }
          this.compileTpl = this.template.compile(this.tpl);
          this.VueComp = VueComp;
      },
      getRenderHtml: function (selector,options) {
          var cls = this;
          var label = _.merge(cls.conf,options);
          var data = {
              selector:selector,
              label:label
          };
          data.list = cls.getDemoData(label);
          // 构造图片占位符代码
          data.placeholderOpt = 'size='+label.imgWidth+'x'+label.imgHeight+'&text='+label.imgWidth+'x'+label.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
          var html = cls.compileTpl(data);
          return html;
      }
      
  });
  
  module.exports = LinkListLabel;

});

;/*!app/labels/docImgNote/vuecomp.js*/
define('app/labels/docImgNote/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-linklist',
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
  
          /**
           * 关联节点事件
           */
          associateNode: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.methods.associateNode >>>');
              var cls = this;
              utils.selectColumn({
                  configType: 'articleNews',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              },function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          }
      }
  });

});

;/*!app/labels/docImgNote/index.js*/
define('app/labels/docImgNote/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/docImgNote/vuecomp');
  
  module.exports = BaseLabel.extend({
      init: function (options) {
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'docImgNote',
              id: '',     //栏目ID
              num: 1, // 调用条数
              isChild: false,// 是否调用下级分类
              length: '12', //标题字数
              target: '_blank', //是否新窗口
              showType: '1',   //1、调用摘要。2、调用内容
              noteLength: '26', //摘要/内容截取字数
              detailed: '【详细】',   //为空不显示【详细】按扭，可自定义
              isDetailed: '1',  //1 是显示，0 是不显示
              showTitle: 1,//是否显示标题
              showNote: 1,//是否显示内容
              isLi: 1,
              siteId: ''  //站点ID
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          this.tpl = "<ul class=\"list-images clearfix {{selector}}\">\r\n    {{each list as el index}}\r\n    <li>\r\n        <a href=\"#\" class=\"img\">\r\n            <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"\r\n                 alt=\"{{el.title}}\">\r\n        </a>\r\n        <h4 class=\"title\"><a href=\"#\">{{el.title}}</a></h4>\r\n        <p class=\"note\">{{el.note}}</p>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
          this.compileTpl = this.template.compile(this.tpl);
          this.VueComp = VueComp;
      }
  });

});

;/*!app/labels/surveyList/vuecomp.js*/
define('app/labels/surveyList/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-linklist',
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isTitle\">显示标题</sui-checkbox>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"标题\" v-if=\"isTitle\">\r\n        <sui-input size=\"large\" :class=\"{'uneditable-input':!isTitle}\" :disabled=\"!isTitle\" v-model=\"title\" rules=\"required\"\r\n                   placeholder=\"请输入标题\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"标题链接\" v-if=\"isTitle\">\r\n        <sui-input size=\"xlarge\" :class=\"{'uneditable-input':!isTitle}\" :disabled=\"!isTitle\" v-model=\"titleHref\"\r\n                   placeholder=\"请输入标题链接\"></sui-input>\r\n    </sui-control-group>\r\n\r\n\r\n    <sui-control-group title=\"链接打开方式\">\r\n        <sui-dropdown v-model=\"target\" @on-target-change=\"onTargetChange\"\r\n                      items=\"[{text:'新窗口',value:'_blank'},{text:'当前页',value:'_self'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isDate\">显示日期</sui-checkbox>\r\n        <div class=\"sui-msg msg-info\">\r\n            <div class=\"msg-con\">修改日期格式，您需要同步修改显示字数，以保证最佳浏览效果</div>\r\n            <s class=\"msg-icon\"></s>\r\n        </div>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"日期格式\" v-if=\"isDate\">\r\n        <sui-dropdown v-model=\"dateFormat\" @on-target-change=\"onDateFormatChange\"\r\n                      items=\"[{text:'MM-dd',value:'MM-dd'},{text:'yyyy-MM-dd',value:'yyyy-MM-dd'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用类型\" v-if=\"isDate\">\r\n        <sui-radio-group v-model=\"dateType\">\r\n            <sui-radio label=1>显示添加日期</sui-radio>\r\n            <sui-radio label=2>显示开始-始结日期</sui-radio>\r\n        </sui-radio-group>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isStatus\">显示状态</sui-checkbox>\r\n    </sui-control-group>\r\n\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/surveyList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
  
          /**
           * 关联节点事件
           */
          associateNode: function () {
              var cls = this;
              utils.selectColumn({
                  configType: 'survey',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              }, function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          },
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.target = value;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.dateFormat = value;
          }
      }
  });

});

;/*!app/labels/surveyList/index.js*/
define('app/labels/surveyList/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/surveyList/vuecomp');
  
  var surveyListLabel = BaseLabel.extend({
      init: function (options) {
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'surveyList',
              id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
              num: 8, // 调用条数
              length: 20, // 标题字数
              isDate: true, //  是否显示日期
              dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
              dateType: 1, // 1 显示添加日期，2 显示开始-始结日期
              timeStr: '',
              target: '_blank', // 打开窗口方式
              isLoadOptions: false, // 是否加载投票选项
              isStatus: true,
              siteId: '', //站点ID
              title: '组件标题',
              titleHref: '#',
              isTitle: false
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          this.tpl = "<div class=\"sub-heading {{label.isTitle | displayShow}}\">\r\n    <div class=\"sub-title\">\r\n        <a href=\"{{label.titleHref}}\" target=\"_blank\">{{label.title}}</a>\r\n    </div>\r\n</div>\r\n<ul class=\"list {{selector}} {{label.labelName}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <span class=\"date {{label.isDate&&label.dateType==1 | displayShow}}\">{{el.createDate}}</span>\r\n        <span class=\"date {{label.isDate&&label.dateType==2 | displayShow}}\">{{el.startDate}}至{{el.endDate}}</span>\r\n        <span class=\"right {{label.isStatus | displayShow}}\">{{el.status}}</span>\r\n        <a href=\"{{el.href}}\" target=\"{{label.target}}\">{{el.title}}</a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
          this.compileTpl = this.template.compile(this.tpl);
          this.VueComp = VueComp;
      }
  });
  
  module.exports = surveyListLabel;

});

;/*!app/labels/docHeadlines/vuecomp.js*/
define('app/labels/docHeadlines/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <!--<sui-control-group title=\"调用条数\">-->\r\n        <!--<sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>-->\r\n        <!--条-->\r\n    <!--</sui-control-group>-->\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"摘要字数\">\r\n        <sui-input size=\"input-medium\" v-model=\"noteLength\" maxlength=\"3\" rules=\"required|digits|gt=0\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"摘要来源\">\r\n        <sui-radio-group v-model=\"showType\">\r\n\r\n            <sui-radio label=\"0\">调用摘要</sui-radio>\r\n            <sui-radio label=\"1\">调用内容</sui-radio>\r\n        </sui-radio-group>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"链接打开方式\">\r\n        <sui-dropdown v-model=\"target\" @on-target-change=\"onTargetChange\"\r\n                      items=\"[{text:'新窗口',value:'_blank'},{text:'当前页',value:'_self'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isDetailed\">显示摘要</sui-checkbox>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示详细链接\" v-show=\"isDetailed\">\r\n        <sui-input size=\"large\" v-model=\"detailed\" rules=\"required\" maxLength=\"10\"\r\n                   placeholder=\"留空显示“【详细】”\"></sui-input>\r\n    </sui-control-group>\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.target = value;
          },
          /**
           * 关联节点事件
           */
          associateNode: function () {
  
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.methods.associateNode >>>');
              var cls = this;
              utils.selectColumn({
                  configType: 'articleNews',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              },function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          }
      }
  });

});

;/*!app/labels/docHeadlines/index.js*/
define('app/labels/docHeadlines/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/docHeadlines/vuecomp');
  var template = require('app/common/arttemplate');
  
  /**
   * docList标签对象
   */
  var LinkListLabel = BaseLabel.extend({
      init: function (options) {
          utils.log('LinkListLabel init >>>');
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'docHeadlines',
              id: '',     //栏目ID
              num: 1, // 调用条数
              length: 20, //标题字数
              showType: 1,   // 0、调用摘要。1、调用内容
              noteLength: 26, //摘要/内容截取字数
              target: '_blank', //是否新窗口
              detailed: '【详细】',   //为空不显示【详细】按扭，可自定义
              isDetailed: true,  // true 是显示，false 是不显示
              where: 'isTitle=1', //是否标签新闻
              siteId: ''  //站点ID
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          this.tpl = "<div class=\"list1 clearfix  {{selector}}\">\r\n    {{each list as el index}}\r\n    <h2><a href=\"{{el.href}}\">{{el.title}}</a></h2>\r\n    {{if label.isDetailed}}\r\n    <p class=\"remarks\">\r\n        {{el.note}}\r\n        {{if label.isDetailed}}\r\n        <a href=\"{{el.href}}\">{{label.detailed}}</a>\r\n        {{/if}}\r\n    </p>\r\n    {{/if}}\r\n    {{/each}}\r\n</div>\r\n";
          this.compileTpl = template.compile(this.tpl);
          this.VueComp = VueComp;
  
      }
      
  });
  
  module.exports = LinkListLabel;

});

;/*!app/labels/docImgList/vuecomp.js*/
define('app/labels/docImgList/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-linklist',
      template: "<sui-control-group >\r\n<div class=\"control-group\">\r\n    <label class=\"control-label\">关联栏目：</label>\r\n    <div class=\"controls\">\r\n        <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n        <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n    </div>\r\n</div>\r\n\r\n<sui-control-group title=\"图片大小\">\r\n    宽\r\n    <sui-input size=\"mini\" v-model=\"imgWidth\" rules=\"required|digits|gt=0|lt=2001\"\r\n               errmsg=\"大于0且小于2000的整数\"></sui-input>\r\n    - 高\r\n    <sui-input size=\"mini\" v-model=\"imgHeight\" rules=\"required|digits|gt=0|lt=2001\"\r\n               errmsg=\"大于0且小于2000的整数\"></sui-input>\r\n    <span class=\"sui-msg msg-info\">(单位:像素)</span>\r\n</sui-control-group>\r\n\r\n<sui-control-group title=\"调用条数\">\r\n    <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n    条\r\n</sui-control-group>\r\n\r\n<sui-control-group title=\"显示字数\">\r\n    <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n               errmsg=\"大于0的整数\"></sui-input>\r\n</sui-control-group>\r\n\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
          /**
           * 关联节点事件
           */
          associateNode: function () {
              utils.log('app/labels/docList/index.js');
              utils.log('loadForm vm.methods.associateNode >>>');
              var cls = this;
              utils.selectColumn({
                  configType: 'articleNews',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              },function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          }
      }
  });

});

;/*!app/labels/docImgList/index.js*/
define('app/labels/docImgList/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/docImgList/vuecomp');
  var template = require('app/common/arttemplate');
  
  module.exports = BaseLabel.extend({
      init: function (options) {
          utils.log('LinkListLabel init >>>');
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'docImgList',
              id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
              num: 8, // 调用条数
              isChild: false,  // 是否调用下级分类信息
              length: 20, // 标题字数
              target: '_blank',
              dateFormat: 'MM-dd',
              imgWidth: '',
              imgHeight: '',
              siteId: ''  //站点ID
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          if(options) {
              var file = options.file;
              if(file=='/special/docImgList') {
                  this.tpl = "<ul class=\"list1 clearfix {{selector}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <div class=\"pic fl\"><a href=\"{{el.href}}\"><img src=\"{{el.imageLink}}\" alt=\"\"></a></div>\r\n        <div class=\"conbox fr\">\r\n            <a href=\"{{el.href}}\" class=\"title\">{{el.title}}</a>\r\n            <p class=\"\">\r\n                {{el.remarks}}\r\n                <a href=\"{{el.href}}\">[详细]</a>\r\n            </p>\r\n        </div>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }else {
                  this.tpl = "<ul class=\"list1 clearfix {{selector}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\">\r\n            <img src=\"{{el.imageLink}}\"  options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\" alt=\"{{el.title}}\"/>\r\n            <span class=\"title\">{{el.title}}</span>\r\n        </a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }
          }else {
              this.tpl = "<ul class=\"list1 clearfix {{selector}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\">\r\n            <img src=\"{{el.imageLink}}\"  options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\" alt=\"{{el.title}}\"/>\r\n            <span class=\"title\">{{el.title}}</span>\r\n        </a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
  
          }
          this.compileTpl = template.compile(this.tpl);
          this.VueComp = VueComp;
  
      }
  });

});

;/*!app/labels/messageBoardList/vuecomp.js*/
define('app/labels/messageBoardList/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-messageboardlist',
      template: "<sui-control-group>\r\n\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n    <sui-control-group title=\"链接打开方式\">\r\n        <sui-dropdown v-model=\"target\" @on-target-change=\"onTargetChange\"\r\n                      items=\"[{text:'新窗口',value:'_blank'},{text:'当前页',value:'_self'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isDate\">显示日期</sui-checkbox>\r\n        <div class=\"sui-msg msg-info\">\r\n            <div class=\"msg-con\">修改日期格式，您需要同步修改显示字数，以保证最佳浏览效果</div>\r\n            <s class=\"msg-icon\"></s>\r\n        </div>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"日期格式\" v-if=\"isDate\">\r\n        <sui-dropdown v-model=\"dateFormat\" @on-target-change=\"onDateFormatChange\"\r\n                      items=\"[{text:'MM-dd',value:'MM-dd'},{text:'yyyy-MM-dd',value:'yyyy-MM-dd'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/messageBoardList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
  
          /**
           * 关联节点事件
           */
          associateNode: function () {
              utils.log('app/labels/messageBoardList/index.js');
              utils.log('loadForm vm.methods.associateNode >>>');
          },
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.target = value;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.dateFormat = value;
          }
      }
  });

});

;/*!app/labels/messageBoardList/index.js*/
define('app/labels/messageBoardList/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/messageBoardList/vuecomp');
  
  var messageBoardListLabel = BaseLabel.extend({
      init: function (options) {
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'messageBoardList',
              id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
              num: 8, // 调用条数
              length: 20, // 标题字数
              isDate: true, //  是否显示日期
              dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
              target: '_blank', // 打开窗口方式
              isChild: false // 是否显示子栏目
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          this.tpl = "<div class=\"guestbook-list\">\r\n    <div class=\"hd_telbox\">\r\n        <p class=\"p1\">信件编号</p>\r\n        <p class=\"p2\">信件标题</p>\r\n        <p class=\"p3\">留言时间</p>\r\n        <p class=\"p4\">办理状态</p>\r\n    </div>\r\n    <div class=\"hd_xdbox\">\r\n        <ul>\r\n            {{each list as el index}}\r\n            <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                <p class=\"p1\">{{el.num}}</p>\r\n                <p class=\"p2\">\r\n                    <a href=\"{{el.href}}\" target=\"_blank\" title=\"{{el.title}}\">\r\n                        {{el.title}}\r\n                    </a>\r\n                </p>\r\n                <p class=\"p3\">{{el.createDate}}</p>\r\n                <p class=\"p4\">\r\n                    {{if el.status=='1'}}\r\n                        办理中\r\n                    {{else}}\r\n                        已办结\r\n                    {{/if}}\r\n                </p>\r\n            </li>\r\n            {{/each}}\r\n        </ul>\r\n    </div>\r\n</div>";
          this.compileTpl = this.template.compile(this.tpl);
          this.VueComp = VueComp;
      }
  });
  
  module.exports = messageBoardListLabel;

});

;/*!app/labels/videoNewsList/vuecomp.js*/
define('app/labels/videoNewsList/vuecomp', function(require, exports, module) {

  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-videoNewsList',
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <sui-control-group title=\"链接打开方式\">\r\n        <sui-dropdown v-model=\"target\" @on-target-change=\"onTargetChange\"\r\n                      items=\"[{text:'新窗口',value:'_blank'},{text:'当前页',value:'_self'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isDate\">显示日期</sui-checkbox>\r\n        <div class=\"sui-msg msg-info\">\r\n            <div class=\"msg-con\">修改日期格式，您需要同步修改显示字数，以保证最佳浏览效果</div>\r\n            <s class=\"msg-icon\"></s>\r\n        </div>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"日期格式\" v-if=\"isDate\">\r\n        <sui-dropdown v-model=\"dateFormat\" @on-target-change=\"onDateFormatChange\"\r\n                      items=\"[{text:'MM-dd',value:'MM-dd'},{text:'yyyy-MM-dd',value:'yyyy-MM-dd'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/videoNewsList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
  
          /**
           * 关联节点事件
           */
          associateNode: function () {
              var cls = this;
              utils.selectColumn({
                  configType: 'videoNews',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              },function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          },
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.target = value;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.dateFormat = value;
          }
      }
  });

});

;/*!app/labels/videoNewsList/index.js*/
define('app/labels/videoNewsList/index', function(require, exports, module) {

  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/videoNewsList/vuecomp');
  
  var videoNewsListLabel = BaseLabel.extend({
      init: function (options) {
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'videoNewsList',
              // file: 'videoNewsImgList',
              id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
              num: 8, // 调用条数
              isChild: false, // 是否调用下级分类信息
              isHit: false, // 是否显示点击数
              length: 20, // 标题字数
              isDate: true, //  是否显示日期
              dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
              target: '_blank', // 打开窗口方式
              isColumn: false, // 是否显示栏目名称，需要自定义标签实现
              where: '', // 自定义条件，例如调用标题新闻：isTilt=1
              siteId: '' //站点ID
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          if(options) {
              var file = options.file;
              if(file=='videoNewsImgList') {
                  this.tpl = "<ul class=\"list {{selector}} {{label.labelName}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\" target=\"{{el.target}}\" title=\"{{el.title}}\" class=\"left\">\r\n            <img class=\"video-thumb\" border=\"0\" src=\"{{el.imageLink}}\" title=\"{{el.title}}\"/>\r\n            <span class=\"title\">{{el.title}}</span>\r\n            <p></p>\r\n        </a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }else if(file=='myfocus') {
                  this.tpl = "<ul class=\"{{selector}} {{label.labelName}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\" target=\"{{label.target}}\" title=\"{{el.title}}\">\r\n        <img src=\"{{el.imageLink}}\" alt=\"{{el.title}}\"/>\r\n        </a>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }else {
                  this.tpl = "<ul class=\"list {{selector}} {{label.labelName}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\" target=\"{{label.target}}\" title=\"{{el.title}}\" class=\"left\">\r\n            <font >{{el.title}}</font>\r\n        </a>\r\n        <span class=\"right hit {{label.isHit | displayShow}}\">{{el.hit}}</span>\r\n        <span class=\"right date {{label.isDate | displayShow}}\">{{el.createDate}}</span>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
              }
          }else {
              this.tpl = "<ul class=\"list {{selector}} {{label.labelName}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\" target=\"{{label.target}}\" title=\"{{el.title}}\" class=\"left\">\r\n            <font >{{el.title}}</font>\r\n        </a>\r\n        <span class=\"right hit {{label.isHit | displayShow}}\">{{el.hit}}</span>\r\n        <span class=\"right date {{label.isDate | displayShow}}\">{{el.createDate}}</span>\r\n    </li>\r\n    {{/each}}\r\n</ul>";
  
          }
          this.compileTpl = this.template.compile(this.tpl);
          this.VueComp = VueComp;
      }
  });
  
  module.exports = videoNewsListLabel;

});

;/*!app/labels/collectInfoList/vuecomp.js*/
define('app/labels/collectInfoList/vuecomp', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var utils = require('app/common/utils');
  var emitter = require('app/common/vueui/emitter');
  
  module.exports = Vue.extend({
      name: 'lf-collectInfoList',
      template: "<sui-control-group >\r\n    <div class=\"control-group\">\r\n        <label class=\"control-label\">关联栏目：</label>\r\n        <div class=\"controls\">\r\n            <a href=\"javascript:void(0);\" class=\"sui-btn btn-primary\" v-on:click=\"associateNode\">添加关联栏目</a>\r\n            <span class=\"sui-msg msg-warning\" v-if=\"isRelation\">\r\n                    <div class=\"msg-con\">尚未关联到栏目</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n            <span class=\"sui-msg msg-success\" v-else>\r\n                    <div class=\"msg-con\">已关联到 [ID: {{id}}]</div>\r\n                    <s class=\"msg-icon\"></s>\r\n                </span>\r\n        </div>\r\n    </div>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isTitle\">显示标题</sui-checkbox>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"标题\" v-if=\"isTitle\">\r\n        <sui-input size=\"large\" :class=\"{'uneditable-input':!isTitle}\" :disabled=\"!isTitle\" v-model=\"title\" rules=\"required\"\r\n                   placeholder=\"请输入标题\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"标题链接\" v-if=\"isTitle\">\r\n        <sui-input size=\"xlarge\" :class=\"{'uneditable-input':!isTitle}\" :disabled=\"!isTitle\" v-model=\"titleHref\"\r\n                   placeholder=\"请输入标题链接\"></sui-input>\r\n    </sui-control-group>\r\n\r\n\r\n    <sui-control-group title=\"链接打开方式\">\r\n        <sui-dropdown v-model=\"target\" @on-target-change=\"onTargetChange\"\r\n                      items=\"[{text:'新窗口',value:'_blank'},{text:'当前页',value:'_self'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用条数\">\r\n        <sui-input size=\"mini\" v-model=\"num\" rules=\"required|digits|gt=0|lt=50\" errmsg=\"大于0的整数\"></sui-input>\r\n        条\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"显示字数\">\r\n        <sui-input size=\"mini\" v-model=\"length\" rules=\"required|digits|gt=0|lt=100\"\r\n                   errmsg=\"大于0的整数\"></sui-input>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isDate\">显示日期</sui-checkbox>\r\n        <div class=\"sui-msg msg-info\">\r\n            <div class=\"msg-con\">修改日期格式，您需要同步修改显示字数，以保证最佳浏览效果</div>\r\n            <s class=\"msg-icon\"></s>\r\n        </div>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"日期格式\" v-if=\"isDate\">\r\n        <sui-dropdown v-model=\"dateFormat\" @on-target-change=\"onDateFormatChange\"\r\n                      items=\"[{text:'MM-dd',value:'MM-dd'},{text:'yyyy-MM-dd',value:'yyyy-MM-dd'}]\">\r\n        </sui-dropdown>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"调用类型\" v-if=\"isDate\">\r\n        <sui-radio-group v-model=\"dateType\">\r\n            <sui-radio label=1>显示添加日期</sui-radio>\r\n            <sui-radio label=2>显示开始-始结日期</sui-radio>\r\n        </sui-radio-group>\r\n    </sui-control-group>\r\n\r\n    <sui-control-group title=\"\">\r\n        <sui-checkbox v-model=\"isStatus\">显示状态</sui-checkbox>\r\n    </sui-control-group>\r\n\r\n\r\n</sui-control-group>",
      mixins: [emitter],
      data:function () {
          return {
          }
      },
      computed:{
          /**
           * 是否已经关联节点
           */
          isRelation: function () {
              utils.log('app/labels/collectInfoList/index.js');
              utils.log('loadForm vm.computed.isRelation >>>');
              return utils.isNul(this.id) || this.id == 0;
          }
      },
      methods:{
  
          /**
           * 关联节点事件
           */
          associateNode: function () {
              var cls = this;
              utils.selectColumn({
                  configType: 'collectInfo',
                  chkStyle: 'radio',
                  targetId: cls.targetId || ""
              }, function (data) {
                  utils.log(data);
                  if (data && data.length > 0) {
                      // 标题取第一个节点
                      // base.vm.conf.title = data[0].name;
                      var ids = [];
                      var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                      for (var i = 0; i < data.length; i++) {
                          ids.push(data[i].indicatorId);
                      }
                      cls.id = ids.join(',');
                      cls.siteId = isOtherSite ? data[0].siteId : "";
                  }
              })
          },
          onTargetChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.target = value;
          },
          onDateFormatChange: function (value) {
              // ④ 外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中
              this.dateFormat = value;
          }
      }
  });

});

;/*!app/labels/collectInfoList/index.js*/
define('app/labels/collectInfoList/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-7-21.
   */
  
  var base = require('app/common/base');
  var BaseLabel = require('app/labels/baseLabel');
  var utils = require('app/common/utils');
  var _ = require('node_modules/lodash/lodash');
  var VueComp = require('app/labels/collectInfoList/vuecomp');
  
  var collectInfoListLabel = BaseLabel.extend({
      init: function (options) {
          /**
           * 标签默认的配置属性
           */
          this.defaultConf = {
              labelName: 'collectInfoList',
              id: '', // 栏目ID，调用多个用逗号分割。如：1,2,3,4
              num: 8, // 调用条数
              length: 20, // 标题字数
              isDate: true, //  是否显示日期
              dateFormat: 'MM-dd', // 允许参数：yyyy|MM|dd|HH|mm|ss
              dateType: 1, // 1 显示添加日期，2 显示开始-始结日期
              timeStr: '',
              target: '_blank', // 打开窗口方式
              isStatus: true,
              siteId: '', //站点ID
              title: '组件标题',
              titleHref: '#',
              isTitle: false
          };
          this.conf = _.merge(this.defaultConf,options);
          /**
           * 用于渲染的HTML模板
           */
          this.tpl = "<div class=\"sub-heading {{label.isTitle | displayShow}}\">\r\n    <div class=\"sub-title\">\r\n        <a href=\"{{label.titleHref}}\" target=\"_blank\">{{label.title}}</a>\r\n    </div>\r\n</div>\r\n<ul class=\"list {{selector}} {{label.labelName}}\">\r\n    {{each list as el index}}\r\n    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n        <a href=\"{{el.href}}\" target=\"{{label.target}}\" class=\"left\">{{el.title}}</a>\r\n        <span class=\"right date {{label.isDate&&label.dateType==1 | displayShow}}\">{{el.createDate}}</span>\r\n        <span class=\"right date {{label.isDate&&label.dateType==2 | displayShow}}\">{{el.startDate}}至{{el.endDate}}</span>\r\n        <span class=\"over {{label.isStatus | displayShow}}\">{{el.status}}</span>\r\n    </li>\r\n    {{/each}}\r\n\r\n</ul>";
          this.compileTpl = this.template.compile(this.tpl);
          this.VueComp = VueComp;
      }
  });
  
  module.exports = collectInfoListLabel;

});

;/*!app/labels/index.js*/
define('app/labels/index', function(require, exports, module) {

  var docListLabel = require('app/labels/docList/index');
  var linkListLabel = require('app/labels/linkList/index');
  var docImgNoteLabel = require('app/labels/docImgNote/index');
  var surveyListLabel = require('app/labels/surveyList/index');
  var docHeadlinesLabel = require('app/labels/docHeadlines/index');
  var docImgListLabel = require('app/labels/docImgList/index');
  var messageBoardListLabel = require('app/labels/messageBoardList/index');
  var videoNewsListLabel = require('app/labels/videoNewsList/index');
  var collectInfoListLabel = require('app/labels/collectInfoList/index');
  
  module.exports = {
      docListLabel: docListLabel,
      linkListLabel: linkListLabel,
      docImgNoteLabel: docImgNoteLabel,
      docImgListLabel: docImgListLabel,
      surveyListLabel: surveyListLabel,
      docHeadlinesLabel: docHeadlinesLabel,
      messageBoardListLabel: messageBoardListLabel,
      videoNewsListLabel: videoNewsListLabel,
      collectInfoListLabel: collectInfoListLabel
  };

});

;/*!app/components/base-module/index.js*/
define('app/components/base-module/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-3-22.
   */
  
  var _ = require('node_modules/lodash/lodash');
  var Class = require('app/common/class2');
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  var labels = require('app/labels/index');
  /**
   * 组件基类
   */
  var BaseModule = Class.extend({
      /**
       * 类的构造器(初始化方法)
       * @param options
       */
      init: function (options) {
          utils.log('app/components/base-module/index.js #init(options) ');
          this.win = base['artdialog'];
          this.mainLabelName = 'docList';
          utils.log('app/components/base-module/index.js #init(options) statics.mainLabelName', this.mainLabelName);
          // 页面首页加载标记
          this.pageIsFristLoad = true;
          //
          this.LABELS = {};
          // 表单提交标记
          this.formSubmitStatus = false;
          // 将表单验证状态重置为false
          base.attrFormValidateState = false;
          this.propWin = {
              title: '组件设置',
              // 使用编译函数 __uri(path) 来定位资源
              url: '/assets/design/form/app/components/base-module/form.html',
              width: 800,
              height: 600
          };
  
          this.styleTplObj = {};
  
          this.styleTpl = {
              'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
          };
  
          this.moduleSetting = {
              type: 'emptyModule',
              moduleId: 0,
              isMobile: false,
              conf: {
                  style: 'default',
                  isTitle: true,
                  isMore: true,
                  title: '组件标题',
                  titleHref: '',
                  more: '更多+',
                  height: 330,
                  footer: {
                      enable: false, label: {}
                  },
                  panelBodyTop: {
                      enable: false, label: {}
                  },
                  panelBodyRight: {
                      enable: false, label: {}
                  },
                  panelBodyBottom: {
                      enable: false, label: {}
                  },
                  panelBodyLeft: {
                      enable: false, label: {}
                  }
              },
              label: {}
          };
  
          // 合并默认公共配置属性
          this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
  
          // 用于从控件中拖动到布局中 构造主体内容使用
          this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    {{if conf.isTitle}}\r\n    <div class=\"panel-heading clearfix\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{if conf.isMore}}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    {{/if}}\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            {{if conf.panelBodyTop.enable}}\r\n            <div class=\"panel-body-top ls-panelBodyTopLabel\">{{#panelBodyTopLabelHtml}}</div>\r\n            {{/if}}\r\n            <div class=\"panel-body-center \">\r\n                {{#mainLabelHtml}}\r\n            </div>\r\n            {{if conf.panelBodyBottom.enable}}\r\n            <div class=\"panel-body-bottom ls-panelBodyBottomLabel\">{{#panelBodyBottomLabelHtml}}</div>\r\n            {{/if}}\r\n            {{if conf.panelBodyLeft.enable}}\r\n            <div class=\"panel-body-left ls-panelBodyLeftLabel\">{{#panelBodyLeftLabelHtml}}</div>\r\n            {{/if}}\r\n            {{if conf.panelBodyRight.enable}}\r\n            <div class=\"panel-body-right ls-panelBodyRightLabel\">{{#panelBodyRightLabelHtml}}</div>\r\n            {{/if}}\r\n\r\n        </div>\r\n    </div>\r\n    {{if conf.footer.enable}}\r\n    <div class=\"panel-footer\">\r\n        {{#footerLabelHtml}}\r\n    </div>\r\n    {{/if}}\r\n</div>";
  
          // 用于从控件中拖动到布局中 构造module使用
          this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
              'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
          // 编译模板,后面直接使用, 提高执行效率
          this.compileTpl = template.compile(this.panelTpl);
  
      },
      /**
       * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
       * @param moduleId
       */
      render: function (moduleId) {
          var cls = this;
          var type = cls.moduleSetting.type;
          utils.log(type + '.prototype.render >>> moduleId: ', moduleId);
          var $module = $('#' + moduleId);
  
          if ($module.length == 0) {
              return;
          }
          // // 从模板页面的 DOM 节点中获取配置信息数据
          var _data = cls.getModuleAttrData(moduleId);
          _data.moduleId = moduleId;
          // // 获取用于模板渲染使用的演示数据
          var data = cls.getData(_data);
          // //提取自定义组件样式
          // utils.addCustomStyleList(base, data);
          cls.renderPanel(moduleId, data);
      },
      /**
       * 渲染 panel 内容
       * @param moduleId
       * @param options
       */
      renderPanel: function (moduleId, options) {
          var cls = this;
          var $module = $('#' + moduleId);
          var html = cls.getPanelHtml(options);
          $module.html(html);
          cls.renderAfter(moduleId);
      },
      /**
       * 页面组件渲染的的处理事件
       * @param moduleId
       */
      renderAfter: function (moduleId) {
          var cls = this,
              $module = $('#' + moduleId),
              data = utils.initModuleData(moduleId, cls.moduleSetting);
  
          // 动态创建样式
          utils.compileStyle(moduleId, data, cls.styleTpl);
          //渲染自定义样式
          utils.replaceClassName($module, data, cls.pageIsFristLoad);
          utils.placeholderRender(moduleId);
  
          // 标明页面已经加载过了
          cls.pageIsFristLoad = false;
          cls.isCreate = false;
  
      },
      /**
       * 创建新组件
       * 引用: floatPanel.js > 490 - 510 行
       * @param $target
       */
      create: function ($target) {
          var cls = this;
          cls.isCreate = true;
          var obj = cls.getHtmlAndModuleId($target);
          $target.html(obj.html);
          cls.renderAfter(obj.moduleId);
      },
      /**
       * 根据 options 对象返回模板渲染后的 html
       * @param options
       * @returns {*}
       */
      getPanelHtml: function (options) {
          var cls = this;
          var data = cls.getData(options);
          // utils.log('InfoList.prototype.getPanelHtml >>>');
          // utils.log(JSON.stringify(data));
          var html = cls.compileTpl(data);
          return html;
      },
      /**
       * 根据 labelName 获取对应标签实例化对象
       * @param id 用于类对象中记录实例
       * @param labelName 标签名称,必须在 app/labels/ 下相应的实现类
       * @returns {*}
       * @private
       */
      __getLabel: function (id, label) {
          var cls = this,
              labelName = label.labelName;
          utils.log('__getLabel id: ' + id + ',labelName: ' + labelName);
          var _id = id + '_' + labelName;
          if (cls.LABELS[_id]) {
              return cls.LABELS[_id]
          } else {
              cls.LABELS[_id] = new labels[labelName + 'Label'](label);
              return cls.LABELS[_id];
          }
          // return  new labels[labelName + 'Label']();
      },
      /**
       * 打开控件属性窗口
       * @return {[type]} [description]
       */
      open: function () {
          var cls = this;
          var propWin = cls.propWin;
          var id = cls.moduleSetting.type;
          var type = cls.moduleSetting.type;
          var url = propWin.url;
          var width = propWin.width;
          var height = propWin.height;
          var title = propWin.title;
          cls.win.open(id, url, type, width, height, title);
      },
      /**
       * 控件属性窗口中表单初始化
       * @return {[type]} [description]
       */
      initForm: function () {
          var cls = this, conf = cls.moduleSetting.conf;
          // var options = this.config.options;
          utils.log('BaseModule.prototype.initForm >>>');
  
          // 使用本地存储功能取得当前编辑的组件ID
          var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
          if (!curEditModuleId) {
              alert('控件对象不存在!');
              return;
          }
          // 取得主题模板中的窗口对象
          // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
          // 隶属两个窗口对象,在使用时切勿混淆
          var tplWin = base.templateWindow;
          // 取得模板中的组件对象并解析相关属性值
          var $module = tplWin.$('#' + curEditModuleId);
          var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
          //utils.log('InfoList.prototype.initForm data: ', data);
          // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
          // 销毁对象使用base.vm.$destroy()
          var _methods = {};
          var _computed = {
  
          };
          var _watch = {};
          _.assign(_methods, vueCommon.methods);
          _.assign(_computed, vueCommon.computed);
          _.assign(_watch, vueCommon.watch);
          base.vm = new Vue({
              el: '#attrForm',
              data: data,
              watch: _watch,
              methods: _methods,
              computed: _computed
          });
          // 根据标签名称动态构造组件
          if(data.label && data.label.labelName){
              cls.__getLabel('mainLabel', data.label).loadForm(base.vm, '#mainLabelHtml', data);
          }
          if (data.conf.panelBodyTop.enable &&
              data.conf.panelBodyTop.label.labelName) {
              var panelBodyTopLabel = cls.__getLabel('panelBodyTop', data.conf.panelBodyTop.label);
              utils.log('panelBodyTopLabel: ', panelBodyTopLabel);
              panelBodyTopLabel.loadForm(base.vm, '#panelBodyTopLabelFormHtml', data.conf.panelBodyTop);
          }
          if (data.conf.panelBodyRight.enable &&
              data.conf.panelBodyRight.label.labelName) {
              cls.__getLabel('panelBodyRight', data.conf.panelBodyRight.label).loadForm(base.vm, '#panelBodyRightLabelFormHtml', data.conf.panelBodyRight);
          }
          if (data.conf.panelBodyBottom.enable &&
              data.conf.panelBodyBottom.label.labelName) {
              cls.__getLabel('panelBodyBottom', data.conf.panelBodyBottom.label).loadForm(base.vm, '#panelBodyBottomLabelFormHtml', data.conf.panelBodyBottom);
          }
          if (data.conf.panelBodyLeft.enable &&
              data.conf.panelBodyLeft.label.labelName) {
              cls.__getLabel('panelBodyLeft', data.conf.panelBodyLeft.label).loadForm(base.vm, '#panelBodyLeftLabelFormHtml', data.conf.panelBodyLeft);
          }
          if (data.conf.footer.enable &&
              data.conf.footer.label.labelName) {
              cls.__getLabel('footer', data.conf.footer.label).loadForm(base.vm, '#footerLabelFormHtml', data.conf.footer);
          }
  
  
          // 绑定验证表单
          $('#attrForm').validate({
              success: function () {
                  base.attrFormValidateState = true;
                  return false;
              },
              fail: function () {
                  base.attrFormValidateState = false;
                  return false;
              }
          });
      },
      /**
       * 表单提交
       * @returns {boolean} true 表示验证通过 false 验证不通过
       */
      formSumbit: function () {
          return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type, base);
      },
      /**
       * 将数据对象渲染后回写到模板页面
       * @param moduleId
       * @param options
       */
      setModuleAttrData: function (moduleId, options) {
          var cls = this;
          var $module = $('#' + moduleId);
          if ($module.length > 0 && !utils.isNul(options)) {
              $module.attr('data-label', utils.jsonStringify(options.label));
              $module.attr('data-conf', utils.jsonStringify(options.conf));
          }
  
          // 重新渲染
          cls.renderPanel(moduleId, options);
      },
      /**
       * 获取用于模板渲染使用的数据对象
       * @param options
       * @param isModule
       * @returns {*}
       */
      getData: function (options, isModule, excludeListData) {
          var cls = this,
              // moduleId = options.moduleId,
              data = utils.assignClone(cls.moduleSetting, options);
          utils.log('app/components/base-module.js getData: ',data);
          data.isMobile = base.isMobile;
          if (isModule) {
              data.moduleId = utils.createModuleUniqueId();
          }
          if (isModule || base.IS_SORTABLE) {
              // 根据容器的宽度自动计算字符长度
              //data.label['length'] = utils.getFontLength(data.conf.width);
          }
          // 是否挂载演示数据
          if (!excludeListData) {
              //data.mainLabelData = labels[data.label.labelName + 'Label'].getDemoData(data.label);
              // 根据标签类型加载html
              if( data.label &&  data.label.labelName){
                  data.mainLabelHtml = cls.__getLabel('mainLabel', data.label).getRenderHtml('mainLabel', data.label);
                  //data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
              }
              if (data.conf.panelBodyTop.enable &&
                  data.conf.panelBodyTop.label.labelName) {
                  data.panelBodyTopLabelHtml = cls.__getLabel('panelBodyTop', data.conf.panelBodyTop.label)
                      .getRenderHtml('panelBodyTopLabel', data.conf.panelBodyTop.label);
              }
              if (data.conf.panelBodyRight.enable &&
                  data.conf.panelBodyRight.label.labelName) {
                  data.panelBodyRightLabelHtml = cls.__getLabel('panelBodyRight', data.conf.panelBodyRight.label)
                      .getRenderHtml('panelBodyRightLabel', data.conf.panelBodyRight.label);
              }
              if (data.conf.panelBodyBottom.enable &&
                  data.conf.panelBodyBottom.label.labelName) {
                  data.panelBodyBottomLabelHtml = cls.__getLabel('panelBodyBottom', data.conf.panelBodyBottom.label)
                      .getRenderHtml('panelBodyBottomLabel', data.conf.panelBodyBottom.label);
              }
              if (data.conf.panelBodyLeft.enable &&
                  data.conf.panelBodyLeft.label.labelName) {
                  data.panelBodyLeftLabelHtml = cls.__getLabel('panelBodyLeft', data.conf.panelBodyLeft.label)
                      .getRenderHtml('panelBodyLeftLabel', data.conf.panelBodyLeft.label);
              }
              if (data.conf.footer.enable &&
                  data.conf.footer.label.labelName) {
                  data.footerLabelHtml = cls.__getLabel('footer', data.conf.footer.label)
                      .getRenderHtml('footerLabel', data.conf.footer.label);
              }
          }
  
          if(!data.conf.isCustomMore) {
              // 构造标题更多链接
              //data.conf.titleHref = config.getTitleHref(data.label.id);
              cls.createMoreHref(data);
          }
  
          return data;
      },
      /**
       * 构造标题更多链接
       */
      createMoreHref: function (data) {
          var cls = this,
              siteId = data.label.siteId;
          if (!utils.getDevelopStatus() && siteId && siteId != top.window.GLOBAL_SITEID) {
              data.conf.titleHref = config.getOtherTitleHref(data.label.id, siteId);
          } else {
              data.conf.titleHref = config.getTitleHref(data.label.id);
          }
  
          return cls;
      },
      /**
       * 保存前的处理, 用途是根据配置值转换为 模板标签
       * 每个有标签的类对象必须要有此函数
       * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
       * @param options
       * @returns {*}
       */
      parseSave: function (options) {
          var cls = this;
          var data = utils.assignClone1(cls.moduleSetting, options);
          // 1. 取得panel的html内容
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          // 解析标签
          var mainLabel = '', isValid = true;
          if (utils.isNul(data.label.id)) {
              isValid = false;
          } else {
              // 解析标签
              mainLabel = utils.parseLabel(data.label);
              // 将解析后的标签回写到 panel 中
              $panelHtml.find('.mainLabel').html(mainLabel);
  
              if (data.conf.panelBodyTop.enable &&
                  data.conf.panelBodyTop.label.labelName &&
                  utils.isNul(data.conf.panelBodyTop.label.id)) {
                  isValid = false;
              }
              if (data.conf.panelBodyRight.enable &&
                  data.conf.panelBodyRight.label.labelName &&
                  utils.isNul(data.conf.panelBodyRight.label.id)) {
                  isValid = false;
              }
              if (data.conf.panelBodyBottom.enable &&
                  data.conf.panelBodyBottom.label.labelName &&
                  utils.isNul(data.conf.panelBodyBottom.label.id)) {
                  isValid = false;
              }
              if (data.conf.panelBodyLeft.enable &&
                  data.conf.panelBodyLeft.label.labelName &&
                  utils.isNul(data.conf.panelBodyLeft.label.id)) {
                  isValid = false;
              }
              if (data.conf.footer.enable &&
                  data.conf.footer.label.labelName &&
                  utils.isNul(data.conf.footer.label.id)) {
                  isValid = false;
              }
  
              if (data.conf.panelBodyTop.enable &&
                  data.conf.panelBodyTop.label.labelName) {
                  $panelHtml.find('.panelBodyTopLabel').html(utils.parseLabel(data.conf.panelBodyTop.label));
              }
              if (data.conf.panelBodyRight.enable &&
                  data.conf.panelBodyRight.label.labelName) {
                  $panelHtml.find('.panelBodyRightLabel').html(utils.parseLabel(data.conf.panelBodyRight.label));
              }
              if (data.conf.panelBodyBottom.enable &&
                  data.conf.panelBodyBottom.label.labelName) {
                  $panelHtml.find('.panelBodyBottomLabel').html(utils.parseLabel(data.conf.panelBodyBottom.label));
              }
              if (data.conf.panelBodyLeft.enable &&
                  data.conf.panelBodyLeft.label.labelName) {
                  $panelHtml.find('.panelBodyLeftLabel').html(utils.parseLabel(data.conf.panelBodyLeft.label));
              }
              if (data.conf.footer.enable &&
                  data.conf.footer.label.labelName) {
                  $panelHtml.find('.footerLabel').html(utils.parseLabel(data.conf.footer.label));
              }
          }
  
          // 返回 panel 的 HTML
          return isValid ? $panelHtml[0].outerHTML : null;
  
      },
      /**
       * 返回用于创建模板使用的 html 内容对象
       * @param options
       * @returns {{html, moduleId: *}}
       */
      getHtmlAndModuleId: function ($target) {
          var cls = this;
          var data = cls.getData({
              conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
          }, true);
          var _compile = template.compile(cls.moduleTpl);
          var html = _compile(data);
          base.newModuleId = data.moduleId;
          return {
              html: html,
              moduleId: data.moduleId
          };
      },
      /**
       * 获取数据对象用于初始化表单使用
       * @param moduleId
       * @returns {*}
       */
      getModuleAttrData: function (moduleId) {
          var cls = this,
              // $module = $('#' + moduleId),
              _data = utils.initModuleData(moduleId, cls.moduleSetting),
              data = cls.getData(_data, false, true);
          return data;
      },
  
      test: function (options) {
          utils.log('ComponentBase test >>>');
          utils.log(this);
      }
  });
  
  module.exports = BaseModule;
  
  

});

;/*!app/components/info-list-v2/index.js*/
define('app/components/info-list-v2/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2017-8-5.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  
  var InfoListV2 = BaseModule.extend({
      init: function (options) {
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'infoListV2';
  
      }
  });
  
  InfoListV2.prototype.test = function () {
      // utils.log("InfoListV2 test success!");
  };
  
  base.plugin('infoListV2', new InfoListV2());
  
  module.exports = InfoListV2;
  
  
  

});

;/*!app/components/info-list-v2/infoList3E.js*/
define('app/components/info-list-v2/infoList3E', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  var utils = require('app/common/utils');
  
  var InfoList3E = BaseModule.extend({
      init: function (options) {
          this._super(options);
          // this.propWin.title = '友情链接';
          this.moduleSetting.type = 'infoList3E';
          this.moduleSetting.conf.panelBodyTop.enable = true;
          var panelBodyTopLabel = new labels.linkListLabel({
              num: 4
          });
          this.moduleSetting.conf.panelBodyTop.label = panelBodyTopLabel.conf;
  
          this.moduleSetting.conf.panelBodyBottom.enable = true;
          var panelBodyBottomLabel = new labels.linkListLabel({
              num: 9
          });
          this.moduleSetting.conf.panelBodyBottom.label = panelBodyBottomLabel.conf;
  
          // 指定主内容区域的默认标签名称
          // 具体可用标签请参看: app\labels 目录
          this.mainLabelName = 'docList';
          // 实例化标签,并赋值
          var mainLabel = new labels.docListLabel({num:3});
          // 将新的配置赋值给 this.moduleSetting.label
          this.moduleSetting.label = mainLabel.conf;
      }
  });
  
  base.plugin('infoList3E', new InfoList3E());
  
  module.exports = InfoList3E;
  
  
  

});

;/*!app/components/link-survey/index.js*/
define('app/components/link-survey/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  
  
  var LinkSurvey = BaseModule.extend({
      init: function (options) {
          this.styleTpl = {
              default: "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%=moduleId%>_panel .panel-body .linkListImg li img{ width: <%=conf.panelWidth%>px; }"
          };
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'linkSurvey';
  
          this.moduleSetting.conf.panelBodyTop = {
              enable: true,
              label: new labels.linkListLabel({
                  num: 2
              }).conf
          }
          var mainLabel = new labels.surveyListLabel({
              num:5,
              isDate: true,
              isStatus: true,
              dateType: 2
          });
          this.moduleSetting.label = mainLabel.conf;
  
      }
  });
  
  LinkSurvey.prototype.test = function () {
  
  };
  
  base.plugin('linkSurvey', new LinkSurvey());
  
  module.exports = LinkSurvey;
  
  
  

});

;/*!app/components/empty-module/index.js*/
define('app/components/empty-module/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  var utils = require('app/common/utils');
  var vueCommon = require('app/common/vue-common');
  
  // 首字母小写
  // 这样做的目的是便于查找替换,与类名保持一致
  var typeName = _.lowerFirst('EmptyModule');
  
  var EmptyModule = BaseModule.extend({
      init: function (options) {
          this._super(options);
          // 指定当前组件的类型名称
          // 要与 base.plugin('emptyModule', new EmptyModule()); 中的第一个参数名称一致
          this.moduleSetting.type = typeName;
          // 使用当前类所在目录下的 form.html
          this.propWin.url = '/assets/design/form/app/components/empty-module/form.html';
  
          this.styleTpl = {
              'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body-top ul{ padding: 0 15px;}\r\n.<%= moduleId %>_panel .panel-body-top ul li{  float:left; overflow: hidden; height: 50px; width: 128px; margin-top: 12px; margin-right: 12px;  }\r\n.<%= moduleId %>_panel .panel-body-top ul li a{  display: block;  width: 115px;  height:48px;line-height: 48px;font-size: 14px;border: #eee solid 1px;background: #f3f3f3;text-align: center;}"
          };
  
      },
      /**
       * 控件属性窗口中表单初始化
       * @return {[type]} [description]
       */
      initForm: function () {
  
          var cls = this, conf = cls.moduleSetting.conf;
          // var options = this.config.options;
          utils.log('EmptyModule.prototype.initForm >>>');
  
          // 使用本地存储功能取得当前编辑的组件ID
          var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
          if (!curEditModuleId) {
              alert('控件对象不存在!');
              return;
          }
          // 取得主题模板中的窗口对象
          // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
          // 隶属两个窗口对象,在使用时切勿混淆
          var tplWin = base.templateWindow;
          // 取得模板中的组件对象并解析相关属性值
          var $module = tplWin.$('#' + curEditModuleId);
          var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
          utils.log('EmptyModule.prototype.initForm data: ', data);
          // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
          // 销毁对象使用base.vm.$destroy()
          var _methods = {
              /**
               * 弹出标签选择窗口
               */
              openInserLabelDialog: function (selector) {
                  // 用于跨实例对象记录内部运行变量
                  // 选择标签后的标签表单HTML所要插入的对象ID(jquery选择符)
                  base.LABEL_FROM_SELECTOR = selector;
                  base['labelList'].open();
              },
              /**
               * 根据类型插入标签
               * @param type
               */
              insertLabel: function (type,selector) {
                  utils.log('EmptyModule.prototype.initForm insertLabel type: ', type);
                  utils.log('EmptyModule.prototype.initForm insertLabel selector: ', selector);
                  var LabelCls = labels[type + 'Label'];
                  utils.log('EmptyModule.prototype.initForm insertLabel: LabelCls: ', LabelCls);
                  utils.log('EmptyModule.prototype.initForm insertLabel: this.label before: ', this.label);
                  if (LabelCls) {
                      var label = new LabelCls();
                      utils.log('EmptyModule.prototype.initForm insertLabel: label.conf  ', label.conf);
  
                      // 根据选择器的标识分别给不同区域的标签赋值
  
                      if(selector == '#mainLabelHtml'){
                          this.label = label.conf;
                      }
                      if(selector == '#panelBodyTopLabelFormHtml'){
                          this.conf.panelBodyTop.label = label.conf;
                      }
                      if(selector == '#panelBodyRightLabelFormHtml'){
                          this.conf.panelBodyRight.label = label.conf;
                      }
                      if(selector == '#panelBodyBottomLabelFormHtml'){
                          this.conf.panelBodyBottom.label = label.conf;
                      }
                      if(selector == '#panelBodyLeftLabelFormHtml'){
                          this.conf.panelBodyLeft.label = label.conf;
                      }
  
                      var options = {label:label.conf};
                      label.loadForm(base.vm,selector,options);
  
                  }
                  utils.log('EmptyModule.prototype.initForm insertLabel: this.label after: ', this.label);
              },
              removeLabel: function (obj) {
  
              }
          };
          var _computed = {
              noMainLabel: function () {
                  utils.log('this.label: ', this.label);
                  var flag = !(this.label && !utils.isNul(this.label.labelName));
                  utils.log('noMainLabel: ', flag);
                  return flag;
              }
          };
          var _watch = {};
          _.assign(_methods, vueCommon.methods);
          _.assign(_computed, vueCommon.computed);
          _.assign(_watch, vueCommon.watch);
          base.vm = new Vue({
              el: '#attrForm',
              data: data,
              watch: _watch,
              methods: _methods,
              computed: _computed
          });
  
          utils.log('base.vm: ', base.vm);
  
          // 根据标签名称动态构造组件
          if (data.label && data.label.labelName) {
              cls.__getLabel('mainLabel', data.label.labelName).loadForm(base.vm, '#mainLabelHtml', data);
          }
  
          if (data.conf.panelBodyTop.enable &&
              data.conf.panelBodyTop.label.labelName) {
              var panelBodyTopLabel = cls.__getLabel('panelBodyTop', data.conf.panelBodyTop.label.labelName);
              utils.log('panelBodyTopLabel: ', panelBodyTopLabel);
              panelBodyTopLabel.loadForm(base.vm, '#panelBodyTopLabelFormHtml', data.conf.panelBodyTop);
          }
          if (data.conf.panelBodyRight.enable &&
              data.conf.panelBodyRight.label.labelName) {
              cls.__getLabel('panelBodyRight', data.conf.panelBodyRight.label.labelName).loadForm(base.vm, '#panelBodyRightLabelFormHtml', data.conf.panelBodyRight);
          }
          if (data.conf.panelBodyBottom.enable &&
              data.conf.panelBodyBottom.label.labelName) {
              cls.__getLabel('panelBodyBottom', data.conf.panelBodyBottom.label.labelName).loadForm(base.vm, '#panelBodyBottomLabelFormHtml', data.conf.panelBodyBottom);
          }
          if (data.conf.panelBodyLeft.enable &&
              data.conf.panelBodyLeft.label.labelName) {
              cls.__getLabel('panelBodyLeft', data.conf.panelBodyLeft.label.labelName).loadForm(base.vm, '#panelBodyLeftLabelFormHtml', data.conf.panelBodyLeft);
          }
          if (data.conf.footer.enable &&
              data.conf.footer.label.labelName) {
              cls.__getLabel('footer', data.conf.footer.label.labelName).loadForm(base.vm, '#footerLabelFormHtml', data.conf.footer);
          }
  
  
          // 绑定验证表单
          $('#attrForm').validate({
              success: function () {
                  base.attrFormValidateState = true;
                  return false;
              },
              fail: function () {
                  base.attrFormValidateState = false;
                  return false;
              }
          });
      }
  });
  
  base.plugin(typeName, new EmptyModule());
  
  module.exports = EmptyModule;

});

;/*!app/components/label-list/index.js*/
define('app/components/label-list/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  var db = require('app/common/db');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var Q = require('node_modules/q/q');
  
  // 首字母小写
  // 这样做的目的是便于查找替换,与类名保持一致
  var typeName = _.lowerFirst('LabelList');
  
  /**
   * 组件列表窗口类
   * @param options
   * @constructor
   */
  var LabelList = function (options) {
      this.options = utils.assignClone(LabelList.DEFAULTS, options);
      this.win = base['artdialog'];
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  LabelList.DEFAULTS = {
      id: '#winmodulesetting',
      propWin: {
          title: '组件列表',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/label-list/form.html',
          width: 600,
          height: 480
      },
      type: typeName
  };
  
  
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  LabelList.prototype.initForm = function () {
      var cls = this;
      // 用于跨实例对象记录内部运行变量
      // 选择标签后的标签表单HTML所要插入的对象ID(jquery选择符)
      if(utils.isNul(base.LABEL_FROM_SELECTOR)){
          utils.alert('selector参数异常,请与管理员联系!');
          return ;
      }
  
      base.vmLabelList = new Vue({
          el: '#attrFormLabelList',
          data: {
              selector: base.LABEL_FROM_SELECTOR,
              selectLabelName: '',
              list:[{
                  name: 'docList',
                  isActive: false
              },{
                  name: 'docImgNote',
                  isActive: false
              },{
                  name: 'linkList',
                  isActive: false
              },{
                  name: 'surveyList',
                  isActive: false
              },{
                  name: 'docHeadlines',
                  isActive: false
              },{
                  name: 'docImgList',
                  isActive: false
              }]
          },
          // watch: _watch,
          methods: {
              selectLabel: function (label) {
                  this.selectLabelName = label.name;
                  label.isActive = true;
                  _.forEach(this.list,function (value,key) {
                      if(value.name != label.name){
                          value.isActive = false;
                      }
                  })
              }
          },
          computed: {
              noSelectLabel: function () {
                  return utils.isNul(this.selectLabelName);
              }
          }
      });
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  LabelList.prototype.formSumbit = function () {
      var cls = this;
      utils.log("LabelList.prototype.formSumbit >>>");
      var data = base.vmLabelList.$data;
      if(utils.isNul(data.selectLabelName)){
          return false;
      }else{
          base.vm.insertLabel(data.selectLabelName,data.selector);
      }
      return true;
  };
  
  LabelList.prototype.afterSubmit = function () {
      var cls = this;
      utils.log("LabelList.prototype.afterSubmit >>>");
  
  
  };
  
  LabelList.prototype.afterCancel = function () {
      var cls = this;
      utils.log("LabelList.prototype.afterCancel >>>");
      utils.log('LabelList.prototype.afterCancel: base.WIN_SUBMIT ', base.WIN_SUBMIT);
      if (base.WIN_SUBMIT !== 1) {
  
      } else {
  
      }
      return true;
  };
  
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  LabelList.prototype.open = function () {
      var options = this.options;
      var id = typeName;
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title, false);
  };
  
  LabelList.prototype.test = function () {
      // utils.log("LabelList test success!");
  };
  
  base.plugin(typeName, new LabelList());
  module.exports = LabelList;
  

});

;/*!app/components/online-nav-item/index.js*/
define('app/components/online-nav-item/index', function(require, exports, module) {

  /**
   * 广告位+文章信息列表
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _OnlineNavItem = function () {
  }
  _OnlineNavItem.prototype = {
      init: function () {
  
          this._super();
  
          var cls = this;
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'onlineNavItem',
              conf: {
  
              },
              // 对应标签的内容项
              label: {
                  label1: require('app/common/labels').onlineNavItem,
                  label2: require('app/common/labels').linkList
              },
              open: {
                  conf: {
                      url: '/assets/design/form/app/components/online-nav-item/form.html'
                  }
              },
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            <div class=\"list list1 ls-label\">\r\n                <ul>\r\n                    {{each data.list1 as el index}}\r\n                    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                        <span class=\"date {{label.label1.isDate | displayShow}}\">{{el.createDate}}</span>\r\n                        <a href=\"{{el.href}}\" target=\"{{label.label1.target}}\">{{el.title}}</a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n            </div>\r\n            <div class=\"list list2 link-list\">\r\n                <ul class=\"ls-label\">\r\n                    {{each data.list2 as el index}}\r\n                    <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                        <a href=\"{{el.href}}\">\r\n                            {{if conf.linkType=='img'}}\r\n                            <img src=\"{{el.imageLink}}\" alt=\"{{el.title}}\"/>\r\n                            {{/if}}\r\n                            <span class=\"img-title\">{{el.title}}</span>\r\n                        </a>\r\n                    </li>\r\n                    {{/each}}\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body .link-img { padding: 15px 15px 0; }\r\n.<%= moduleId %>_panel .panel-body .link-img img{ width: <%=conf.imgWidth%>px;height: <%=conf.imgHeight%>px; }"
                  }
              }
          });
  
      },
      initForm: function () {
         var cls = this;
         cls._super({
             methods: {
                 onTargetChange1: function (value) {
                     this.label.label1.target = value;
                 },
                 onTargetChange2: function (value) {
                     this.label.label2.target = value;
                 },
                 // 关联栏目
                 associateNode: function (type) {
                     // utils.log('cls.selectNodeWinUrl: ' + cls.selectNodeWinUrl);
                     Ls.openWin(cls.selectNodeWinUrl,
                         '400px',
                         '400px',
                         {
                             id: 'selectColumn',
                             title: '栏目选择',
                             padding: 0,
                             close: function (data) {
                                 // utils.log("associateNode>>>", data);
                                 if (data && data.length > 0) {
                                     // 标题取第一个节点
                                     base.vm.conf.title = data[0].name;
                                     var ids = [];
                                     var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                                     for (var i = 0; i < data.length; i++) {
                                         ids.push(data[i].indicatorId);
  
                                     }
  
                                     base.vm.label["label1"].id = ids.join(',');
                                     base.vm.label["label2"].id = ids.join(',');
                                     base.vm.label.id = ids.join(',');
                                     base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                                 }
                             }
                         });
                 }
             },
             computed: {
                 isRelation1: function () {
                     return utils.isNul(this.label.label1.id) || this.label.label1.id == 0;
                 },
                 isRelation2: function () {
                     return utils.isNul(this.label.label2.id) || this.label.label2.id == 0;
                 }
             }
         })
      },
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls._super();
  
          if(option.isCreate) {
              option.label.label1.num = 5;
              option.label.label2.num = 2;
          }
  
          if (option.isCreate || base.IS_SORTABLE) {
              // 根据容器的宽度自动计算字符长度
              option.label.label1['length'] = utils.getFontLength(option.conf.width);
          }
  
          // 构建模拟数据
          option.data.list1 = mockData.getInfoList(option.label.label1.num, option.label.label1.length, option.label.label1.dateFormat).data;
  
          option.data.list2 = mockData.getInfoList(option.label.label2.num, option.label.label2.length, option.label.label2.dateFormat).data;
  
          cls.setModuleData(option);
  
          return cls;
      },
      parseSave: function (options) {
          var cls = this;
  
          // 1. 取得panel的html内容
          var panelHtml = cls.getPanelHtml(),
              $panelHtml = $(panelHtml);
  
          // 解析标签
          var labelStr = '', isValid = true;
          if (utils.isNul(options.label.label1.id) || utils.isNul(options.label.label2.id)) {
              isValid = false;
          } else {
  
              // 解析标签
              // labelStr = utils.parseLabel(options.label);
              var label1 = utils.parseLabel(options.label.label1);
              var label2 = utils.parseLabel(options.label.label2);
  
              // 将解析后的标签回写到 panel 中
              // $panelHtml.find('.ls-label').html(labelStr);
              $panelHtml.find('.list1').html(label1);
              $panelHtml.find('.list2').html(label2);
          }
  
          // 返回 panel 的 HTML
          return isValid ? $panelHtml.prop('outerHTML') : null;
  
      }
  }
  
  var OnlineNavItem = components.extend(_OnlineNavItem.prototype);
  
  base.plugin('onlineNavItem', new OnlineNavItem());
  
  module.exports = OnlineNavItem;
  

});

;/*!app/components/message-board-list/index.js*/
define('app/components/message-board-list/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  
  
  var messageBoardList = BaseModule.extend({
      init: function (options) {
          this.styleTpl = {
              default: "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
          };
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'messageBoardList';
  
          var mainLabel = new labels.messageBoardListLabel({
              num: 5,
              isDate: true,
              isStatus: true,
              dateType: 2
          });
  
          this.moduleSetting.label = mainLabel.conf;
  
      }
  });
  
  base.plugin('messageBoardList', new messageBoardList());
  
  module.exports = messageBoardList;

});

;/*!app/components/headline-tabs/index.js*/
define('app/components/headline-tabs/index', function(require, exports, module) {

  'use strict';
  /*
  * TODO docHeadlines标签缺少日期接口
  * */
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var labels = require('app/common/labels');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _DocHeadlinesTabs = function () {
  }
  
  _DocHeadlinesTabs.prototype = {
      init: function () {
  
          var cls = this;
  
          cls._super();
  
          cls.contentModuleType = 'articleNews';
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'docHeadlinesTabs',
              conf: {
                  num: 4,
                  moreId: null,
                  moreUrl:null,
                  toggle: 'mouse',
                  tabs:[],
                  target: '_blank',
                  isDetailed: true,
                  noteLength: 20,  //摘要字数
                  length: 26, //标题字数
                  showType: 0
              },
              open: {
                  conf: {
                      width: 780,
                      height: 480,
                      url: '/assets/design/form/app/components/headline-tabs/form.html'
                  }
              },
              label: {},
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <ul class=\"clearfix\">\r\n                {{each conf.tabs as el index}}\r\n                <li class=\"{{el.active | activeFilter }}\">\r\n                    <a href=\"{{ if conf.toggle == 'mouse'}} {{ el.dataUrl }} {{else}} javascript:void(0) {{/if}}\" id=\"#{{ el.dataId }}\" data-id=\"#{{ el.dataId }}\"\r\n                       data-toggle=\"{{ conf.toggle }}\"\r\n                       data-url=\"{{ el.dataUrl }}\"\r\n                       data-more=\"#{{ el.dataMore }}\">\r\n                        {{ el.name }}\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.moreUrl}}\" target=\"{{conf.target}}\" id=\"{{ conf.moreId }}\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {{each conf.tabs as el index}}\r\n        <div class=\"tab-list {{el.active | activeFilter }}\" id=\"{{el.dataId}}\">\r\n            {{each data.list as info index}}\r\n            <ul class=\"list1 clearfix\">\r\n                <h2 class=\"title\"><a href=\"{{info.href}}\" target=\"{{conf.target}}\">{{info.title}}</a></h2>\r\n                {{if conf.isDetailed}}\r\n                <p class=\"remarks\">\r\n                    {{info.note}}\r\n                    <span class=\"date\">{{info.createDate}}</span>\r\n                </p>\r\n                {{/if}}\r\n            </ul>\r\n            {{/each}}\r\n        </div>\r\n        {{/each}}\r\n\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
                  }
              }
          });
  
      },
      setCalculateFontLength: function () {
          var cls = this,
              option = cls.getModuleData();
  
          option.conf['length'] = utils.getFontLength(option.conf.width);
          option.conf['noteLength'] = utils.getFontLength(option.conf.width);
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      },
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls.createMoreHref(option);
  
  
          //如果是新建模块，测要计算字符串长度
          if (option.isCreate || base.IS_SORTABLE) {
              cls.setCalculateFontLength();
          }
  
          //若为新建模块
          if (option.isCreate) {
              // var tabId = _.uniqueId(option.moduleId + '_tab');
              var tabIds = [];
              $.each(option.conf.tabs, function (key,val) {
                  tabIds.push(val.dataId);
              })
              var tabId = utils.createUniqueId(option.moduleId + '_tab', _.uniqueId(option.moduleId + '_tab'), tabIds);
              var tab = {
                  name: '新tab',
                  dataUrl: '#',
                  dataMore: option.conf.moreId,  // jquery 选择器
                  dataId: tabId, // jquery 选择器
                  active: true
              };
  
              var label = {};
              label[tabId] = _.cloneDeep(labels.docHeadlines);
              label[tabId].length = utils.getFontLength(option.conf.width);
              label[tabId].num = option.conf.num;
              label[tabId].isDetailed = option.conf.isDetailed;
              label[tabId].showType = option.conf.showType;
  
              if (!_.isArray(option.conf.tabs)) {
                  option.conf.tabs = [];
              }
              if (!_.isArray(option.label)) {
                  option.label = [];
              }
              option.conf.tabs.push(tab);
              option.label = label;
  
          }
  
          //挂载模拟数据
          option.data.list = mockData.getInfoList(option.conf.num, option.conf.length, option.conf.dateFormat, option.conf.noteLength).data;
  
          // 构造标题更多链接
          _.forEach(option.conf.tabs,function (val) {
              if(val.active){
                  var siteId = option.label[val.dataId].siteId;
                  if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
                      option.conf.moreUrl = config.getOtherTitleHref(option.label[val.dataId].id, siteId)
                  }else {
                      option.conf.moreUrl = config.getTitleHref(option.label[val.dataId].id);
                  }
  
              }
          })
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      },
      createMoreHref: function (option) {
          var cls = this;
  
          cls._super(option);
  
          option.conf.moreId = option.moduleId + '_more';
  
          return cls;
      },
      initForm: function () {
          var cls = this;
          // 使用本地存储功能取得当前编辑的组件ID
          var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
          if (!curEditModuleId) {
              alert('控件对象不存在!');
              return;
          }
  
          cls._super({
              methods: {
                  add: function () {
                      var vueData = this;
                      cls.__addTab4Vue(vueData, curEditModuleId, null, '新tab', '#', this.conf.moreId, false);
                  },
                  // 向上移动
                  moveUp: function (index) {
                      // utils.log('moveUp: ' + index);
                      if (index == 0) {
                          return;
                      }
                      this.conf.tabs[index] = this.conf.tabs.splice((index - 1), 1, this.conf.tabs[index])[0];
  
                  },
                  moveDown: function (index) {
                      // utils.log('moveDown: ' + index);
                      if (index == this.conf.tabs.length - 1) {
                          return;
                      }
                      this.conf.tabs[index] = this.conf.tabs.splice((index + 1), 1, this.conf.tabs[index])[0];
                      // utils.swapItems(this.conf.tabs, index, index + 1);
                  },
                  remove: function (index,dataId) {
                      var isDelDefault = false;
                      if(this.conf.tabs[index]['active'] == true) {
                          isDelDefault = true;
                      }
                      this.conf.tabs.splice(index, 1);
                      if(isDelDefault) {//若删除的是默认选中项，则重新设置第一个tab为默认选中项
                          this.conf.tabs[0]['active'] = true;
                      }
                      utils.log('dataId',dataId);
                  },
                  // 关联栏目
                  associateNode: function (index) {
                      var vueData = this, conf = this.conf, label = this.label;
                      if (this.conf.tabs.length > 4) {
                          Ls.tipsErr('tab组件最多只能关联5个栏目');
                          return;
                      }
                      var curTab = "",tabId="";
                      if(index>-1) {
                          curTab = conf.tabs[index];
                          tabId = curTab.dataId;
                      }
  
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio',
                          tabId: tabId
                      }, function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              // base.vm.conf.title = data[0].name;
                              var ids = [];
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
                              }
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
  
                              // base.vm.label.id = ids.join(',');
                              var url = isOtherSite ? config.getOtherTitleHref(ids.join(','),data[0].siteId) :config.getTitleHref(ids.join(','));
                              if (index > -1) {
                                  var curTab = conf.tabs[index];
                                  // utils.log('InfoTabs.prototype.initForm associateNode curTab: ', JSON.stringify(curTab));
                                  if (curTab && label[curTab.dataId]) {
                                      conf.tabs[index].name = data[0].name;
                                      label[curTab.dataId].id = ids.join(',');
                                      label[curTab.dataId].siteId = isOtherSite ? data[0].siteId : "";
                                  }
                              } else {
                                  var siteId = isOtherSite ? data[0].siteId : null;
                                  cls.__addTab4Vue(vueData, curEditModuleId, ids, data[0].name, url, conf.moreId, false, siteId);
                              }
  
                          }
                      });
  
  
                  }
              }
          });
  
  
      },
      __addTab4Vue: function (vueData, moduleId, ids, name, url, moreId, isActive, siteId) {
          // var tabId = _.uniqueId(moduleId + '_tab');
          var tabIds = [];
          $.each(vueData.conf.tabs, function (key,val) {
              tabIds.push(val.dataId);
          })
          var tabId = utils.createUniqueId(moduleId + '_tab', _.uniqueId(moduleId + '_tab'), tabIds);
  
          isActive = isActive || false;
          var tab = {
              name: name,
              dataUrl: url,
              dataMore: moreId,  // jquery 选择器
              dataId: tabId, // jquery 选择器
              active: isActive
          };
          var label = _.cloneDeep(labels.docHeadlines);
          label.id = ids ? ids.join(',') : "";
          label.siteId = siteId || "";
          vueData.conf.tabs.push(tab);
          vueData.label[tabId] = label;
      },
      setMergeModuleAttr: function (options) {
          var cls = this,
              option = cls.options,
              $module = option.$module;
  
          var data = _.merge({}, cls.options, {
              conf: utils.parseOptions($module.attr('data-conf')),
              label: utils.parseOptions($module.attr('data-label'))
          });
  
          if (!data.conf.className) {
              data.conf.className = data.type;
          }
  
          data.styleList = $.Site['STYLELIST'] && $.Site['STYLELIST'][data.type] ? JSON.stringify($.Site['STYLELIST'][data.type]) : "";
  
          var _data = _.merge(data, options);
  
          if(options) {
              _data.conf.tabs = _.cloneDeep(options.conf.tabs);
          }
  
          _.forEach(_data.conf.tabs, function (value) {
              value.dataMore = _data.conf.moreId;
              if (_data.label[value.dataId]) {
                  var siteId = _data.label[value.dataId].siteId;
  
                  if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) { //非此站点栏目
                      value.dataUrl = config.getOtherTitleHref(_data.label[value.dataId].id, siteId);
                  }else {
                      value.dataUrl = config.getTitleHref(_data.label[value.dataId].id);
                  }
  
                  _data.label[value.dataId]['length'] = _data.conf.length;
                  _data.label[value.dataId].num = _data.conf.num;
                  _data.label[value.dataId].noteLength = _data.conf.noteLength;
              }
          });
  
  
          cls.setModuleData(_data);
  
          return cls;
      },
      parseSave: function (options) {
          var cls = this;
  
          // 1. 取得panel的html内容
          var panelHtml = cls.getPanelHtml(),
              $panelHtml = $(panelHtml);
  
          // 解析标签
          var labelStr = '', label = '', isValid = true;
          _.forEach(options.conf.tabs, function (tab) {
              label = options.label[tab.dataId];
              if (utils.isNul(label.id)) {
                  isValid = false;
                  return false;
              }
              labelStr = utils.parseLabel(label);
              $panelHtml.find('#' + tab.dataId).html(labelStr);
          });
  
          // 返回 panel 的 HTML
          return isValid ? $panelHtml.prop('outerHTML') : null;
      }
  
  }
  
  var DocHeadlinesTabs = components.extend(_DocHeadlinesTabs.prototype);
  
  base.plugin('docHeadlinesTabs', new DocHeadlinesTabs());
  
  module.exports = DocHeadlinesTabs;
  

});

;/*!app/components/img-list-marquee/index.js*/
define('app/components/img-list-marquee/index', function(require, exports, module) {

  'use strict';
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var labels = require('app/common/labels');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _ImgListMarquee = function () {
  }
  
  _ImgListMarquee.prototype = {
      init: function () {
  
          var cls = this;
  
          cls._super();
  
          cls.contentModuleType = 'articleNews';
  
          var label = labels.docImgList;
          label.length = 16;
          label.num = 4;
  
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'imgListMarquee',
              conf: {
                  // num: 4,
                  imgWidth: null,
                  imgHeight: 150,
                  isMarquee: true,
                  Marquee: {
                      simple: true,
                      limit: true
                  }
              },
              open: {
                  conf: {
                      width: 780,
                      height: 480,
                      url: '/assets/design/form/app/components/img-list-marquee/form.html'
                  }
              },
              label: label,
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"{{if conf.isMarquee}}j-marquee{{/if}}\" style=\"overflow: hidden;\"\r\n             data-setting=\"{{if conf.isMarquee}}{limit:true,simple:true}{{/if}}\">\r\n            <div class=\"marquee-box\" style=\"width: 10000%;\">\r\n                <div class=\"marquee1\" style=\"float: left;\">\r\n                    <ul class=\"marquee-list ls-label clearfix\">\r\n                        {{each data.list as el index}}\r\n                        <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                            <a href=\"{{el.href}}\">\r\n                                <img src=\"{{el.imageLink}}\"  options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\" alt=\"{{el.title}}\"/>\r\n                                <span class=\"title\">{{el.title}}</span>\r\n                            </a>\r\n                        </li>\r\n                        {{/each}}\r\n                    </ul>\r\n                </div>\r\n                {{if conf.isMarquee}}\r\n                <div class=\"marquee2\" style=\"float: left;\">\r\n\r\n                </div>\r\n                {{/if}}\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body ul li { width: <%=conf.imgWidth%>px; }\r\n.<%= moduleId %>_panel .panel-body ul li img { width: <%=conf.imgWidth%>px;height: <%=conf.imgHeight%>px; }"
                  }
              }
          });
  
      },
      renderAfter: function () {
          var cls = this,
              option = cls.getModuleData();
          cls._super();
  
          utils.placeholderRender(option.moduleId);
  
          var $marquee = option.$module.find(".j-marquee");
          if (option.conf.isMarquee && $marquee.length > 0) {
              setTimeout(function () {
                  Ls.www.myMarquee($marquee);
              }, 100)
          }
  
      },
      initForm: function () {
          var cls = this;
          cls._super({
              methods: {
                  // 关联栏目Ma
                  associateNode: function () {
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio'
                      }, function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId && data[0].siteId != top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      })
  
                  }
              }
          })
      },
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          cls.createMoreHref(option);
  
          //如果是新建模块，测要计算字符串长度
          if (option.isCreate || base.IS_SORTABLE) {
              cls.setCalculateFontLength();
          }
  
          if (utils.isNul(option.conf.imgWidth)) {
              option.conf.imgWidth = parseInt((option.conf.width - 60 - (option.conf.panelPadding * 2)) / 4);
          }
          option.placeholderOpt = 'size=' + option.conf.imgWidth + 'x' + option.conf.imgHeight + '&text=' + option.conf.imgWidth + 'x' + option.conf.imgHeight + '&bgcolor=#F3F3F3&color=#cccccc';
          option.placeholderClass = 'placeholder';
  
          // 构建模拟数据
          option.data.list = mockData.getInfoList(option.label.num, option.label['length'], option.label.dateFormat).data;
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      }
  
  }
  
  var ImgListMarquee = components.extend(_ImgListMarquee.prototype);
  
  base.plugin('imgListMarquee', new ImgListMarquee());
  
  module.exports = ImgListMarquee;

});

;/*!app/components/link-img-marquee/index.js*/
define('app/components/link-img-marquee/index', function(require, exports, module) {

  'use strict';
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var labels = require('app/common/labels');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _LinkImgMarquee = function () {
  }
  
  _LinkImgMarquee.prototype = {
      init: function () {
  
          var cls = this;
  
          cls._super();
  
          cls.contentModuleType = 'linksMgr';
  
          var label = labels.docImgList;
          label.length = 16;
          label.num = 4;
  
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'linkImgMarquee',
              conf: {
                  height: 90,
                  isMore: false,
                  imgWidth: null,
                  imgHeight: 60,
                  titlePos: 'left',
                  isTitle: true,
                  isMarquee: true,
                  Marquee: {
                      simple: true,
                      limit: true
                  }
              },
              open: {
                  conf: {
                      width: 780,
                      height: 480,
                      url: '/assets/design/form/app/components/link-img-marquee/form.html'
                  }
              },
              label: label,
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}} {{conf.titlePos}}_head\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner {{if conf.isMarquee}}j-marquee{{/if}}\" style=\"overflow: hidden;\"\r\n             data-setting=\"{{if conf.isMarquee}}{simple:true,limit:true}{{/if}}\">\r\n            <div class=\"marquee-box\" style=\"width: 10000%;\">\r\n                <div class=\"marquee1\" style=\"float: left;\">\r\n                    <ul class=\"marquee-list ls-label clearfix\">\r\n                        {{each data.list as el index}}\r\n                        <li class=\"num{{index}}\">\r\n                            <a href=\"{{el.href}}\">\r\n                                <img src=\"{{el.imageLink}}\" options=\"{{ placeholderOpt }}\" class=\"{{placeholderClass}}\"  alt=\"{{el.title}}\"/>\r\n                                <span class=\"title\">{{el.title}}</span>\r\n                            </a>\r\n                        </li>\r\n                        {{/each}}\r\n                    </ul>\r\n                </div>\r\n                {{if conf.isMarquee}}\r\n                <div class=\"marquee2\" style=\"float: left;\">\r\n\r\n                </div>\r\n                {{/if}}\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body-inner { margin-top: 8px;overflow: hidden; }\r\n.<%= moduleId %>_panel .panel-body { width: <%=conf.panelBodyWidth%>px;height: <%=conf.panelBodyHeight%>px; border-width: <%=conf.isTitle&&conf.titlePos=='left'?1:0%>px;border-left-width: <%=conf.isTitle&&conf.titlePos=='left'?conf.panelBodyBorderLeftWidth:0%>px;}\r\n.<%= moduleId %>_panel .panel-body ul li { width: <%=conf.imgWidth%>px; }\r\n.<%= moduleId %>_panel .panel-body ul li img { width: <%=conf.imgWidth%>px;height: <%=conf.imgHeight%>px; }\r\n.<%= moduleId %>_panel .panel-heading.left_head,\r\n.<%= moduleId %>_panel .panel-heading.left_head .title { height: <%=conf.height%>px; }"
                  }
              }
          });
  
      },
      renderAfter: function () {
          var cls = this,
              option = cls.getModuleData();
          cls._super();
          utils.placeholderRender(option.moduleId);
          var $marquee = option.$module.find(".j-marquee");
          if(option.conf.isMarquee && $marquee.length>0) {
              setTimeout(function () {
                 Ls.www.myMarquee($marquee);
              },100)
          }
  
      },
      calculatedModuleHeight: function ($module) {
          var cls = this;
          cls._super($module);
  
          var option = cls.getModuleData(),
              conf = option.conf;
  
          if(conf.titlePos == 'top') {
  
              conf.panelBodyWidth = conf.width - 4;
              conf.panelBodyHeight = conf.height - conf.panelHeadingHeight - 2;
  
          }else {
              conf.panelBodyWidth = conf.isTitle ? conf.width - 83 : conf.width - 4;
              conf.panelBodyHeight = conf.height - 2;
  
          }
          conf.panelBodyBorderLeftWidth = conf.isTitle&&conf.titlePos=='left' ? 0 : 1;
  
          //合并参数
          cls.setModuleData(utils.assignClone(option, {
              conf: conf
          }));
  
          return cls;
  
      },
      initForm: function () {
          var cls = this;
          cls._super({
              methods: {
                  // 关联栏目
                  associateNode: function () {
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio'
                      },function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      })
  
                  }
              }
          })
      },
      getSimulationData: function () {
          var cls = this,
              option = cls.getModuleData();
  
          if(!option.conf.isCustomMore) {
              cls.createMoreHref(option);
          }
  
  
  
          //如果是新建模块，测要计算字符串长度
          if (option.isCreate || base.IS_SORTABLE) {
              cls.setCalculateFontLength();
          }
  
          if (utils.isNul(option.conf.imgWidth)) {
              option.conf.imgWidth = parseInt((option.conf.width - 40 - (option.conf.panelPadding * 2 ) - 82) / 4);
          }
          option.placeholderOpt = 'size='+option.conf.imgWidth+'x'+option.conf.imgHeight+'&text='+option.conf.imgWidth+'x'+option.conf.imgHeight+'&bgcolor=#F3F3F3&color=#cccccc';
          option.placeholderClass = 'placeholder';
  
          // 构建模拟数据
          option.data.list = mockData.getInfoList(option.label.num, option.label['length'], option.label.dateFormat).data;
  
          //重新全并参数
          cls.setModuleData(option);
  
          return cls;
      }
  
  
  }
  
  var LinkImgMarquee = components.extend(_LinkImgMarquee.prototype);
  
  base.plugin('linkImgMarquee', new LinkImgMarquee());
  
  module.exports = LinkImgMarquee;

});

;/*!app/components/file-download-list/index.js*/
define('app/components/file-download-list/index', function(require, exports, module) {

  /**
   * 文章信息列表
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _fileDownloadList = function () {
  }
  
  _fileDownloadList.prototype = {
      init: function () {
  
          this._super();
  
          var cls = this;
          cls.contentModuleType = 'fileDownload';
          cls.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + cls.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: 'articleNews',
              // 模块类型
              type: 'fileDownloadList',
              conf: {
                  height: 330
              },
              // 对应标签的内容项
              label: require('app/common/labels').fileDownloadList,
              open: {
                  conf: {
                      url: '/assets/design/form/app/components/file-download-list/form.html'
                  }
              },
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            <ul class=\"list ls-label\">\r\n                {{each data.list as el index}}\r\n                <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                    <span class=\"date {{label.isDate}}\">{{el.createDate}}</span>\r\n                    <a href=\"{{el.href}}\" target=\"{{label.target}}\">\r\n                        <font >{{el.title}}</font>\r\n                    </a>\r\n                    <span class=\"right hit {{label.isHit | displayShow}}\">{{el.hit}}</span>\r\n                    <span class=\"right date {{label.isDate | displayShow}}\">{{el.date}}</span>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
                  }
              }
          });
  
      },
      initForm: function () {
          var cls = this;
          cls._super({
              methods: {
                  // 关联栏目
                  associateNode: function () {
                      Ls.openWin(cls.selectNodeWinUrl, '400px', '400px', {
                          id: 'selectColumn',
                          title: '栏目选择',
                          padding: 0,
                          close: function (data) {
                              // utils.log(data);
                              if (data && data.length > 0) {
                                  // 标题取第一个节点
                                  base.vm.conf.title = data[0].name;
                                  var ids = [];
                                  var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                                  for (var i = 0; i < data.length; i++) {
                                      ids.push(data[i].indicatorId);
  
                                  }
                                  base.vm.label.id = ids.join(',');
                                  base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                              }
                          }
                      })
                  }
              }
          })
      }
  }
  
  var FileDownloadList = components.extend(_fileDownloadList.prototype);
  
  base.plugin('fileDownloadList', new FileDownloadList());
  
  module.exports = FileDownloadList;
  

});

;/*!app/components/flip-screen-marquee/index.js*/
define('app/components/flip-screen-marquee/index', function(require, exports, module) {

  'use strict';
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var labels = require('app/common/labels');
  var mockData = require('app/mock-data/index');
  var _ = require('node_modules/lodash/lodash');
  require('app/common/artdialog');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  // 组件父类
  var components = require('app/common/components');
  
  var _FlipScreenMarquee = function () {
  }
  
  _FlipScreenMarquee.prototype = {
      init: function () {
  
          var cls = this;
  
          cls._super();
  
          cls.contentModuleType = 'articleNews';
  
          cls.setOption({
              // 绑定标签的名称
              bindLabelName: '',
              // 模块类型
              type: 'flipScreenMarquee',
              conf: {
                  height: 140,
                  isMore: false,
                  titlePos: 'left',
                  isMarquee: true,
                  Marquee: {
                      MSClass: [],
                      Direction: 0,
                      Step: 2,
                      Timer: 30,
                      DelayTime: 5000,
                      WaitTime: 5000,
                      AutoStart: 1,
                      ScrollStep: 120
                  }
              },
              open: {
                  conf: {
                      width: 780,
                      height: 480,
                      url: '/assets/design/form/app/components/flip-screen-marquee/form.html'
                  }
              },
              label: labels.docList,
              tpl: {
                  // panel 的布局
                  panelTpl: "<div class=\"panel {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}} {{conf.titlePos}}_head\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div id=\"{{if conf.isMarquee}}marquee_{{moduleId}}{{/if}}\" class=\"{{if conf.isMarquee}}j-marquee{{/if}}\">\r\n            <ul class=\"marquee-list ls-label clearfix\">\r\n                {{each data.list as el index}}\r\n                <li class=\"num{{index}}\">\r\n                    <a href=\"{{el.href}}\" target=\"{{label.target}}\">{{el.title}}</a>\r\n                    <span class=\"right date {{label.isDate | displayShow}}\">{{el.createDate}}</span>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>",
                  // 样式模板
                  styleTpl: {
                      'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body-inner { margin-top: 8px;overflow: hidden; }\r\n.<%= moduleId %>_panel .panel-body { width: <%=conf.panelBodyWidth-10*2%>px;height: <%=conf.panelBodyHeight-10*2%>px; border-width: <%=conf.isTitle&&conf.titlePos=='left'?1:0%>px;border-left-width: <%=conf.isTitle&&conf.titlePos=='left'?conf.panelBodyBorderLeftWidth:0%>px;}\r\n.<%= moduleId %>_panel .panel-body .marquee-list li { width: <%=conf.panelBodyWidth-10*2-15 %>px; }\r\n.<%= moduleId %>_panel .panel-heading.left_head,.<%= moduleId %>_panel .panel-heading.left_head .title { height: <%=conf.height%>px; }"
                  }
              }
          });
  
      },
      renderAfter: function () {
          var cls = this,
              option = cls.getModuleData();
          cls._super();
          var $marquee = option.$module.find(".j-marquee");
          if(option.conf.isMarquee && $marquee.length>0) {
              setTimeout(function () {
                  Ls.www.myMarquee("#marquee_"+option.moduleId);
              },100)
          }
  
      },
      // createPanel: function () {debugger;
      //     var cls = this,
      //         options = cls.getModuleData(),
      //         $module = options.$module,
      //         Marqu = options.conf.Marquee;
      //
      //     cls._super();
      //
      //     if(options.conf.isMarquee) {
      //         // Marqu.Width = options.conf.panelBodyWidth - 10*2;
      //         Marqu.Height = options.conf.height - 10*2;
      //         Marqu.ScrollStep = Marqu.Height;
      //         Marqu.MSClass = ["marquee_"+options.moduleId];
      //         options.conf.Marquee = Marqu;
      //         $module.attr('data-conf', utils.jsonStringify(options.conf));
      //     }
      //
      //     var html = cls.getPanelHtml();
      //     cls.options.$module.html(html);
      //
      //     // var $marquee = $module.find('.j-marquee');
      //     // if(options.conf.isMarquee && $marquee.length > 0) {
      //     //     $marquee.attr('data-setting',utils.jsonStringify(options.conf.Marquee));
      //     // }
      //
      //     return cls;
      // },
      calculatedModuleHeight: function ($module) {
          var cls = this;
          cls._super($module);
  
          var option = cls.getModuleData(),
              conf = option.conf;
  
          if(conf.titlePos == 'top') {
  
              conf.panelBodyWidth = conf.width - 4;
              conf.panelBodyHeight = conf.height - conf.panelHeadingHeight - 2;
  
          }else {
              conf.panelBodyWidth = conf.isTitle ? conf.width - 41 - conf.panelPadding*2 : conf.width - 4;
              conf.panelBodyHeight = conf.height - 2;
  
          }
          conf.panelBodyBorderLeftWidth = conf.isTitle&&conf.titlePos=='left' ? 0 : 1;
  
  
  
          //合并参数
          cls.setModuleData(utils.assignClone(option, {
              conf: conf
          }));
  
          return cls;
  
      },
      calculatedPanel: function ($module) {
          var cls = this,
              width = 0,
              $module = $module ? $module : cls.options.$module,
              $panel = $module.find('.panel'),
              option = cls.getModuleData(),
              conf = option.conf;
  
          // 计算 panel 的 padding 值
          if (_.isUndefined(conf.panelPadding) || conf.panelPadding == null) {
              conf.panelPadding = utils.getIntegerFixPX($panel.css('padding'));
          }
  
          // 计算 panel 的 border 值
          if (_.isUndefined(conf.borderLeftWidth) || conf.borderLeftWidth == null) {
              conf.borderLeftWidth = utils.getIntegerFixPX($panel.css('border-left-width'));
          }
          if (_.isUndefined(conf.borderRightWidth) || conf.borderRightWidth == null) {
              conf.borderRightWidth = utils.getIntegerFixPX($panel.css('border-right-width'));
          }
          if (_.isUndefined(conf.borderTopWidth) || conf.borderTopWidth == null) {
              conf.borderTopWidth = utils.getIntegerFixPX($panel.css('border-top-width'));
          }
          if (_.isUndefined(conf.borderBottomWidth) || conf.borderBottomWidth == null) {
              conf.borderBottomWidth = utils.getIntegerFixPX($panel.css('border-bottom-width'));
          }
  
          conf.panelWidth = conf.width - (conf.panelPadding * 2) - conf.borderLeftWidth - conf.borderRightWidth;
          conf.panelHeight = conf.height - (conf.panelPadding * 2) - conf.borderTopWidth - conf.borderBottomWidth;
  
          // 计算 组件  panel-heading 高度
          var $panelHeading = $module.find('.panel-heading');
          if ($panelHeading.length > 0) {
              if (!conf.panelHeadingHeight || conf.panelHeadingHeight == null) {
                  conf.panelHeadingHeight = !$panelHeading.hasClass('dn') ? $module.find('.panel-heading').outerHeight() : 0;
                  // utils.log('conf.panelHeadingHeight: ', conf.panelHeadingHeight);
              }
              // 计算 组件 panel-body 高度
              if (utils.isNul(conf.panelBodyHeight)) {
                  conf.panelBodyHeight = $panelHeading.hasClass('dn') ? conf.height - 2 : conf.height - conf.panelHeadingHeight - 2;
              }
  
          } else {
              conf.panelHeadingHeight = 0;
              conf.panelBodyHeight = conf.height - 2;
          }
  
          if(conf.titlePos == 'top') {
  
              conf.panelBodyWidth = conf.width - 4;
              conf.panelBodyHeight = conf.height - conf.panelHeadingHeight - 2;
  
          }else {
              conf.panelBodyWidth = conf.isTitle ? conf.width - 41 - conf.panelPadding*2 : conf.width - 4;
              conf.panelBodyHeight = conf.height - 2;
  
          }
          conf.panelBodyBorderLeftWidth = conf.isTitle&&conf.titlePos=='left' ? 0 : 1;
  
  
          //合并参数
          cls.setModuleData(utils.assignClone(option, {
              conf: conf
          }));
  
          var $marquee = $module.find('.j-marquee');
          conf.Marquee.Width = conf.panelBodyWidth - 10*2;
          conf.Marquee.Height = conf.height - 10*2;
          conf.Marquee.ScrollStep = conf.Marquee.Height;
          conf.Marquee.MSClass = ["marquee_"+option.moduleId];
          $module.attr('data-conf', utils.jsonStringify(option.conf));
          if(conf.isMarquee && $marquee.length > 0) {
              $marquee.attr('data-setting',utils.jsonStringify(conf.Marquee));
          }
  
          return cls;
      },
      initForm: function () {
          var cls = this;
          cls._super({
              methods: {
                  // 关联栏目
                  associateNode: function () {
                      utils.selectColumn({
                          configType: cls.contentModuleType,
                          chkStyle: 'radio'
                      },function (data) {
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      })
  
                  }
              }
          })
      }
  
  }
  
  var FlipScreenMarquee = components.extend(_FlipScreenMarquee.prototype);
  
  base.plugin('flipScreenMarquee', new FlipScreenMarquee());
  
  module.exports = FlipScreenMarquee;

});

;/*!app/components/img-doc-list/index.js*/
define('app/components/img-doc-list/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var template = require('app/common/arttemplate');
  
  
  var ImgDocList = BaseModule.extend({
      init: function (options) {
          this._super(options);
          this.moduleSetting.type = 'imgDocList';
          this.moduleSetting.conf.pattern = 'mF_tbhuabao';
  
          this.mainLabelName = 'docList';
          var mainLabel = new labels.docListLabel({
              num:3,
              length: 16
          });
          this.moduleSetting.label = mainLabel.conf;
  
          this.moduleSetting.conf.panelBodyTop = {
              enable: true,
              label: new labels.docImgListLabel({
                  num: 5,
                  length: 12,
                  file: 'myfocus'
              }).conf
          };
  
          this.styleTpl = {
              'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .carousel-panel {\r\nwidth: <%=conf.imgWidth%>px;\r\nheight: <%=conf.imgHeight%>px;\r\n}\r\n.<%= moduleId %>_panel .mF_sohusports_wrap,\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports,\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic,\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul,\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li,\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li a,\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .pic ul li a img{\r\n  width:<%= conf.panelBodyTop.label.imgWidth  %>px!important;height:<%=  conf.panelBodyTop.label.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt,\r\n .<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt li{ width:<%= conf.panelBodyTop.label.imgWidth  %>px;}\r\n.<%= moduleId %>_panel .mF_sohusports_wrap .mF_sohusports .txt li a{width:<%=  conf.panelWidth - 120 %>px!important;}\r\n\r\n\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic ul li,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic ul li a,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic ul li a img{\r\n  width:<%= conf.panelBodyTop.label.imgWidth  %>px!important;height:<%=  conf.panelBodyTop.label.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .txt,\r\n .<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .txt li{ width:<%= conf.panelBodyTop.label.imgWidth  %>px;}\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .txt li a{width:<%=  conf.panelWidth - 120 %>px!important;}\r\n\r\n.<%= moduleId %>_panel .mF_tbhuabao_<%=moduleId%>_myFocus li {list-style:none;}\r\n"
          };
  
          // 用于从控件中拖动到布局中 构造主体内容使用
          this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n\r\n        <div class=\"panel-body-inner\">\r\n            {{if conf.panelBodyTop.enable}}\r\n            <div class=\"panel-body-top ls-panelBodyTopLabel myfocus-panel\">\r\n                <div id=\"{{moduleId}}_myFocus\">\r\n                    <div class=\"pic\">\r\n                        {{#panelBodyTopLabelHtml}}\r\n                    </div>\r\n\r\n                    <script type=\"text/js\">\r\n                        myFocus.set({id: \"{{moduleId}}_myFocus\",pattern: \"{{conf.pattern}}\",height:{{conf.panelBodyTop.label.imgHeight}},width:{{ conf.panelBodyTop.label.imgWidth}},txtHeight: 0});\r\n                    </script>\r\n                </div>\r\n            </div>\r\n            {{/if}}\r\n\r\n            <div class=\"panel-body-center\">\r\n                {{#mainLabelHtml}}\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    {{if conf.footer.enable}}\r\n    <div class=\"panel-footer\">\r\n        {{#footerLabelHtml}}\r\n    </div>\r\n    {{/if}}\r\n</div>";
  
          // 用于从控件中拖动到布局中 构造module使用
          this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
              'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
          // 编译模板,后面直接使用, 提高执行效率
          this.compileTpl = template.compile(this.panelTpl);
  
      },
      getData: function (options, isModule, excludeListData) {
          var cls = this,
              data = utils.assignClone(cls.moduleSetting, options);
          data.isMobile = base.isMobile;
          if (isModule) {
              data.moduleId = utils.createModuleUniqueId();
          }
          if (isModule || base.IS_SORTABLE) {
              // 根据容器的宽度自动计算字符长度
              data.label['length'] = utils.getFontLength(data.conf.width);
          }
  
          if (isModule || base.IS_SORTABLE ) {
              // data.conf.panelBodyTop.label.imgWidth = data.conf.width;
              data.conf.panelBodyTop.label.imgWidth = data.conf.panelWidth;
              data.conf.panelBodyTop.label.imgHeight = 180;
  
          }
          if(utils.isNul(data.conf.imgWidth)) {
              // data.conf.panelBodyTop.label.imgWidth = data.conf.width;
              data.conf.panelBodyTop.label.imgWidth = data.conf.panelWidth;
          }
          if(utils.isNul(data.conf.imgHeight)) {
              data.conf.panelBodyTop.label.imgHeight = 180;
          }
  
  
          // 是否挂载演示数据
          if (!excludeListData) {
              // 根据标签类型加载html
              if( data.label &&  data.label.labelName){
                  data.mainLabelHtml = cls.__getLabel('mainLabel', data.label).getRenderHtml('mainLabel', data.label);
              }
              if (data.conf.panelBodyTop.enable &&
                  data.conf.panelBodyTop.label.labelName) {
                  data.panelBodyTopLabelHtml = cls.__getLabel('panelBodyTop', data.conf.panelBodyTop.label)
                      .getRenderHtml('panelBodyTopLabel', data.conf.panelBodyTop.label);
              }
          }
  
          if(!data.conf.isCustomMore) {
              // 构造标题更多链接
              //data.conf.titleHref = config.getTitleHref(data.label.id);
              cls.createMoreHref(data);
          }
  
          return data;
      },
      renderAfter: function (moduleId) {
          var cls = this,
              $module = $('#' + moduleId),
              data = utils.initModuleData(moduleId, cls.moduleSetting);
  
          if (cls.isCreate || base.IS_SORTABLE ) {
              // data.conf.panelBodyTop.label.imgWidth = data.conf.width;
              data.conf.panelBodyTop.label.imgWidth = data.conf.panelWidth;
              data.conf.panelBodyTop.label.imgHeight = 180;
  
          }
          if(utils.isNul(data.conf.imgWidth)) {
              // data.conf.panelBodyTop.label.imgWidth = data.conf.width;
              data.conf.panelBodyTop.label.imgWidth = data.conf.panelWidth;
          }
          if(utils.isNul(data.conf.panelBodyTop.label.imgHeight)) {
              data.conf.panelBodyTop.label.imgHeight = 180;
          }
  
          var myFocusOption = {
              id: moduleId + '_myFocus',
              pattern: data.conf.pattern,
              width: data.conf.panelBodyTop.label.imgWidth,
              height: data.conf.panelBodyTop.label.imgHeight,
              txtHeight: 0
          };
          //轮播1
          myFocus.set(myFocusOption);
  
          // 动态创建样式
          utils.compileStyle(moduleId, data, cls.styleTpl);
          //渲染自定义样式
          utils.replaceClassName($module, data, cls.pageIsFristLoad);
          // 标明页面已经加载过了
          cls.pageIsFristLoad = false;
          cls.isCreate = false;
  
      }
  });
  
  base.plugin('imgDocList', new ImgDocList());
  
  module.exports = ImgDocList;
  

});

;/*!app/components/video-carousel/index.js*/
define('app/components/video-carousel/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var doms = require('app/common/template-dom-structure');
  var labels2 = require('app/common/labels');
  var template = require('app/common/arttemplate');
  var vueCommon = require('app/common/vue-common');
  
  var VideoCarousel = BaseModule.extend({
      init: function (options) {
          this._super(options);
          this.moduleSetting.type = 'videoCarousel';
  
          this.mainLabelName = 'videoNewsList';
          var mainLabel = new labels.videoNewsListLabel({
              num:3,
              length: 16
          });
          this.moduleSetting.label = mainLabel.conf;
  
          this.moduleSetting.conf.panelBodyTop = {
              enable: true,
              label: new labels.videoNewsListLabel({
                  num: 5,
                  length: 12,
                  file: 'myfocus'
              }).conf
          };
  
          // this.moduleSetting.conf.pattern = 'mF_sohusports';
          this.moduleSetting.conf.pattern = 'mF_tbhuabao';
  
          this.styleTpl = {
              'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .myfocus-panel {\r\n  width:<%= conf.imgWidth  %>px!important;\r\n  height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic ul li,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic ul li a,\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .pic ul li a img{\r\n  width:<%= conf.imgWidth  %>px!important;height:<%=  conf.imgHeight  %>px!important;\r\n}\r\n\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .txt,\r\n .<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .txt li{ width:<%= conf.imgWidth  %>px;}\r\n.<%= moduleId %>_panel .mF_tbhuabao_wrap .mF_tbhuabao .txt li a{width:<%=  conf.panelWidth - 120 %>px!important;}\r\n\r\n.<%= moduleId %>_panel .mF_tbhuabao_<%=moduleId%>_myFocus li {list-style:none;}"
          };
  
          this.propWin.url = '/assets/design/form/app/components/video-carousel/form.html';
  
          // 用于从控件中拖动到布局中 构造主体内容使用
          this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.title}}</a>\r\n        </div>\r\n        {{ if conf.isMore }}\r\n        <div class=\"more\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-body\">\r\n\r\n        <div class=\"panel-body-inner\">\r\n            {{if conf.panelBodyTop.enable}}\r\n            <div class=\"panel-body-top ls-panelBodyTopLabel myfocus-panel\">\r\n                <div id=\"{{moduleId}}_myFocus\">\r\n                    <div class=\"pic\">\r\n                        {{#panelBodyTopLabelHtml}}\r\n                    </div>\r\n\r\n                    <script type=\"text/js\">\r\n                        myFocus.set({id: \"{{moduleId}}_myFocus\",pattern: \"{{conf.pattern}}\",height:{{conf.imgHeight}},width:{{ conf.imgWidth}},txtHeight: 0});\r\n                    </script>\r\n                </div>\r\n            </div>\r\n            {{/if}}\r\n\r\n            <div class=\"panel-body-center\">\r\n                {{#mainLabelHtml}}\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    {{if conf.footer.enable}}\r\n    <div class=\"panel-footer\">\r\n        {{#footerLabelHtml}}\r\n    </div>\r\n    {{/if}}\r\n</div>";
  
          // 用于从控件中拖动到布局中 构造module使用
          this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
              'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
          // 编译模板,后面直接使用, 提高执行效率
          this.compileTpl = template.compile(this.panelTpl);
  
      },
      getData: function (options, isModule, excludeListData) {
          var cls = this,
              // moduleId = options.moduleId,
              data = utils.assignClone(cls.moduleSetting, options);
          utils.log('app/components/base-module.js getData: ',data);
          data.isMobile = base.isMobile;
          if (isModule) {
              data.moduleId = utils.createModuleUniqueId();
          }
          if (isModule || base.IS_SORTABLE) {
              // 根据容器的宽度自动计算字符长度
              data.label['length'] = utils.getFontLength(data.conf.width);
          }
  
          if (isModule || base.IS_SORTABLE ) {
              // data.conf.imgWidth = data.conf.width;
              data.conf.imgWidth = data.conf.panelWidth;
              data.conf.imgHeight = 180;
  
          }
          if(utils.isNul(data.conf.imgWidth)) {
              // data.conf.imgWidth = data.conf.width;
              data.conf.imgWidth = data.conf.panelWidth;
          }
          if(utils.isNul(data.conf.imgHeight)) {
              data.conf.imgHeight = 180;
          }
  
  
          // 是否挂载演示数据
          if (!excludeListData) {
              // 根据标签类型加载html
              if( data.label &&  data.label.labelName){
                  data.mainLabelHtml = cls.__getLabel('mainLabel', data.label).getRenderHtml('mainLabel', data.label);
              }
              if (data.conf.panelBodyTop.enable &&
                  data.conf.panelBodyTop.label.labelName) {
                  data.panelBodyTopLabelHtml = cls.__getLabel('panelBodyTop', data.conf.panelBodyTop.label)
                      .getRenderHtml('panelBodyTopLabel', data.conf.panelBodyTop.label);
              }
          }
  
          if(!data.conf.isCustomMore) {
              // 构造标题更多链接
              //data.conf.titleHref = config.getTitleHref(data.label.id);
              cls.createMoreHref(data);
          }
  
          return data;
      },
      renderAfter: function (moduleId) {
          var cls = this,
              $module = $('#' + moduleId),
              data = utils.initModuleData(moduleId, cls.moduleSetting);
  
          if (cls.isCreate || base.IS_SORTABLE ) {
              // data.conf.imgWidth = data.conf.width;
              data.conf.imgWidth = data.conf.panelWidth;
              data.conf.imgHeight = 180;
  
          }
          if(utils.isNul(data.conf.imgWidth)) {
              // data.conf.imgWidth = data.conf.width;
              data.conf.imgWidth = data.conf.panelWidth;
          }
          if(utils.isNul(data.conf.imgHeight)) {
              data.conf.imgHeight = 180;
          }
  
          var myFocusOption = {
              id: moduleId + '_myFocus',
              pattern: data.conf.pattern,
              width: data.conf.imgWidth,
              height: data.conf.imgHeight,
              txtHeight: 0
          };
          //轮播1
          myFocus.set(myFocusOption);
  
          // 动态创建样式
          utils.compileStyle(moduleId, data, cls.styleTpl);
          //渲染自定义样式
          utils.replaceClassName($module, data, cls.pageIsFristLoad);
          // 标明页面已经加载过了
          cls.pageIsFristLoad = false;
          cls.isCreate = false;
  
      }
  });
  
  base.plugin('videoCarousel', new VideoCarousel());
  
  module.exports = VideoCarousel;
  
  
  

});

;/*!app/components/link-note/index.js*/
define('app/components/link-note/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  
  
  var LinkNote = BaseModule.extend({
      init: function (options) {
          this.styleTpl = {
              default: "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body li .img { width: <%=label.imgWidth%>px;height: <%=label.imgHeight%>px; }"
          };
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'linkNote';
  
          var mainLabel = new labels.linkListLabel({
              num:4,
              length: 15,
              tplType: 'linkNote',
              linkType: 'IMG',
              imgWidth: 80,
              imgHeight: 50
          });
          this.moduleSetting.label = mainLabel.conf;
  
      }
  });
  
  LinkNote.prototype.test = function () {
  
  };
  
  base.plugin('linkNote', new LinkNote());
  
  module.exports = LinkNote;
  
  
  

});

;/*!app/components/link-collect/index.js*/
define('app/components/link-collect/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  
  
  var LinkCollect = BaseModule.extend({
      init: function (options) {
          this.styleTpl = {
              default: "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%=moduleId%>_panel .panel-body .linkListImg li img{ width: <%=conf.width%>px; }"
          };
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'linkCollect';
  
          this.moduleSetting.conf.panelBodyTop = {
              enable: true,
              label: new labels.linkListLabel({
                  num: 2
              }).conf
          }
          var mainLabel = new labels.collectInfoListLabel({
              num:5,
              isDate: true,
              isStatus: true,
              dateType: 2
          });
          this.moduleSetting.label = mainLabel.conf;
  
      }
  });
  
  LinkCollect.prototype.test = function () {
  
  };
  
  base.plugin('linkCollect', new LinkCollect());
  
  module.exports = LinkCollect;
  
  
  

});

;/*!app/components/link-doc-list/index.js*/
define('app/components/link-doc-list/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  
  
  var LinkDocList = BaseModule.extend({
      init: function (options) {
          this.styleTpl = {
              default: "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%=moduleId%>_panel .panel-body .linkListImg li img{ width: <%=conf.panelWidth%>px; }"
          };
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'linkDocList';
  
          this.moduleSetting.conf.panelBodyTop = {
              enable: true,
              label: new labels.linkListLabel({
                  num: 2
              }).conf
          }
          var mainLabel = new labels.docListLabel({
              num:5,
              isDate: true,
              isStatus: true,
              dateType: 2
          });
          this.moduleSetting.label = mainLabel.conf;
  
      }
  });
  
  LinkDocList.prototype.test = function () {
  
  };
  
  base.plugin('linkDocList', new LinkDocList());
  
  module.exports = LinkDocList;
  
  
  

});

;/*!app/components/link-list/index.js*/
define('app/components/link-list/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');
  var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var Linklist = function (options) {
      this.options = $.extend(true, Linklist.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'linksMgr';
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'linkList',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: true,
              isMore: true,
              more: '更多+',
              imgWidth: 80,
              imgHeight: 50,
              height: '300',
              linkType: 'img'
          },
          label: require('app/common/labels').linkList
      };
  
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('Linklist this.moduleSetting: ',this.moduleSetting);
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .link-list a img{ width:<%= conf.imgWidth %>px; height: <%= conf.imgHeight %>px; }"
      };
  
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel {{moduleId}}_panel clearfix\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        <div class=\"panel-body-inner\">\r\n            <ul class=\"link-list ls-label clearfix\">\r\n                {{each list as el index}}\r\n                <li class=\"num{{index+1}} {{if index%2==1}}even{{else}}odd{{/if}}\">\r\n                    <a href=\"{{el.href}}\">\r\n                        {{if conf.linkType=='img'}}\r\n                            <img src=\"{{el.imageLink}}\" alt=\"{{el.title}}\"/>\r\n                        {{/if}}\r\n                        <span class=\"img-title\">{{el.title}}</span>\r\n                    </a>\r\n                </li>\r\n                {{/each}}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          'data-label="{{#label | jsonStr}}" > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  Linklist.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/link-list/form.html',
          width: 600,
          height: 480
      },
      type: 'linkList'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  Linklist.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  Linklist.prototype.formSumbit = function () {
      // var cls = this, validateState = false;
      //
      // if (!base.vm) {
      //     base.alert('base.vm对象不存在!');
      //     return false;
      // }
      //
      // $('#attrForm').submit();
      // // 表单验证通过后的处理事件
      // if (base.attrFormValidateState) {
      //     var data = base.vm.$data;
      //     // 注意此处是修改iframe中的对象
      //     base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      // }
      //
      // return base.attrFormValidateState;
      return commonModuleFunction.componentCommonFormSubmitFn(this.moduleSetting.type,base);
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  Linklist.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this;
      var data = utils.assignClone(cls.moduleSetting, options);
      data.isMobile = base.isMobile;
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
          data.label.num = 3;
      }
      // 适配
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          data.label['length'] = utils.getFontLength(data.conf.width);
  
      }
      // 动态计算图片的宽高
      if (utils.isNul(data.conf.imgWidth)) {
          data.conf.imgWidth = data.conf.width - (data.conf.panelPadding * 2);
      }
  
      if (!excludeListData) {
          data.list = mockData.getInfoList2({num: data.label.num, length: data.label['length'],dateFormat: data.label.dateFormat}).data;
          // 构造图片占位符代码
          var placeholderOpt = 'size=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&text=' + data.conf.imgWidth + 'x' + data.conf.imgHeight + '&bgcolor=#F3F3F3&color=#cccccc';
          data.placeholderClass = 'placeholder';
          if (data.conf.className == cls.moduleSetting.type) {
              data.placeholderOpt = placeholderOpt;
              data.placeholderClass = 'placeholder';
          } else {
              data.placeholderOpt = '';
              data.placeholderClass = '';
          }
      }
  
      // 构造标题更多链接
      if(!data.conf.isCustomMore) {
          cls.createMoreHref(data);
      }
  
      return data;
  };
  
  /**
   * 构造标题更多链接
   */
  Linklist.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  Linklist.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      // utils.log('Linklist.prototype.getHtmlAndModuleId:data>>>' + JSON.stringify(data.label));
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  Linklist.prototype.getModuleAttrData = function (moduleId) {
  
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // data.conf.wrapWidth = (data.conf.imgWidth + data.conf.paddingTop + data.conf.paddingLeft + data.conf.paddingBottom + data.conf.paddingRight) * (data.label.num * 2);
      // // 构造标题更多链接
      // data.conf.titleHref = config.getTitleHref(data.label.id);
  
      return data;
  };
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  Linklist.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  Linklist.prototype.initForm = function () {
      var cls = this;
  
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
      // 使用Vue.js构造对象,注意要在窗口关闭时销毁对象
      // 销毁对象使用base.vm.$destroy()
      var _methods = {
          // 关联栏目
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
  
      utils.log('Linklist Linklist.prototype.initForm  data: ',data);
  
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  Linklist.prototype.open = function () {
      var options = this.options;
      var id = 'linkList';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  Linklist.prototype.parseSave = function (options) {
      var cls = this,
          data = utils.assignClone1(cls.moduleSetting, options);
  
      // 解析标签
      var isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          var panelHtml = cls.getPanelHtml(data);
          var $panelHtml = $(panelHtml);
          var labelStr = utils.parseLabel(data.label);
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  Linklist.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  Linklist.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      utils.placeholderRender(moduleId);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  Linklist.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  Linklist.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
  
      if(!options.conf.isCustomMore) {
          cls.createMoreHref(options);
      }
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      cls.formSubmitStatus = true;
      // 重新渲染
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  Linklist.prototype.test = function () {
      // utils.log("Linklist test success!");
  };
  
  base.plugin('linkList', new Linklist());
  
  module.exports = Linklist;

});

;/*!app/components/ordinary-page/index.js*/
define('app/components/ordinary-page/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var OrdinaryPage = function (options) {
      this.options = utils.assignClone(OrdinaryPage.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'ordinaryPage';
      this.columnId = utils.getQueryString('columnId');
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'ordinaryPage',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: true,
              more: '更多+',
              titleHref:'#',
              associateType: 'ordinaryPage'
          },
          label1: {
              labelName: 'ordinaryPage',
              id: ''
          },
          label2: require('app/common/labels').docHeadlines
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      if(this.moduleSetting.conf.associateType == "articleNews") {
          this.moduleSetting.label = _.merge({},this.moduleSetting.label2,{num:1,noteLength:60,showType:1,isDetailed:true});
      }else {
          this.moduleSetting.label = this.moduleSetting.label1;
      }
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
      };
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {{if conf.associateType == 'ordinaryPage'}}\r\n        <div class=\"panel-body-inner\">\r\n            <div class=\"conbox\">\r\n                <div class=\"content-info ls-label\">\r\n                    <p>演示数据演示数据</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {{/if}}\r\n\r\n        {{if conf.associateType == 'articleNews'}}\r\n        <div class=\"panel-body-inner\">\r\n            {{each list as el index}}\r\n            <ul class=\"list clearfix ls-label\">\r\n                <h2><a href=\"{{el.href}}\">{{el.title}}</a></h2>\r\n                {{if label.isDetailed}}\r\n                <p class=\"remarks\">\r\n                    {{el.note}}\r\n                    {{if label.isDetailed}}\r\n                    <a href=\"{{el.href}}\">{{label.detailed}}</a>\r\n                    {{/if}}\r\n                </p>\r\n                {{/if}}\r\n            </ul>\r\n            {{/each}}\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          ' > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  OrdinaryPage.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 - 自定义内容',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/ordinary-page/form.html',
          width: 660,
          height: 480
      },
      type: 'ordinaryPage'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  OrdinaryPage.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  OrdinaryPage.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 构造标题更多链接
   */
  OrdinaryPage.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  OrdinaryPage.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
  
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
  
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          //data.label['length'] = utils.getFontLength(data.conf.width);
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          // data.html = mockData.getPageInfo(data.conf.length).data;
          // var length = data.conf["length"];
          // data.html = mockData.getPageInfo(length ? length : 160).data;
          if(data.conf.associateType == "articleNews") {
              data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat).data;
          }
      }
  
      // 构造标题更多链接
      if(!data.conf.isCustomMore) {
          cls.createMoreHref(data);
      }
  
      return data;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  OrdinaryPage.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  OrdinaryPage.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      var html = $('#' + moduleId).find(".htmledit").html();
      data.html = (html + "").replace(/<br\s*\/?>/gi, "\n").replace(/&ensp;/g, " ");
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  OrdinaryPage.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  OrdinaryPage.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(data);
      var $panelHtml = $(panelHtml);
      // 解析标签
      var labelStr = '', isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          // 解析标签
          labelStr = utils.parseLabel(data.label);
          // 将解析后的标签回写到 panel 中
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  
  
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  OrdinaryPage.prototype.initForm = function () {
      var cls = this;
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
  
      var _methods = {
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              if(data[0].columnTypeCode == 'ordinaryPage') {
                                  base.vm.label = cls.moduleSetting.label1;
                              }else {
                                  base.vm.label = cls.moduleSetting.label2;
                                  base.vm.label.num = 1;
                                  base.vm.label.showType = 1;
                                  base.vm.label.noteLength = 60;
                                  base.vm.label.isDetailed = true;
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
  
                              base.vm.conf.associateType = data[0].columnTypeCode;
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              // return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  OrdinaryPage.prototype.open = function () {
      var options = this.options;
      var id = 'ordinaryPage';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  OrdinaryPage.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
  
  
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  OrdinaryPage.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  OrdinaryPage.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  OrdinaryPage.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
  
      if(!options.conf.isCustomMore) {
          cls.createMoreHref(options);
      }
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      // data.html = options.html.replace(/(\r)*\n/g, "<br/>").replace(/\s/g, "&ensp;");
      // var html = cls.compileTpl(data);
      // $module.html(html);
  
      // 重新渲染
      cls.renderPanel(moduleId, data);
  };
  
  
  OrdinaryPage.prototype.test = function () {
      // utils.log("HtmlEdit test success!");
  };
  
  base.plugin('ordinaryPage', new OrdinaryPage());
  
  module.exports = OrdinaryPage;
  

});

;/*!app/components/page-info/index.js*/
define('app/components/page-info/index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-1-12.
   */
  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var Mock = require('node_modules/mockjs/dist/mock');
  var base = require('app/common/base');
  require('app/common/artdialog');
  var utils = require('app/common/utils');
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  var mockData = require('app/mock-data/index');
  var doms = require('app/common/template-dom-structure');
  var vueCommon = require('app/common/vue-common');
  // 引入控件的公共配置属性
  var commonModuleSetting = require('app/components/commonModuleSetting');var commonModuleFunction = require('app/components/commonModuleFunction');
  
  var PageInfo = function (options) {
      this.options = utils.assignClone(PageInfo.DEFAULTS, options);
      this.win = base['artdialog'];
      // 页面首页加载标记
      this.pageIsFristLoad = true;
      // 表单提交标记
      this.formSubmitStatus = false;
      // this.db = base['db'];
      // 将表单验证状态重置为false
      base.attrFormValidateState = false;
      // 后台内容模型值,用于关联节点时筛选,作为关联窗口时的参数
      this.contentModuleType = 'ordinaryPage,articleNews';
      this.columnId = utils.getQueryString('columnId');
      this.selectNodeWinUrl = '/special/specialSelectColumn?configType=' + this.contentModuleType + '&chkStyle=radio&columnId=' + utils.getColumnId();
      this.moduleSetting = {
          type: 'pageInfo',
          isMobile: false,
          moduleId: 0,
          conf: {
              style: 'default',
              title: '组件标题',
              isTitle: true,
              more: '更多+',
              titleHref:'#',
              associateType: 'ordinaryPage'
          },
          label1: {
              labelName: 'pageInfo',
              id: '434636',
              detailed: "【详细】",
              length: 60,
              showType: '2'
          },
          label2: require('app/common/labels').docHeadlines
      };
      // 合并默认公共配置属性
      this.moduleSetting = _.merge({},commonModuleSetting,this.moduleSetting);
      // utils.log('LinklistImg this.moduleSetting: ',this.moduleSetting);
  
      if(this.moduleSetting.conf.associateType == "articleNews") {
          this.moduleSetting.label = _.merge({},this.moduleSetting.label2,{num:1,noteLength:60,showType:1,isDetailed:true});
      }else {
          this.moduleSetting.label = this.moduleSetting.label1;
      }
  
      this.styleTpl = {
          'default': "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n"
      };
  
      // 定义组件的HTML,使用artTemplate编译
      this.panelTpl = "<div class=\"panel clearfix {{moduleId}}_panel\">\r\n    <div class=\"panel-heading clearfix {{conf.isTitle | displayShow}}\">\r\n        <div class=\"title\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{#conf.title}}</a>\r\n        </div>\r\n        <div class=\"more {{conf.isMore | displayShow}}\">\r\n            <a href=\"{{conf.titleHref}}\" target=\"_blank\">{{conf.more}}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-body\">\r\n        {{if conf.associateType == 'ordinaryPage'}}\r\n        <div class=\"panel-body-inner ls-label\">\r\n            {{if label.showType == '2'}}\r\n            <p class=\"content-info\">\r\n                {{data.article}}\r\n                {{if label.detailed != ''}}\r\n                <a href=\"{{data.link}}\" target=\"{{data.target}}\" class=\"detailed\">{{data.detailed}}</a>\r\n                {{/if}}\r\n            </p>\r\n            {{/if}}\r\n\r\n            {{if label.showType == '1'}}\r\n            <p class=\"content-info\">\r\n                {{data.remarks}}\r\n                {{if label.detailed != ''}}\r\n                <a href=\"{{data.link}}\" target=\"{{data.target}}\" class=\"detailed\">{{data.detailed}}</a>\r\n                {{/if}}\r\n            </p>\r\n            {{/if}}\r\n        </div>\r\n        {{/if}}\r\n\r\n        {{if conf.associateType == 'articleNews'}}\r\n        <div class=\"panel-body-inner\">\r\n            {{each list as el index}}\r\n            <ul class=\"list clearfix ls-label\">\r\n                <h2><a href=\"{{el.href}}\">{{el.title}}</a></h2>\r\n                {{if label.isDetailed}}\r\n                <p class=\"remarks\">\r\n                    {{el.note}}\r\n                    {{if label.isDetailed}}\r\n                    <a href=\"{{el.href}}\">{{label.detailed}}</a>\r\n                    {{/if}}\r\n                </p>\r\n                {{/if}}\r\n            </ul>\r\n            {{/each}}\r\n        </div>\r\n        {{/if}}\r\n    </div>\r\n    <div class=\"panel-footer\">\r\n    </div>\r\n</div>";
  
      // 定义组件的HTML,使用artTemplate编译
      this.moduleTpl = '<div id="{{moduleId}}" class="' + base.convertAttr(doms.module) + ' {{ conf.className }}" data-type="{{type}}" _autoload="1" data-conf="{{#conf | jsonStr}}" ' +
          ' > ' + this.panelTpl + '</div>';
  
      this.compileTpl = template.compile(this.panelTpl);
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  PageInfo.DEFAULTS = {
      id: '#winmodulesetting',
      /**
       * 属性窗口配置
       * @type {Object}
       */
      propWin: {
          title: '组件设置 - 自定义内容',
          // 使用编译函数 __uri(path) 来定位资源, __uri 为 FIS3 函数
          url: '/assets/design/form/app/components/page-info/form.html',
          width: 660,
          height: 480
      },
      type: 'pageInfo'
  };
  
  /**
   * 创建新组件
   * 引用: floatPanel.js > 490 - 510 行
   * @param $target
   */
  PageInfo.prototype.create = function ($target) {
      var cls = this;
      cls.isCreate = true;
      var obj = cls.getHtmlAndModuleId($target);
      $target.html(obj.html);
      cls.renderAfter(obj.moduleId);
  };
  /**
   * 表单提交
   * @returns {boolean} true 表示验证通过 false 验证不通过
   */
  PageInfo.prototype.formSumbit = function () {
      var cls = this, validateState = false;
  
      if (!base.vm) {
          base.alert('base.vm对象不存在!');
          return false;
      }
  
      $('#attrForm').submit();
      // 表单验证通过后的处理事件
      if (base.attrFormValidateState) {
          var data = base.vm.$data;
          // 注意此处是修改iframe中的对象
          base.templateApp[cls.moduleSetting.type].setModuleAttrData(data.moduleId, data);
      }
  
      return base.attrFormValidateState;
  };
  
  /**
   * 构造标题更多链接
   */
  PageInfo.prototype.createMoreHref = function (data) {
      var cls = this,
          siteId = data.label.siteId;
      if(!utils.getDevelopStatus()&&siteId&&siteId!=top.window.GLOBAL_SITEID) {
          data.conf.titleHref = config.getOtherTitleHref(data.label.id,siteId);
      }else {
          data.conf.titleHref = config.getTitleHref(data.label.id);
      }
  
      return cls;
  };
  
  /**
   * 获取用于模板渲染使用的数据对象
   * @param options
   * @param isModule
   * @returns {*}
   */
  PageInfo.prototype.getData = function (options, isModule, excludeListData) {
      var cls = this,
          // moduleId = options.moduleId,
          data = utils.assignClone(cls.moduleSetting, options);
  
  
      if (isModule) {
          data.moduleId = utils.createModuleUniqueId();
      }
  
      if (isModule || base.IS_SORTABLE) {
          // 根据容器的宽度自动计算字符长度
          //data.label['length'] = utils.getFontLength(data.conf.width);
      }
  
      // 是否挂载演示数据
      if (!excludeListData) {
          // data.html = mockData.getPageInfo(data.conf.length).data;
          // var length = data.conf["length"];
          // data.html = mockData.getPageInfo(length ? length : 160).data;
          if(data.conf.associateType == "articleNews") {
              data.list = mockData.getInfoList(data.label.num, data.label['length'], data.label.dateFormat, data.label.noteLength).data;
          }else if(data.conf.associateType == "ordinaryPage") {
              data.data = mockData.getOrdinaryInfo(data.label.length,data.label.detailed).data;
          }
      }
  
      // 构造标题更多链接
      if(!data.conf.isCustomMore) {
          cls.createMoreHref(data);
      }
  
      return data;
  };
  
  /**
   * 返回用于创建模板使用的 html 内容对象
   * @param options
   * @returns {{html, moduleId: *}}
   */
  PageInfo.prototype.getHtmlAndModuleId = function ($target) {
      var cls = this;
      var data = cls.getData({
          conf: utils.initModuleWidthHeight($target, cls.moduleSetting.conf)
      }, true);
      var _compile = template.compile(cls.moduleTpl);
      var html = _compile(data);
      base.newModuleId = data.moduleId;
      return {
          html: html,  // 模板的 HTML
          moduleId: data.moduleId // 组件 ID
      };
  };
  
  /**
   * 获取数据对象用于初始化表单使用
   * @param moduleId
   * @returns {*}
   */
  PageInfo.prototype.getModuleAttrData = function (moduleId) {
      var cls = this,
          // $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      var html = $('#' + moduleId).find(".htmledit").html();
      data.html = (html + "").replace(/<br\s*\/?>/gi, "\n").replace(/&ensp;/g, " ");
      return data;
  };
  
  /**
   * 根据 options 对象返回模板渲染后的 html
   * @param options
   * @returns {*}
   */
  PageInfo.prototype.getPanelHtml = function (options) {
      var cls = this;
      var data = cls.getData(options);
      var html = cls.compileTpl(data);
      return html;
  };
  
  /**
   * 保存前的处理, 用途是根据配置值转换为 模板标签
   * 每个有标签的类对象必须要有此函数
   * 由 app/common/db.js 190 行  saveTemplate() 方法调用.
   * @param options
   * @returns {*}
   */
  PageInfo.prototype.parseSave = function (options) {
      var cls = this;
      var data = utils.assignClone1(cls.moduleSetting, options);
      // 1. 取得panel的html内容
      var panelHtml = cls.getPanelHtml(data);
      var $panelHtml = $(panelHtml);
      // 解析标签
      var labelStr = '', isValid = true;
      if (utils.isNul(data.label.id)) {
          isValid = false;
      } else {
          // 解析标签
          labelStr = utils.parseLabel(data.label);
          // 将解析后的标签回写到 panel 中
          $panelHtml.find('.ls-label').html(labelStr);
      }
  
      // 返回 panel 的 HTML
      return isValid ? $panelHtml[0].outerHTML : null;
  
  };
  
  /**
   * 控件属性窗口中表单初始化
   * @return {[type]} [description]
   */
  PageInfo.prototype.initForm = function () {
      var cls = this;
      // 使用本地存储功能取得当前编辑的组件ID
      var curEditModuleId = utils.data.get('CUR_EDIT_MODULE_ID');
      if (!curEditModuleId) {
          alert('控件对象不存在!');
          return;
      }
  
      this.formSubmitStatus = false;
      // 取得主题模板中的窗口对象
      // 特别要注意的是,本窗口所在位置为顶层页面,模板是顶层页面中iframe中的内容
      // 隶属两个窗口对象,在使用时切勿混淆
      // 取得模板中的组件对象并解析相关属性值
      // utils.log('base.templateApp');
      // utils.log(base.templateApp);
  
      var data = base.templateApp[cls.moduleSetting.type].getModuleAttrData(curEditModuleId);
  
  
      var _methods = {
          associateNode: function () {
              Ls.openWin(cls.selectNodeWinUrl,
                  '400px',
                  '400px',
                  {
                      id: 'selectColumn',
                      title: '栏目选择',
                      padding: 0,
                      close: function (data) {
                          // utils.log(data);
                          if (data && data.length > 0) {
                              // 标题取第一个节点
                              base.vm.conf.title = data[0].name;
                              var ids = [];
                              var isOtherSite = data[0].siteId&&data[0].siteId!=top.window.GLOBAL_SITEID;
                              for (var i = 0; i < data.length; i++) {
                                  ids.push(data[i].indicatorId);
  
                              }
                              if(data[0].columnTypeCode == 'pageInfo') {
                                  base.vm.label = cls.moduleSetting.label1;
                              }else {
                                  base.vm.label = cls.moduleSetting.label2;
                                  base.vm.label.num = 1;
                                  base.vm.label.showType = 1;
                                  base.vm.label.noteLength = 60;
                                  base.vm.label.isDetailed = true;
                              }
                              base.vm.label.id = ids.join(',');
                              base.vm.label.siteId = isOtherSite ? data[0].siteId : "";
  
                              base.vm.conf.associateType = data[0].columnTypeCode;
                          }
                      }
                  });
          }
      };
      var _computed = {
          // a computed getter
          isRelation: function () {
              // return utils.isNul(this.label.id) || this.label.id == 0;
          }
      };
      var _watch = {};
      _.assign(_methods, vueCommon.methods);
      _.assign(_computed, vueCommon.computed);
      _.assign(_watch, vueCommon.watch);
      base.vm = new Vue({
          el: '#attrForm',
          data: data,
          watch: _watch,
          methods: _methods,
          computed: _computed
      });
  
      // 绑定验证表单
      $('#attrForm').validate({
          success: function () {
              base.attrFormValidateState = true;
              return false;
          },
          fail: function () {
              base.attrFormValidateState = false;
              return false;
          }
      });
  
  };
  
  /**
   * 打开控件属性窗口
   * @return {[type]} [description]
   */
  PageInfo.prototype.open = function () {
      var options = this.options;
      var id = 'pageInfo';
      var url = options.propWin.url;
      var type = options.type;
      var width = options.propWin.width;
      var height = options.propWin.height;
      var title = options.propWin.title;
      this.win.open(id, url, type, width, height, title);
  };
  
  /**
   * 渲染到页面, 用于在设计器中根据 moduel 中的配置动态构造内容数据
   * @param moduleId
   */
  PageInfo.prototype.render = function (moduleId) {
  
      var $module = $('#' + moduleId);
      var cls = this;
      if ($module.length == 0) {
          utils.logT('${moduleId} 组件不存在', {moduleId: moduleId});
          return;
      }
      // 从模板页面的 DOM 节点中获取配置信息数据
      var _data = cls.getModuleAttrData(moduleId);
      _data.moduleId = moduleId;
      // 获取用于模板渲染使用的演示数据
      var data = cls.getData(_data);
      var html = cls.compileTpl(data);
  
  
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 页面组件渲染的的处理事件
   * @param moduleId
   */
  PageInfo.prototype.renderAfter = function (moduleId) {
      var cls = this,
          $module = $('#' + moduleId),
          _data = utils.initModuleData(moduleId, cls.moduleSetting),
          data = cls.getData(_data, false, true);
  
      // 动态创建样式
      utils.compileStyle(moduleId, data, cls.styleTpl);
      //渲染自定义样式
      utils.replaceClassName($module, data, cls.pageIsFristLoad);
      // 标明页面已经加载过了
      cls.pageIsFristLoad = false;
      cls.isCreate = false;
  };
  
  /**
   * 渲染 panel 内容
   * @param moduleId
   * @param options
   */
  PageInfo.prototype.renderPanel = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
      var html = cls.getPanelHtml(options);
      $module.html(html);
      cls.renderAfter(moduleId);
  };
  
  /**
   * 将数据对象渲染后回写到模板页面
   * @param moduleId
   * @param options
   */
  PageInfo.prototype.setModuleAttrData = function (moduleId, options) {
      var cls = this;
      var $module = $('#' + moduleId);
  
      if(!options.conf.isCustomMore) {
          cls.createMoreHref(options);
      }
  
      if ($module.length > 0 && !utils.isNul(options)) {
          $module.attr('data-label', utils.jsonStringify(options.label));
          $module.attr('data-conf', utils.jsonStringify(options.conf));
      }
  
      // 重新渲染
      var data = cls.getData(options);
      // data.html = options.html.replace(/(\r)*\n/g, "<br/>").replace(/\s/g, "&ensp;");
      // var html = cls.compileTpl(data);
      // $module.html(html);
  
      // 重新渲染
      cls.renderPanel(moduleId, data);
  };
  
  
  PageInfo.prototype.test = function () {
      // utils.log("HtmlEdit test success!");
  };
  
  base.plugin('pageInfo', new PageInfo());
  
  module.exports = PageInfo;
  

});

;/*!app/components/doc-img-list2/index.js*/
define('app/components/doc-img-list2/index', function(require, exports, module) {

  'use strict';
  var _ = require('node_modules/lodash/lodash');
  var utils = require('app/common/utils');
  var BaseModule = require('app/components/base-module/index');
  var base = require('app/common/base');
  var labels = require('app/labels/index');
  
  
  var DocImgList2 = BaseModule.extend({
      init: function (options) {
          this.styleTpl = {
              default: "<% if(conf.isAutoHeight){ %>\r\n#<%= moduleId %>{height:auto; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:auto; width:<%= conf.panelWidth %>px;}\r\n<% }else{%>\r\n#<%= moduleId %>{height:<%= conf.height%>px; width:<%= conf.width  %>px;}\r\n.<%= moduleId %>_panel{height:<%= conf.panelHeight %>px; width:<%= conf.panelWidth %>px;}\r\n<% }%>\r\n<% if(conf.isCustomPBH){ %>\r\n.<%= moduleId %>_panel .panel-body{height:<%= conf.panelBodyHeight %>px; }\r\n<% } %>\r\n\r\n.<%= moduleId %>_panel .panel-body li img { width: <%=label.imgWidth%>px;height: <%=label.imgHeight%>px; }"
          };
          this.propWin.title = '信息列表';
          this.moduleSetting.type = 'docImgList2';
  
          var mainLabel = new labels.docImgListLabel({
              num:1,
              length: 15,
              file: '/special/docImgList',
              imgWidth: 80,
              imgHeight: 50,
              id: utils.getColumnId()
          });
          this.moduleSetting.label = mainLabel.conf;
  
      }
  });
  
  DocImgList2.prototype.test = function () {
  
  };
  
  base.plugin('docImgList2', new DocImgList2());
  
  module.exports = DocImgList2;

});

;/*!app/components/index.js*/
define('app/components/index', function(require, exports, module) {

  /**
   * 组件入口 JS
   * Created by Dzl on 2017-2-25.
   */
  
  var InfoList = require('app/components/info-list/index');
  var InfoTabs = require('app/components/info-tabs/index');
  var SingleImage = require('app/components/single-image/index');
  var PageHeader = require('app/components/page-header/index');
  var Logo = require('app/components/page-header/logo');
  var Navigation = require('app/components/navigation/index');
  var PageFooter = require('app/components/page-footer/index');
  var Carousel = require('app/components/carousel/index');
  var ScrollImages = require('app/components/scroll-images/index');
  var NavPage_peerOrChildList = require('app/components/nav-page/peerOrChildList');
  var NavPage_columnNav = require('app/components/nav-page/columnNav');
  var DetailPage_articleNewsDetail = require('app/components/detail-page/articleNewsDetail');
  var CustomLayout = require('app/components/custom-layout/index');
  var HeaderbgList = require('app/components/headerbg-list/index');
  var SurveyInfoDetail = require('app/components/detail-page/surveyInfoDetail');
  var CollectInfoDetail = require('app/components/detail-page/collectInfoDetail');
  var VideoNewsDetail = require('app/components/detail-page/videoNewsDetail');
  var InterviewInfoDetail = require('app/components/detail-page/interviewInfoDetail');
  var MessageInfoDetail = require('app/components/detail-page/messageInfoDetail');
  var PageEdit = require('app/components/page-edit/index');
  
  
  
  //链接图片
  var LinkListImg = require('app/components/link-list-img/index');
  //链接文字
  var LinkListText = require('app/components/link-list-text/index');
  //链接图片+滚动
  var LinkListImgScroll = require('app/components/link-list-img-scroll/index');
  //头条信息+列表
  var InfoHeadlineList = require('app/components/info-headline-list/index');
  //图片+文字列表
  var InfoImgList = require('app/components/info-img-list/index');
  //图片+摘要
  var InfoImgNote = require('app/components/info-img-note/index');
  // 图片列表
  var ImgList = require('app/components/img-list/index');
  // 内容编辑
  var HtmlEdit = require('app/components/html-edit/index');
  // 自定义链接
  var HtmlLinkEdit = require('app/components/html-link-edit/index');
  // 友情链接
  var FriendshipLink = require('app/components/friendship-link/index');
  
  var ModuleList = require('app/components/module-list/index');
  var TestDataImport = require('app/components/test-data-import/index');
  var AddHeaderbg = require('app/components/add-headerbg/index');
  var PageBackground = require('app/components/page-background/index');
  
  // var TestSubclass = require('./test-subclass');
  
  // 标签+大标题+文字列表
  var infoTabsHeadline = require('app/components/info-tabs-headline/index');
  // 视频列表
  var VideoPlay = require('app/components/video-play/index');
  // 调查列表
  var Vote = require('app/components/vote/index');
  // 选项卡
  var TabsContent = require('app/components/tabs-content/index');
  
  
  var InfoListV2 = require('app/components/info-list-v2/index');
  // var LinkListV2 = require('./info-list-v2/linkList');
  var InfoList3E = require('app/components/info-list-v2/infoList3E');
  
  //广告位+调查列表
  var LinkSurvey = require('app/components/link-survey/index');
  // var LinkSurvey2 = require('./link-survey2');
  var EmptyModule = require('app/components/empty-module/index');
  var LabelList = require('app/components/label-list/index');
  
  //图片+文字列表
  var OnlineNavItem = require('app/components/online-nav-item/index');
  // 留言列表
  var messageBoardList = require('app/components/message-board-list/index');
  //文字摘要选项卡
  var DocHeadlinesTabs = require('app/components/headline-tabs/index');
  //图片新闻无缝滚动
  var ImgListMarquee = require('app/components/img-list-marquee/index');
  //链接图片无缝滚动
  var LinkImgMarquee = require('app/components/link-img-marquee/index');
  //下载列表
  var FileDownloadList = require('app/components/file-download-list/index');
  //翻屏滚动
  var FlipScreenMarquee = require('app/components/flip-screen-marquee/index');
  //图片轮播+文字列表
  var ImgDocList = require('app/components/img-doc-list/index');
  //视频轮播+列表
  var VideoCarousel = require('app/components/video-carousel/index');
  //链接摘要
  var LinkNote = require('app/components/link-note/index');
  //链接+民意征集
  var LinkCollect = require('app/components/link-collect/index');
  //广告位+文字链接
  var LinkDocList = require('app/components/link-doc-list/index');
  //广告位通用
  var LinkList = require('app/components/link-list/index');
  //单页面
  var OrdinaryPage = require('app/components/ordinary-page/index');
  //单页面+文字新闻
  var PageInfo = require('app/components/page-info/index');
  //文字+缩略图
  var DocImgList2 = require('app/components/doc-img-list2/index');
  
  module.exports = {
      LabelList: LabelList,
      InfoListV2: InfoListV2,
      EmptyModule: EmptyModule,
      InfoList3E: InfoList3E,
      PageBackground: PageBackground,
      HeaderbgList: HeaderbgList,
      AddHeaderbg: AddHeaderbg,
      TestDataImport: TestDataImport,
      CustomLayout: CustomLayout,
      // TestSubclass: TestSubclass,
      ModuleList: ModuleList,
      FriendshipLink: FriendshipLink,
      HtmlLinkEdit: HtmlLinkEdit,
      HtmlEdit: HtmlEdit,
      ImgList: ImgList,
      InfoList: InfoList,
      InfoImgList: InfoImgList,
      InfoImgNote: InfoImgNote,
      InfoTabs: InfoTabs,
      InfoHeadlineList: InfoHeadlineList,
      LinkListImgScroll: LinkListImgScroll,
      LinkListText: LinkListText,
      LinkListImg: LinkListImg,
      SingleImage: SingleImage,
      PageHeader: PageHeader,
      Logo: Logo,
      Navigation: Navigation,
      PageFooter: PageFooter,
      Carousel: Carousel,
      ScrollImages: ScrollImages,
      NavPage_peerOrChildList: NavPage_peerOrChildList,
      NavPage_columnNav: NavPage_columnNav,
      DetailPage_articleNewsDetail: DetailPage_articleNewsDetail,
      infoTabsHeadline: infoTabsHeadline,
      VideoPlay: VideoPlay,
      Vote: Vote,
      TabsContent: TabsContent,
      LinkSurvey: LinkSurvey,
      // LinkSurvey2: LinkSurvey2,
      OnlineNavItem: OnlineNavItem,
      messageBoardList: messageBoardList,
      DocHeadlinesTabs: DocHeadlinesTabs,
      ImgListMarquee: ImgListMarquee,
      LinkImgMarquee: LinkImgMarquee,
      FileDownloadList: FileDownloadList,
      FlipScreenMarquee: FlipScreenMarquee,
      ImgDocList: ImgDocList,
      VideoCarousel: VideoCarousel,
      SurveyInfoDetail: SurveyInfoDetail,
      CollectInfoDetail: CollectInfoDetail,
      VideoNewsDetail: VideoNewsDetail,
      InterviewInfoDetail: InterviewInfoDetail,
      MessageInfoDetail: MessageInfoDetail,
      LinkNote: LinkNote,
      PageEdit: PageEdit,
      LinkCollect: LinkCollect,
      LinkDocList: LinkDocList,
      LinkList: LinkList,
      OrdinaryPage: OrdinaryPage,
      PageInfo: PageInfo,
      DocImgList2: DocImgList2
  };
  

});

;/*!app/entry/main-index.js*/
define('app/entry/main-index', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /**
   * 设计器首页 入口 JS
   * Created by Dzl on 2016-8-30.
   * app/entry/main-index.js
   */
  
  
  /**
   * 申明依赖, FIS3 用法
   * 详细参见: https://fex-team.github.io/fis3/docs/user-dev/require.html
   * @require lib/jquery.min.js
   * @require lib/jq-ui/1.11.4/jquery-ui.min.js
   * @require lib/sui/js/sui.min.js
   * @require lib/vue.min.js
   * @require lib/artdialog/artdialog-min.js
   * @require lib/mod.js
   */
  
  // 加载模块
  var Q = require('node_modules/q/q');
  var _ = require('node_modules/lodash/lodash');
  
  
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var db = require('app/common/db');
  base.plugin('db', db);  // 将 db 模块挂载到 base 对象上
  base.plugin('utils', utils);
  
  var config = require('app/common/config');
  var template = require('app/common/arttemplate');
  require('app/common/artdialog');
  require('app/common/global');
  require('app/common/skin');
  
  require('app/components/index');
  
  // 加载自定义的 VUE 组件
  require('app/common/vueui/index');
  
  base.isDesign = true;
  base.isMobile = false;
  
  // 通过此来获取打包后的根路径地址
  base.pathTest = '/assets/design/index.html';
  base.rootPath = base.pathTest.replace('index.html', '');
  
  /**
   * 主页面的初始化方法
   */
  base.init = function (options) {
      // 获取当前的开发状态
      config.developStatus = utils.getDevelopStatus();
  
      //获取当前要测试的模板，用于开发测试时用
      config.developTplId = utils.getDevelopTplId();
      // if (config.developStatus) {
      //     // 如果是开发状态, 启动日志工具
      //     logger.init();
      // }
      // 初始化全局变量
      if (base.isMobile) {
          // 绑定背景事件
          $('#mobiColumn li').on('click.ls.design', function () {
              var $el = $(this);
              var $img = $el.find('img');
              var imgSrc = $img.attr('src');
              base['pageHeader'].setBg(imgSrc);
          });
      } else {
          $('#themeDiv').find('.theme').on('click.ls.design', function () {
              var el = $(this);
              var theme = el.attr('_theme');
              $.Site.log('theme=' + theme);
              $.Site['global'].goTheme(theme);
          });
      }
  
      // 调用全局对象中的页面初始化方法
      // app/common/global.js
      // 初始化皮肤列表
      base.global.initInRoot(options);
  
      // base['testSubclass'].test();
  
  };
  
  $(document).ready(function () {
  
      // 获取 URL 中的参数
      var specialId = utils.getSpecialId();
      var tplId = base.getQueryString('tplId');
      var columnId = base.getQueryString('columnId');
      var __demo = base.getQueryString('demo');
  
      // 将获取到的 url 变量存储到本地存储中
      utils.data.set('SPECIALID', specialId);
      utils.data.set('TPLID', tplId);
      utils.data.set('ROOTTPLID', tplId);
      utils.data.set('COLUMNID', columnId);
  
      // 绑定顶部按钮事件
  
      var $saveFormBtn = $('#topIcon_saveForm');
      $saveFormBtn.on('click.ls.design', function () {
          db.saveTemplate();
      });
  
      var $testDataImport = $('#topIcon_testDataImport');
      $testDataImport.on('click.ls.design', function () {
          base['testDataImport'].open();
      });
      if (__demo == 1) {
          $testDataImport.parent('td').show();
      } else {
          $testDataImport.parent('td').hide();
      }
  
  
      if (!base.isMobile) {
          var $topIconHistoryUndo = $('#topIcon_historyUndo');
          var $previewBtn = $('#topIcon_preview');
          var $moduleBtn = $('#topIcon_module');
          var $layoutBtn = $('#topIcon_layout');
          var _topIcon_theme = $('#topIcon_theme');
          var $backgroundBtn = $('#topIcon_background');
  
          // 预览按钮事件
          $previewBtn.on('click.ls.design', function () {
              $(this).attr({
                  'target': '_blank',
                  'href': config.getSiteUrl() + '/site/tpl/' + base.getQueryString('tplId')
              })[0].click;
          });
  
          // 撤消事件
          $topIconHistoryUndo.on('click.ls.design', function () {
              db.undo().then(function (html) {
                  //utils.log('undo html: ', html);
                  $.Site.templateWindow.$('body').html(html);
                  $.Site.templateApp.init({
                      isNotAutoSave: true
                  });
              }).fail(function () {
                  Ls.tipsErr('已经没有可撤消的内容了')
              });
          });
  
          // 添加模块按
          // $moduleBtn.on('click.ls.design', function () {
          //     // $.Site 为 base.js 对象加载后挂载到 jquery 上的对象
          //     // 可全局访问
          //     // $.Site.templateApp 为模板页面加载完毕后, 模板页面中实例化入口 JS 返回的实例
          //     // $.Site.templateApp['floatpanel'] 为挂载到基类中的 app/common/float-panel.js 类的实例对象
          //     $.Site.templateApp['floatPanel'].openTab(0);
          // });
          // 添加布局按钮事件
          $layoutBtn.on('click.ls.design', function () {
              // $.Site 为 base.js 对象加载后挂载到 jquery 上的对象
              // 可全局访问
              // $.Site.templateApp 为模板页面加载完毕后, 模板页面中实例化入口 JS 返回的实例
              // $.Site.templateApp['floatpanel'] 为挂载到基类中的 app/common/float-panel.js 类的实例对象
              // 详细参见: app/common/float-panel.js
              $.Site.templateApp['floatPanel'].openTab(1);
  
          });
  
          // 全局绑定皮肤图标的点击事件
          $(document).on("click.ls.design", "#themeColorsTooltip .themeColors1-a"
              , function () {
                  var el = $(this);
                  var skin = el.attr('_skin');
                  utils.data.set('CURSKINS', skin);
                  //  base['skin'] 为挂载到 app/common/base.js 基类上的 app/common/skin.js 实例对象
                  base['skin'] && base['skin'].applySkin(specialId, skin);
              });
          // 设置背景按钮事件
          $backgroundBtn.on('click.ls.design', function () {
              // $.Site 为 base.js 对象加载后挂载到 jquery 上的对象
              // 可全局访问
              // $.Site.templateApp 为模板页面加载完毕后, 模板页面中实例化入口 JS 返回的实例
              // $.Site.templateApp['floatpanel'] 为挂载到基类中的 app/common/float-panel.js 类的实例对象
              // $.Site.templateApp['floatPanel'].openTab(2);
              console.log('$backgroundBtn click >>>');
              $.Site['pageBackground'].open();
          });
      }
  
      // 监听浏览器窗口关闭事件
      window.onbeforeunload = function () {
          //return "您确认您要离开吗?";
      };
  
  
  });
  
  module.exports = $.Site = base;

});

;/*!app/common/float-panel-conf.js*/
define('app/common/float-panel-conf', function(require, exports, module) {

  var FloatPanelConf = {
  
      moduleList: function () {
          var list = [];
          var modules = [];
          modules.push({
              title: "头条信息",
              className: "infoHeadlineList",
              type: "infoHeadlineList"
          });
          modules.push({
              title: "文章列表",
              className: "article",
              type: "infoList"
          });
          modules.push({
              title: "图片+文字",
              className: "infoImgList",
              type: "infoImgList"
          });
          modules.push({
              title: "单图片",
              className: "singleImage",
              type: "singleImage"
          });
          modules.push({
              title: "图片列表",
              className: "imgList",
              type: "imgList"
          });
          modules.push({
              title: "图片+摘要",
              className: "infoImgNote",
              type: "infoImgNote"
          });
          modules.push({
              title: "滚动图片新闻",
              className: "scrollImages",
              type: "scrollImages"
          });
          modules.push({
              title: "焦点图片",
              className: "carousel",
              type: "carousel"
          });
          modules.push({
              title: "文字链接",
              className: "linkListText",
              type: "linkListText"
          });
          modules.push({
              title: "图片链接",
              className: "linkListImg",
              type: "linkListImg"
          });
          modules.push({
              title: "链接图片滚动",
              className: "linkListImgScroll",
              type: "linkListImgScroll"
          });
          modules.push({
              title: "Tab标签",
              className: "infoTabs",
              type: "infoTabs"
          });
          modules.push({
              title: "自定义链接",
              className: "htmlLinkEdit",
              type: "htmlLinkEdit"
          });
          modules.push({
              title: "自定义文本",
              className: "htmlEdit",
              type: "htmlEdit"
          });
  
  
          // modules.push({
          //     title: "滚动公告",
          //     className: "notice",
          //     type: "notice"
          // });
          // modules.push({
          //     title: "天气信息",
          //     className: "weather",
          //     type: "weather"
          // });
          list.push({
              name: "组件",
              list: modules,
              anchor: "basicLine"
          });
  
          // modules = [];
          // modules.push({
          //     title: "产品展示",
          //     className: "product",
          //     param: "product"
          // });
          // modules.push({
          //     title: "产品分类",
          //     className: "productGroup",
          //     param: "productGroup"
          // });
          // modules.push({
          //     title: "产品标签",
          //     className: "productLabel",
          //     param: "productLabel"
          // });
          // modules.push({
          //     title: "产品目录",
          //     className: "catalog",
          //     param: "catalog"
          // });
          // modules.push({
          //     title: "产品筛选",
          //     className: "filter",
          //     param: "filter"
          // });
          // modules.push({
          //     title: "产品搜索",
          //     className: "productSearch",
          //     param: "productSearch"
          // });
          // list.push({
          //     name: "产品",
          //     list: modules,
          //     anchor: "productLine"
          // });
          // modules = [];
          // modules.push({
          //     title: "在线客服",
          //     className: "serviceOnline",
          //     param: "serviceOnline"
          // });
          // modules.push({
          //     title: "会员登录",
          //     className: "memberLogin",
          //     param: "memberLogin"
          // });
          // modules.push({
          //     title: "网站二维码",
          //     className: "siteQrCode",
          //     param: "siteQrCode"
          // });
          // modules.push({
          //     title: "全站搜索",
          //     className: "siteSearch",
          //     param: "siteSearch"
          // });
          // modules.push({
          //     title: "分享网站",
          //     className: "shareTo",
          //     param: "shareTo"
          // });
          // modules.push({
          //     title: "留言提交",
          //     className: "msgSubmit",
          //     param: "msgSubmit"
          // });
          // modules.push({
          //     title: "购物车",
          //     className: "shoppingCart",
          //     param: "shoppingCart"
          // });
          // modules.push({
          //     title: "在线投票",
          //     className: "vote",
          //     param: "vote"
          // });
          // modules.push({
          //     title: "在线表单",
          //     className: "siteForm",
          //     param: "siteForm"
          // });
          // list.push({
          //     name: "互动",
          //     list: modules,
          //     anchor: "interactive"
          // });
          // modules = [];
          // modules.push({
          //     title: "魔方图册",
          //     className: "photoCard",
          //     param: "photoCard"
          // });
          // modules.push({
          //     title: "图文链接",
          //     className: "link",
          //     param: "link"
          // });
          // modules.push({
          //     title: "文章分类",
          //     className: "newsgroup",
          //     param: "newsgroup"
          // });
          // modules.push({
          //     title: "图册目录",
          //     className: "photoGroup",
          //     param: "photoGroup"
          // });
          // modules.push({
          //     title: "栏目导航",
          //     className: "nav",
          //     param: "nav"
          // });
          // modules.push({
          //     title: "浮动按钮",
          //     className: "floatBtn",
          //     param: "floatBtn"
          // });
          // modules.push({
          //     title: "文件下载",
          //     className: "file",
          //     param: "file"
          // });
          // modules.push({
          //     title: "在线视频",
          //     className: "media",
          //     param: "flv"
          // });
          // modules.push({
          //     title: "Flash",
          //     className: "flash",
          //     param: "flash"
          // });
          // modules.push({
          //     title: "在线地图",
          //     className: "map",
          //     param: "map"
          // });
          // modules.push({
          //     title: "新浪微博秀",
          //     className: "weiboShow",
          //     param: "weiboShow"
          // });
          // modules.push({
          //     title: "当前时间",
          //     className: "date",
          //     param: "date"
          // });
          // modules.push({
          //     title: "当前位置",
          //     className: "location",
          //     param: "location"
          // });
          // modules.push({
          //     title: "简易表格",
          //     className: "table",
          //     param: "table"
          // });
          // modules.push({
          //     title: "收藏本站",
          //     className: "indexFavorite",
          //     param: "indexFavorite"
          // });
          // modules.push({
          //     title: "嵌入页面",
          //     className: "iframe",
          //     param: "iframe"
          // });
          // modules.push({
          //     title: "插件代码",
          //     className: "code",
          //     param: "code"
          // });
          // list.push({
          //     name: "高级",
          //     list: modules,
          //     anchor: "advancedLine"
          // });
          return list;
      },
      layoutList: function () {
          var list = [];
          var modules = [];
          // modules.push({
          //     title: "组件组",
          //     className: "tab",
          //     type: "tab"
          // });
          modules.push({
              title: "通栏",
              className: "layoutIcon layoutIcon-24-24",
              type: "col24"
          });
          modules.push({
              title: "12-12",
              // className: "mulModuleCol-two panelModuleIcon_mulModuleCol",
              className: "layoutIcon layoutIcon-12-12",
              type: "col12-12"
          });
          modules.push({
              title: "8-8-8",
              className: "layoutIcon layoutIcon-8-8-8",
              // className: "mulModuleCol-three panelModuleIcon_mulModuleCol",
              type: "col8-8-8"
          });
          modules.push({
              title: "6-6-6-6",
              className: "layoutIcon layoutIcon-6-6-6",
              type: "col6-6-6-6"
          });
          modules.push({
              title: "8-16",
              className: "layoutIcon layoutIcon-8-16",
              type: "col8-16"
          });
          modules.push({
              title: "16-8",
              className: "layoutIcon layoutIcon-16-8",
              type: "col16-8"
          });
          modules.push({
              title: "6-9-9",
              className: "layoutIcon layoutIcon-6-9-9",
              type: "col6-9-9"
          });
          modules.push({
              title: "9-9-6",
              className: "layoutIcon layoutIcon-9-9-6",
              type: "col9-9-6"
          });
          modules.push({
              title: "4-12-8",
              className: "layoutIcon layoutIcon-4-12-8",
              type: "col4-12-8"
          });
          modules.push({
              title: "8-12-4",
              className: "layoutIcon layoutIcon-8-12-4",
              type: "col8-12-4"
          });
          modules.push({
              title: "自定义",
              className: "layoutIcon layoutIcon-custom",
              type: "col24"
          });
  
          list.push({
              name: "布局",
              list: modules,
              anchor: "layoutLine"
          });
          return list;
      }
  
  };
  
  
  module.exports = FloatPanelConf;
  

});

;/*!app/common/float-panel.js*/
define('app/common/float-panel', function(require, exports, module) {

  /**
   * 首页浮动面板类( 控件,背景,布局)
   * Created by Dzl on 2016-8-9.
   */
  
  var _ = require('node_modules/lodash/lodash');
  var base = require('app/common/base');
  var utils = require('app/common/utils');
  var floatPanelConf = require('app/common/float-panel-conf');
  require('app/common/module');
  require('app/common/layout');
  require('app/components/page-header/index');
  var doms = require('app/common/template-dom-structure');
  
  var FloatPanel = function (options) {
      this.options = $.extend(true, FloatPanel.DEFAULTS, options);
      this.listTpl = "<li id=\"<%= panelContentContainerId %>Li\">\r\n    <div class=\"panelContentContainer\" id=\"<%= panelContentContainerId %>\" style=\"position:relative;\">\r\n        <% _.forEach(moduleList, function(list) { %>\r\n        <div class=\"splitLine\"></div>\r\n        <div class=\"panelItemContainer\">\r\n\r\n                <div class=\"panelItemContent\">\r\n                    <ul id=\"<%= list.anchor %>\" class=\"panelModuleIconContainer\">\r\n                        <% _.forEach(list.list, function(el) { %>\r\n                        <li class=\"panelModuleIconContent \" data-type=\"<%= el.type %>\">\r\n                            <a class=\"<%= el.className %>\" data-type=\"<%= el.type %>\"><span><%= el.title %></span></a>\r\n                        </li>\r\n                        <% }); %>\r\n                    </ul>\r\n                </div>\r\n\r\n        </div>\r\n        <% }) %>\r\n    </div>\r\n</li>";
      this.iconTpl = "<!-- 浮动面板 模块图标容器 HTML -->\r\n\r\n<div id=\"floatPanelIconContainer\" class=\"floatPanelIconContainer\" location=\"left\" status=\"1\">\r\n    <div class=\"floatPanelIconBox floatPanelIconBox-first\">\r\n        <a id=\"floatPanel_addNewModule\" class=\"floatPanel_addNewModule\" hidefocus=\"true\">\r\n\r\n        </a>\r\n    </div>\r\n    <!--<div class=\"floatPanelIconBox\"><a href=\"javascript:;\" id=\"floatPanel_setSiteStyle\" class=\"floatPanel_setSiteStyle\" onclick=\"Site.floatPanel(2);return false;\" hidefocus=\"true\"></a></div>-->\r\n</div>";
      this.containerTpl = "<div id=\"floatPanel\" class=\"floatPanel\" status=\"0\" selectTab=\"0\" location=\"<%= location %>\" style=\"display:none;\">\r\n<div class=\"floatPanelNavContainer\">\r\n    <ul id=\"floatPanelNav\" class=\"floatPanelNav\">\r\n        <!--<li class=\"on\" _tab=\"#addModuleContentContainerLi\">-->\r\n            <!--<a class=\"tab addModule\" title=\"模块\" hidefocus=\"true\">模块</a>-->\r\n        <!--</li>-->\r\n        <li  class=\"on\" _tab=\"#addLayoutContentContainerLi\">\r\n            <a  class=\"tab sectionModule\" id=\"panelSectionModuleTab\" title=\"布局\"\r\n               hidefocus=\"true\">布局</a>\r\n        </li>\r\n        <li _tab=\"#bgContentContainerLi\">\r\n            <a  class=\"tab setSiteStyle\" hidefocus=\"true\"></a>\r\n        </li>\r\n    </ul>\r\n    <div class=\"floatPanel_closeBtnContainer\">\r\n        <a title=\"关闭\" id=\"floatPanel_closeBtn\" class=\"floatPanel_closeBtn\" hidefocus=\"true\"></a>\r\n    </div>\r\n</div>\r\n<div class=\"floatPanelContentContainer\">\r\n    <ul id=\"floatPanelContent\" class=\"floatPanelContent\">\r\n    </ul>\r\n</div>\r\n<div id=\"floatPanelOverLay\" class=\"floatPanelOverLay\" style=\"display:none;\"></div>\r\n</div>";
      this.layout = base['layout'];
      this.module = base['module'];
      this.pageHeader = base['pageHeader'];
  };
  
  /**
   * 默认配置
   * @type {Object}
   */
  FloatPanel.DEFAULTS = {};
  
  FloatPanel.prototype.init = function () {
      var cls = this;
      if (!base.isMobile) {
          // cls.createIcon();
          //cls.createFloatPanel();
      } else {
          cls.floatPanelModuleDraggable();
          cls.bindEventToFloatPanel($("#floatPanel"));
      }
  
  };
  
  /**
   * 创建组件图标
   */
  FloatPanel.prototype.createIcon = function () {
      var cls = this;
      $("body").append(cls.iconTpl);
      var $floatPanelIconContainer = $("#floatPanelIconContainer");
      // 绑定组件图标事件
      $("#floatPanel_addNewModule").on('click.ls.design', function () {
          // 创建浮动面板
          cls.createFloatPanel();
      });
      $floatPanelIconContainer.ready(function () {
  
          // $floatPanelIconContainer.draggable({
          //     containment: "parent",
          //     cursor: "move",
          //     scroll: false,
          //     start: function() {
          //         // 去除按钮的onclick事件
          //         $floatPanelIconContainer.find("#floatPanel_addNewModule").off("click").addClass("draggableIcon");
          //         var $floatPanel = $("#floatPanel");
          //         if (typeof $floatPanel != "undefined" && $floatPanel.length > 0) {
          //             $floatPanel.attr("status", -1)
          //         }
          //
          //     },
          //     drag: function() {
          //
          //     },
          //     stop: function(g, k) {
          //
          //     }
          // });
      });
  };
  
  /**
   * 创建浮动面板
   */
  FloatPanel.prototype.createFloatPanel = function () {
      var cls = this;
      cls.draggableDiv_out = false;
      cls.draggableDiv_enable = false;
      var $floatPanel = $("#floatPanel");
      var $floatPanelIconContainer = $("#floatPanelIconContainer");
      // var floatLeftTopOffsetTop = $(".floatLeftTop").offset().top;
      // var floatLeftBottomOffsetTop = $(".floatLeftBottom").offset().top;
      // var a = floatLeftBottomOffsetTop - floatLeftTopOffsetTop;
      var location = $floatPanelIconContainer.attr("location");
      if ($floatPanel.length < 1) {
          // 浮动面板不存在时, 创建浮动面板所需要的 html
          // 模板内容参见: app/dev-include/float-panel/__container.html
          $("body").append(_.template(cls.containerTpl)({location: location}));
  
          // 绑定 tab 标题的 click 事件
          // $('#floatPanelNav > li').on('click.ls.design', function () {
          //     var $el = $(this);
          //     var tabConId = $el.attr('_tab');
          //     var $li = $('#floatPanelContent > li');
          //     $('#floatPanelNav > li').removeClass('on');
          //     $li.hide();
          //     $(tabConId).show();
          //     $el.addClass('on')
          // });
          // 初始化面板内容
          cls.initPanelContent();
  
          // 绑定关闭按钮事件
          $("#floatPanel_closeBtn").on('click', function () {
              // 隐藏浮动面板
              cls.hideFloatPanel();
          });
  
          $('document').ready(function () {
              // 绑定浮动面板中图标按钮的事件
              cls.bindEventToFloatPanel($("#floatPanel"));
          })
  
      } else {
          // 如果浮动面板已经存在
          if ($floatPanel.attr("status") == 1 && !base.isMobile) {
              // 显示浮动面板
              cls.showFloatPanel();
              return;
          }
      }
  
      // 显示组件面板
      cls.showFloatPanel();
      // 隐藏 组件按钮图标
      cls.hideFloatPanelIcon();
      // 刷新面板样式
      cls.refreshPanelStyle();
  };
  
  /**
   * 隐藏 组件按钮图标
   */
  FloatPanel.prototype.hideFloatPanelIcon = function () {
      $("#floatPanelIconContainer").attr({
          status: "0"
      }).hide()
  };
  /**
   * 显示 组件按钮图标
   */
  FloatPanel.prototype.showFloatPanelIcon = function () {
      $("#floatPanelIconContainer").attr({
          status: "1"
      }).show();
  };
  
  /**
   * 初始化内容
   */
  FloatPanel.prototype.initPanelContent = function () {
      var cls = this;
      // 获取面板中所需的数据
      //var moduleList = floatPanelConf.moduleList();
      // 初始化浮动面板中的数据
      // cls.initBlockOfPanelContent("addModuleContentContainer", floatPanelConf.moduleList(), "addModuleContentContainer");
      cls.initBlockOfPanelContent("addLayoutContentContainer", floatPanelConf.layoutList(), "addLayoutContentContainer");
      // 初始化主题数据
      //cls.initThemeContent('themeContentContainer');
  
      // 初始化背景数据
      // cls.initBgContent();
  
  
  };
  
  FloatPanel.prototype.initThemeContent = function () {
      var html = '<li id="themeContentContainerLi" style="display: none;">' +
          '<div id="themeContentContainer" class="panelContentContainer">' +
          '11111111' +
          '</div>' +
          '</li>';
      $("#floatPanelContent").append(html);
  
  };
  
  /**
   * 初始化头部背景库
   */
  FloatPanel.prototype.initBgContent = function () {
      // var cls = this;
      // var addBgHtml = '<li id="addHeaderBgBtn"> <a href="javascript:void(0);" >' +
      //     '<img class="placeholder" options="size=130x40&text=上传自定义背景&bgcolor=#F3F3F3&color=#cccccc"> </a></li>';
      // var _tplItem = '<ul id="bgListBox" class="bgListBox">' + addBgHtml +
      //     '<% _.forEach(bgList, function(el) { %>' +
      //     '<li class="headerBgList">' +
      //     '   <a href="javascript:void(0);" >' +
      //     '       <img src="<%=el.src%>" >' +
      //     '   </a>' +
      //     '</li>' +
      //     '<% }) %>' +
      //     '</ul>';
      //
      //
      // var tpl = '<li id="bgContentContainerLi" style="display: none">' +
      //     '<div id="bgContentContainer" class="panelContentContainer">' +
      //     _tplItem +
      //     '</div>' +
      //     '</li>';
      //
      // var data = {
      //     'bgList': require('../mock-data/background')
      // };
      //
      // var compiled = _.template(tpl);
      // var html = compiled(data);
      // $("#floatPanelContent").append(html);
      //
      // $('#bgListBox > li.headerBgList').on('click.ls.design', function () {
      //     var $el = $(this);
      //     var $img = $el.find('img');
      //     var imgSrc = $img.attr('src');
      //     // 调用 pageHeader 对象方法设置背景
      //     // app/components/page-header/index.js
      //     cls.pageHeader.setBg(imgSrc);
      //
      // });
      //
      // utils.placeholderRender('addHeaderBgBtn');
      // $('#addHeaderBgBtn').on('click.ls.design', function () {
      //     // var $el = $(this);
      //     parent.$.Site['addHeaderbg'].open();
      // });
  
  };
  /**
   * 初始化浮动面板中的数据
   * @param panelMenuListId 用于构造上部菜单层的ID
   * @param moduleListJSON 组件图标数据
   * @param panelContentContainerId 用于构造面板内容区域的ID
   */
  FloatPanel.prototype.initBlockOfPanelContent = function (panelMenuListId, moduleListJSON, panelContentContainerId) {
      var cls = this;
      var data = {
          panelContentContainerId: panelContentContainerId,
          moduleList: moduleListJSON
      };
      // 使用lodash的模板引擎处理
      var compiled = _.template(this.listTpl);
      var html = compiled(data);
      $("#floatPanelContent").append(html);
      setTimeout(function () {
          cls.floatPanelModuleDraggable();
      }, 100);
  
  
  };
  
  /**
   * 显示浮动面板
   *
   */
  FloatPanel.prototype.showFloatPanel = function () {
      var cls = this;
      var $floatPanel = $("#floatPanel");
      if (typeof $floatPanel == "undefined" || ($floatPanel.length < 1)) {
          return;
      }
      $floatPanel.show();
      // 设置动画效果
      if ($floatPanel.attr("status") > -1) {
          // var floatRightTopOffsetLeft = $(".floatRightTop").offset().left;
          var left = $floatPanel.outerWidth() + 1;
          $floatPanel.stop(true).attr({
              status: 1
          }).animate({
              left: "0px"
          }, 300);
      }
      // 隐藏浮动组件图标
      cls.hideFloatPanelIcon();
  };
  
  /**
   * 隐藏浮动面板
   */
  FloatPanel.prototype.hideFloatPanel = function () {
      var $floatPanel = $("#floatPanel");
      var cls = this;
      // 设置无能无力效果
      if ($floatPanel.length > 0 && ($floatPanel.attr("status") == 1)) {
          var left = 1 - $floatPanel.outerWidth();
          $floatPanel.attr("status", "0").animate({
              left: left + "px"
          }, 300);
          setTimeout(function () {
              $floatPanel.hide()
          }, 300);
  
      }
      // 显示浮动组件图标
      cls.showFloatPanelIcon();
  };
  
  /**
   * 设置面板内容高度
   */
  FloatPanel.prototype.refreshFillDiv = function () {
      var $floatPanel = $("#floatPanel");
      // var $splitLine = $addModuleContentContainer.find(".splitLine");
      //var $panelContentFillDiv = $addModuleContentContainer.find(".panelContentFillDiv");
      // var containerOffsetTop = $addModuleContentContainer.offset().top;
      var outerHeight = $floatPanel.outerHeight();
      // var fillDivOffsetTop = $panelContentFillDiv.offset().top;
      // var j = (fillDivOffsetTop - containerOffsetTop) % outerHeight;
      // var height = outerHeight - $addModuleContentContainer.find(".panelItemContainer").last().outerHeight();
      $('.panelContentContainer').css({
          height: height + "px"
      });
  
  };
  
  /**
   * 刷新浮动面板样式,设置面板高度
   */
  FloatPanel.prototype.refreshPanelStyle = function () {
      var $floatPanel = $("#floatPanel");
      if (typeof $floatPanel == "undefined" || $floatPanel.length < 1) {
          return;
      }
      // var height = window.screen.availHeight;
      var height = document.documentElement.clientHeight;
      $floatPanel.css({
          top: "0",
          height: height + "px"
      });
  
      // 获取内容高度 需减去tab标题高度 和 10px的间距,如果存在内嵌标题,需要再减38
      $floatPanel.find('.panelContentContainer').css({
          height: (height - 38) + 'px', 'overflow': 'hidden'
      }).find('ul').css({
          height: (height - 78) + 'px'
      });
  
  };
  
  FloatPanel.prototype.openTab = function (index) {
      var cls = this;
      cls.createFloatPanel();
  
      // var $tab0 = $('#addModuleContentContainerLi');
      var $tab1 = $('#addLayoutContentContainerLi');
      var $tab2 = $('#bgContentContainerLi');
      var $li = $('#floatPanelContent > li');
      $('#floatPanelNav > li').removeClass('on');
      // $($('#floatPanelNav > li')[index]).addClass('on');
      base.log('[floatPanel.js] index: ' + index);
      switch (index) {
          case 0:
              // $tab0.show();
              // $tab1.hide();
              // $tab2.hide();
              break;
          case 1:
              $($('#floatPanelNav > li')[0]).addClass('on');
              $tab1.show();
              // $tab0.hide();
              $tab2.hide();
              break;
          case 2:
              // $($('#floatPanelNav > li')[1]).addClass('on');
              // $tab1.show();
              // // $tab0.hide();
              // $tab2.hide();
              break;
      }
      //cls.showFloatPanel();
  
      try {
          //base.rootWindow.$('#themeDiv').addClass('dn');
          //  $('#themeDiv').addClass('dn');
      } catch (e) {
      }
  };
  
  /**
   * 绑定浮动面板中图标的事件
   */
  FloatPanel.prototype.bindEventToFloatPanel = function ($floatPanel) {
      var cls = this;
      // 找到浮动面板中所有的.moduleIcon并绑定事件
      $floatPanel.find('.panelModuleIcon').on('click.ls.design', function () {
          var $el = $(this);
          var moduleType = $el.attr('data-type');
          cls.layout.createRow(moduleType);
          //base.alert('OK');
      })
  
  };
  
  FloatPanel.prototype.moduleDraggable = function () {
      var cls = this;
      var $floatPanel = $("#floatPanel");
      var $basicLineItem = $floatPanel.find('#basicLine').find(".panelModuleIconContent");
      $basicLineItem.draggable({
          connectToSortable: doms.col,
          containment: document.body,
          revert: 'invalid',
          appendTo: document.body,
          zIndex: 100000,
          cursor: "move",
          appendTo: "body",
          helper: function () {
              return "<div id='floatPanelDragDiv' data-type='" + $(this).attr('data-type') + "' class='panelContentContainer' style='width:80px;height:80px;cursor:move;z-index: 99999'><div class='" + $(this).attr("class") + " good' style='width:80px;height:80px;padding:0;margin:0;'></div></div>"
          },
          start: function (event, ui) {
              utils.log('------------------ FloatPanel.prototype.moduleDraggable  start --------------------------');
              base.IS_DRAGGABLE_NEW_MODULE = true;
          },
          stop: function (event, ui) {
              utils.log('------------------ FloatPanel.prototype.moduleDraggable stop --------------------------');
  
              $(doms.container).find("li.panelModuleIconContent").remove();
              $(doms.col + ' ' + doms.module).removeClass('opacity');
              $(doms.col).removeClass('ui-state-hover1');
              base.enableEditLayer();
              $("body").enableSelection();
              cls.module.refreshRowModule();
              base.IS_DRAGGABLE_NEW_MODULE = false;
          }
      });
  
      //
      //
      // $(doms.col).droppable({
      //     hoverClass: "ui-state-hover1",
      //     beforeStart: function (event, ui) {
      //         base.disableEditLayer();
      //         $("body").disableSelection();
      //     },
      //     drop: function (event, ui) {
      //         var $target = $(event.target);
      //         var $src = $(ui.helper);
      //         var moduleType = $src.attr('data-type');
      //
      //         base.log('');
      //         base.log('====================================================');
      //         base.log('module droppable to col >>> target: ');
      //         base.log($target);
      //         base.log('target.width: ' + $target.width() + ', target.height: ' + $target.height());
      //         base.log('');
      //         base.log('====================================================');
      //         base.log('');
      //
      //         // base.log('$src');
      //         // base.log($src);
      //         // base.log('moduleType = '+moduleType);
      //         if (!base[moduleType] || !$.isFunction(base[moduleType].create)) {
      //             if($(doms.container).find("li.panelModuleIconContent").length>0){
      //                 $(doms.container).find("li.panelModuleIconContent").remove();
      //             }
      //             //base.error('亲,让您白点一下,组件['+moduleType+']功能尚未实现');
      //             return false;
      //         } else {
      //             base.log('$target.find(' + doms.module + ').length = ' + $target.find(doms.module).length);
      //             if ($target.find(doms.module).length > 0) {
      //                 if(!base.IS_SORTABLE)
      //                 utils.tipError('目标位置已存在组件了, 请删除模板后再添加', 3);
      //             } else {
      //                 if ($target.hasClass(doms.col.substring(1))) {
      //                     // 调用组件的创建方法
      //                     base[moduleType].create($target);
      //                     cls.module.sortable();
      //                 } else {
      //
      //                 }
      //
      //             }
      //
      //         }
      //
      //         // 防止事件传播
      //         return false;
      //     },
      //     stop: function () {
      //         $(doms.container).find("li.panelModuleIconContent").remove();
      //         $(doms.col).removeClass('ui-state-hover1');
      //         base.enableEditLayer();
      //         $("body").enableSelection();
      //         cls.module.refreshRowModule();
      //     }
      //
      // });
  };
  
  /**
   * 创建布局按钮的拖动效果
   */
  FloatPanel.prototype.layoutDraggable = function () {
      var cls = this;
      var $floatPanel = $("#floatPanel");
      var $layoutLineItem = $floatPanel.find('#layoutLine').find(".panelModuleIconContent");
      // Error: jquery.min.js:2 Uncaught Error: cannot call methods on draggable prior to initialization; attempted to call method 'destroy'
      // $("#layoutLine").draggable( "destroy" );
  
      $layoutLineItem.draggable({
          helper: function () {
              var el = this;
              // base.log(this);
              var isCustomLayout = $(el).find('a').hasClass('layoutIcon-custom') ? 1 : 0;
              // var isCustomLayout = 1;
              // base.log('isCustomLayout: '+ isCustomLayout);
              var objId = utils.createRowUniqueId();
              var rowHtml = '<div id="' + objId + '" data-custom-layout="' + isCustomLayout + '" class="' + doms.row.substring(1) + '">' + cls.layout.getRowHtmlByType($(this).attr('data-type'))
                  + '</div>';
              return rowHtml;
              //     return "<div id='faiFloatPanelDragDiv' class='panelContentContainer' style='width:80px;height:80px;cursor:move;'><div class='" + $(this).attr("class") + " good' style='width:80px;height:80px;padding:0;margin:0;'></div></div>"
          },
          appendTo: doms.wraper,
          cursor: "move",
          zIndex: 9999,
          opacity: 0.6,
          placeholder: "g_middlePlaceholder",
          connectToSortable: doms.container,
          beforeStart: function (event, ui) {
              // base.log('beforeStart');
              base.disableEditLayer();
              $("body").disableSelection();
  
              $(doms.col + ' ' + doms.module).each(function () {
                  var $el = $(this);
                  $el.css({"filter": "filter: alpha(opacity=80)", "opacity": "0.8"});
  
              });
          },
          start: function () {
              utils.log('--------------------- FloatPanel.prototype.layoutDraggable start -----------------------');
              base.$SAVETEMPLATE_WRAPER_CLONE = $(doms.wraper).clone(); // 预先保存当前的html,用于在排序操作结束后保存到历史记录中
  
          },
          drag: function (event, ui) {
              utils.log('--------------------- FloatPanel.prototype.layoutDraggable drag -----------------------');
              var $g_middlePlaceholder = $(".g_middlePlaceholder");
              var lineHeight = $g_middlePlaceholder.height() || 26;
              $g_middlePlaceholder.css({
                  lineHeight: lineHeight + "px"
              });
              $g_middlePlaceholder.html("放在这里");
          },
          stop: function (event, ui) {
              utils.log('--------------------- FloatPanel.prototype.layoutDraggable stop -----------------------');
              // 保存历史记录
              utils.log('$(doms.col).sortable receive base.$SAVETEMPLATE_WRAPER_CLONE >>>', base.$SAVETEMPLATE_WRAPER_CLONE);
              parent.$.Site['db'].saveHistory(base.$SAVETEMPLATE_WRAPER_CLONE);
              base.enableEditLayer();
              $("body").enableSelection();
              $(doms.col).removeClass('ui-state-hover1');
              var $src = $(ui.helper); // 获取到控件对象
              var isCustomLayout = $src.attr('data-custom-layout');
              if (isCustomLayout == 1){
                  utils.data.set('CUR_EDIT_MODULE_ID',$src.attr('id'));
                  parent.$.Site['customLayout'].open();
              }
              $src.removeAttr('style');
              cls.module.refreshRowModule();
              cls.moduleDraggable();
          }
  
      });
  };
  
  FloatPanel.prototype.floatPanelModuleDraggable = function () {
      var cls = this;
      cls.moduleDraggable();
      cls.layoutDraggable();
  };
  
  /**
   *
   */
  FloatPanel.prototype.test = function () {
      var cls = this;
  };
  /**
   * 将FloatPanel实例化后注入到base
   */
  base.plugin('floatPanel', new FloatPanel());
  
  /**
   * 导出组件
   * @type {FloatPanel}
   */
  module.exports = FloatPanel;
  

});

;/*!app/entry/iframe-index.js*/
define('app/entry/iframe-index', function(require, exports, module) {

  /**
   * Created by Dzl on 2016-8-30.
   */
  
  /**
   * 模板页面的入口 JS
   * app/entry/ifrmae-index.js
   *
   * 申明依赖, FIS3 用法
   * 详细参见: https://fex-team.github.io/fis3/docs/user-dev/require.html
   * @require lib/mod.js
   * @require lib/jquery.min.js
   * @require app/common/base.js
   */
  
  
  // 加载模块
  var _ = require('node_modules/lodash/lodash');
  
  var base = require('app/common/base');
  var config = require('app/common/config');
  var utils = require('app/common/utils');
  var db = require('app/common/db');
  var doms = require('app/common/template-dom-structure');
  var template = require('app/common/arttemplate');
  
  require('app/common/global');
  require('app/common/module');
  require('app/common/float-panel');
  // 加载组件
  require('app/components/index');
  // 加载自定义的 VUE 组件
  require('app/common/vueui/index');
  
  
  // arttemplate.js 模板引擎注入方法
  // 用于所有组件的 data-conf 和 data-label 的 JSON 对象序列化
  template.helper('dataConfLabelFilter', function (label) {
      return utils.jsonStringify(label);
  });
  
  template.helper('dataConfFilter', function (conf) {
      return utils.jsonStringify(conf);
  });
  
  template.helper('dataLabelFilter', function (label) {
      return utils.jsonStringify(label);
  });
  
  template.helper('activeFilter', function (target) {
      return target === true ? 'active' : '';
  });
  
  template.helper('displayFilter', function (target) {
      return target == true ? '' : 'dn';
  });
  
  //显示
  template.helper('displayShow', function (value) {
      return value == true ? '' : 'dn';
  });
  
  //隐藏
  template.helper('displayNone', function (value) {
      return value == true ? 'dn' : '';
  });
  
  //转换JSON为字符串
  template.helper('jsonStr', function (label) {
      return utils.jsonStringify(label);
  });
  
  //日期转换
  template.helper('dateFormat', function (dateStr, format) {
      return utils.dateStrFormat(dateStr, format);
  });
  
  /**
   * 模块页面初始化函数
   */
  base.init = function (options) {
      console.log('base.init ');
      // 获取当前开发状态
      config.developStatus = utils.getDevelopStatus();
      config.prevewStatus = utils.getPreviewStatus();
      // 初始化模板
      // base['global'] 为 app/common/global.js 的实例对象
      base['global'].initInTemplate(function () {
          utils.log('initInTemplate success...');
  
  
          // 初始化模块
          // base['module'] 为 app/common/module.js 的实例对象
          base['module'].init();
  
          if (!config.prevewStatus) {
              // 初始化浮动操作层
              // base['floatPanel'] 为 app/common/float-panel.js 的实例对象
              base['floatPanel'].init();
  
              // 初始化头部
              // base['pageHeader'] 为 app/components/page-header/index.js 的实例对象
              base['pageHeader'].init();
              // 初始化主导航
              // base['navigation'] 为 app/components/navigation/index.js 的实例对象
              base['navigation'].init();
              // 初始化底部
              // base['pageFooter']  为 app/components/page-footer/index.js 的实例对象
              base['pageFooter'].init();
  
              //初始化可编辑区
              base['pageEdit'].init();
          }
  
  
          var COMPONENTSLIST = [];
          // 迭代所有模块,并构造 base.STYLELIST
          $(doms.module).each(function () {
              var $module = $(this);
              var type = $module.attr('data-type');
              var _conf = $module.attr('data-conf');
              if (!utils.isNul(_conf) && !utils.isNul(type)) {
                  COMPONENTSLIST.push(type);
                  var data = {
                      type: type,
                      conf: utils.parseOptions(_conf)
                  };
                  utils.addCustomStyleList(base, data);
              }
          });
         // utils.log('base.STYLELIST: ',base.STYLELIST);
          var specialId = utils.getSpecialId();
  
          if(COMPONENTSLIST.length > 0){
              // 合并公共组件列表,并去重
              COMPONENTSLIST = _.union(COMPONENTSLIST,config.COMMON_COMPONENT_LIST)
          }else{
              COMPONENTSLIST = config.COMMON_COMPONENT_LIST;
          }
          utils.log('Global.prototype.__getComponentListFromPage COMPONENTSLIST:',COMPONENTSLIST);
  
          // 从远程获取可用组件列表,如果为空,则会从当前页面上获取组件
          // 关键点: 可用组件列表只会执行一次保存到后端的动作,且是专题模板首页中执行
          // TODO: 存在设计缺陷, 即如果有多个页面且有不同组件时,就难以将可用组件覆盖到,只在尽可能的在专题模板首页包含此专题样式支持的所有可用组件
          db.getComponentList(specialId).then(function (componentList) {
              utils.log('db.getComponentList: data: ',componentList);
              utils.log('db.getComponentList: utils.isNul(componentList):  ',utils.isNul(componentList));
              if(utils.isNul(componentList)){
                  // 迭代当前页面所有组件,去重,合并公共组件
                  utils.log('goto base.global.__getComponentListFromPage list: ',COMPONENTSLIST);
                  // 将list保存到后端
                  db.saveComponentList(specialId,COMPONENTSLIST).done();
              }else{
                  COMPONENTSLIST = componentList.split(',');
              }
              // 写入到当前页面变量,以备用
              parent.$.Site.AVAILABLE_COMPONENT_LIST = base.AVAILABLE_COMPONENT_LIST = COMPONENTSLIST;
              utils.log('base.AVAILABLE_COMPONENT_LIST: ',base.AVAILABLE_COMPONENT_LIST);
          });
  
  
  
          // 判断状态
          if (!utils.getDevelopStatus()) {
              // 生产环境下, 对于新建的模板, 第一次打开时自动保存
              utils.log('开始自动保存模板 >>>');
              if(utils.isNul($('body').attr('data-save'))){
                  //if(!options.isNotAutoSave){
                      parent.$.Site['db'].saveTemplate(true);
                  //}
                  // 如果是模板首页,则需要保存
                  // 保存组件样式列表对象到后端
                  if(utils.data.get('ISINDEX')){
                      //db.saveCustomStyleList(specialId, JSON.stringify(base.STYLELIST));
                  }
  
  
              }else{
                  // 读取组件样式列表对象到前端
                  db.getSpecialEO(specialId).then(function (data) {
                      // utils.log('db.getSpecialEO >>> data',data);
                      base.STYLELIST = JSON.parse(data.STYLELIST);
                      utils.log('base.STYLELIST: ',base.STYLELIST);
                  })
              }
          }
          //调用前端模块组件方法
          setTimeout(function () {
              Ls.www.init();
              utils.placeholderRender();
          }, 1000)
  
      });
  
  
      // 非常关键的代码
      // 模板页面加载完毕后, 要将 模板页面里的相对对象赋值给父页对象 实例对象
      try {
          // 修改父页面中变量
          // parent.$.Site 为父页面中 app/common/base.js 实例化挂载到 jquery 上的对象
          // parent.$.Site.templateApp 为模板页面 app/common/base.js 实例化后对象
          parent.$.Site.templateApp = base;
          // parent.$.Site.templateWindow 模板页面的 windows 对象
          parent.$.Site.templateWindow = window;
          // 取得 父页面的 window 和 父页面中 app/common/base.js 实例化对象
          // 并挂载到 模板页面的 app/common/base.js 实例化对象之上
          base.rootWindow = parent.window;
          base.rootApp = parent.$.Site;
  
  
      } catch (e) {
      }
  
  
      $(document).on("click", ".addNewModule", function () {
          // alert('addNewModule');
          var $target = $(this).parent(doms.col);
          parent.$.Site.addNewModuleTarget = $target;
          parent.$.Site['moduleList'].open();
      });
  };
  
  module.exports = $.Site = base;

});
