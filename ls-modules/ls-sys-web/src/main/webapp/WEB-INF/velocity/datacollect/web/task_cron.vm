#parse("_page_layout/_header.vm")
</head>
<body class="page-body-white">
    <div id="ui_layout" class="mini-layout" style="width:100%;height:100%;">
        <div region="center" style="border:none; overflow: auto;">
            <div class="portlet light" style="padding-left: 0">
                <div class="portlet-body form">
                    <form id="task_cron_form" role="form" ms-controller="task_cron_form">
                        <div class="form-body">
                            <table class="table table-bordered article-table" style="margin-bottom: 0px;">
                                <tr>
                                    <th>触发周期:</th>
                                    <td>
                                        <div class="radio-group">
                                            <label class="radio-inline"><input type="radio" name="timeMode" value="day" onclick="changeMode('day')" ms-duplex-string="timeMode">天</label> &nbsp;&nbsp;
                                            <label class="radio-inline"><input type="radio" name="timeMode" value="auto" onclick="changeMode('auto')" ms-duplex-string="timeMode">自定义</label>
                                        </div>
                                    </td>
                                </tr>
                                <tr ms-visible="timeMode=='day'" class="dn">
                                    <th>开始时间:</th>
                                    <td>
                                        <div class="radio-group">
                                            <input type="datetime" id="startDate" name="startDate" ms-duplex="startDate" class="form-control readonly" placeholder="开始时间"
                                                   onfocus="WdatePicker({dateFmt:'yyyy-MM-dd HH:mm:ss'})" readonly>
                                        </div>
                                    </td>
                                </tr>
                                <tr ms-visible="timeMode=='day'" class="dn">
                                    <th ms-visible="timeMode=='day'">间隔(天):</th>
                                    <td>
                                        <input type="text" id="spaceOfDay" style="width:100%;" name="spaceOfDay" class="form-control" data-tip="" placeholder="" ms-duplex="spaceOfDay">
                                    </td>
                                </tr>
                                <tr ms-visible="timeMode=='auto'" class="dn">
                                    <th>选择定时:</th>
                                    <td>
                                        <select id="cronExpress" class="form-control" name="cronExpress">
                                        </select>
                                    </td>
                                </tr>
                                <tr style="width: 30px">
                                    <th>提醒方式:</th>
                                    <td>
                                        <label><input type="checkbox" class="readonly" checked disabled>系统提醒</label> &nbsp;&nbsp;
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>
#parse("_page_layout/_footer.vm")
<script>
    mini.parse();
    var cronConfEO = $!{cron};
    var cur = {
        vm_id: "task_cron_form",
        form: $('#task_cron_form'),
        api:Ls.getWin.api,
        win: Ls.getWin.win,
        dialog: Ls.getWin.dialog,
        autoCron:$("#cronExpress"),
    };

    $(document).ready(function () {
        cur.api.button(
            {id:'save',className:'btn-save',focus:true,name:'保存',callback:function(){saveData();return false;}},
            {id:'back',className:'btn-back',name:'取消',callback:function(){cancel();return false;}}
        );

        getAutoCronModel();
    })

    function autoSetModel(mode) {
        cur.model = cronConfEO;
        //默认为天
        if(null == cur.model.timeMode || "" == cur.model.timeMode) {
            cur.model.timeMode = "day";
        }
        cur.autoCron.val(cur.model.cronExpress);
        setData(cur.model);
    }

    function setData(obj) {
        cur.vm = avalon.vmodels[cur.vm_id];
        data = obj;
        if (cur.vm) {
            Ls.assignVM(cur.vm, data);
        } else {
            data.$id = cur.vm_id;
            cur.vm = avalon.define(data);
        }
        avalon.scan($("#" + cur.vm_id).get(0), cur.vm);
    }

    function saveData() {
        if(cur.vm.timeMode == 'day') {
            $('#startDate').attr("data-rule","开始时间:required;startDate");
            $('#spaceOfDay').attr("data-rule","间隔:required;spaceOfDay");
        } else {
            $('#startDate').remove("data-rule");
            $('#spaceOfDay').remove("data-rule");
        }

        if (!cur.form.isValid()) {
            return;
        }

        var url = null;
        if(null == cur.vm.id || "" == cur.vm.id) {
            url = "/data/collect/saveTaskCron";
        } else {
            url = "/data/collect/updateTaskCron";
        }

        Ls.ajax({
            url: url,
            data: {
                //栏目更新任务配置
                taskId:cur.dialog.data("taskId"),
                id: cur.vm.id,
                cronDesc:getCronDesc(),
                //cron表达式配置
                timeMode:cur.vm.timeMode,//定时方式
                startDate:$("#startDate").val(),
                cronExpress:cur.autoCron.val(),
                spaceOfDay:cur.vm.spaceOfDay//定时间隔（天、周）
            },
            success: function (resp) {
                if (resp.status == '1') {
                    cur.win.callback(cur.type == 'add' ? "添加成功!" : "更新成功!");
                    Ls.winClose();
                } else {
                    Ls.tips(resp.desc, {icons:'error',times: 2});
                }
            }
        });
    }

    function getCronDesc() {
        if(cur.vm.timeMode == "day") {
            return "每隔" + cur.vm.spaceOfDay + "天执行";
        } else if(cur.vm.timeMode == "auto"){
            return cur.autoCron.find("option:selected").text();;
        }
    }

    function changeMode(mode) {
        cur.autoCron.val("");
        $("#spaceOfDay").val("");
        if(mode == cur.model.timeMode) {
            autoSetModel(mode);
        }
    }

    function cancel() {
        Ls.winClose();
    }

    function getAutoCronModel() {

        Ls.ajaxGet({
            url: "/column/update/getAutoCron",
        }).done(function (response) {
            var str = '<option value=""> 选择自定义CRON </option> ';
            if (response != null) {
                var data = response;
                var length = data.length;
                if (length > 0) {
                    for (i = 0; i < length; i++) {
                        str += ' <option value="' + data[i].value + '">' + data[i].key + '</option> '
                    }
                }
            }
            cur.autoCron.append(str);
            autoSetModel();
        });
    }

</script>