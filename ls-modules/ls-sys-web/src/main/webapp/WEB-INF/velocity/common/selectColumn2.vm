<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="cache-control" content="no-cache">
    <meta http-equiv="expires" content="0">
    <meta http-equiv="X-UA-Compatible" content="edge"/>
    <title>选择</title>
##    <%@include file="/app/common/inc/comm-head.html"%>
    <script>
        //window.onerror=function(){return true;}
    </script>
    <link href="$!{sysStaticPath}/assets/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
    <link href="$!{sysStaticPath}/assets/js/plugins/miniui/themes/default/miniui.min.css" rel="stylesheet" type="text/css"/>
    <link href="$!{sysStaticPath}/assets/css/plugins.min.css" rel="stylesheet" type="text/css"/>
    <link href="$!{sysStaticPath}/assets/css/components.min.css" rel="stylesheet" type="text/css"/>
    <link href="$!{sysStaticPath}/assets/css/default.min.css" rel="stylesheet" type="text/css"/>
    <link href="$!{sysStaticPath}/assets/goa/res/form/autocomplete/1.1/jquery.autocomplete.css" rel="stylesheet" type="text/css">
    <style type="text/css">
        body, html {
            overflow: hidden;
            font-size: 12px;
        }

        .ztree {
            overflow: hidden;
        }

        .wh100p {
            width: 100% !important;
            height: 100% !important;
        }

        td {
            font-size: 12px;
        }

        .select_wrap {
            padding: 0 10px 0 10px;
            margin: 0;
            width: 600px
        }

        .select_wrap > fieldset > legend {
            font-size: 14px;
            font-weight: bold
        }

        .select_con {
            padding: 0 10px 0 10px;
        }

        .s1 {
            margin: 10px 0;
        }

        .selectedBox {
        }

        .selectedBox, .selectedBox li {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .selectedBox li {
            background-color: #EDF2F5 !important;
            font-weight: bold;
            padding: 2px 5px 2px 15px;
            height: 27px;
            line-height: 200%;
            border-bottom: #FFF solid 1px;
        }

        .selectedBox li a {
            float: left;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            display: inline-block;
            text-decoration: none;
        }

        .selectedBox li.chk {
            background-color: #FFEBC0 !important;
        }

        .icon_del14 {
            background: url($!{sysStaticPath}/assets/images/del.png) no-repeat center center !important;
            display: inline-block;
            width: 22px;
            height: 22px;
            margin-right: 7px;
        }

        .wx_tips {
            border: #EFEFEF;
            background: #FFFCBB;
            color: #702A00;
            line-height: 24px;
            padding: 3px 8px;
        }

        #tool_bar {
            text-align: center;
            margin-top: 90px;
            vertical-align: middle
        }

        .h23 {
            height: 23px;
        }

        .mini-layout-region {
            border: 0 none !important;
        }

        .mini-layout-region-south {
            border-top: 1px solid #a8a8a8 !important;
            background: #F5F5F5;
        }

        .mini-layout-region-north .mini-layout-region-body {
            overflow: hidden;
        }

        .mini-tabs-bodys {
            padding: 0;
        }

        #seach_input {
            line-height: 23px;
            height: 26px;
            border: solid 1px #999999;
            width: 648px;
        }

        #tabs2 .mini-tabs-body {
            overflow: hidden;
        }

        .btn22_gray {
            line-height: 24px;
        }
    </style>
    <base target="_self">
</head>

<body onkeydown="if (event.keyCode==116){reload.click()}" class="page-body-white">
<a id="reload" style="display:none">reload...</a>
<div id="layout1" class="mini-layout mini-fit wh100p" splitSize="0">

    <div region="north" allowResize="false" height="85" showSplitIcon="false" showHeader="false" style="padding: 0 16px;">
        <div class="s1 fixV">
            <span class="gray" style="height:26px; line-height:26px; display:inline-block">快速查询：</span>
            <input type="text" id="seach_input" autocomplete="off" class="text" placeholder="支持简拼、全拼、中文搜索..." value="支持简拼、全拼、中文搜索...">
        ##            <button class="btn22_gray w90" onClick="cur.fn.clear()">搜 索</button>
        </div>
        <div class="s1 fixV wx_tips01">
            &nbsp;
            提示：1、按住Ctrl可以多选；2、搜索只针对站点栏目。
        </div>
    </div>

    <div title="center" region="center" showCloseButton="false" splitSize="0"
         showSplit="false" bodyStyle="background:#fff; overflow:hidden;">

        <div id="layout2" class="mini-layout" style="width:750px;height:380px; margin: 0px 16px;">

            <div region="west" allowResize="false" showSplitIcon="false" width="350" showHeader="false" showCollapseButton="false">

                <div id="tabs1" class="mini-tabs" activeIndex="0" style="width:100%;height:365px;" plain="false">
                    <div title="站点栏目">
                        <ul id="treeview01" class="ztree"></ul>
                    </div>
                #*隐藏信息公开-暂时不用*#
                #*<div title="信息公开">
                    <ul id="treeview02" class="ztree"></ul>
                </div>*#
                #*<div title="个人通讯簿">
                    <ul id="treeview03" class="ztree"></ul>
                </div>
                <div title="本单位">
                    <ul id="treeview04" class="ztree"></ul>
                </div>*#
                </div>

            </div>

            <div region="east" allowResize="false" showSplitIcon="false" width="340" showHeader="false" showCollapseButton="false">
                <div id="tabs2" class="mini-tabs" activeIndex="0" plain="false" style="width:100%;height:365px;" buttons="#tabsButtons">
                    <div title='<span id="tabs2-title">已选</span>(<span class="b red" data-bind="text:totalSelectCount"></span>)'>
                    #*<div style="height: 338px; overflow-x:hidden;">
                    <ul id="SelectedBox" class="selectedBox" data-bind="foreach:listA">
                        <li><a href="javascript:void(0)" data-bind="text:name"></a>
                            <span title="删除" class="icon_del14 r" data-bind="click:function(){cur.viewModel.del($data)}"></span></li>
                    </ul>
                </div>*#
                        <ul id="SelectedBox" class="selectedBox" data-bind="foreach:listA">
                            <li><a href="javascript:void(0)" data-bind="text:name"></a>
                                <span title="删除" class="icon_del14 r" data-bind="click:function(){cur.viewModel.del($data)}"></span></li>
                        </ul>
                    </div>
                </div>

                <div id="tabsButtons">
                    <a class="mini-button" onclick="cur.fn.clearSelectedAll()">清除所选</a>
                </div>

            </div>

            <div allowResize="false" region="center">
                <div id="tool_bar">
                    <input type="image" src="$!{sysStaticPath}/assets/images/add.png" id="doADD" title="添加">
                #*<br>
                <br>
                <input type="image" src="$!{sysStaticPath}/assets/images/up.png" id="doUP" title="向上">
                <br>
                <br>
                <input type="image" src="$!{sysStaticPath}/assets/images/down.png" id="doDOWN" title="向下">*#
                </div>
            </div>
        </div>

    </div>

    <div region="south" height="44" splitSize="0" showSplit="false" showHeader="false" bodyCls="footBar" bodyStyle="overflow:hidden">
        <div style="text-align: right; margin-top: 5px;">
            <button class="btn btn-default btn-confirm mr10" onClick="cur.fn.ok()">确 定</button>
            <button class="btn btn-default btn-close mr10" onClick="cur.fn.closeDg()">取 消</button>
        </div>
    </div>
    <!-- south -->
</div>

<div id="pageLoading" class="ls-loading">
    <div class="ls-loading-img"></div>
</div>
<script>
    var GLOBAL_CONTEXTPATH = "$!{sysStaticPath}";
</script>
<script src="$!{sysStaticPath}/assets/goa/core/jquery.min.js"></script>
##<script src="$!{sysStaticPath}/assets/js/common.min.js"></script>
<script src="$!{sysStaticPath}/assets/js/plugins/miniui/miniui.min.js"></script>
<script src="$!{sysStaticPath}/assets/js/plugins/ztree/ztree.min.js"></script>
<script src="$!{sysStaticPath}/assets/goa/res/mvc/knockout/2.3.0/jquery.tmpl.js"></script>
<script src="$!{sysStaticPath}/assets/goa/res/mvc/knockout/2.3.0/knockout.js"></script>
<script src="$!{sysStaticPath}/assets/goa/res/mvc/knockout/2.3.0/knockout.mapping.js"></script>
<script src="$!{sysStaticPath}/assets/goa/res/mvc/knockout/2.3.0/jquery.livequery.js"></script>
<script src="$!{sysStaticPath}/assets/goa/res/mvc/knockout/2.3.0/knockout.multimodels.min.js"></script>
<script src="$!{sysStaticPath}/assets/goa/res/form/autocomplete/1.1/jquery.autocomplete.min.js"></script>
##<script src="$!{sysStaticPath}/assets/js/plugins/hotkeys-min.js"></script>
<script src="$!{sysStaticPath}/assets/js/plugins/dialog/dialog4.min.js"></script>
<script src="$!{sysStaticPath}/assets/js/core.min.js"></script>

##<script src="/app/common/js/sortable.js"></script>
##<script src="/assets/goa/core/boot.js" debug="1" ko="1" font-icon="0"></script>
##<script src="/app/common/js/config.js"></script>
<script>
    /*
    参数介绍：
    1.scope：
    后端：用于描述需要获取的节点范围，scope支持0-3，0-获取所有的子节点，1-获取子单位、部门/处室和虚拟处室，2-获取子单位和部门/处室，3-获取子单位；
    前端：0-只能选择人，1-只能选择 OrganUnit Virtual，2-只能选择 OrganUnit，3-只能选择 Organ
    2.organIds:用于描述获取哪些单位、部门或虚拟部门的子节点，如果organIds为null，那么获取第一级节点；

    3.scopeType: 单选或多选 'single' 或 'multi' ； 默认多选
    4.isSimple : 采用IDS,NAMES的方式传递数据{ids:"1,2,3",names:"1,2,3"}
    5.isSelectParent: 是否支持选中父节点，默认可选中 0 不可选  1 可选

    scope:0 数组下标说明:p.personId,p.name,p.organId,p.organName,p.unitId,p.unitName,p.simplePy,p.fullPy,p.dn,,p.mobile,p.positions,p.userId,p.isExternalPerson,p.platformCode
    scope:1 数组下标说明：o.organId,o.name,o.type,o.parentId,o.dn,o.simplePy,o.fullPy,o.isFictitious,p.isExternalPerson,p.platformCode,p.path
    */

    //获取窗口对象
    var W = Ls.getWin.win, api = Ls.getWin.api;

    var cur = {
            viewModel: {},
            fn: {},
            action: {
                getTree01: '/siteMain/getHNColumnTree',
                getNodesByPersonName: '/ldap/getNodesByPersonName',
                getNodesByOrganName: '/ldap/getNodesByOrganName'
            },
            el: {},
            params: {
                scope: Ls.url.get('scope'),
                columnId: Ls.url.get('columnId'),
                scopeType: Ls.url.get('scopeType') || 'multi',
                isSimple: Ls.url.get('isSimple') || 0
            },
            treeId01: "treeview01",
            treeId02: "treeview02",
            curTreeId: "treeview01",
            curTreeObj: {},
            mapping: {
                'listA': {
                    key: function (el) {
                        var keyid;
                        if (cur.params.scope == 0) {
                            if (Ls.isFunction(el.indicatorId)) {
                                keyid = el.id() || el.indicatorId();
                            } else {
                                keyid = el.id || el.indicatorId;
                            }
                            return ko.utils.unwrapObservable(keyid);
                        } else if (cur.params.scope == 1) {
                            if (Ls.isFunction(el.organId)) {
                                keyid = el.organId();
                            } else {
                                keyid = el.organId;
                            }
                            return ko.utils.unwrapObservable(keyid);
                        }
                    }
                }
            },
            columnList: {listA: [], listB: []},
            selectedBox: "",
            tabIndex: 0,
            ptitle: "",
            nodes: null,
            pId: null,
            dataType: ""
        },
        ALLUSERS_ARRAY = [],
        ALLORGANS_ARRAY = [];

    $(document).ready(function () {

        mini.parse();
        cur.tabs = mini.get("tabs1");
        cur.tabs2 = mini.get("tabs2");
        cur.layout = mini.get("layout1");
        cur.getActiveTab = cur.tabs.getActiveTab();

        if (cur.params.scope == 0) {
            cur.ptitle = "选择栏目/目录"
            cur.dataType = 0;
        } else if (cur.params.scope == 1) {
            cur.ptitle = "选择";
            cur.dataType = 1;
        }

        api.title(cur.ptitle);
        var activeTab = cur.tabs2.getActiveTab();
        $("#tabs2-title").text((cur.ptitle).replace("选择", "已选"));
        //cur.tabs2.updateTab(activeTab,{title:(cur.ptitle).replace("选择","已选")});

        $("#reload").attr('href', location.href);
        cur.el.loading = $("#pageLoading");
        cur.initTree01().done(function () {
            cur.initSelectedBox();
            // 隐藏页面加载提示
            cur.el.loading.hide();
            App.initContentScroll('.mini-tabs-body');
        }).done(function () {
            cur.tabs.on("beforeactivechanged", function (e) {
                cur.getActiveTab = e.tab;
                if (cur.getActiveTab.title == "信息公开") {
                    cur.curTreeId = cur.treeId02;
                    !cur.curTreeObj[cur.curTreeId] ? cur.initTree02() : "";
                } else {
                    cur.curTreeId = cur.treeId01;
                    !cur.curTreeObj[cur.curTreeId] ? cur.initTree01() : "";
                }
            });
        }).done(function () {

            var selectedBox = "";
            cur.selectedBox = selectedBox = $("#SelectedBox");
            /*.on('click','li',function(){
                var this_ = $(this);
                    this_.addClass("chk").siblings().removeClass("chk");
            })

            /!*排序*!/
            selectedBox.sortable({
                stop:function(event, ui){
                }
            });*/

            //根据DSN过滤
            var nodes_filter = function (dn, item) {
                if (!dn) {
                    return false;
                }
                var reg = new RegExp(dn + "$");
                return reg.test(item);
            }

            //添加已选用户
            $("#doADD").on('click', function () {

                var nodes = getCurTreeObj().getSelectedNodes(),
                    userData = ALLUSERS_ARRAY;

                for (var i = 0, l = nodes.length; i < l; i++) {
                    var flag = false,
                        treeNode = nodes[i];

                    /*if (cur.params.scopeType == "multi") {

                        if (cur.params.scope == 0) {

                            if (treeNode.children) {
                                var columnData = treeNode.children, tnode;
                                for (var ii = 0, ll = columnData.length; ii < ll; ii++) {
                                    tnode = columnData[ii];
                                    Ls.log(tnode)
                                    cur.fn.addArr(tnode);
                                }
                            }
                            continue;

                        } else if (cur.params.scope == 1) {
                            if (treeNode.children) {
                                var columnData = treeNode.children, tnode;
                                for (var ii = 0, ll = columnData.length; ii < ll; ii++) {
                                    tnode = columnData[ii];
                                    cur.fn.addArr(tnode);
                                }
                            }
                            continue;

                        }

                    }*/
                    if (treeNode.isParent) {
                        continue;
                    }

                    var treeNode = reGroup(treeNode);
                    treeNode && cur.fn.addArr(treeNode);
                }

            })

            //删除已选用户
            $("#doDEL").on('click', function () {
                selectedBox.find(".chk").map(function () {
                    var this_ = $(this), id = this_.attr("data-id");
                    cur.viewModel.listA.remove(function (item) {
                        return id == item.id
                    });
                }).get()
            })

            //上移
            $("#doUP").on('click', function () {
                var li = selectedBox.find(".chk"),
                    index = li.index();
                if (li.lenght == 0) {
                    Ls.tipsErr('未选择排序项！');
                    return false;
                }
                index > 0 && li.insertBefore(li.prev('li'));
            })

            //下移
            $("#doDOWN").on('click', function () {
                var li = selectedBox.find(".chk"),
                    lilength = selectedBox.find("li").length,
                    index = li.index();
                if (li.lenght == 0) {
                    Ls.tipsErr('未选择排序项！');
                    return false;
                }
                index < lilength - 1 && li.insertAfter(li.next('li'));
            })
        })


        //解决IE先执行focus的BUG
        /*window.setTimeout(function () {
            $("#seach_input").on('focus', function () {
                if (this.value == '支持简拼、全拼、中文搜索...') {
                    this.value = ''
                }
            }).on('blur', function () {
                if (this.value == '') {
                    this.value = '支持简拼、全拼、中文搜索...'
                }
            });
        }, 1);*/

        // 初始化快速选择
        cur.fn.initAutoComplete();

        //屏蔽F5刷新
        /*shortcut.add("F5", function (e) {
            e.keyCode = 0;
            return false;
        });*/
    });

    //静态数据为空时，不可全选
    cur.fn.NullDataTips = function () {
        ALLUSERS_ARRAY = []
        if (ALLUSERS_ARRAY.length == 0) {
            Ls.tipsErr('正在加载异步数据，请稍等。');
        }
        return false;
    }

    // 初始化快速选择
    cur.fn.initAutoComplete = function () {
        var remote_timecut = "$!{timecut}", systemMgrHost = "${systemMgrHost}";

        var seachInput = $("#seach_input");
        seachInput.val("正在加载中……");

        Ls.ajax({
//            dataType: 'script',
            url: '/siteMain/getHNSeracher'
//            cache: true
        }).done(function (d) {

            ALLUSERS_ARRAY = d;
            if (ALLUSERS_ARRAY && Ls.isArray(ALLUSERS_ARRAY) && ALLUSERS_ARRAY.length > 0) {
                cur.layout.showRegion('north');
                cur.fn.autoComplete(ALLUSERS_ARRAY);
            }

            seachInput.val('');
        }).fail(function () {
            Ls.log('静态文件中获取数据错误,尝试从服务器异步获取数据');
        });
    };

    //根据DSN过滤
    cur.fn.autoComplete_filter = function (item) {
        if (Ls.isEmpty(DNS)) {
            return false;
        }
        var DNS_ = DNS.split(",");
        for (var i = 0, l = DNS_.length; i < l; i++) {
            var reg = new RegExp(DNS_[i] + "$");
            return reg.test(item);
        }
    }

    //根据类型过滤
    cur.fn.autoComplete_typeFilter = function (item) {
        if ((cur.params.scope == 1 || cur.params.scope == 2) && (item == "articleNews" || item == "Virtual")) {
            return true;
        } else if ((cur.params.scope == 5) && (item == "OrganUnit" || item == "Organ")) {
            return true;
        } else if (cur.params.scope == 3 && item == "Organ") {
            return true;
        }
        return false;
    }

    // 数据过滤
    cur.fn.data_filter = function (data) {
        var tmpArr = [];

        if (cur.params.scope != 0) {
            for (var i = 0, l = data.length; i < l; i++) {
                if (cur.fn.autoComplete_typeFilter(data[i][2])) {
                    tmpArr.push(data[i]);
                }
            }
        } else {
            tmpArr = ALLUSERS_ARRAY;
        }

        return tmpArr;
    }

    cur.fn.autoComplete = function (data) {
        // 配置
        var conf = {
            width: 655,
            formatItem: function (row, i, max) {
                // 定义要显示的数据格式，可使用html
                if (cur.params.scope == 0) {
                    return "<span title=" + row[3] + ">" + row[3] + "</span> ";
                } else {
                    var path = row[3];
                    return "<span title=" + (row[3].replace(/>/g, "&gt;") || '') + ">" + path + "</span> ";
                }
            },
            formatMatch: function (row, i, max) {
                // 定义用于自动匹配的数据
                // 当前定义的为三个，分别是姓名 + 简拼 + 全拼
                if (cur.params.scope == 0) {
                    return row[1];
                } else {
                    return row[1];
                }
            },
            formatResult: function (row) {
                // 当选择后的返回内容
                return row[1];
            }
        };

        var obj = $("#seach_input").autocomplete(data, conf);

        // 定义回调事件,用于当选择后相应元素后的后期处理
        // 给其他元素赋值或执行其他操作
        // evt: 事件
        // row: 选择行对象
        // formated: 格式化输出的对象
        obj.result(function (evt, row, formated) {
            //重新构建 nodes
            if (row) {
                var treeNode = cur.fn.createTree(row);
                Ls.log("treeNode>>>", treeNode);
                treeNode && cur.fn.addArr(treeNode);
                $("#seach_input").val("");
                //locationNode(treeNode.dn)
            }
        });

    };

    function locationNode(dn) {
        if (dn != '') {
            var dns = dn.split(',');
            var dnshow = '';
            var dnArray = [];
            var min = 0;
            var nodeUnitdn = '';
            if (cur.params.scope != '0') {
                min = 1;
            }
            if (cur.params.organIds != '') {
                var id = "OrganEO" + cur.params.organIds;
                var nodeUnit = getCurTreeObj().getNodeByParam('id', id);
                nodeUnitdn = nodeUnit.dn;
            }
            for (var i = dns.length - 1; i >= min; i--) {
                var d = dns[i]
                if (d.indexOf("dc=") >= 0) {
                    dnshow = d + (dnshow == '' ? '' : ("," + dnshow));
                } else if (d.indexOf("o=") >= 0 || d.indexOf("ou=") >= 0) {
                    dnshow = dns[i] + "," + dnshow;
                    if (cur.params.organIds != '') {
                        if (dnshow.indexOf(nodeUnitdn) >= 0) {
                            dnArray.push(dnshow);
                        }
                    } else {
                        dnArray.push(dnshow);
                    }

                }
            }
            cur.ztreeObj.expandAll(false)
            showNode(dnArray, 0)
        }
    }

    function showNode(dnArray, i) {
        if (i < dnArray.length) {
            var dn = dnArray[i];
            var node = getCurTreeObj().getNodeByParam('dn', dn);
            if (node != null) {
                cur.fn.getDataShow(node, dnArray, i);
            }
        }
    }

    cur.fn.getDataShow = function (treeNode, dnArray, i) {
        if (!treeNode.children) {
            return Ls.ajax({
                url: cur.treeAsyncUrl01,
                data: {
                    parentId: treeNode.unitId || treeNode.organId
                }
            }).done(function (json) {
                var data = json.data;
                getCurTreeObj().addNodes(treeNode, data);
                showNode(dnArray, i + 1)
            });
        } else {
            getCurTreeObj().expandNode(treeNode, true, false, true, true);
            showNode(dnArray, i + 1)
        }
    };

    cur.fn.createTree = function (row) {
        var treeNode = {
            "id": row[0],
            "name": row[1],
            "type": row[8],
            "siteId": row[7],
            "siteName": row[3] ? row[3].split(">")[0] : ""
        }
        return treeNode
    }

    // 初始化栏目树
    cur.initTree01 = function () {
        var setting = {
            callback: {
                beforeClick: BeforeClick,
                onClick: OnClick1,
                onDblClick: dblClick01,
                beforeExpand: beforeExpand01
            },
            view: {
                dblClickExpand: true
            },
            data: {
                simpleData: {
                    enable: true,
                    idKey: "indicatorId",
                    pIdKey: "parentId",
                    rootPId: 0
                }
            }
        }
        cur.treeAsyncUrl01 = cur.action.getTree01;
        return Ls.ajax({
            url: cur.treeAsyncUrl01
        }).done(function (json) {
            var data = Ls.treeDataFilter(json.data, Ls.treeDataType.SITE);
            Ls.log('data>>>>', data)
            cur.curTreeObj[cur.treeId01] = $.fn.zTree.init($("#" + cur.treeId01), setting, data);
        });
    };

    // 信息公开树数据过滤器
    function dataFilter(treeId, parentNode, responseData) {
        var data = Ls.treeDataFilter(responseData, Ls.treeDataType.PUBLIC_CONTENT);
        var newData = [];
        for (var i = 0, l = data.length; i < l; i++) {
            if (data[i].type == "DRIVING_PUBLIC") {
                if (data[i].name == "主动公开") {
                    data[i].open = true;
                }
                newData.push(data[i])
            }
        }
        return Ls.isEmpty(newData) ? responseData : newData;
    }

    // 初始化信息公开
    cur.initTree02 = function () {

        var ztree_settings = {
            async: {
                enable: true,
                url: "/public/catalog/getOrganCatalogTree",
                autoParam: ["id=parentId", "organId"],
                otherParam: ["catalog", "true", "all", "false"],
                dataFilter: dataFilter
            },
            callback: {
                beforeClick: BeforeClick,
//                onClick: OnClick1,
                onDblClick: dblClick01,
                onAsyncSuccess: function (event, treeId, treeNode, msg) {
                }
            },
            view: {
                dblClickExpand: true
            },
            data: {
                simpleData: {
                    idKey: 'id',
                    pIdKey: 'parentId'
                }
            }
        }

        cur.curTreeObj[cur.treeId02] = $.fn.zTree.init($("#" + cur.treeId02), ztree_settings);
    };

    cur.fn.search = function () {
        //模拟执行事件
        var e = $.Event("keydown");
        e.keyCode = 13;
        $("#autocomplete1 input").focus().trigger(e);
    }

    //显示所有
    cur.fn.clear = function () {
        cur.tabs.activeTab(0);
        cur.initTree01();
        $("#seach_input").val('').blur();
    }

    //关闭窗口
    cur.fn.closeDg = function () {
        api.close();
    };

    //获取对象
    cur.fn.getArr = function (id) {
        var sel = ko.mapping.toJS(cur.viewModel.listA);
        for (var i = 0; i < sel.length; i++) {
            var keyid = "";
            if (cur.params.scope == 0) {
                keyid = (sel[i].userId || sel[i].id) + "" + (sel[i].organId || 0);
            } else if (cur.params.scope == 1) {
                keyid = sel[i].organId;
            } else if (cur.params.scope == 2) {
                keyid = sel[i].organId;
            } else if (cur.params.scope == 3) {
                keyid = sel[i].unitId;
            }
            if (keyid == id) {
                return sel[i];
                break;
            }
        }
    };

    //排序对象
    cur.fn.sortArr = function (l) {
        var tmp = [],
            dtd = $.Deferred(),
            li = cur.selectedBox.find("li");
        for (var i = 0; i < li.length; i++) {
            var el = $(li[i]),
                arr = cur.fn.getArr(el.attr("data-id"));
            tmp.push(arr);
        }
        cur.viewModel.listA.removeAll();
        ko.mapping.fromJS(tmp, cur.mapping, cur.viewModel.listA);
        dtd.resolve();
        return dtd.promise();
    }


    cur.fn.ok = function () {
        //cur.fn.sortArr().then(function(){
        var sel = ko.mapping.toJS(cur.viewModel.listA);
        var args = {},
            idsArr = [],
            nameArr = [],
            typeArr = [],
            codeArr = [],
            organIdArr = [],
            siteIdArr = [],
            siteNameArr = [];

        cur.columnList.listB = [];

        if (sel.length == 0) {
            Ls.tipsErr("请" + cur.ptitle);
            return false;
        }
        // listType==1 采用简单数据类型
        Ls.log("sel>>>", sel);
        if (cur.listType != 1) {
            Ls.log("采用列表对象类型返回 >>>");
            for (var i = 0; i < sel.length; i++) {
                var el = sel[i];

                if (cur.params.scope == 0) {
                    args = {
                        id: el.indicatorId || el.id,
                        name: el.name,
                        type: el.type || el.columnTypeCode,
                        code: el.code,
                        organId: el.organId,
                        siteId: el.siteId,
                        siteName: el.siteName
                    }
                } else if (cur.params.scope == 1) {

                }

                idsArr.push(args.id);
                nameArr.push(args.name);
                typeArr.push(args.type);
                codeArr.push(args.code);
                organIdArr.push(args.organId)
                siteIdArr.push(args.siteId);
                siteNameArr.push(args.siteName);

                cur.columnList.listB.push(args);
            }
        } else {
            Ls.log("采用简单数据类型返回 >>>");
            for (var i = 0; i < sel.length; i++) {
                var el = sel[i];

                args = {
                    id: el.id,
                    name: el.name,
                    type: el.type || el.columnTypeCode,
                    code: el.code,
                    organId: el.organId,
                    siteId: el.siteId,
                    siteName: el.siteName
                }
                //Ls.log('id = ' + id +',userId = '+userId);

                idsArr.push(args.id);
                nameArr.push(args.name);
                typeArr.push(args.type);
                codeArr.push(args.code);
                organIdArr.push(args.organId);
                siteIdArr.push(args.siteId);
                siteNameArr.push(args.siteName);

                cur.columnList.listB.push(args);
            }
        }

        args = {
            list: cur.columnList.listB,
            ids: idsArr.join(','),
            names: nameArr.join(','),
            types: typeArr.join(','),
            codes: codeArr.join(','),
            organId: organIdArr.join(','),
            siteId: siteIdArr.join(','),
            siteName: siteNameArr.join(',')
        }

//        Ls.log('args>>>', JSON.stringify(args), args)
//        return false;
        //window.returnValue = args;
        //window.close();
        api.close(args)

    };

    // 添加自定义的DOM,仅对新增节点或是初始加载树起作用
    function addDiyDom(treeId, treeNode) {
        var aObj = $("#" + treeNode.tId + "_a");
        var aNameTxt = $("#" + treeNode.tId + "_span");
        if (treeNode.isPluralistic == true) {
            aNameTxt.append("(兼)")
        }
    }

    function beforeDblClick(treeId, treeNode) {
        return false;
    }

    //单击前
    function BeforeClick() {
        cur.nodes = getCurTreeObj().getSelectedNodes();
    }

    function getCurTreeObj() {
        return cur.curTreeObj[cur.curTreeId];
    }

    //单点事件
    function OnClick1(event, treeId, treeNode) {
        var nodes = cur.nodes;
        if (nodes != null && nodes.length > 0) {
            var isShift = event.shiftKey;
            if (isShift) {
                cur.pId = nodes[0].pId;
                //treeNode.pId！=null 防止多选根据目录人员过多，影响速度的问题。
                if (cur.pId != treeNode.pId || treeNode.pId == null) {
                    return false;
                }
                var nodeNew;
                for (var i = 0, l = nodes.length; i < l; i++) {
                    nodeNew = nodes[i];
                    getCurTreeObj().selectNode(nodeNew, true);
                    selectNodes(treeNode, nodeNew);
                }
            }
        }
    }

    //正向反向选择节点
    function selectNodes(node, nodeNew) {
        var firstNode = nodeNew.tId.split('_')[1],
            lastNode = node.tId.split('_')[1],
            count = lastNode - firstNode;
        if (count > 0) {
            for (var i = 1; i < count; i++) {
                nodeNew = nodeNew.getNextNode();
                getCurTreeObj().selectNode(nodeNew, true);
            }
        } else {
            for (var i = 1; i < (-count); i++) {
                nodeNew = nodeNew.getPreNode();
                getCurTreeObj().selectNode(nodeNew, true);
            }
        }
    }

    // 树节点的双击click事件
    function dblClick01(event, treeId, treeNode) {
        if (treeNode) {
            if (!treeNode.isParent) {
                var treeNode = reGroup(treeNode);
            } else {
                treeNode = false;
            }
            treeNode && cur.fn.addArr(treeNode);
        }
        return false;
    }

    //重组
    function reGroup(treeNode) {
        var flag = false;
        if (cur.params.scope == 0) {
            if (treeNode.columnTypeCode == "articleNews" || treeNode.type == "DRIVING_PUBLIC") {
                flag = true;
            }
        } else if (cur.params.scope == 1) {
            flag = true;
        }
        if (flag) {
            return treeNode;
        } else {
            return false;
        }
    }

    function beforeExpand01(treeId, treeNode) {
        !treeNode.children && cur.fn.getData(treeNode);
    }

    cur.fn.addArr = function (list) {

        var node = getCurTreeObj().getNodeByParam("indicatorId", list.siteId, null);
        if (node) {
            list.siteName = node.name;
        }

        if (cur.params.scopeType == 'single' || cur.params.scopeType == 0) {
            cur.viewModel.listA([list]);
        } else {
            // 检查已经添加的内容中是否含有当前选择对象,如果包含了说明已经选择,直接返回
            try {
                cur.viewModel.listA.mappedCreate(list);
            } catch (e) {
            }
        }
    }

    cur.fn.getData = function (treeNode) {
        return Ls.ajax({
            url: cur.action.getTree01,
            data: {
                indicatorId: treeNode.indicatorId
            }
        }).done(function (json) {
            var data = Ls.treeDataFilter(json.data, Ls.treeDataType.SITE);
            getCurTreeObj().addNodes(treeNode, data);
        });
    };

    cur.fn.clearSelectedAll = function () {
        cur.viewModel.listA([]);
    };

    Ls.openWinGetArgs = function () {
        if (api && api.config && api.config.data) {
            return api.config.data;
        }
    };

    // 初始化已选人员框
    cur.initSelectedBox = function () {

        var arg = art.dialog.data('dialog_data') || '';
        Ls.log('arg:', arg)
        // 是否采用简单数据类型返回
        cur.listType = cur.params.isSimple;//$.isArray(arg.list);

        if (!Ls.isEmpty(arg) && $.type(arg) == "object") {

            //如果是ko对象，转换成JOSN数组
            Ls.isFunction(arg.list.ids) && (arg.list = ko.mapping.toJS(arg.list));

            var sArr = arg.list,
                tArr = [];

            Ls.log("初始化数据>>>")
            Ls.log(sArr)
            if (cur.listType != 1) {
                if (sArr != null && sArr.length > 0) {
                    for (var i = 0, l = sArr.length; i < l; i++) {

                        var el = {
                            id: sArr[i].id || 0,
                            name: sArr[i].name,
                            type: sArr[i].type,
                            code: sArr[i].code,
                            organId: sArr[i].organId,
                            siteId: sArr[i].siteId,
                            siteName: sArr[i].siteName
                        }

                        cur.columnList.listA.push(el);
                    }
                }
            } else {
                if (!Ls.isEmpty(arg.list.ids)) {
                    var isIds = false;
                    Ls.isEmpty(sArr.ids) ? (ids = "") : ids = sArr.ids;
                    Ls.isEmpty(sArr.names) ? (names = "") : names = sArr.names;
                    Ls.isEmpty(sArr.types) ? (types = "") : types = sArr.types;
                    Ls.isEmpty(sArr.codes) ? (codes = "") : codes = sArr.codes;
                    Ls.isEmpty(sArr.organIds) ? (organIds = "") : organIds = sArr.organIds;
                    Ls.isEmpty(sArr.siteIds) ? (siteIds = "") : siteIds = sArr.siteIds;
                    Ls.isEmpty(sArr.siteNames) ? (siteNames = "") : siteNames = sArr.siteNames;

                    var ids_ = ids.split(','),
                        names_ = names.split(','),
                        types_ = types.split(','),
                        code_ = codes.split(','),
                        organId_ = organIds.split(','),
                        siteId_ = siteIds.split(','),
                        siteName_ = siteNames.split(',');

                    for (var i = 0, l = ids_.length; i < l; i++) {
                        var id = ids_[i],
                            el = {
                                id: id,
                                name: names_[i],
                                type: types_[i],
                                code: code_[i],
                                organId: organId_[i],
                                siteIds: siteIds_[i],
                                siteNames: siteNames_[i],
                            }
                        cur.columnList.listA.push(el);
                    }
                }
            }
        }

        Ls.log("cur.columnList.listA>>")
        Ls.log(cur.columnList.listA)

        cur.viewModel = ko.mapping.fromJS(cur.columnList, cur.mapping);
        cur.viewModel.del = function (el) {
            cur.viewModel.listA.remove(el);
        };
        cur.viewModel.totalSelectCount = ko.computed(function () {
            return cur.viewModel.listA().length;
        });

        ko.applyBindings(cur.viewModel);
    };
</script>
</body>
</html>
<!-- 2015-07-23 14:11 -->